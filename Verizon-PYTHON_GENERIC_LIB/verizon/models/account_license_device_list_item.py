# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class AccountLicenseDeviceListItem(object):

    """Implementation of the 'AccountLicenseDeviceListItem' model.

    The list of devices that have licenses assigned, including the date and
    time of when each license was assigned.

    Attributes:
        device_id (str): Device IMEI.
        assignment_time (datetime): Timestamp of when a license was assigned
            to the device.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "device_id": 'deviceId',
        "assignment_time": 'assignmentTime'
    }

    _optionals = [
        'device_id',
        'assignment_time',
    ]

    def __init__(self,
                 device_id=APIHelper.SKIP,
                 assignment_time=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the AccountLicenseDeviceListItem class"""

        # Initialize members of the class
        if device_id is not APIHelper.SKIP:
            self.device_id = device_id 
        if assignment_time is not APIHelper.SKIP:
            self.assignment_time = APIHelper.apply_datetime_converter(assignment_time, APIHelper.RFC3339DateTime) if assignment_time else None 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        device_id = dictionary.get("deviceId") if dictionary.get("deviceId") else APIHelper.SKIP
        assignment_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("assignmentTime")).datetime if dictionary.get("assignmentTime") else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(device_id,
                   assignment_time,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'device_id={(self.device_id if hasattr(self, "device_id") else None)!r}, '
                f'assignment_time={(self.assignment_time if hasattr(self, "assignment_time") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'device_id={(self.device_id if hasattr(self, "device_id") else None)!s}, '
                f'assignment_time={(self.assignment_time if hasattr(self, "assignment_time") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
