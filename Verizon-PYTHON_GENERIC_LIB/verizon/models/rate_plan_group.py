# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.accountid import Accountid
from verizon.models.rateplantype_2 import Rateplantype2


class RatePlanGroup(object):

    """Implementation of the 'RatePlanGroup' model.

    Attributes:
        rate_plan_group_description (str): The model property of type str.
        rate_plan_type (Any): The model property of type Any.
        rate_plan (List[Rateplantype2]): An array of rateplan names
        description (str): The model property of type str.
        size_kb (str): The model property of type str.
        carrier_rate_plan_code (str): The model property of type str.
        zero_dollar_billing (bool): The model property of type bool.
        promotion_offered (bool): The model property of type bool.
        promotion_days (int): The model property of type int.
        account (List[Accountid]): Account information
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "rate_plan_group_description": 'ratePlanGroupDescription',
        "rate_plan_type": 'ratePlanType',
        "rate_plan": 'ratePlan',
        "description": 'description',
        "size_kb": 'sizeKb',
        "carrier_rate_plan_code": 'carrierRatePlanCode',
        "zero_dollar_billing": 'zeroDollarBilling',
        "promotion_offered": 'promotionOffered',
        "promotion_days": 'promotionDays',
        "account": 'account'
    }

    _optionals = [
        'rate_plan_group_description',
        'rate_plan_type',
        'rate_plan',
        'description',
        'size_kb',
        'carrier_rate_plan_code',
        'zero_dollar_billing',
        'promotion_offered',
        'promotion_days',
        'account',
    ]

    def __init__(self,
                 rate_plan_group_description=APIHelper.SKIP,
                 rate_plan_type=APIHelper.SKIP,
                 rate_plan=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 size_kb=APIHelper.SKIP,
                 carrier_rate_plan_code=APIHelper.SKIP,
                 zero_dollar_billing=APIHelper.SKIP,
                 promotion_offered=APIHelper.SKIP,
                 promotion_days=APIHelper.SKIP,
                 account=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the RatePlanGroup class"""

        # Initialize members of the class
        if rate_plan_group_description is not APIHelper.SKIP:
            self.rate_plan_group_description = rate_plan_group_description 
        if rate_plan_type is not APIHelper.SKIP:
            self.rate_plan_type = rate_plan_type 
        if rate_plan is not APIHelper.SKIP:
            self.rate_plan = rate_plan 
        if description is not APIHelper.SKIP:
            self.description = description 
        if size_kb is not APIHelper.SKIP:
            self.size_kb = size_kb 
        if carrier_rate_plan_code is not APIHelper.SKIP:
            self.carrier_rate_plan_code = carrier_rate_plan_code 
        if zero_dollar_billing is not APIHelper.SKIP:
            self.zero_dollar_billing = zero_dollar_billing 
        if promotion_offered is not APIHelper.SKIP:
            self.promotion_offered = promotion_offered 
        if promotion_days is not APIHelper.SKIP:
            self.promotion_days = promotion_days 
        if account is not APIHelper.SKIP:
            self.account = account 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        rate_plan_group_description = dictionary.get("ratePlanGroupDescription") if dictionary.get("ratePlanGroupDescription") else APIHelper.SKIP
        rate_plan_type = dictionary.get("ratePlanType") if dictionary.get("ratePlanType") else APIHelper.SKIP
        rate_plan = None
        if dictionary.get('ratePlan') is not None:
            rate_plan = [Rateplantype2.from_dictionary(x) for x in dictionary.get('ratePlan')]
        else:
            rate_plan = APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        size_kb = dictionary.get("sizeKb") if dictionary.get("sizeKb") else APIHelper.SKIP
        carrier_rate_plan_code = dictionary.get("carrierRatePlanCode") if dictionary.get("carrierRatePlanCode") else APIHelper.SKIP
        zero_dollar_billing = dictionary.get("zeroDollarBilling") if "zeroDollarBilling" in dictionary.keys() else APIHelper.SKIP
        promotion_offered = dictionary.get("promotionOffered") if "promotionOffered" in dictionary.keys() else APIHelper.SKIP
        promotion_days = dictionary.get("promotionDays") if dictionary.get("promotionDays") else APIHelper.SKIP
        account = None
        if dictionary.get('account') is not None:
            account = [Accountid.from_dictionary(x) for x in dictionary.get('account')]
        else:
            account = APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(rate_plan_group_description,
                   rate_plan_type,
                   rate_plan,
                   description,
                   size_kb,
                   carrier_rate_plan_code,
                   zero_dollar_billing,
                   promotion_offered,
                   promotion_days,
                   account,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'rate_plan_group_description={(self.rate_plan_group_description if hasattr(self, "rate_plan_group_description") else None)!r}, '
                f'rate_plan_type={(self.rate_plan_type if hasattr(self, "rate_plan_type") else None)!r}, '
                f'rate_plan={(self.rate_plan if hasattr(self, "rate_plan") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'size_kb={(self.size_kb if hasattr(self, "size_kb") else None)!r}, '
                f'carrier_rate_plan_code={(self.carrier_rate_plan_code if hasattr(self, "carrier_rate_plan_code") else None)!r}, '
                f'zero_dollar_billing={(self.zero_dollar_billing if hasattr(self, "zero_dollar_billing") else None)!r}, '
                f'promotion_offered={(self.promotion_offered if hasattr(self, "promotion_offered") else None)!r}, '
                f'promotion_days={(self.promotion_days if hasattr(self, "promotion_days") else None)!r}, '
                f'account={(self.account if hasattr(self, "account") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'rate_plan_group_description={(self.rate_plan_group_description if hasattr(self, "rate_plan_group_description") else None)!s}, '
                f'rate_plan_type={(self.rate_plan_type if hasattr(self, "rate_plan_type") else None)!s}, '
                f'rate_plan={(self.rate_plan if hasattr(self, "rate_plan") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'size_kb={(self.size_kb if hasattr(self, "size_kb") else None)!s}, '
                f'carrier_rate_plan_code={(self.carrier_rate_plan_code if hasattr(self, "carrier_rate_plan_code") else None)!s}, '
                f'zero_dollar_billing={(self.zero_dollar_billing if hasattr(self, "zero_dollar_billing") else None)!s}, '
                f'promotion_offered={(self.promotion_offered if hasattr(self, "promotion_offered") else None)!s}, '
                f'promotion_days={(self.promotion_days if hasattr(self, "promotion_days") else None)!s}, '
                f'account={(self.account if hasattr(self, "account") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
