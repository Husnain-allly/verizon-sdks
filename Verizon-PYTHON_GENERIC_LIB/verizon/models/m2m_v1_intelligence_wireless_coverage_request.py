# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.locations_1 import Locations1
from verizon.models.network_type_object import NetworkTypeObject


class M2MV1IntelligenceWirelessCoverageRequest(object):

    """Implementation of the 'M2m V1 Intelligence Wireless Coverage Request' model.

    Attributes:
        account_name (str): Account name.
        request_type (str): Type of request made. FWA for address
            qualification and NW for Nationwide coverage.
        location_type (str): Type of location detail.
        locations (Locations1): The model property of type Locations1.
        network_types_list (List[NetworkTypeObject]): The model property of
            type List[NetworkTypeObject].
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_name": 'accountName',
        "request_type": 'requestType',
        "location_type": 'locationType',
        "locations": 'locations',
        "network_types_list": 'networkTypesList'
    }

    _optionals = [
        'account_name',
        'request_type',
        'location_type',
        'locations',
        'network_types_list',
    ]

    def __init__(self,
                 account_name=APIHelper.SKIP,
                 request_type=APIHelper.SKIP,
                 location_type=APIHelper.SKIP,
                 locations=APIHelper.SKIP,
                 network_types_list=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the M2MV1IntelligenceWirelessCoverageRequest class"""

        # Initialize members of the class
        if account_name is not APIHelper.SKIP:
            self.account_name = account_name 
        if request_type is not APIHelper.SKIP:
            self.request_type = request_type 
        if location_type is not APIHelper.SKIP:
            self.location_type = location_type 
        if locations is not APIHelper.SKIP:
            self.locations = locations 
        if network_types_list is not APIHelper.SKIP:
            self.network_types_list = network_types_list 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_name = dictionary.get("accountName") if dictionary.get("accountName") else APIHelper.SKIP
        request_type = dictionary.get("requestType") if dictionary.get("requestType") else APIHelper.SKIP
        location_type = dictionary.get("locationType") if dictionary.get("locationType") else APIHelper.SKIP
        locations = Locations1.from_dictionary(dictionary.get('locations')) if 'locations' in dictionary.keys() else APIHelper.SKIP
        network_types_list = None
        if dictionary.get('networkTypesList') is not None:
            network_types_list = [NetworkTypeObject.from_dictionary(x) for x in dictionary.get('networkTypesList')]
        else:
            network_types_list = APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(account_name,
                   request_type,
                   location_type,
                   locations,
                   network_types_list,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_name={(self.account_name if hasattr(self, "account_name") else None)!r}, '
                f'request_type={(self.request_type if hasattr(self, "request_type") else None)!r}, '
                f'location_type={(self.location_type if hasattr(self, "location_type") else None)!r}, '
                f'locations={(self.locations if hasattr(self, "locations") else None)!r}, '
                f'network_types_list={(self.network_types_list if hasattr(self, "network_types_list") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_name={(self.account_name if hasattr(self, "account_name") else None)!s}, '
                f'request_type={(self.request_type if hasattr(self, "request_type") else None)!s}, '
                f'location_type={(self.location_type if hasattr(self, "location_type") else None)!s}, '
                f'locations={(self.locations if hasattr(self, "locations") else None)!s}, '
                f'network_types_list={(self.network_types_list if hasattr(self, "network_types_list") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
