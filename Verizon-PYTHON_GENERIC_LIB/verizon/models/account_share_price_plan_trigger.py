# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.account_share_filter_criteria import AccountShareFilterCriteria
from verizon.models.change_plan_details import ChangePlanDetails
from verizon.models.rateplantype_2_condition import Rateplantype2Condition


class AccountSharePricePlanTrigger(object):

    """Implementation of the 'accountSharePricePlanTrigger' model.

    Attributes:
        account_share (AccountShareFilterCriteria): The model property of type
            AccountShareFilterCriteria.
        condition (Rateplantype2Condition): The model property of type
            Rateplantype2Condition.
        change_plan (bool): a flag to set if the trigger changes service
            plans, true, or not, false
        change_plan_details (ChangePlanDetails): The service plan code to
            switch to
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_share": 'accountShare',
        "condition": 'condition',
        "change_plan": 'changePlan',
        "change_plan_details": 'changePlanDetails'
    }

    _optionals = [
        'account_share',
        'condition',
        'change_plan',
        'change_plan_details',
    ]

    def __init__(self,
                 account_share=APIHelper.SKIP,
                 condition=APIHelper.SKIP,
                 change_plan=APIHelper.SKIP,
                 change_plan_details=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the AccountSharePricePlanTrigger class"""

        # Initialize members of the class
        if account_share is not APIHelper.SKIP:
            self.account_share = account_share 
        if condition is not APIHelper.SKIP:
            self.condition = condition 
        if change_plan is not APIHelper.SKIP:
            self.change_plan = change_plan 
        if change_plan_details is not APIHelper.SKIP:
            self.change_plan_details = change_plan_details 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_share = AccountShareFilterCriteria.from_dictionary(dictionary.get('accountShare')) if 'accountShare' in dictionary.keys() else APIHelper.SKIP
        condition = Rateplantype2Condition.from_dictionary(dictionary.get('condition')) if 'condition' in dictionary.keys() else APIHelper.SKIP
        change_plan = dictionary.get("changePlan") if "changePlan" in dictionary.keys() else APIHelper.SKIP
        change_plan_details = ChangePlanDetails.from_dictionary(dictionary.get('changePlanDetails')) if 'changePlanDetails' in dictionary.keys() else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(account_share,
                   condition,
                   change_plan,
                   change_plan_details,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_share={(self.account_share if hasattr(self, "account_share") else None)!r}, '
                f'condition={(self.condition if hasattr(self, "condition") else None)!r}, '
                f'change_plan={(self.change_plan if hasattr(self, "change_plan") else None)!r}, '
                f'change_plan_details={(self.change_plan_details if hasattr(self, "change_plan_details") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_share={(self.account_share if hasattr(self, "account_share") else None)!s}, '
                f'condition={(self.condition if hasattr(self, "condition") else None)!s}, '
                f'change_plan={(self.change_plan if hasattr(self, "change_plan") else None)!s}, '
                f'change_plan_details={(self.change_plan_details if hasattr(self, "change_plan_details") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
