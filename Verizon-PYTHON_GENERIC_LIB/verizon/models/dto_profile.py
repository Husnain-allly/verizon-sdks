# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class DtoProfile(object):

    """Implementation of the 'dto.profile' model.

    Attributes:
        kind (str): profile kind
        version (str): The resource version
        modelid (str): device model id
        name (str): profile name
        configuration (Any): The model property of type Any.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "kind": 'kind',
        "version": 'version',
        "modelid": 'modelid',
        "name": 'name',
        "configuration": 'configuration'
    }

    _optionals = [
        'kind',
        'version',
        'modelid',
        'name',
        'configuration',
    ]

    def __init__(self,
                 kind=APIHelper.SKIP,
                 version=APIHelper.SKIP,
                 modelid=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 configuration=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the DtoProfile class"""

        # Initialize members of the class
        if kind is not APIHelper.SKIP:
            self.kind = kind 
        if version is not APIHelper.SKIP:
            self.version = version 
        if modelid is not APIHelper.SKIP:
            self.modelid = modelid 
        if name is not APIHelper.SKIP:
            self.name = name 
        if configuration is not APIHelper.SKIP:
            self.configuration = configuration 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        kind = dictionary.get("kind") if dictionary.get("kind") else APIHelper.SKIP
        version = dictionary.get("version") if dictionary.get("version") else APIHelper.SKIP
        modelid = dictionary.get("modelid") if dictionary.get("modelid") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        configuration = dictionary.get("configuration") if dictionary.get("configuration") else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(kind,
                   version,
                   modelid,
                   name,
                   configuration,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'kind={(self.kind if hasattr(self, "kind") else None)!r}, '
                f'version={(self.version if hasattr(self, "version") else None)!r}, '
                f'modelid={(self.modelid if hasattr(self, "modelid") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'configuration={(self.configuration if hasattr(self, "configuration") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'kind={(self.kind if hasattr(self, "kind") else None)!s}, '
                f'version={(self.version if hasattr(self, "version") else None)!s}, '
                f'modelid={(self.modelid if hasattr(self, "modelid") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'configuration={(self.configuration if hasattr(self, "configuration") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
