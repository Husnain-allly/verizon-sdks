# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.rateplantype_2 import Rateplantype2


class RateplantypeObject(object):

    """Implementation of the 'rateplantypeObject' model.

    Attributes:
        rate_plan_group_description (str): The model property of type str.
        rate_plan_type (str): The model property of type str.
        rate_plan (List[Rateplantype2]): An array of rateplan names
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "rate_plan_group_description": 'ratePlanGroupDescription',
        "rate_plan_type": 'ratePlanType',
        "rate_plan": 'ratePlan'
    }

    _optionals = [
        'rate_plan_group_description',
        'rate_plan_type',
        'rate_plan',
    ]

    def __init__(self,
                 rate_plan_group_description=APIHelper.SKIP,
                 rate_plan_type=APIHelper.SKIP,
                 rate_plan=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the RateplantypeObject class"""

        # Initialize members of the class
        if rate_plan_group_description is not APIHelper.SKIP:
            self.rate_plan_group_description = rate_plan_group_description 
        if rate_plan_type is not APIHelper.SKIP:
            self.rate_plan_type = rate_plan_type 
        if rate_plan is not APIHelper.SKIP:
            self.rate_plan = rate_plan 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        rate_plan_group_description = dictionary.get("ratePlanGroupDescription") if dictionary.get("ratePlanGroupDescription") else APIHelper.SKIP
        rate_plan_type = dictionary.get("ratePlanType") if dictionary.get("ratePlanType") else APIHelper.SKIP
        rate_plan = None
        if dictionary.get('ratePlan') is not None:
            rate_plan = [Rateplantype2.from_dictionary(x) for x in dictionary.get('ratePlan')]
        else:
            rate_plan = APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(rate_plan_group_description,
                   rate_plan_type,
                   rate_plan,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'rate_plan_group_description={(self.rate_plan_group_description if hasattr(self, "rate_plan_group_description") else None)!r}, '
                f'rate_plan_type={(self.rate_plan_type if hasattr(self, "rate_plan_type") else None)!r}, '
                f'rate_plan={(self.rate_plan if hasattr(self, "rate_plan") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'rate_plan_group_description={(self.rate_plan_group_description if hasattr(self, "rate_plan_group_description") else None)!s}, '
                f'rate_plan_type={(self.rate_plan_type if hasattr(self, "rate_plan_type") else None)!s}, '
                f'rate_plan={(self.rate_plan if hasattr(self, "rate_plan") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
