# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.address import Address


class AccountLead(object):

    """Implementation of the 'AccountLead' model.

    A successful response returns an array of lead objects.

    Attributes:
        address (Address): The customer address for the line's primary place
            of use, for line usage taxation.
        lead_id (str): Unique number for each lead. Use this value in the
            leadId parameter when activating devices to credit the activations
            to the lead.
        lead_state (str): The current state of the lead, such as “Qualified”
            or “Closed.”
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "address": 'address',
        "lead_id": 'leadId',
        "lead_state": 'leadState'
    }

    _optionals = [
        'address',
        'lead_id',
        'lead_state',
    ]

    def __init__(self,
                 address=APIHelper.SKIP,
                 lead_id=APIHelper.SKIP,
                 lead_state=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the AccountLead class"""

        # Initialize members of the class
        if address is not APIHelper.SKIP:
            self.address = address 
        if lead_id is not APIHelper.SKIP:
            self.lead_id = lead_id 
        if lead_state is not APIHelper.SKIP:
            self.lead_state = lead_state 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        address = Address.from_dictionary(dictionary.get('address')) if 'address' in dictionary.keys() else APIHelper.SKIP
        lead_id = dictionary.get("leadId") if dictionary.get("leadId") else APIHelper.SKIP
        lead_state = dictionary.get("leadState") if dictionary.get("leadState") else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(address,
                   lead_id,
                   lead_state,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'address={(self.address if hasattr(self, "address") else None)!r}, '
                f'lead_id={(self.lead_id if hasattr(self, "lead_id") else None)!r}, '
                f'lead_state={(self.lead_state if hasattr(self, "lead_state") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'address={(self.address if hasattr(self, "address") else None)!s}, '
                f'lead_id={(self.lead_id if hasattr(self, "lead_id") else None)!s}, '
                f'lead_state={(self.lead_state if hasattr(self, "lead_state") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
