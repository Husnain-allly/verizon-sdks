# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class CallbackCreated(object):

    """Implementation of the 'CallbackCreated' model.

    Attributes:
        aname (str): The billing account number for which callback messages
            will be sent.
        name (str): The name of the callback service, which identifies the
            type and format of messages that will be sent to the registered
            URL.
        url (str): The address of the callback listening service where the
            ThingSpace Platform will send callback messages for the service
            type.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "aname": 'aname',
        "name": 'name',
        "url": 'url'
    }

    _optionals = [
        'url',
    ]

    def __init__(self,
                 aname=None,
                 name=None,
                 url=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the CallbackCreated class"""

        # Initialize members of the class
        self.aname = aname 
        self.name = name 
        if url is not APIHelper.SKIP:
            self.url = url 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        aname = dictionary.get("aname") if dictionary.get("aname") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        url = dictionary.get("url") if dictionary.get("url") else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(aname,
                   name,
                   url,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'aname={self.aname!r}, '
                f'name={self.name!r}, '
                f'url={(self.url if hasattr(self, "url") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'aname={self.aname!s}, '
                f'name={self.name!s}, '
                f'url={(self.url if hasattr(self, "url") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
