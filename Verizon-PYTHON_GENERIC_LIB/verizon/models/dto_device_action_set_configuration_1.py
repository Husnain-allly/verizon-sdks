# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.dto_device_config import DtoDeviceConfig
from verizon.models.rbs_high_precision_tilt_config import RbsHighPrecisionTiltConfig


class DtoDeviceActionSetConfiguration1(object):

    """Implementation of the 'dto.DeviceActionSetConfiguration1' model.

    Attributes:
        device_config (DtoDeviceConfig): The model property of type
            DtoDeviceConfig.
        rbs_high_precision_tilt_config (RbsHighPrecisionTiltConfig): The model
            property of type RbsHighPrecisionTiltConfig.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "device_config": 'deviceConfig',
        "rbs_high_precision_tilt_config": 'RbsHighPrecisionTiltConfig'
    }

    _optionals = [
        'device_config',
        'rbs_high_precision_tilt_config',
    ]

    def __init__(self,
                 device_config=APIHelper.SKIP,
                 rbs_high_precision_tilt_config=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the DtoDeviceActionSetConfiguration1 class"""

        # Initialize members of the class
        if device_config is not APIHelper.SKIP:
            self.device_config = device_config 
        if rbs_high_precision_tilt_config is not APIHelper.SKIP:
            self.rbs_high_precision_tilt_config = rbs_high_precision_tilt_config 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        device_config = DtoDeviceConfig.from_dictionary(dictionary.get('deviceConfig')) if 'deviceConfig' in dictionary.keys() else APIHelper.SKIP
        rbs_high_precision_tilt_config = RbsHighPrecisionTiltConfig.from_dictionary(dictionary.get('RbsHighPrecisionTiltConfig')) if 'RbsHighPrecisionTiltConfig' in dictionary.keys() else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(device_config,
                   rbs_high_precision_tilt_config,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'device_config={(self.device_config if hasattr(self, "device_config") else None)!r}, '
                f'rbs_high_precision_tilt_config={(self.rbs_high_precision_tilt_config if hasattr(self, "rbs_high_precision_tilt_config") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'device_config={(self.device_config if hasattr(self, "device_config") else None)!s}, '
                f'rbs_high_precision_tilt_config={(self.rbs_high_precision_tilt_config if hasattr(self, "rbs_high_precision_tilt_config") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
