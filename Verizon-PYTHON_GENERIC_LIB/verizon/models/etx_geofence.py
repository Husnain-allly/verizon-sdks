# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.models.geo_feature import GeoFeature


class EtxGeofence(object):

    """Implementation of the 'ETXGeofence' model.

    The GeoJSON representation of geofence. Geofence supports the following
    geometry types: LineString, Polygon, MultiLineString, and MultiPolygon.
    The system only supports a single Feature in the FeatureCollection, so
    only one Line, Polygon, MultiLine or MultiPolygon can be defined within
    one Geofencing configuration.

    Attributes:
        mtype (FeatureCollectionType): The model property of type
            FeatureCollectionType.
        features (List[GeoFeature]): The model property of type
            List[GeoFeature].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'type',
        "features": 'features'
    }

    def __init__(self,
                 mtype=None,
                 features=None):
        """Constructor for the EtxGeofence class"""

        # Initialize members of the class
        self.mtype = mtype 
        self.features = features 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        mtype = dictionary.get("type") if dictionary.get("type") else None
        features = None
        if dictionary.get('features') is not None:
            features = [GeoFeature.from_dictionary(x) for x in dictionary.get('features')]
        # Return an object of this model
        return cls(mtype,
                   features)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!r}, '
                f'features={self.features!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!s}, '
                f'features={self.features!s})')
