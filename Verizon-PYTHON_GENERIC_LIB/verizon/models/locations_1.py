# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.address_item import AddressItem
from verizon.models.coordinates import Coordinates


class Locations1(object):

    """Implementation of the 'Locations1' model.

    Attributes:
        coordinates_list (List[Coordinates]): The model property of type
            List[Coordinates].
        address_list (List[AddressItem]): The model property of type
            List[AddressItem].
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "coordinates_list": 'coordinatesList',
        "address_list": 'addressList'
    }

    _optionals = [
        'coordinates_list',
        'address_list',
    ]

    def __init__(self,
                 coordinates_list=APIHelper.SKIP,
                 address_list=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the Locations1 class"""

        # Initialize members of the class
        if coordinates_list is not APIHelper.SKIP:
            self.coordinates_list = coordinates_list 
        if address_list is not APIHelper.SKIP:
            self.address_list = address_list 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        coordinates_list = None
        if dictionary.get('coordinatesList') is not None:
            coordinates_list = [Coordinates.from_dictionary(x) for x in dictionary.get('coordinatesList')]
        else:
            coordinates_list = APIHelper.SKIP
        address_list = None
        if dictionary.get('addressList') is not None:
            address_list = [AddressItem.from_dictionary(x) for x in dictionary.get('addressList')]
        else:
            address_list = APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(coordinates_list,
                   address_list,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'coordinates_list={(self.coordinates_list if hasattr(self, "coordinates_list") else None)!r}, '
                f'address_list={(self.address_list if hasattr(self, "address_list") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'coordinates_list={(self.coordinates_list if hasattr(self, "coordinates_list") else None)!s}, '
                f'address_list={(self.address_list if hasattr(self, "address_list") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
