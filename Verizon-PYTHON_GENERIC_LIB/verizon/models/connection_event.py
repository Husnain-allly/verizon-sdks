# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.custom_fields import CustomFields


class ConnectionEvent(object):

    """Implementation of the 'ConnectionEvent' model.

    Network connection events for a device during a specified time period.

    Attributes:
        connection_event_attributes (List[CustomFields]): The attributes that
            describe the connection event.
        extended_attributes (List[CustomFields]): Currently not used.
        occurred_at (str): The date and time when the connection event occured.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "connection_event_attributes": 'connectionEventAttributes',
        "extended_attributes": 'extendedAttributes',
        "occurred_at": 'occurredAt'
    }

    _optionals = [
        'connection_event_attributes',
        'extended_attributes',
        'occurred_at',
    ]

    def __init__(self,
                 connection_event_attributes=APIHelper.SKIP,
                 extended_attributes=APIHelper.SKIP,
                 occurred_at=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the ConnectionEvent class"""

        # Initialize members of the class
        if connection_event_attributes is not APIHelper.SKIP:
            self.connection_event_attributes = connection_event_attributes 
        if extended_attributes is not APIHelper.SKIP:
            self.extended_attributes = extended_attributes 
        if occurred_at is not APIHelper.SKIP:
            self.occurred_at = occurred_at 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        connection_event_attributes = None
        if dictionary.get('connectionEventAttributes') is not None:
            connection_event_attributes = [CustomFields.from_dictionary(x) for x in dictionary.get('connectionEventAttributes')]
        else:
            connection_event_attributes = APIHelper.SKIP
        extended_attributes = None
        if dictionary.get('extendedAttributes') is not None:
            extended_attributes = [CustomFields.from_dictionary(x) for x in dictionary.get('extendedAttributes')]
        else:
            extended_attributes = APIHelper.SKIP
        occurred_at = dictionary.get("occurredAt") if dictionary.get("occurredAt") else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(connection_event_attributes,
                   extended_attributes,
                   occurred_at,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'connection_event_attributes={(self.connection_event_attributes if hasattr(self, "connection_event_attributes") else None)!r}, '
                f'extended_attributes={(self.extended_attributes if hasattr(self, "extended_attributes") else None)!r}, '
                f'occurred_at={(self.occurred_at if hasattr(self, "occurred_at") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'connection_event_attributes={(self.connection_event_attributes if hasattr(self, "connection_event_attributes") else None)!s}, '
                f'extended_attributes={(self.extended_attributes if hasattr(self, "extended_attributes") else None)!s}, '
                f'occurred_at={(self.occurred_at if hasattr(self, "occurred_at") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
