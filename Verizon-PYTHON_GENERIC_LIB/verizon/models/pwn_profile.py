# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class PwnProfile(object):

    """Implementation of the 'PWNProfile' model.

    Attributes:
        profile_id (str): The model property of type str.
        profile_name (str): The model property of type str.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "profile_id": 'profileId',
        "profile_name": 'profileName'
    }

    _optionals = [
        'profile_id',
        'profile_name',
    ]

    def __init__(self,
                 profile_id=APIHelper.SKIP,
                 profile_name=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the PwnProfile class"""

        # Initialize members of the class
        if profile_id is not APIHelper.SKIP:
            self.profile_id = profile_id 
        if profile_name is not APIHelper.SKIP:
            self.profile_name = profile_name 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        profile_id = dictionary.get("profileId") if dictionary.get("profileId") else APIHelper.SKIP
        profile_name = dictionary.get("profileName") if dictionary.get("profileName") else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(profile_id,
                   profile_name,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'profile_id={(self.profile_id if hasattr(self, "profile_id") else None)!r}, '
                f'profile_name={(self.profile_name if hasattr(self, "profile_name") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'profile_id={(self.profile_id if hasattr(self, "profile_id") else None)!s}, '
                f'profile_name={(self.profile_name if hasattr(self, "profile_name") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
