# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.account_group_share_individual_1 import AccountGroupShareIndividual1
from verizon.models.account_share_filter_criteria import AccountShareFilterCriteria
from verizon.models.actionobject import Actionobject
from verizon.models.change_plan_details import ChangePlanDetails
from verizon.models.filtercriteria_object_call import FiltercriteriaObjectCall
from verizon.models.pay_as_you_go_filter_criteria import PayAsYouGoFilterCriteria
from verizon.models.rateplantype_2_condition import Rateplantype2Condition


class PricePlanTrigger1(object):

    """Implementation of the 'PricePlanTrigger1' model.

    Attributes:
        account_group_share (AccountGroupShareIndividual1): The model property
            of type AccountGroupShareIndividual1.
        account_share (AccountShareFilterCriteria): The model property of type
            AccountShareFilterCriteria.
        condition (Rateplantype2Condition): The model property of type
            Rateplantype2Condition.
        change_plan (bool): a flag to set if the trigger changes service
            plans, true, or not, false
        change_plan_details (ChangePlanDetails): The service plan code to
            switch to
        pay_as_you_go (PayAsYouGoFilterCriteria): The model property of type
            PayAsYouGoFilterCriteria.
        action (Actionobject): The model property of type Actionobject.
        stand_alone (FiltercriteriaObjectCall): The model property of type
            FiltercriteriaObjectCall.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_group_share": 'accountGroupShare',
        "account_share": 'accountShare',
        "condition": 'condition',
        "change_plan": 'changePlan',
        "change_plan_details": 'changePlanDetails',
        "pay_as_you_go": 'payAsYouGo',
        "action": 'action',
        "stand_alone": 'standAlone'
    }

    _optionals = [
        'account_group_share',
        'account_share',
        'condition',
        'change_plan',
        'change_plan_details',
        'pay_as_you_go',
        'action',
        'stand_alone',
    ]

    def __init__(self,
                 account_group_share=APIHelper.SKIP,
                 account_share=APIHelper.SKIP,
                 condition=APIHelper.SKIP,
                 change_plan=APIHelper.SKIP,
                 change_plan_details=APIHelper.SKIP,
                 pay_as_you_go=APIHelper.SKIP,
                 action=APIHelper.SKIP,
                 stand_alone=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the PricePlanTrigger1 class"""

        # Initialize members of the class
        if account_group_share is not APIHelper.SKIP:
            self.account_group_share = account_group_share 
        if account_share is not APIHelper.SKIP:
            self.account_share = account_share 
        if condition is not APIHelper.SKIP:
            self.condition = condition 
        if change_plan is not APIHelper.SKIP:
            self.change_plan = change_plan 
        if change_plan_details is not APIHelper.SKIP:
            self.change_plan_details = change_plan_details 
        if pay_as_you_go is not APIHelper.SKIP:
            self.pay_as_you_go = pay_as_you_go 
        if action is not APIHelper.SKIP:
            self.action = action 
        if stand_alone is not APIHelper.SKIP:
            self.stand_alone = stand_alone 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_group_share = AccountGroupShareIndividual1.from_dictionary(dictionary.get('accountGroupShare')) if 'accountGroupShare' in dictionary.keys() else APIHelper.SKIP
        account_share = AccountShareFilterCriteria.from_dictionary(dictionary.get('accountShare')) if 'accountShare' in dictionary.keys() else APIHelper.SKIP
        condition = Rateplantype2Condition.from_dictionary(dictionary.get('condition')) if 'condition' in dictionary.keys() else APIHelper.SKIP
        change_plan = dictionary.get("changePlan") if "changePlan" in dictionary.keys() else APIHelper.SKIP
        change_plan_details = ChangePlanDetails.from_dictionary(dictionary.get('changePlanDetails')) if 'changePlanDetails' in dictionary.keys() else APIHelper.SKIP
        pay_as_you_go = PayAsYouGoFilterCriteria.from_dictionary(dictionary.get('payAsYouGo')) if 'payAsYouGo' in dictionary.keys() else APIHelper.SKIP
        action = Actionobject.from_dictionary(dictionary.get('action')) if 'action' in dictionary.keys() else APIHelper.SKIP
        stand_alone = FiltercriteriaObjectCall.from_dictionary(dictionary.get('standAlone')) if 'standAlone' in dictionary.keys() else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(account_group_share,
                   account_share,
                   condition,
                   change_plan,
                   change_plan_details,
                   pay_as_you_go,
                   action,
                   stand_alone,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_group_share={(self.account_group_share if hasattr(self, "account_group_share") else None)!r}, '
                f'account_share={(self.account_share if hasattr(self, "account_share") else None)!r}, '
                f'condition={(self.condition if hasattr(self, "condition") else None)!r}, '
                f'change_plan={(self.change_plan if hasattr(self, "change_plan") else None)!r}, '
                f'change_plan_details={(self.change_plan_details if hasattr(self, "change_plan_details") else None)!r}, '
                f'pay_as_you_go={(self.pay_as_you_go if hasattr(self, "pay_as_you_go") else None)!r}, '
                f'action={(self.action if hasattr(self, "action") else None)!r}, '
                f'stand_alone={(self.stand_alone if hasattr(self, "stand_alone") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_group_share={(self.account_group_share if hasattr(self, "account_group_share") else None)!s}, '
                f'account_share={(self.account_share if hasattr(self, "account_share") else None)!s}, '
                f'condition={(self.condition if hasattr(self, "condition") else None)!s}, '
                f'change_plan={(self.change_plan if hasattr(self, "change_plan") else None)!s}, '
                f'change_plan_details={(self.change_plan_details if hasattr(self, "change_plan_details") else None)!s}, '
                f'pay_as_you_go={(self.pay_as_you_go if hasattr(self, "pay_as_you_go") else None)!s}, '
                f'action={(self.action if hasattr(self, "action") else None)!s}, '
                f'stand_alone={(self.stand_alone if hasattr(self, "stand_alone") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
