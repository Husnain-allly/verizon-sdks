# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.actionobject import Actionobject
from verizon.models.pay_as_you_go_filter_criteria import PayAsYouGoFilterCriteria
from verizon.models.rateplantype_2_condition import Rateplantype2Condition


class PayAsYouGoPricePlanTrigger(object):

    """Implementation of the 'payAsYouGoPricePlanTrigger' model.

    Attributes:
        pay_as_you_go (PayAsYouGoFilterCriteria): The model property of type
            PayAsYouGoFilterCriteria.
        condition (Rateplantype2Condition): The model property of type
            Rateplantype2Condition.
        action (Actionobject): The model property of type Actionobject.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "pay_as_you_go": 'payAsYouGo',
        "condition": 'condition',
        "action": 'action'
    }

    _optionals = [
        'pay_as_you_go',
        'condition',
        'action',
    ]

    def __init__(self,
                 pay_as_you_go=APIHelper.SKIP,
                 condition=APIHelper.SKIP,
                 action=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the PayAsYouGoPricePlanTrigger class"""

        # Initialize members of the class
        if pay_as_you_go is not APIHelper.SKIP:
            self.pay_as_you_go = pay_as_you_go 
        if condition is not APIHelper.SKIP:
            self.condition = condition 
        if action is not APIHelper.SKIP:
            self.action = action 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        pay_as_you_go = PayAsYouGoFilterCriteria.from_dictionary(dictionary.get('payAsYouGo')) if 'payAsYouGo' in dictionary.keys() else APIHelper.SKIP
        condition = Rateplantype2Condition.from_dictionary(dictionary.get('condition')) if 'condition' in dictionary.keys() else APIHelper.SKIP
        action = Actionobject.from_dictionary(dictionary.get('action')) if 'action' in dictionary.keys() else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(pay_as_you_go,
                   condition,
                   action,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'pay_as_you_go={(self.pay_as_you_go if hasattr(self, "pay_as_you_go") else None)!r}, '
                f'condition={(self.condition if hasattr(self, "condition") else None)!r}, '
                f'action={(self.action if hasattr(self, "action") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'pay_as_you_go={(self.pay_as_you_go if hasattr(self, "pay_as_you_go") else None)!s}, '
                f'condition={(self.condition if hasattr(self, "condition") else None)!s}, '
                f'action={(self.action if hasattr(self, "action") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
