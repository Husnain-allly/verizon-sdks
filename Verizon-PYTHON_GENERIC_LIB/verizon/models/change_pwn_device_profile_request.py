# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.pwn_device_list import PwnDeviceList


class ChangePwnDeviceProfileRequest(object):

    """Implementation of the 'ChangePWNDeviceProfileRequest' model.

    Attributes:
        account_name (str): The model property of type str.
        device_list (List[PwnDeviceList]): The model property of type
            List[PwnDeviceList].
        new_profile (str): The model property of type str.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_name": 'accountName',
        "device_list": 'deviceList',
        "new_profile": 'newProfile'
    }

    def __init__(self,
                 account_name=None,
                 device_list=None,
                 new_profile=None,
                 additional_properties=None):
        """Constructor for the ChangePwnDeviceProfileRequest class"""

        # Initialize members of the class
        self.account_name = account_name 
        self.device_list = device_list 
        self.new_profile = new_profile 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_name = dictionary.get("accountName") if dictionary.get("accountName") else None
        device_list = None
        if dictionary.get('deviceList') is not None:
            device_list = [PwnDeviceList.from_dictionary(x) for x in dictionary.get('deviceList')]
        new_profile = dictionary.get("newProfile") if dictionary.get("newProfile") else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(account_name,
                   device_list,
                   new_profile,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_name={self.account_name!r}, '
                f'device_list={self.device_list!r}, '
                f'new_profile={self.new_profile!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_name={self.account_name!s}, '
                f'device_list={self.device_list!s}, '
                f'new_profile={self.new_profile!s}, '
                f'additional_properties={self.additional_properties!s})')
