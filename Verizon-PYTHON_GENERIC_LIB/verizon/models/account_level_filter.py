# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.accountnames import Accountnames


class AccountLevelFilter(object):

    """Implementation of the 'accountLevelFilter' model.

    Attributes:
        separate_or_combined (str): Determines whether or not to aggregate
            usage of multiple accounts together, or separate by account. If
            this is null or not present, then the trigger will be for an
            individual line.
        account_names (Accountnames): The model property of type Accountnames.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "separate_or_combined": 'separateOrCombined',
        "account_names": 'accountNames'
    }

    _optionals = [
        'separate_or_combined',
        'account_names',
    ]

    def __init__(self,
                 separate_or_combined=APIHelper.SKIP,
                 account_names=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the AccountLevelFilter class"""

        # Initialize members of the class
        if separate_or_combined is not APIHelper.SKIP:
            self.separate_or_combined = separate_or_combined 
        if account_names is not APIHelper.SKIP:
            self.account_names = account_names 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        separate_or_combined = dictionary.get("separateOrCombined") if dictionary.get("separateOrCombined") else APIHelper.SKIP
        account_names = Accountnames.from_dictionary(dictionary.get('accountNames')) if 'accountNames' in dictionary.keys() else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(separate_or_combined,
                   account_names,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'separate_or_combined={(self.separate_or_combined if hasattr(self, "separate_or_combined") else None)!r}, '
                f'account_names={(self.account_names if hasattr(self, "account_names") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'separate_or_combined={(self.separate_or_combined if hasattr(self, "separate_or_combined") else None)!s}, '
                f'account_names={(self.account_names if hasattr(self, "account_names") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
