# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from verizon.api_helper import APIHelper
from verizon.configuration import Server
from verizon.http.api_response import ApiResponse
from verizon.apis.base_api import BaseApi
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from verizon.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from verizon.models.dto_expanded_device_response import DtoExpandedDeviceResponse
from verizon.models.resource_device import ResourceDevice
from verizon.models.dto_last_reported_time_response import DtoLastReportedTimeResponse
from verizon.models.dto_device_action_set_response import DtoDeviceActionSetResponse
from verizon.models.user_device_experience_history import UserDeviceExperienceHistory
from verizon.models.user_network_experience_history import UserNetworkExperienceHistory
from verizon.exceptions.management_error_exception import ManagementErrorException
from verizon.exceptions.m_400_management_error_exception import M400ManagementErrorException
from verizon.exceptions.m_403_management_error_exception import M403ManagementErrorException
from verizon.exceptions.m_404_management_error_exception import M404ManagementErrorException
from verizon.exceptions.m_500_management_error_exception import M500ManagementErrorException


class SensorInsightsDevicesApi(BaseApi):

    """A Controller to access Endpoints in the verizon API."""
    def __init__(self, config):
        super(SensorInsightsDevicesApi, self).__init__(config)

    def sensor_insights_list_devices_request(self,
                                             body):
        """Does a POST request to /dm/v1/devices/actions/query.

        Args:
            body (DtoListDevicesRequest): List all device details on an account

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers. OK

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.THINGSPACE)
            .path('/dm/v1/devices/actions/query')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body)
                        .is_required(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DtoExpandedDeviceResponse.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Bad Request', ManagementErrorException)
            .local_error('401', 'UnAuthorized', ManagementErrorException)
            .local_error('403', 'Forbidden', ManagementErrorException)
            .local_error('404', 'Not Found', ManagementErrorException)
            .local_error('406', 'Not Acceptable', ManagementErrorException)
            .local_error('415', 'Unsupported media type', ManagementErrorException)
            .local_error('429', 'Too many requests', ManagementErrorException)
            .local_error('500', 'Internal server error.', ManagementErrorException)
            .local_error('default', 'Unexpected error', ManagementErrorException)
        ).execute()

    def sensor_insights_patch_device_request(self,
                                             body):
        """Does a PATCH request to /dm/v1/devices.

        Args:
            body (DtoPatchDeviceRequest): Partially update a device's details

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers. OK

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.THINGSPACE)
            .path('/dm/v1/devices')
            .http_method(HttpMethodEnum.PATCH)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body)
                        .is_required(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ResourceDevice.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Bad Request', M400ManagementErrorException)
            .local_error('401', 'UnAuthorized', ManagementErrorException)
            .local_error('403', 'Forbidden', M403ManagementErrorException)
            .local_error('404', 'Not Found', M404ManagementErrorException)
            .local_error('406', 'Not Acceptable', ManagementErrorException)
            .local_error('415', 'Unsupported media type', ManagementErrorException)
            .local_error('429', 'Too many requests', ManagementErrorException)
            .local_error('500', 'Internal server error.', M500ManagementErrorException)
            .local_error('default', 'Unexpected error', ManagementErrorException)
        ).execute()

    def sensor_insights_last_reported_time_request(self,
                                                   body):
        """Does a POST request to /dm/v1/devices/lastreported.

        Args:
            body (DtoLastReportedTimeRequest): Get the last reported
                information for a device

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers. OK

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.THINGSPACE)
            .path('/dm/v1/devices/lastreported')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body)
                        .is_required(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DtoLastReportedTimeResponse.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Bad Request', M400ManagementErrorException)
            .local_error('403', 'Forbidden', M403ManagementErrorException)
            .local_error('404', 'Not Found', M404ManagementErrorException)
        ).execute()

    def sensor_insights_device_action_set_request(self,
                                                  body):
        """Does a POST request to /dm/v1/devices/actions/set.

        Args:
            body (DmV1DevicesActionsSetRequest): Set device configuration

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers. OK

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.THINGSPACE)
            .path('/dm/v1/devices/actions/set')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body)
                        .is_required(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DtoDeviceActionSetResponse.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Bad Request', M400ManagementErrorException)
            .local_error('403', 'Forbidden', M403ManagementErrorException)
            .local_error('404', 'Not Found', M404ManagementErrorException)
        ).execute()

    def sensor_insights_list_device_experience_history_request(self,
                                                               body):
        """Does a POST request to /dm/v1/devices/experience/actions/query.

        Args:
            body (DtoListDeviceExperienceHistoryRequest): List the device
                experience

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers. OK

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.THINGSPACE)
            .path('/dm/v1/devices/experience/actions/query')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body)
                        .is_required(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UserDeviceExperienceHistory.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Bad Request', M400ManagementErrorException)
            .local_error('401', 'UnAuthorized', ManagementErrorException)
            .local_error('403', 'Forbidden', M403ManagementErrorException)
            .local_error('404', 'Not Found', M404ManagementErrorException)
            .local_error('406', 'Not Acceptable', ManagementErrorException)
            .local_error('415', 'Unsupported media type', ManagementErrorException)
            .local_error('429', 'Too many requests', ManagementErrorException)
            .local_error('500', 'Internal server error.', M500ManagementErrorException)
            .local_error('default', 'Unexpected error', ManagementErrorException)
        ).execute()

    def sensor_insights_list_network_experience_history_request(self,
                                                                body):
        """Does a POST request to /dm/v1/devices/networkexperience/actions/query.

        Args:
            body (DtoListNetworkExperienceHistoryRequest): List the network
                experience

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers. OK

        Raises:
            ApiException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.THINGSPACE)
            .path('/dm/v1/devices/networkexperience/actions/query')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body)
                        .is_required(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('thingspace_oauth'), Single('VZ-M2M-Token')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UserNetworkExperienceHistory.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Bad Request', M400ManagementErrorException)
            .local_error('401', 'UnAuthorized', ManagementErrorException)
            .local_error('403', 'Forbidden', M403ManagementErrorException)
            .local_error('404', 'Not Found', M404ManagementErrorException)
            .local_error('406', 'Not Acceptable', ManagementErrorException)
            .local_error('415', 'Unsupported media type', ManagementErrorException)
            .local_error('429', 'Too many requests', ManagementErrorException)
            .local_error('500', 'Internal server error.', M500ManagementErrorException)
            .local_error('default', 'Unexpected error', ManagementErrorException)
        ).execute()
