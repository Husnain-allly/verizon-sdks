/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  DtoGetNetworkHealthScoreResponse,
  dtoGetNetworkHealthScoreResponseSchema,
} from '../models/dtoGetNetworkHealthScoreResponse';
import {
  DtoHealthScoreSummary,
  dtoHealthScoreSummarySchema,
} from '../models/dtoHealthScoreSummary';
import { BaseApi } from './baseApi';
import { M400ManagementError } from '../errors/m400ManagementError';
import { M403ManagementError } from '../errors/m403ManagementError';
import { M500ManagementError } from '../errors/m500ManagementError';
import { ManagementError } from '../errors/managementError';

export class SensorInsightsHealthScoreApi extends BaseApi {
  /**
   * @return Response from the API call
   */
  async sensorInsightsHealthScoreSummary(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DtoHealthScoreSummary>> {
    const req = this.createRequest('POST', '/dm/v1/healthscore/summary');
    req.baseUrl('Thingspace');
    req.throwOn(400, M400ManagementError, 'Bad Request');
    req.throwOn(401, ManagementError, 'UnAuthorized');
    req.throwOn(403, M403ManagementError, 'Forbidden');
    req.throwOn(406, ManagementError, 'Not Acceptable');
    req.throwOn(415, ManagementError, 'Unsupported media type');
    req.throwOn(429, ManagementError, 'Too many requests');
    req.throwOn(500, M500ManagementError, 'Internal server error.');
    req.defaultToError(ManagementError, 'Unexpected error');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(dtoHealthScoreSummarySchema, requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async sensorInsightsGetNetworkHealthScoreResponse(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DtoGetNetworkHealthScoreResponse>> {
    const req = this.createRequest('POST', '/dm/v1/healthscore/network');
    req.baseUrl('Thingspace');
    req.throwOn(400, M400ManagementError, 'Bad Request');
    req.throwOn(401, ManagementError, 'UnAuthorized');
    req.throwOn(403, M403ManagementError, 'Forbidden');
    req.throwOn(406, ManagementError, 'Not Acceptable');
    req.throwOn(415, ManagementError, 'Unsupported media type');
    req.throwOn(429, ManagementError, 'Too many requests');
    req.throwOn(500, M500ManagementError, 'Internal server error.');
    req.defaultToError(ManagementError, 'Unexpected error');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(
      dtoGetNetworkHealthScoreResponseSchema,
      requestOptions
    );
  }
}
