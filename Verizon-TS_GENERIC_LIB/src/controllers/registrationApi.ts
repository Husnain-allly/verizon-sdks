/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  ClientPersistenceResponse,
  clientPersistenceResponseSchema,
} from '../models/clientPersistenceResponse';
import {
  ClientRegistrationRequest,
  clientRegistrationRequestSchema,
} from '../models/clientRegistrationRequest';
import {
  ClientRegistrationResponse,
  clientRegistrationResponseSchema,
} from '../models/clientRegistrationResponse';
import {
  ConnectionRequest,
  connectionRequestSchema,
} from '../models/connectionRequest';
import {
  ConnectionResponse,
  connectionResponseSchema,
} from '../models/connectionResponse';
import { array, optional, string, unknown } from '../schema';
import { BaseApi } from './baseApi';
import { EtxResponseError } from '../errors/etxResponseError';

export class RegistrationApi extends BaseApi {
  /**
   * With this API call the user (client) registers its device or software service to the ETX system.
   * Therefore, when a connection is initiated from the device or software service to the ETX system
   * along with the credential provided by this registration call, then the connection will be authorized.
   *
   * - The user can register multiple devices or software services, which can all be used at the same
   * time.
   * - There rules set in the system that limit the type and subtype of the clients that are allowed to
   * be registered under the VendorID. The rules are created based ont he agreement between the Vendor
   * and Verizon.
   * - The user will only be able to register a limited number of devices or software services under the
   * same VendorID. This registration limit is specified by the agreement between the Vendor and Verizon.
   *
   * Note: The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and
   * Session/M2M tokens in order to call this API.
   *
   *
   * @param body
   * @return Response from the API call
   */
  async registerEtxDevice(
    body: ClientRegistrationRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ClientRegistrationResponse>> {
    const req = this.createRequest('POST', '/api/v2/clients/registration');
    req.baseUrl('IMP Server');
    const mapped = req.prepareArgs({
      body: [body, clientRegistrationRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, EtxResponseError, 'Invalid Request');
    req.throwOn(401, EtxResponseError, 'Unauthorized Request');
    req.throwOn(403, EtxResponseError, 'Forbidden Request');
    req.throwOn(429, EtxResponseError, 'Too Many Requests');
    req.throwOn(503, EtxResponseError, 'Internal Server Error');
    req.defaultToError(EtxResponseError, 'Forbidden');
    req.authenticate([{ thingspaceOauth: true, sessionToken: true }]);
    return req.callAsJson(clientRegistrationResponseSchema, requestOptions);
  }

  /**
   * With this API call the user (client) can:
   * - renew the certificate of a device or software service in the ETX system if the original
   * certificate has expired. If the client's certificate expired or going to expire within 30 days and
   * new certificate will be issued. If the certificate expires more than 30 days, the current
   * certificate will be returned to the client.
   * - complete its device or software service registration to the ETX system if the original
   * registration request was not successful because of a pending certificate generation. Whenever the
   * user receives a "client registration is pending" response (HTTP 202) from POST /clients/registration
   * call. The client should initiate this PUT API call to finish the registration process and get the
   * required certificate.
   *
   * Note: The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and
   * Session/M2M tokens in order to call this API.
   *
   *
   * @param deviceId
   * @param vendorId     The VendorID set during the Vendor registration call.
   * @param body
   * @return Response from the API call
   */
  async renewEtxDevice(
    deviceId: string,
    vendorId: string,
    body?: unknown,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ClientRegistrationResponse>> {
    const req = this.createRequest('PUT', '/api/v2/clients/registration');
    req.baseUrl('IMP Server');
    const mapped = req.prepareArgs({
      deviceId: [deviceId, string()],
      vendorId: [vendorId, string()],
      body: [body, optional(unknown())],
    });
    req.header('DeviceID', mapped.deviceId);
    req.header('VendorID', mapped.vendorId);
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, EtxResponseError, 'Invalid Request');
    req.throwOn(401, EtxResponseError, 'Unauthorized Request');
    req.throwOn(403, EtxResponseError, 'Forbidden Request');
    req.throwOn(429, EtxResponseError, 'Too Many Requests');
    req.throwOn(503, EtxResponseError, 'Internal Server Error');
    req.defaultToError(EtxResponseError, 'Forbidden');
    req.authenticate([{ thingspaceOauth: true, sessionToken: true }]);
    return req.callAsJson(clientRegistrationResponseSchema, requestOptions);
  }

  /**
   * With this API call the user (client) can unregister its devices and software services from the ETX
   * system. The unregistered devices and services will no longer be able to use the ETX Message Exchange.
   *
   * Note: The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and
   * Session/M2M tokens in order to call this API.
   *
   *
   * @param vendorId  The VendorID set during the Vendor registration call.
   * @param deviceIDs The list of device IDs and software service IDs to be unregistered
   * @return Response from the API call
   */
  async unregisterEtxDevice(
    vendorId: string,
    deviceIDs: string[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE', '/api/v2/clients/registration');
    req.baseUrl('IMP Server');
    const mapped = req.prepareArgs({
      vendorId: [vendorId, string()],
      deviceIDs: [deviceIDs, array(string())],
    });
    req.header('VendorID', mapped.vendorId);
    req.query('DeviceIDs', mapped.deviceIDs);
    req.throwOn(400, EtxResponseError, 'Invalid Request');
    req.throwOn(401, EtxResponseError, 'Unauthorized Request');
    req.throwOn(403, EtxResponseError, 'Forbidden Request');
    req.throwOn(429, EtxResponseError, 'Too Many Requests');
    req.throwOn(503, EtxResponseError, 'Internal Server Error');
    req.defaultToError(EtxResponseError, 'Forbidden');
    req.authenticate([{ thingspaceOauth: true, sessionToken: true }]);
    return req.call(requestOptions);
  }

  /**
   * With this API call the user can check the certificate of the device. At least one of the DeviceID,
   * IMEI or ICCID is required to make the call.
   *
   * Note: The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and
   * Session/M2M tokens in order to call this API.
   *
   *
   * @param deviceId
   * @param imei
   * @param iccid
   * @return Response from the API call
   */
  async getEtxDeviceCertificate(
    deviceId?: string,
    imei?: string,
    iccid?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ClientPersistenceResponse>> {
    const req = this.createRequest('GET', '/api/v2/clients/registration');
    req.baseUrl('IMP Server');
    const mapped = req.prepareArgs({
      deviceId: [deviceId, optional(string())],
      imei: [imei, optional(string())],
      iccid: [iccid, optional(string())],
    });
    req.query('DeviceID', mapped.deviceId);
    req.query('IMEI', mapped.imei);
    req.query('ICCID', mapped.iccid);
    req.throwOn(400, EtxResponseError, 'Invalid request');
    req.throwOn(401, EtxResponseError, 'Unauthorized');
    req.throwOn(403, EtxResponseError, 'Forbidden Request');
    req.throwOn(404, EtxResponseError, 'Not Found');
    req.throwOn(429, EtxResponseError, 'Too Many Requests');
    req.throwOn(500, EtxResponseError, 'Internal server Error');
    req.defaultToError(EtxResponseError, 'Forbidden');
    req.authenticate([{ thingspaceOauth: true, sessionToken: true }]);
    return req.callAsJson(clientPersistenceResponseSchema, requestOptions);
  }

  /**
   * With this API call the device or software service requests the MQTT URL for the location that it
   * needs to connect. To determine the proper URL the device or software service needs to provide its ID
   * (the one that was provided in the registration request), location (GPS coordinates), and whether it
   * is on the Verizon cellular network or not.
   *
   * Note: The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and
   * Session/M2M tokens in order to call this API.
   *
   *
   * @param vendorId     The VendorID set during the Vendor registration call.
   * @param body
   * @return Response from the API call
   */
  async retrieveMqtturl(
    vendorId: string,
    body: ConnectionRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConnectionResponse>> {
    const req = this.createRequest('POST', '/api/v2/clients/connection');
    req.baseUrl('IMP Server');
    const mapped = req.prepareArgs({
      vendorId: [vendorId, string()],
      body: [body, connectionRequestSchema],
    });
    req.header('VendorID', mapped.vendorId);
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, EtxResponseError, 'Invalid request');
    req.throwOn(401, EtxResponseError, 'Unauthorized');
    req.throwOn(403, EtxResponseError, 'Forbidden Request');
    req.throwOn(429, EtxResponseError, 'Too Many Requests');
    req.throwOn(503, EtxResponseError, 'Internal server Error');
    req.defaultToError(EtxResponseError, 'Forbidden');
    req.authenticate([{ thingspaceOauth: true, sessionToken: true }]);
    return req.callAsJson(connectionResponseSchema, requestOptions);
  }
}
