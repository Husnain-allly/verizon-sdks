/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  object,
  optional,
  Schema,
  string,
  unknown,
} from '../schema';
import { EtxGeofence, etxGeofenceSchema } from './etxGeofence';

/** Request for /api/v1/application/configurations/geofence POST endpoint. It requires the vendorId, geofence, messages and isActive fields to be populated. */
export interface GeoFenceConfigurationRequest {
  /** Name of the configuration. */
  name?: string;
  /** Description of the configuration. */
  description?: string;
  /** The GeoJSON representation of geofence. Geofence supports the following geometry types: LineString, Polygon, MultiLineString, and MultiPolygon. The system only supports a single Feature in the FeatureCollection, so only one Line, Polygon, MultiLine or MultiPolygon can be defined within one Geofencing configuration. */
  geoFence: EtxGeofence;
  /** List of predefined messages that belongs to the geofence. These are the messages that are sent out by the system when the Trigger Condition for the message is met. */
  messages: unknown[];
  isActive: boolean;
}

export const geoFenceConfigurationRequestSchema: Schema<GeoFenceConfigurationRequest> = object(
  {
    name: ['name', optional(string())],
    description: ['description', optional(string())],
    geoFence: ['geoFence', lazy(() => etxGeofenceSchema)],
    messages: ['messages', array(unknown())],
    isActive: ['isActive', boolean()],
  }
);
