/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  boolean,
  lazy,
  optional,
  Schema,
  typedExpandoObject,
  unknown,
} from '../schema';
import {
  AccountGroupShareIndividual1,
  accountGroupShareIndividual1Schema,
} from './accountGroupShareIndividual1';
import {
  AccountShareFilterCriteria,
  accountShareFilterCriteriaSchema,
} from './accountShareFilterCriteria';
import { Actionobject, actionobjectSchema } from './actionobject';
import {
  ChangePlanDetails,
  changePlanDetailsSchema,
} from './changePlanDetails';
import {
  FiltercriteriaObjectCall,
  filtercriteriaObjectCallSchema,
} from './filtercriteriaObjectCall';
import {
  PayAsYouGoFilterCriteria,
  payAsYouGoFilterCriteriaSchema,
} from './payAsYouGoFilterCriteria';
import {
  Rateplantype2Condition,
  rateplantype2ConditionSchema,
} from './rateplantype2Condition';

export interface PricePlanTrigger1 {
  accountGroupShare?: AccountGroupShareIndividual1;
  accountShare?: AccountShareFilterCriteria;
  condition?: Rateplantype2Condition;
  /** a flag to set if the trigger changes service plans, true, or not, false */
  changePlan?: boolean;
  /** The service plan code to switch to */
  changePlanDetails?: ChangePlanDetails;
  payAsYouGo?: PayAsYouGoFilterCriteria;
  action?: Actionobject;
  standAlone?: FiltercriteriaObjectCall;
  additionalProperties?: Record<string, unknown>;
}

export const pricePlanTrigger1Schema: Schema<PricePlanTrigger1> = typedExpandoObject(
  {
    accountGroupShare: [
      'accountGroupShare',
      optional(lazy(() => accountGroupShareIndividual1Schema)),
    ],
    accountShare: [
      'accountShare',
      optional(lazy(() => accountShareFilterCriteriaSchema)),
    ],
    condition: [
      'condition',
      optional(lazy(() => rateplantype2ConditionSchema)),
    ],
    changePlan: ['changePlan', optional(boolean())],
    changePlanDetails: [
      'changePlanDetails',
      optional(lazy(() => changePlanDetailsSchema)),
    ],
    payAsYouGo: [
      'payAsYouGo',
      optional(lazy(() => payAsYouGoFilterCriteriaSchema)),
    ],
    action: ['action', optional(lazy(() => actionobjectSchema))],
    standAlone: [
      'standAlone',
      optional(lazy(() => filtercriteriaObjectCallSchema)),
    ],
  },
  'additionalProperties',
  optional(unknown())
);
