/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// SessionManagementApi represents a controller struct.
type SessionManagementApi struct {
    baseApi
}

// NewSessionManagementApi creates a new instance of SessionManagementApi.
// It takes a baseController as a parameter and returns a pointer to the SessionManagementApi.
func NewSessionManagementApi(baseApi baseApi) *SessionManagementApi {
    sessionManagementApi := SessionManagementApi{baseApi: baseApi}
    return &sessionManagementApi
}

// StartConnectivityManagementSession takes context, body as parameters and
// returns an models.ApiResponse with models.LogInResult data and
// an error if there was an issue with the request or response.
// Initiates a Connectivity Management session and returns a VZ-M2M session token that is required in subsequent API requests.
func (s *SessionManagementApi) StartConnectivityManagementSession(
    ctx context.Context,
    body *models.LogInRequest) (
    models.ApiResponse[models.LogInResult],
    error) {
    req := s.prepareRequest(ctx, "POST", "/m2m/v1/session/login")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(NewAuth("thingspace_oauth"))
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    if body != nil {
        req.Json(body)
    }
    var result models.LogInResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.LogInResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// EndConnectivityManagementSession takes context as parameters and
// returns an models.ApiResponse with models.LogOutRequest data and
// an error if there was an issue with the request or response.
// Ends a Connectivity Management session.
func (s *SessionManagementApi) EndConnectivityManagementSession(ctx context.Context) (
    models.ApiResponse[models.LogOutRequest],
    error) {
    req := s.prepareRequest(ctx, "POST", "/m2m/v1/session/logout")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    var result models.LogOutRequest
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.LogOutRequest](decoder)
    return models.NewApiResponse(result, resp), err
}

// ResetConnectivityManagementPassword takes context, body as parameters and
// returns an models.ApiResponse with models.SessionResetPasswordResult data and
// an error if there was an issue with the request or response.
// The new password is effective immediately. Passwords do not expire, but Verizon recommends changing your password every 90 days.
func (s *SessionManagementApi) ResetConnectivityManagementPassword(
    ctx context.Context,
    body models.SessionResetPasswordRequest) (
    models.ApiResponse[models.SessionResetPasswordResult],
    error) {
    req := s.prepareRequest(ctx, "PUT", "/m2m/v1/session/password/actions/reset")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.SessionResetPasswordResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.SessionResetPasswordResult](decoder)
    return models.NewApiResponse(result, resp), err
}
