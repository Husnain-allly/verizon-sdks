/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// EuiccDeviceProfileManagementApi represents a controller struct.
type EuiccDeviceProfileManagementApi struct {
    baseApi
}

// NewEuiccDeviceProfileManagementApi creates a new instance of EuiccDeviceProfileManagementApi.
// It takes a baseController as a parameter and returns a pointer to the EuiccDeviceProfileManagementApi.
func NewEuiccDeviceProfileManagementApi(baseApi baseApi) *EuiccDeviceProfileManagementApi {
    euiccDeviceProfileManagementApi := EuiccDeviceProfileManagementApi{baseApi: baseApi}
    return &euiccDeviceProfileManagementApi
}

// DownloadLocalProfileToEnable takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceManagementResult data and
// an error if there was an issue with the request or response.
// Downloads an eUICC local profile to devices and enables the profile.
func (e *EuiccDeviceProfileManagementApi) DownloadLocalProfileToEnable(
    ctx context.Context,
    body models.ProfileChangeStateRequest) (
    models.ApiResponse[models.DeviceManagementResult],
    error) {
    req := e.prepareRequest(
      ctx,
      "POST",
      "/m2m/v1/devices/profile/actions/download_enable",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DeviceManagementResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceManagementResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// DownloadLocalProfileToDisable takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceManagementResult data and
// an error if there was an issue with the request or response.
// Downloads an eUICC local profile to devices and leaves the profile disabled.
func (e *EuiccDeviceProfileManagementApi) DownloadLocalProfileToDisable(
    ctx context.Context,
    body models.ProfileChangeStateRequest) (
    models.ApiResponse[models.DeviceManagementResult],
    error) {
    req := e.prepareRequest(
      ctx,
      "POST",
      "/m2m/v1/devices/profile/actions/download_disable",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DeviceManagementResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceManagementResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// EnableLocalProfile takes context, body as parameters and
// returns an models.ApiResponse with models.RequestResponse data and
// an error if there was an issue with the request or response.
// Enable a local profile that has been downloaded to eUICC devices.
func (e *EuiccDeviceProfileManagementApi) EnableLocalProfile(
    ctx context.Context,
    body models.ProfileChangeStateRequest) (
    models.ApiResponse[models.RequestResponse],
    error) {
    req := e.prepareRequest(ctx, "POST", "/m2m/v1/devices/profile/actions/enable")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error Response", Unmarshaller: errors.NewRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.RequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.RequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// DisableLocalProfile takes context, body as parameters and
// returns an models.ApiResponse with models.RequestResponse data and
// an error if there was an issue with the request or response.
// Disable a local profile on eUICC devices. The default or boot profile will become the enabled profile.
func (e *EuiccDeviceProfileManagementApi) DisableLocalProfile(
    ctx context.Context,
    body models.ProfileChangeStateRequest) (
    models.ApiResponse[models.RequestResponse],
    error) {
    req := e.prepareRequest(ctx, "POST", "/m2m/v1/devices/profile/actions/disable")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error Response", Unmarshaller: errors.NewRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.RequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.RequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// DeleteLocalProfile takes context, body as parameters and
// returns an models.ApiResponse with models.RequestResponse data and
// an error if there was an issue with the request or response.
// Delete a local profile from eUICC devices. If the local profile is enabled, it will first be disabled and the boot or default profile will be enabled.
func (e *EuiccDeviceProfileManagementApi) DeleteLocalProfile(
    ctx context.Context,
    body models.ProfileChangeStateRequest) (
    models.ApiResponse[models.RequestResponse],
    error) {
    req := e.prepareRequest(ctx, "POST", "/m2m/v1/devices/profile/actions/delete")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error Response", Unmarshaller: errors.NewRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.RequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.RequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}
