/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// FirmwareV3Api represents a controller struct.
type FirmwareV3Api struct {
    baseApi
}

// NewFirmwareV3Api creates a new instance of FirmwareV3Api.
// It takes a baseController as a parameter and returns a pointer to the FirmwareV3Api.
func NewFirmwareV3Api(baseApi baseApi) *FirmwareV3Api {
    firmwareV3Api := FirmwareV3Api{baseApi: baseApi}
    return &firmwareV3Api
}

// ListAvailableFirmware takes context, acc, protocol as parameters and
// returns an models.ApiResponse with []models.FirmwarePackage data and
// an error if there was an issue with the request or response.
// This endpoint allows user to list the firmware of an account.
func (f *FirmwareV3Api) ListAvailableFirmware(
    ctx context.Context,
    acc string,
    protocol models.FirmwareProtocol) (
    models.ApiResponse[[]models.FirmwarePackage],
    error) {
    req := f.prepareRequest(ctx, "GET", "/firmware/%v")
    req.AppendTemplateParams(acc)
    req.BaseUrl("Software Management V3")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV3Result},
    })
    req.QueryParam("protocol", protocol)
    
    var result []models.FirmwarePackage
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.FirmwarePackage](decoder)
    return models.NewApiResponse(result, resp), err
}

// SynchronizeDeviceFirmware takes context, acc, body as parameters and
// returns an models.ApiResponse with models.DeviceFirmwareList data and
// an error if there was an issue with the request or response.
// Synchronize ThingSpace with the FOTA server for up to 100 devices.
func (f *FirmwareV3Api) SynchronizeDeviceFirmware(
    ctx context.Context,
    acc string,
    body models.FirmwareImei) (
    models.ApiResponse[models.DeviceFirmwareList],
    error) {
    req := f.prepareRequest(ctx, "PUT", "/firmware/%v/devices")
    req.AppendTemplateParams(acc)
    req.BaseUrl("Software Management V3")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV3Result},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    
    var result models.DeviceFirmwareList
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceFirmwareList](decoder)
    return models.NewApiResponse(result, resp), err
}

// ReportDeviceFirmware takes context, acc, deviceId as parameters and
// returns an models.ApiResponse with models.DeviceFirmwareVersionUpdateResult data and
// an error if there was an issue with the request or response.
// Ask a device to report its firmware version asynchronously.
func (f *FirmwareV3Api) ReportDeviceFirmware(
    ctx context.Context,
    acc string,
    deviceId string) (
    models.ApiResponse[models.DeviceFirmwareVersionUpdateResult],
    error) {
    req := f.prepareRequest(ctx, "PUT", "/firmware/%v/async/%v")
    req.AppendTemplateParams(acc, deviceId)
    req.BaseUrl("Software Management V3")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV3Result},
    })
    
    var result models.DeviceFirmwareVersionUpdateResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceFirmwareVersionUpdateResult](decoder)
    return models.NewApiResponse(result, resp), err
}
