/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/models"
)

// PwnApi represents a controller struct.
type PwnApi struct {
    baseApi
}

// NewPwnApi creates a new instance of PwnApi.
// It takes a baseController as a parameter and returns a pointer to the PwnApi.
func NewPwnApi(baseApi baseApi) *PwnApi {
    pwnApi := PwnApi{baseApi: baseApi}
    return &pwnApi
}

// KpiList takes context, aname as parameters and
// returns an models.ApiResponse with models.KpiInfoList data and
// an error if there was an issue with the request or response.
func (p *PwnApi) KpiList(
    ctx context.Context,
    aname string) (
    models.ApiResponse[models.KpiInfoList],
    error) {
    req := p.prepareRequest(ctx, "GET", "/m2m/v1/devices/pwn/kpi/list/%v")
    req.AppendTemplateParams(aname)
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    
    var result models.KpiInfoList
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.KpiInfoList](decoder)
    return models.NewApiResponse(result, resp), err
}

// GetProfileList takes context, aname as parameters and
// returns an models.ApiResponse with models.PwnProfileList data and
// an error if there was an issue with the request or response.
func (p *PwnApi) GetProfileList(
    ctx context.Context,
    aname string) (
    models.ApiResponse[models.PwnProfileList],
    error) {
    req := p.prepareRequest(ctx, "GET", "/m2m/v1/devices/pwn/profiles/list/%v")
    req.AppendTemplateParams(aname)
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    
    var result models.PwnProfileList
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.PwnProfileList](decoder)
    return models.NewApiResponse(result, resp), err
}

// ChangePwnDeviceStateActivate takes context, body as parameters and
// returns an models.ApiResponse with models.ChangePwnDeviceStateResponse data and
// an error if there was an issue with the request or response.
func (p *PwnApi) ChangePwnDeviceStateActivate(
    ctx context.Context,
    body models.ChangePwnDeviceStateActivateRequest) (
    models.ApiResponse[models.ChangePwnDeviceStateResponse],
    error) {
    req := p.prepareRequest(
      ctx,
      "POST",
      "/m2m/v1/devices/pwn/actions/state/activate",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.ChangePwnDeviceStateResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.ChangePwnDeviceStateResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// ChangePwnDeviceStateDeactivate takes context, body as parameters and
// returns an models.ApiResponse with models.ChangePwnDeviceStateResponse data and
// an error if there was an issue with the request or response.
func (p *PwnApi) ChangePwnDeviceStateDeactivate(
    ctx context.Context,
    body models.ChangePwnDeviceStateDeactivateRequest) (
    models.ApiResponse[models.ChangePwnDeviceStateResponse],
    error) {
    req := p.prepareRequest(
      ctx,
      "POST",
      "/m2m/v1/devices/pwn/actions/state/deactivate",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.ChangePwnDeviceStateResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.ChangePwnDeviceStateResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// ChangePwnDeviceProfile takes context, body as parameters and
// returns an models.ApiResponse with models.ChangePwnDeviceProfileResponse data and
// an error if there was an issue with the request or response.
func (p *PwnApi) ChangePwnDeviceProfile(
    ctx context.Context,
    body models.ChangePwnDeviceProfileRequest) (
    models.ApiResponse[models.ChangePwnDeviceProfileResponse],
    error) {
    req := p.prepareRequest(ctx, "POST", "/m2m/v1/devices/pwn/actions/profile")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.ChangePwnDeviceProfileResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.ChangePwnDeviceProfileResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// ChangePwnDeviceIpaddress takes context, body as parameters and
// returns an models.ApiResponse with models.ChangePwnDeviceIpaddressResponse data and
// an error if there was an issue with the request or response.
func (p *PwnApi) ChangePwnDeviceIpaddress(
    ctx context.Context,
    body models.ChangePwnDeviceIpaddressRequest) (
    models.ApiResponse[models.ChangePwnDeviceIpaddressResponse],
    error) {
    req := p.prepareRequest(ctx, "PUT", "/m2m/v1/devices/pwn/actions/ipaddress")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.ChangePwnDeviceIpaddressResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.ChangePwnDeviceIpaddressResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// GetPwnPerformanceConsent takes context, aname as parameters and
// returns an models.ApiResponse with models.GetPwnPerformanceConsentResponse data and
// an error if there was an issue with the request or response.
func (p *PwnApi) GetPwnPerformanceConsent(
    ctx context.Context,
    aname string) (
    models.ApiResponse[models.GetPwnPerformanceConsentResponse],
    error) {
    req := p.prepareRequest(ctx, "GET", "/m2m/v1/devices/pwn/performance/consent/%v")
    req.AppendTemplateParams(aname)
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    
    var result models.GetPwnPerformanceConsentResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.GetPwnPerformanceConsentResponse](decoder)
    return models.NewApiResponse(result, resp), err
}
