/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// SensorInsightsHealthScoreApi represents a controller struct.
type SensorInsightsHealthScoreApi struct {
    baseApi
}

// NewSensorInsightsHealthScoreApi creates a new instance of SensorInsightsHealthScoreApi.
// It takes a baseController as a parameter and returns a pointer to the SensorInsightsHealthScoreApi.
func NewSensorInsightsHealthScoreApi(baseApi baseApi) *SensorInsightsHealthScoreApi {
    sensorInsightsHealthScoreApi := SensorInsightsHealthScoreApi{baseApi: baseApi}
    return &sensorInsightsHealthScoreApi
}

// SensorInsightsHealthScoreSummary takes context as parameters and
// returns an models.ApiResponse with models.DtoHealthScoreSummary data and
// an error if there was an issue with the request or response.
func (s *SensorInsightsHealthScoreApi) SensorInsightsHealthScoreSummary(ctx context.Context) (
    models.ApiResponse[models.DtoHealthScoreSummary],
    error) {
    req := s.prepareRequest(ctx, "POST", "/dm/v1/healthscore/summary")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad Request", Unmarshaller: errors.NewM400ManagementError},
        "401": {Message: "UnAuthorized", Unmarshaller: errors.NewManagementError},
        "403": {Message: "Forbidden", Unmarshaller: errors.NewM403ManagementError},
        "406": {Message: "Not Acceptable", Unmarshaller: errors.NewManagementError},
        "415": {Message: "Unsupported media type", Unmarshaller: errors.NewManagementError},
        "429": {Message: "Too many requests", Unmarshaller: errors.NewManagementError},
        "500": {Message: "Internal server error.", Unmarshaller: errors.NewM500ManagementError},
        "0": {Message: "Unexpected error", Unmarshaller: errors.NewManagementError},
    })
    var result models.DtoHealthScoreSummary
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DtoHealthScoreSummary](decoder)
    return models.NewApiResponse(result, resp), err
}

// SensorInsightsGetNetworkHealthScoreResponse takes context as parameters and
// returns an models.ApiResponse with models.DtoGetNetworkHealthScoreResponse data and
// an error if there was an issue with the request or response.
func (s *SensorInsightsHealthScoreApi) SensorInsightsGetNetworkHealthScoreResponse(ctx context.Context) (
    models.ApiResponse[models.DtoGetNetworkHealthScoreResponse],
    error) {
    req := s.prepareRequest(ctx, "POST", "/dm/v1/healthscore/network")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad Request", Unmarshaller: errors.NewM400ManagementError},
        "401": {Message: "UnAuthorized", Unmarshaller: errors.NewManagementError},
        "403": {Message: "Forbidden", Unmarshaller: errors.NewM403ManagementError},
        "406": {Message: "Not Acceptable", Unmarshaller: errors.NewManagementError},
        "415": {Message: "Unsupported media type", Unmarshaller: errors.NewManagementError},
        "429": {Message: "Too many requests", Unmarshaller: errors.NewManagementError},
        "500": {Message: "Internal server error.", Unmarshaller: errors.NewM500ManagementError},
        "0": {Message: "Unexpected error", Unmarshaller: errors.NewManagementError},
    })
    var result models.DtoGetNetworkHealthScoreResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DtoGetNetworkHealthScoreResponse](decoder)
    return models.NewApiResponse(result, resp), err
}
