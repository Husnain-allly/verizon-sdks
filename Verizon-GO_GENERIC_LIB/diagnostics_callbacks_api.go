/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// DiagnosticsCallbacksApi represents a controller struct.
type DiagnosticsCallbacksApi struct {
    baseApi
}

// NewDiagnosticsCallbacksApi creates a new instance of DiagnosticsCallbacksApi.
// It takes a baseController as a parameter and returns a pointer to the DiagnosticsCallbacksApi.
func NewDiagnosticsCallbacksApi(baseApi baseApi) *DiagnosticsCallbacksApi {
    diagnosticsCallbacksApi := DiagnosticsCallbacksApi{baseApi: baseApi}
    return &diagnosticsCallbacksApi
}

// GetDiagnosticsSubscriptionCallbackInfo takes context, accountName as parameters and
// returns an models.ApiResponse with []models.DeviceDiagnosticsCallback data and
// an error if there was an issue with the request or response.
// This endpoint allows user to get the registered callback information of an existing diagnostics subscription.
func (d *DiagnosticsCallbacksApi) GetDiagnosticsSubscriptionCallbackInfo(
    ctx context.Context,
    accountName string) (
    models.ApiResponse[[]models.DeviceDiagnosticsCallback],
    error) {
    req := d.prepareRequest(ctx, "GET", "/callbacks")
    
    req.BaseUrl("Device Diagnostics")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewDeviceDiagnosticsResult},
    })
    req.QueryParam("accountName", accountName)
    var result []models.DeviceDiagnosticsCallback
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.DeviceDiagnosticsCallback](decoder)
    return models.NewApiResponse(result, resp), err
}

// RegisterDiagnosticsCallbackUrl takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceDiagnosticsCallback data and
// an error if there was an issue with the request or response.
// This endpoint allows user update the callback HTTPS address of an existing diagnostics subscription.
func (d *DiagnosticsCallbacksApi) RegisterDiagnosticsCallbackUrl(
    ctx context.Context,
    body models.CallbackRegistrationRequest) (
    models.ApiResponse[models.DeviceDiagnosticsCallback],
    error) {
    req := d.prepareRequest(ctx, "POST", "/callbacks")
    
    req.BaseUrl("Device Diagnostics")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewDeviceDiagnosticsResult},
    })
    req.Header("Content-Type", "*/*")
    req.Json(&body)
    var result models.DeviceDiagnosticsCallback
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceDiagnosticsCallback](decoder)
    return models.NewApiResponse(result, resp), err
}

// UnregisterDiagnosticsCallback takes context, accountName, serviceName as parameters and
// returns an models.ApiResponse with models.DeviceDiagnosticsCallback data and
// an error if there was an issue with the request or response.
// This endpoint allows user to delete a registered callback URL and credential.
func (d *DiagnosticsCallbacksApi) UnregisterDiagnosticsCallback(
    ctx context.Context,
    accountName string,
    serviceName string) (
    models.ApiResponse[models.DeviceDiagnosticsCallback],
    error) {
    req := d.prepareRequest(ctx, "DELETE", "/callbacks")
    
    req.BaseUrl("Device Diagnostics")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewDeviceDiagnosticsResult},
    })
    req.QueryParam("accountName", accountName)
    req.QueryParam("serviceName", serviceName)
    var result models.DeviceDiagnosticsCallback
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceDiagnosticsCallback](decoder)
    return models.NewApiResponse(result, resp), err
}
