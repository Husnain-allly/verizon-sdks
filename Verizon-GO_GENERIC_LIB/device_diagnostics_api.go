/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// DeviceDiagnosticsApi represents a controller struct.
type DeviceDiagnosticsApi struct {
    baseApi
}

// NewDeviceDiagnosticsApi creates a new instance of DeviceDiagnosticsApi.
// It takes a baseController as a parameter and returns a pointer to the DeviceDiagnosticsApi.
func NewDeviceDiagnosticsApi(baseApi baseApi) *DeviceDiagnosticsApi {
    deviceDiagnosticsApi := DeviceDiagnosticsApi{baseApi: baseApi}
    return &deviceDiagnosticsApi
}

// DeviceReachabilityStatusUsingPost takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceManagementResult data and
// an error if there was an issue with the request or response.
// If the devices do not already exist in the account, this API resource adds them before activation.
func (d *DeviceDiagnosticsApi) DeviceReachabilityStatusUsingPost(
    ctx context.Context,
    body models.NotificationReportStatusRequest) (
    models.ApiResponse[models.DeviceManagementResult],
    error) {
    req := d.prepareRequest(
      ctx,
      "POST",
      "/m2m/v1/diagnostics/basic/devicereachability/status",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DeviceManagementResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceManagementResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// RetrieveActiveMonitorsUsingPost takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceManagementResult data and
// an error if there was an issue with the request or response.
// Retrieve all the active monitors.
func (d *DeviceDiagnosticsApi) RetrieveActiveMonitorsUsingPost(
    ctx context.Context,
    body models.RetrieveMonitorsRequest) (
    models.ApiResponse[models.DeviceManagementResult],
    error) {
    req := d.prepareRequest(
      ctx,
      "POST",
      "/m2m/v1/diagnostics/basic/devicereachability/monitors",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DeviceManagementResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceManagementResult](decoder)
    return models.NewApiResponse(result, resp), err
}
