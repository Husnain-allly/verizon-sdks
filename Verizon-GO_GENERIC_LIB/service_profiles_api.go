/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// ServiceProfilesApi represents a controller struct.
type ServiceProfilesApi struct {
    baseApi
}

// NewServiceProfilesApi creates a new instance of ServiceProfilesApi.
// It takes a baseController as a parameter and returns a pointer to the ServiceProfilesApi.
func NewServiceProfilesApi(baseApi baseApi) *ServiceProfilesApi {
    serviceProfilesApi := ServiceProfilesApi{baseApi: baseApi}
    return &serviceProfilesApi
}

// CreateServiceProfile takes context, body as parameters and
// returns an models.ApiResponse with models.CreateServiceProfileResult data and
// an error if there was an issue with the request or response.
// Creates a service profile that describes the resource requirements of a service.
func (s *ServiceProfilesApi) CreateServiceProfile(
    ctx context.Context,
    body models.ResourcesServiceProfile) (
    models.ApiResponse[models.CreateServiceProfileResult],
    error) {
    req := s.prepareRequest(ctx, "POST", "/serviceprofiles")
    
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "HTTP 400 Bad Request.", Unmarshaller: errors.NewEdgeDiscoveryResult},
        "401": {Message: "HTTP 401 Unauthorized.", Unmarshaller: errors.NewEdgeDiscoveryResult},
        "0": {Message: "HTTP 500 Internal Server Error.", Unmarshaller: errors.NewEdgeDiscoveryResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.CreateServiceProfileResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.CreateServiceProfileResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// ListServiceProfiles takes context as parameters and
// returns an models.ApiResponse with models.ListServiceProfilesResult data and
// an error if there was an issue with the request or response.
// List all service profiles registered under your API key.
func (s *ServiceProfilesApi) ListServiceProfiles(ctx context.Context) (
    models.ApiResponse[models.ListServiceProfilesResult],
    error) {
    req := s.prepareRequest(ctx, "GET", "/serviceprofiles")
    
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "HTTP 400 Bad Request.", Unmarshaller: errors.NewEdgeDiscoveryResult},
        "401": {Message: "HTTP 401 Unauthorized.", Unmarshaller: errors.NewEdgeDiscoveryResult},
        "0": {Message: "HTTP 500 Internal Server Error.", Unmarshaller: errors.NewEdgeDiscoveryResult},
    })
    var result models.ListServiceProfilesResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.ListServiceProfilesResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// GetServiceProfile takes context, serviceProfileId as parameters and
// returns an models.ApiResponse with models.ResourcesServiceProfileWithId data and
// an error if there was an issue with the request or response.
// Returns a specified service profile.
func (s *ServiceProfilesApi) GetServiceProfile(
    ctx context.Context,
    serviceProfileId string) (
    models.ApiResponse[models.ResourcesServiceProfileWithId],
    error) {
    req := s.prepareRequest(ctx, "GET", "/serviceprofiles/%v")
    req.AppendTemplateParams(serviceProfileId)
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "HTTP 400 Bad Request.", Unmarshaller: errors.NewEdgeDiscoveryResult},
        "401": {Message: "HTTP 401 Unauthorized.", Unmarshaller: errors.NewEdgeDiscoveryResult},
        "0": {Message: "HTTP 500 Internal Server Error.", Unmarshaller: errors.NewEdgeDiscoveryResult},
    })
    
    var result models.ResourcesServiceProfileWithId
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.ResourcesServiceProfileWithId](decoder)
    return models.NewApiResponse(result, resp), err
}

// UpdateServiceProfile takes context, serviceProfileId, body as parameters and
// returns an models.ApiResponse with models.UpdateServiceProfileResult data and
// an error if there was an issue with the request or response.
// Update the definition of a Service Profile.
func (s *ServiceProfilesApi) UpdateServiceProfile(
    ctx context.Context,
    serviceProfileId string,
    body models.ResourcesServiceProfile) (
    models.ApiResponse[models.UpdateServiceProfileResult],
    error) {
    req := s.prepareRequest(ctx, "PUT", "/serviceprofiles/%v")
    req.AppendTemplateParams(serviceProfileId)
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "HTTP 400 Bad Request.", Unmarshaller: errors.NewEdgeDiscoveryResult},
        "401": {Message: "HTTP 401 Unauthorized.", Unmarshaller: errors.NewEdgeDiscoveryResult},
        "0": {Message: "HTTP 500 Internal Server Error.", Unmarshaller: errors.NewEdgeDiscoveryResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    
    var result models.UpdateServiceProfileResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.UpdateServiceProfileResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// DeleteServiceProfile takes context, serviceProfileId as parameters and
// returns an models.ApiResponse with models.DeleteServiceProfileResult data and
// an error if there was an issue with the request or response.
// Delete Service Profile based on unique service profile ID.
func (s *ServiceProfilesApi) DeleteServiceProfile(
    ctx context.Context,
    serviceProfileId string) (
    models.ApiResponse[models.DeleteServiceProfileResult],
    error) {
    req := s.prepareRequest(ctx, "DELETE", "/serviceprofiles/%v")
    req.AppendTemplateParams(serviceProfileId)
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "HTTP 400 Bad Request.", Unmarshaller: errors.NewEdgeDiscoveryResult},
        "401": {Message: "HTTP 401 Unauthorized.", Unmarshaller: errors.NewEdgeDiscoveryResult},
        "0": {Message: "HTTP 500 Internal Server Error.", Unmarshaller: errors.NewEdgeDiscoveryResult},
    })
    
    var result models.DeleteServiceProfileResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeleteServiceProfileResult](decoder)
    return models.NewApiResponse(result, resp), err
}
