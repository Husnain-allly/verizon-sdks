/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// AnomalyTriggersV2Api represents a controller struct.
type AnomalyTriggersV2Api struct {
    baseApi
}

// NewAnomalyTriggersV2Api creates a new instance of AnomalyTriggersV2Api.
// It takes a baseController as a parameter and returns a pointer to the AnomalyTriggersV2Api.
func NewAnomalyTriggersV2Api(baseApi baseApi) *AnomalyTriggersV2Api {
    anomalyTriggersV2Api := AnomalyTriggersV2Api{baseApi: baseApi}
    return &anomalyTriggersV2Api
}

// CreateAnomalyDetectionTriggerV2 takes context, body as parameters and
// returns an models.ApiResponse with models.AnomalyDetectionTrigger data and
// an error if there was an issue with the request or response.
// Creates the trigger to identify an anomaly.
func (a *AnomalyTriggersV2Api) CreateAnomalyDetectionTriggerV2(
    ctx context.Context,
    body []models.CreateTriggerRequestOptions) (
    models.ApiResponse[models.AnomalyDetectionTrigger],
    error) {
    req := a.prepareRequest(ctx, "POST", "/m2m/v2/triggers")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "An error occurred.", Unmarshaller: errors.NewIntelligenceResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.AnomalyDetectionTrigger
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.AnomalyDetectionTrigger](decoder)
    return models.NewApiResponse(result, resp), err
}

// UpdateAnomalyDetectionTriggerV2 takes context, body as parameters and
// returns an models.ApiResponse with models.IntelligenceSuccessResult data and
// an error if there was an issue with the request or response.
// Updates an existing trigger using the account name.
func (a *AnomalyTriggersV2Api) UpdateAnomalyDetectionTriggerV2(
    ctx context.Context,
    body []models.UpdateTriggerRequestOptions) (
    models.ApiResponse[models.IntelligenceSuccessResult],
    error) {
    req := a.prepareRequest(ctx, "PUT", "/m2m/v2/triggers")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "An error occurred.", Unmarshaller: errors.NewIntelligenceResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.IntelligenceSuccessResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.IntelligenceSuccessResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// ListAnomalyDetectionTriggerSettingsV2 takes context, triggerId as parameters and
// returns an models.ApiResponse with models.AnomalyTriggerResult data and
// an error if there was an issue with the request or response.
// Retrieves the values for a specific trigger ID.
func (a *AnomalyTriggersV2Api) ListAnomalyDetectionTriggerSettingsV2(
    ctx context.Context,
    triggerId string) (
    models.ApiResponse[models.AnomalyTriggerResult],
    error) {
    req := a.prepareRequest(ctx, "GET", "/m2m/v2/triggers/%v")
    req.AppendTemplateParams(triggerId)
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "An error occurred.", Unmarshaller: errors.NewIntelligenceResult},
    })
    
    var result models.AnomalyTriggerResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.AnomalyTriggerResult](decoder)
    return models.NewApiResponse(result, resp), err
}
