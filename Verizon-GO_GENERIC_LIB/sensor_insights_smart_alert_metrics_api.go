/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// SensorInsightsSmartAlertMetricsApi represents a controller struct.
type SensorInsightsSmartAlertMetricsApi struct {
    baseApi
}

// NewSensorInsightsSmartAlertMetricsApi creates a new instance of SensorInsightsSmartAlertMetricsApi.
// It takes a baseController as a parameter and returns a pointer to the SensorInsightsSmartAlertMetricsApi.
func NewSensorInsightsSmartAlertMetricsApi(baseApi baseApi) *SensorInsightsSmartAlertMetricsApi {
    sensorInsightsSmartAlertMetricsApi := SensorInsightsSmartAlertMetricsApi{baseApi: baseApi}
    return &sensorInsightsSmartAlertMetricsApi
}

// Sensorinsightsmetricsquery takes context, body as parameters and
// returns an models.ApiResponse with models.DtoQueryMetricsResponse data and
// an error if there was an issue with the request or response.
// Get Device Alerts for the most recent daily period, up to 30 days.
func (s *SensorInsightsSmartAlertMetricsApi) Sensorinsightsmetricsquery(
    ctx context.Context,
    body models.DtoQueryMetrics) (
    models.ApiResponse[models.DtoQueryMetricsResponse],
    error) {
    req := s.prepareRequest(ctx, "POST", "/dm/v1/smartAlerts/actions/metrics")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad Request", Unmarshaller: errors.NewM400ManagementError},
        "401": {Message: "UnAuthorized", Unmarshaller: errors.NewManagementError},
        "403": {Message: "Forbidden", Unmarshaller: errors.NewM403ManagementError},
        "500": {Message: "Internal server error.", Unmarshaller: errors.NewM500ManagementError},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DtoQueryMetricsResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DtoQueryMetricsResponse](decoder)
    return models.NewApiResponse(result, resp), err
}
