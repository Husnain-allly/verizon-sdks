/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// OauthAuthorizationApi represents a controller struct.
type OauthAuthorizationApi struct {
    baseApi
}

// NewOauthAuthorizationApi creates a new instance of OauthAuthorizationApi.
// It takes a baseController as a parameter and returns a pointer to the OauthAuthorizationApi.
func NewOauthAuthorizationApi(baseApi baseApi) *OauthAuthorizationApi {
    oauthAuthorizationApi := OauthAuthorizationApi{baseApi: baseApi}
    return &oauthAuthorizationApi
}

// RequestTokenThingspaceOauth takes context, authorization, scope as parameters and
// returns an models.ApiResponse with models.OauthToken data and
// an error if there was an issue with the request or response.
// Create a new OAuth 2 token.
func (o *OauthAuthorizationApi) RequestTokenThingspaceOauth(
    ctx context.Context,
    authorization string,
    scope *string,
    formParams map[string]any) (
    models.ApiResponse[models.OauthToken],
    error) {
    req := o.prepareRequest(ctx, "POST", "/oauth2/token")
    
    req.BaseUrl("OAuth Server")
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "OAuth 2 provider returned an error.", Unmarshaller: errors.NewOauthProvider},
        "401": {Message: "OAuth 2 provider says client authentication failed.", Unmarshaller: errors.NewOauthProvider},
    })
    req.Header("Authorization", authorization)
    req.FormParam("grant_type", "client_credentials")
    if scope != nil {
        req.FormParam("scope", *scope)
    }
    req.FormParams(formParams)
    var result models.OauthToken
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.OauthToken](decoder)
    return models.NewApiResponse(result, resp), err
}

// RequestTokenThingspaceOauth1 takes context, authorization, scope as parameters and
// returns an models.ApiResponse with models.OauthToken data and
// an error if there was an issue with the request or response.
// Create a new OAuth 2 token.
func (o *OauthAuthorizationApi) RequestTokenThingspaceOauth1(
    ctx context.Context,
    authorization string,
    scope *string,
    formParams map[string]any) (
    models.ApiResponse[models.OauthToken],
    error) {
    req := o.prepareRequest(ctx, "POST", "/")
    
    req.BaseUrl("OAuth Server")
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "OAuth 2 provider returned an error.", Unmarshaller: errors.NewOauthProvider},
        "401": {Message: "OAuth 2 provider says client authentication failed.", Unmarshaller: errors.NewOauthProvider},
    })
    req.Header("Authorization", authorization)
    req.FormParam("grant_type", "client_credentials")
    if scope != nil {
        req.FormParam("scope", *scope)
    }
    req.FormParams(formParams)
    var result models.OauthToken
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.OauthToken](decoder)
    return models.NewApiResponse(result, resp), err
}
