/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// DeviceManagementApi represents a controller struct.
type DeviceManagementApi struct {
    baseApi
}

// NewDeviceManagementApi creates a new instance of DeviceManagementApi.
// It takes a baseController as a parameter and returns a pointer to the DeviceManagementApi.
func NewDeviceManagementApi(baseApi baseApi) *DeviceManagementApi {
    deviceManagementApi := DeviceManagementApi{baseApi: baseApi}
    return &deviceManagementApi
}

// ActivateServiceForDevices takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceManagementResult data and
// an error if there was an issue with the request or response.
// If the devices do not already exist in the account, this API resource adds them before activation.
func (d *DeviceManagementApi) ActivateServiceForDevices(
    ctx context.Context,
    body models.CarrierActivateRequest) (
    models.ApiResponse[models.DeviceManagementResult],
    error) {
    req := d.prepareRequest(ctx, "POST", "/m2m/v1/devices/actions/activate")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DeviceManagementResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceManagementResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// AddDevices takes context, body as parameters and
// returns an models.ApiResponse with []models.AddDevicesResult data and
// an error if there was an issue with the request or response.
// Use this API if you want to manage some device settings before you are ready to activate service for the devices.
func (d *DeviceManagementApi) AddDevices(
    ctx context.Context,
    body models.AddDevicesRequest) (
    models.ApiResponse[[]models.AddDevicesResult],
    error) {
    req := d.prepareRequest(ctx, "POST", "/m2m/v1/devices/actions/add")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result []models.AddDevicesResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.AddDevicesResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// UpdateDevicesContactInformation takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceManagementResult data and
// an error if there was an issue with the request or response.
// Sends a CarrierService callback message for each device in the request when the contact information has been changed, or if there was a problem and the change could not be completed.
func (d *DeviceManagementApi) UpdateDevicesContactInformation(
    ctx context.Context,
    body models.ContactInfoUpdateRequest) (
    models.ApiResponse[models.DeviceManagementResult],
    error) {
    req := d.prepareRequest(ctx, "PUT", "/m2m/v1/devices/actions/contactInfo")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DeviceManagementResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceManagementResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// UpdateDevicesCustomFields takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceManagementResult data and
// an error if there was an issue with the request or response.
// Sends a CarrierService callback message for each device in the request when the custom fields have been changed, or if there was a problem and the change could not be completed.
func (d *DeviceManagementApi) UpdateDevicesCustomFields(
    ctx context.Context,
    body models.CustomFieldsUpdateRequest) (
    models.ApiResponse[models.DeviceManagementResult],
    error) {
    req := d.prepareRequest(ctx, "PUT", "/m2m/v1/devices/actions/customFields")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DeviceManagementResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceManagementResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// DeactivateServiceForDevices takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceManagementResult data and
// an error if there was an issue with the request or response.
// Deactivating service for a device may result in an early termination fee (ETF) being charged to the account, depending on the terms of the contract with Verizon. If your contract allows ETF waivers and if you want to use one for a particular deactivation, set the etfWaiver value to True.
func (d *DeviceManagementApi) DeactivateServiceForDevices(
    ctx context.Context,
    body models.CarrierDeactivateRequest) (
    models.ApiResponse[models.DeviceManagementResult],
    error) {
    req := d.prepareRequest(ctx, "POST", "/m2m/v1/devices/actions/deactivate")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DeviceManagementResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceManagementResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// DeleteDeactivatedDevices takes context, body as parameters and
// returns an models.ApiResponse with []models.DeleteDevicesResult data and
// an error if there was an issue with the request or response.
// Use this API to remove unneeded devices from an account.
func (d *DeviceManagementApi) DeleteDeactivatedDevices(
    ctx context.Context,
    body models.DeleteDevicesRequest) (
    models.ApiResponse[[]models.DeleteDevicesResult],
    error) {
    req := d.prepareRequest(ctx, "POST", "/m2m/v1/devices/actions/delete")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result []models.DeleteDevicesResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.DeleteDevicesResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// ListDevicesInformation takes context, body as parameters and
// returns an models.ApiResponse with models.AccountDeviceListResult data and
// an error if there was an issue with the request or response.
// Returns information about a single device or information about all devices that match the given parameters. Returned information includes device provisioning state, service plan, MDN, MIN, and IP address.
func (d *DeviceManagementApi) ListDevicesInformation(
    ctx context.Context,
    body models.AccountDeviceListRequest) (
    models.ApiResponse[models.AccountDeviceListResult],
    error) {
    req := d.prepareRequest(ctx, "POST", "/m2m/v1/devices/actions/list")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.AccountDeviceListResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.AccountDeviceListResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// ListDevicesWithImeiIccidMismatch takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceMismatchListResult data and
// an error if there was an issue with the request or response.
// Returns a list of all 4G devices with an ICCID (SIM) that was not activated with the expected IMEI (hardware) during a specified time frame.
func (d *DeviceManagementApi) ListDevicesWithImeiIccidMismatch(
    ctx context.Context,
    body models.DeviceMismatchListRequest) (
    models.ApiResponse[models.DeviceMismatchListResult],
    error) {
    req := d.prepareRequest(
      ctx,
      "POST",
      "/m2m/v1/devices/actions/list/imeiiccidmismatch",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DeviceMismatchListResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceMismatchListResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// MoveDevicesWithinAccountsOfProfile takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceManagementResult data and
// an error if there was an issue with the request or response.
// Move active devices from one billing account to another within a customer profile.
func (d *DeviceManagementApi) MoveDevicesWithinAccountsOfProfile(
    ctx context.Context,
    body models.MoveDeviceRequest) (
    models.ApiResponse[models.DeviceManagementResult],
    error) {
    req := d.prepareRequest(ctx, "PUT", "/m2m/v1/devices/actions/move")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DeviceManagementResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceManagementResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// UpdateDevicesState takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceManagementResult data and
// an error if there was an issue with the request or response.
// Changes the provisioning state of one or more devices to a specified customer-defined service and state.
func (d *DeviceManagementApi) UpdateDevicesState(
    ctx context.Context,
    body models.GoToStateRequest) (
    models.ApiResponse[models.DeviceManagementResult],
    error) {
    req := d.prepareRequest(ctx, "PUT", "/m2m/v1/devices/actions/gotostate")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DeviceManagementResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceManagementResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// ChangeDevicesServicePlan takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceManagementResult data and
// an error if there was an issue with the request or response.
// Changes the service plan for one or more devices.
func (d *DeviceManagementApi) ChangeDevicesServicePlan(
    ctx context.Context,
    body models.ServicePlanUpdateRequest) (
    models.ApiResponse[models.DeviceManagementResult],
    error) {
    req := d.prepareRequest(ctx, "PUT", "/m2m/v1/devices/actions/plan")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DeviceManagementResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceManagementResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// SuspendServiceForDevices takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceManagementResult data and
// an error if there was an issue with the request or response.
// Suspends service for one or more devices.
func (d *DeviceManagementApi) SuspendServiceForDevices(
    ctx context.Context,
    body models.CarrierActionsRequest) (
    models.ApiResponse[models.DeviceManagementResult],
    error) {
    req := d.prepareRequest(ctx, "POST", "/m2m/v1/devices/actions/suspend")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DeviceManagementResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceManagementResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// RestoreServiceForSuspendedDevices takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceManagementResult data and
// an error if there was an issue with the request or response.
// Restores service to one or more suspended devices.
func (d *DeviceManagementApi) RestoreServiceForSuspendedDevices(
    ctx context.Context,
    body models.CarrierActionsRequest) (
    models.ApiResponse[models.DeviceManagementResult],
    error) {
    req := d.prepareRequest(ctx, "POST", "/m2m/v1/devices/actions/restore")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DeviceManagementResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceManagementResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// CheckDevicesAvailabilityForActivation takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceManagementResult data and
// an error if there was an issue with the request or response.
// Checks whether specified devices are registered by the manufacturer with the Verizon network and are available to be activated.
func (d *DeviceManagementApi) CheckDevicesAvailabilityForActivation(
    ctx context.Context,
    body models.DeviceActivationRequest) (
    models.ApiResponse[models.DeviceManagementResult],
    error) {
    req := d.prepareRequest(ctx, "POST", "/m2m/v1/devices/availability/actions/list")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DeviceManagementResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceManagementResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// RetrieveDeviceConnectionHistory takes context, body as parameters and
// returns an models.ApiResponse with models.ConnectionHistoryResult data and
// an error if there was an issue with the request or response.
// Each response includes a maximum of 500 records. To obtain more records, you can call the API multiple times, adjusting the earliest value each time to start where the previous request finished.
func (d *DeviceManagementApi) RetrieveDeviceConnectionHistory(
    ctx context.Context,
    body models.DeviceConnectionListRequest) (
    models.ApiResponse[models.ConnectionHistoryResult],
    error) {
    req := d.prepareRequest(
      ctx,
      "POST",
      "/m2m/v1/devices/connections/actions/listHistory",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.ConnectionHistoryResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.ConnectionHistoryResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// UpdateDevicesCostCenterCode takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceManagementResult data and
// an error if there was an issue with the request or response.
// Changes or removes the CostCenterCode value or customer name and address (Primary Place of Use) for one or more devices.
func (d *DeviceManagementApi) UpdateDevicesCostCenterCode(
    ctx context.Context,
    body models.DeviceCostCenterRequest) (
    models.ApiResponse[models.DeviceManagementResult],
    error) {
    req := d.prepareRequest(ctx, "PUT", "/m2m/v1/devices/costCenter")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DeviceManagementResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceManagementResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// GetDeviceExtendedDiagnosticInformation takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceExtendedDiagnosticsResult data and
// an error if there was an issue with the request or response.
// Returns extended diagnostic information about a specified device, including connectivity, provisioning, billing and location status.
func (d *DeviceManagementApi) GetDeviceExtendedDiagnosticInformation(
    ctx context.Context,
    body models.DeviceExtendedDiagnosticsRequest) (
    models.ApiResponse[models.DeviceExtendedDiagnosticsResult],
    error) {
    req := d.prepareRequest(
      ctx,
      "POST",
      "/m2m/v1/devices/extendeddiagnostics/actions/list",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DeviceExtendedDiagnosticsResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceExtendedDiagnosticsResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// ListDevicesProvisioningHistory takes context, body as parameters and
// returns an models.ApiResponse with []models.DeviceProvisioningHistoryListResult data and
// an error if there was an issue with the request or response.
// Returns the provisioning history of a specified device during a specified time period.
func (d *DeviceManagementApi) ListDevicesProvisioningHistory(
    ctx context.Context,
    body models.DeviceProvisioningHistoryListRequest) (
    models.ApiResponse[[]models.DeviceProvisioningHistoryListResult],
    error) {
    req := d.prepareRequest(ctx, "POST", "/m2m/v1/devices/history/actions/list")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result []models.DeviceProvisioningHistoryListResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.DeviceProvisioningHistoryListResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// ListCurrentDevicesPrlVersion takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceManagementResult data and
// an error if there was an issue with the request or response.
// 4G and GSM devices do not have a PRL.
func (d *DeviceManagementApi) ListCurrentDevicesPrlVersion(
    ctx context.Context,
    body models.DevicePrlListRequest) (
    models.ApiResponse[models.DeviceManagementResult],
    error) {
    req := d.prepareRequest(ctx, "POST", "/m2m/v1/devices/prl/actions/list")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DeviceManagementResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceManagementResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// GetDeviceServiceSuspensionStatus takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceManagementResult data and
// an error if there was an issue with the request or response.
// Returns DeviceSuspensionStatus callback messages containing the current device state and information on how many days a device has been suspended and can continue to be suspended.
func (d *DeviceManagementApi) GetDeviceServiceSuspensionStatus(
    ctx context.Context,
    body models.DeviceSuspensionStatusRequest) (
    models.ApiResponse[models.DeviceManagementResult],
    error) {
    req := d.prepareRequest(ctx, "POST", "/m2m/v1/devices/suspension/status")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DeviceManagementResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceManagementResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// ListDevicesUsageHistory takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceUsageListResult data and
// an error if there was an issue with the request or response.
// Returns the network data usage history of a device during a specified time period.
func (d *DeviceManagementApi) ListDevicesUsageHistory(
    ctx context.Context,
    body models.DeviceUsageListRequest) (
    models.ApiResponse[models.DeviceUsageListResult],
    error) {
    req := d.prepareRequest(ctx, "POST", "/m2m/v1/devices/usage/actions/list")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DeviceUsageListResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceUsageListResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// RetrieveAggregateDeviceUsageHistory takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceManagementResult data and
// an error if there was an issue with the request or response.
// The information is returned in a callback response, so you must register a URL for DeviceUsage callback messages using the POST /callbacks API.
func (d *DeviceManagementApi) RetrieveAggregateDeviceUsageHistory(
    ctx context.Context,
    body models.DeviceAggregateUsageListRequest) (
    models.ApiResponse[models.DeviceManagementResult],
    error) {
    req := d.prepareRequest(
      ctx,
      "POST",
      "/m2m/v1/devices/usage/actions/list/aggregate",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DeviceManagementResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceManagementResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// UpdateDeviceId takes context, serviceType, body as parameters and
// returns an models.ApiResponse with models.DeviceManagementResult data and
// an error if there was an issue with the request or response.
// Changes the identifier of a 3G or 4G device to match hardware changes made for a line of service. Use this request to transfer the line of service and the MDN to new hardware, or to change the MDN.
func (d *DeviceManagementApi) UpdateDeviceId(
    ctx context.Context,
    serviceType string,
    body models.ChangeDeviceIdRequest) (
    models.ApiResponse[models.DeviceManagementResult],
    error) {
    req := d.prepareRequest(ctx, "PUT", "/m2m/v1/devices/%v/actions/deviceId")
    req.AppendTemplateParams(serviceType)
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    
    var result models.DeviceManagementResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceManagementResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// DeviceUpload takes context, body as parameters and
// returns an models.ApiResponse with models.RequestResponse data and
// an error if there was an issue with the request or response.
// Upload a device record
func (d *DeviceManagementApi) DeviceUpload(
    ctx context.Context,
    body models.DeviceUploadRequest) (
    models.ApiResponse[models.RequestResponse],
    error) {
    req := d.prepareRequest(ctx, "POST", "/m2m/v1/devices/actions/upload")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error Response", Unmarshaller: errors.NewRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.RequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.RequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// BilledUsageInfo takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceManagementResult data and
// an error if there was an issue with the request or response.
// Gets billed usage for for either multiple devices or an entire billing account.
func (d *DeviceManagementApi) BilledUsageInfo(
    ctx context.Context,
    body models.BilledusageListRequest) (
    models.ApiResponse[models.DeviceManagementResult],
    error) {
    req := d.prepareRequest(
      ctx,
      "POST",
      "/m2m/v1/devices/usage/actions/billedusage/list",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DeviceManagementResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceManagementResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// UsageSegmentationLabelAssociation takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceManagementResult data and
// an error if there was an issue with the request or response.
// Allows you to associate your own usage segmentation label with a device.
func (d *DeviceManagementApi) UsageSegmentationLabelAssociation(
    ctx context.Context,
    body models.AssociateLabelRequest) (
    models.ApiResponse[models.DeviceManagementResult],
    error) {
    req := d.prepareRequest(
      ctx,
      "POST",
      "/m2m/v1/devices/actions/usagesegmentationlabels",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DeviceManagementResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceManagementResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// UsageSegmentationLabelDeletion takes context, accountName, labelList as parameters and
// returns an models.ApiResponse with models.DeviceManagementResult data and
// an error if there was an issue with the request or response.
// Allow customers to remove the associated label from a device.
func (d *DeviceManagementApi) UsageSegmentationLabelDeletion(
    ctx context.Context,
    accountName string,
    labelList models.LabelsList) (
    models.ApiResponse[models.DeviceManagementResult],
    error) {
    req := d.prepareRequest(
      ctx,
      "DELETE",
      "/m2m/v1/devices/actions/usagesegmentationlabels",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.QueryParam("accountName", accountName)
    req.QueryParam("LabelList", labelList)
    var result models.DeviceManagementResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceManagementResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// UploadActivateDevice takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceManagementResult data and
// an error if there was an issue with the request or response.
// Uploads and activates device identifiers and SKUs for new devices from OEMs to Verizon.
func (d *DeviceManagementApi) UploadActivateDevice(
    ctx context.Context,
    body models.UploadsActivatesDeviceRequest) (
    models.ApiResponse[models.DeviceManagementResult],
    error) {
    req := d.prepareRequest(ctx, "POST", "/m2m/v1/devices/actions/uploadactivate")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DeviceManagementResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceManagementResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// DeviceUploadStatus takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceManagementResult data and
// an error if there was an issue with the request or response.
// Checks the status of an activation order and lists where the order is in the provisioning process.
func (d *DeviceManagementApi) DeviceUploadStatus(
    ctx context.Context,
    body models.CheckOrderStatusRequest) (
    models.ApiResponse[models.DeviceManagementResult],
    error) {
    req := d.prepareRequest(ctx, "POST", "/m2m/v1/devices/requests/status")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DeviceManagementResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceManagementResult](decoder)
    return models.NewApiResponse(result, resp), err
}
