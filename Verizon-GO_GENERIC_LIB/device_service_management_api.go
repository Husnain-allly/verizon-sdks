/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// DeviceServiceManagementApi represents a controller struct.
type DeviceServiceManagementApi struct {
    baseApi
}

// NewDeviceServiceManagementApi creates a new instance of DeviceServiceManagementApi.
// It takes a baseController as a parameter and returns a pointer to the DeviceServiceManagementApi.
func NewDeviceServiceManagementApi(baseApi baseApi) *DeviceServiceManagementApi {
    deviceServiceManagementApi := DeviceServiceManagementApi{baseApi: baseApi}
    return &deviceServiceManagementApi
}

// GetDeviceHyperPreciseStatus takes context, imei, accountNumber as parameters and
// returns an models.ApiResponse with models.BullseyeServiceResult data and
// an error if there was an issue with the request or response.
// Gets the list of a status for hyper-precise location devices.
func (d *DeviceServiceManagementApi) GetDeviceHyperPreciseStatus(
    ctx context.Context,
    imei string,
    accountNumber string) (
    models.ApiResponse[models.BullseyeServiceResult],
    error) {
    req := d.prepareRequest(ctx, "GET", "/devices/services")
    
    req.BaseUrl("Hyper Precise Location")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad request.", Unmarshaller: errors.NewHyperPreciseLocationResult},
        "401": {Message: "Unauthorized request. Access token is missing or invalid.", Unmarshaller: errors.NewHyperPreciseLocationResult},
        "403": {Message: "Forbidden request.", Unmarshaller: errors.NewHyperPreciseLocationResult},
        "404": {Message: "Bad request. Not found.", Unmarshaller: errors.NewHyperPreciseLocationResult},
        "409": {Message: "Bad request. Conflict state.", Unmarshaller: errors.NewHyperPreciseLocationResult},
        "500": {Message: "Internal Server Error.", Unmarshaller: errors.NewHyperPreciseLocationResult},
    })
    req.QueryParam("imei", imei)
    req.QueryParam("accountNumber", accountNumber)
    var result models.BullseyeServiceResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.BullseyeServiceResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// UpdateDeviceHyperPreciseStatus takes context, body as parameters and
// returns an models.ApiResponse with models.BullseyeServiceResult data and
// an error if there was an issue with the request or response.
// Enable/disable hyper-precise service for a device.
func (d *DeviceServiceManagementApi) UpdateDeviceHyperPreciseStatus(
    ctx context.Context,
    body models.BullseyeServiceRequest) (
    models.ApiResponse[models.BullseyeServiceResult],
    error) {
    req := d.prepareRequest(ctx, "PUT", "/devices/services")
    
    req.BaseUrl("Hyper Precise Location")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad request.", Unmarshaller: errors.NewHyperPreciseLocationResult},
        "401": {Message: "Unauthorized request. Access token is missing or invalid.", Unmarshaller: errors.NewHyperPreciseLocationResult},
        "403": {Message: "Forbidden request.", Unmarshaller: errors.NewHyperPreciseLocationResult},
        "404": {Message: "Bad request. Not found.", Unmarshaller: errors.NewHyperPreciseLocationResult},
        "409": {Message: "Bad request. Conflict state.", Unmarshaller: errors.NewHyperPreciseLocationResult},
        "500": {Message: "Internal Server Error.", Unmarshaller: errors.NewHyperPreciseLocationResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.BullseyeServiceResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.BullseyeServiceResult](decoder)
    return models.NewApiResponse(result, resp), err
}
