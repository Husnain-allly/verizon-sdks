/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// NetworkResourcesType represents a NetworkResourcesType struct.
// Network resources of a service profile.
type NetworkResourcesType struct {
    // Minimum required connection bandwidth in Kbit/s for the application.
    MinBandwidthKbits        *int  `json:"minBandwidthKbits,omitempty"`
    // Indicates if service continuity support is required or not for the application.
    ServiceContinuitySupport *bool `json:"serviceContinuitySupport,omitempty"`
    // Maximum request rate that the application can handle.
    MaxRequestRate           *int  `json:"maxRequestRate,omitempty"`
    // Maximum response time or latency that the application can handle, in milliseconds. Note: this value must be in multiples of 5.
    MaxLatencyMs             int   `json:"maxLatencyMs"`
    // Minimum availability required for the server.
    MinAvailability          *int  `json:"minAvailability,omitempty"`
}

// String implements the fmt.Stringer interface for NetworkResourcesType,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (n NetworkResourcesType) String() string {
    return fmt.Sprintf(
    	"NetworkResourcesType[MinBandwidthKbits=%v, ServiceContinuitySupport=%v, MaxRequestRate=%v, MaxLatencyMs=%v, MinAvailability=%v]",
    	n.MinBandwidthKbits, n.ServiceContinuitySupport, n.MaxRequestRate, n.MaxLatencyMs, n.MinAvailability)
}

// MarshalJSON implements the json.Marshaler interface for NetworkResourcesType.
// It customizes the JSON marshaling process for NetworkResourcesType objects.
func (n NetworkResourcesType) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(n.toMap())
}

// toMap converts the NetworkResourcesType object to a map representation for JSON marshaling.
func (n NetworkResourcesType) toMap() map[string]any {
    structMap := make(map[string]any)
    if n.MinBandwidthKbits != nil {
        structMap["minBandwidthKbits"] = n.MinBandwidthKbits
    }
    if n.ServiceContinuitySupport != nil {
        structMap["serviceContinuitySupport"] = n.ServiceContinuitySupport
    }
    if n.MaxRequestRate != nil {
        structMap["maxRequestRate"] = n.MaxRequestRate
    }
    structMap["maxLatencyMs"] = n.MaxLatencyMs
    if n.MinAvailability != nil {
        structMap["minAvailability"] = n.MinAvailability
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for NetworkResourcesType.
// It customizes the JSON unmarshaling process for NetworkResourcesType objects.
func (n *NetworkResourcesType) UnmarshalJSON(input []byte) error {
    var temp tempNetworkResourcesType
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    n.MinBandwidthKbits = temp.MinBandwidthKbits
    n.ServiceContinuitySupport = temp.ServiceContinuitySupport
    n.MaxRequestRate = temp.MaxRequestRate
    n.MaxLatencyMs = *temp.MaxLatencyMs
    n.MinAvailability = temp.MinAvailability
    return nil
}

// tempNetworkResourcesType is a temporary struct used for validating the fields of NetworkResourcesType.
type tempNetworkResourcesType  struct {
    MinBandwidthKbits        *int  `json:"minBandwidthKbits,omitempty"`
    ServiceContinuitySupport *bool `json:"serviceContinuitySupport,omitempty"`
    MaxRequestRate           *int  `json:"maxRequestRate,omitempty"`
    MaxLatencyMs             *int  `json:"maxLatencyMs"`
    MinAvailability          *int  `json:"minAvailability,omitempty"`
}

func (n *tempNetworkResourcesType) validate() error {
    var errs []string
    if n.MaxLatencyMs == nil {
        errs = append(errs, "required field `maxLatencyMs` is missing for type `NetworkResourcesType`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
