/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// FirmwarePackage represents a FirmwarePackage struct.
// Available firmware.
type FirmwarePackage struct {
    // Firmware name.
    FirmwareName         string                   `json:"firmwareName"`
    // Firmware from version.
    FirmwareFrom         string                   `json:"firmwareFrom"`
    // Firmware to version.
    FirmwareTo           string                   `json:"firmwareTo"`
    // Firmware launch date.
    LaunchDate           time.Time                `json:"launchDate"`
    // Firmware release note.
    ReleaseNote          string                   `json:"releaseNote"`
    // Firmware applicable device model.
    Model                string                   `json:"model"`
    // Firmware applicable device make.
    Make                 string                   `json:"make"`
    // Firmware protocol. Valid values include: LWM2M, OMD-DM.
    Protocol             CampaignMetaInfoProtocol `json:"protocol"`
    AdditionalProperties map[string]interface{}   `json:"_"`
}

// String implements the fmt.Stringer interface for FirmwarePackage,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (f FirmwarePackage) String() string {
    return fmt.Sprintf(
    	"FirmwarePackage[FirmwareName=%v, FirmwareFrom=%v, FirmwareTo=%v, LaunchDate=%v, ReleaseNote=%v, Model=%v, Make=%v, Protocol=%v, AdditionalProperties=%v]",
    	f.FirmwareName, f.FirmwareFrom, f.FirmwareTo, f.LaunchDate, f.ReleaseNote, f.Model, f.Make, f.Protocol, f.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for FirmwarePackage.
// It customizes the JSON marshaling process for FirmwarePackage objects.
func (f FirmwarePackage) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(f.AdditionalProperties,
        "firmwareName", "firmwareFrom", "firmwareTo", "launchDate", "releaseNote", "model", "make", "protocol"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(f.toMap())
}

// toMap converts the FirmwarePackage object to a map representation for JSON marshaling.
func (f FirmwarePackage) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, f.AdditionalProperties)
    structMap["firmwareName"] = f.FirmwareName
    structMap["firmwareFrom"] = f.FirmwareFrom
    structMap["firmwareTo"] = f.FirmwareTo
    structMap["launchDate"] = f.LaunchDate.Format(time.RFC3339)
    structMap["releaseNote"] = f.ReleaseNote
    structMap["model"] = f.Model
    structMap["make"] = f.Make
    structMap["protocol"] = f.Protocol
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for FirmwarePackage.
// It customizes the JSON unmarshaling process for FirmwarePackage objects.
func (f *FirmwarePackage) UnmarshalJSON(input []byte) error {
    var temp tempFirmwarePackage
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "firmwareName", "firmwareFrom", "firmwareTo", "launchDate", "releaseNote", "model", "make", "protocol")
    if err != nil {
    	return err
    }
    f.AdditionalProperties = additionalProperties
    
    f.FirmwareName = *temp.FirmwareName
    f.FirmwareFrom = *temp.FirmwareFrom
    f.FirmwareTo = *temp.FirmwareTo
    LaunchDateVal, err := time.Parse(time.RFC3339, *temp.LaunchDate)
    if err != nil {
        log.Fatalf("Cannot Parse launchDate as % s format.", time.RFC3339)
    }
    f.LaunchDate = LaunchDateVal
    f.ReleaseNote = *temp.ReleaseNote
    f.Model = *temp.Model
    f.Make = *temp.Make
    f.Protocol = *temp.Protocol
    return nil
}

// tempFirmwarePackage is a temporary struct used for validating the fields of FirmwarePackage.
type tempFirmwarePackage  struct {
    FirmwareName *string                   `json:"firmwareName"`
    FirmwareFrom *string                   `json:"firmwareFrom"`
    FirmwareTo   *string                   `json:"firmwareTo"`
    LaunchDate   *string                   `json:"launchDate"`
    ReleaseNote  *string                   `json:"releaseNote"`
    Model        *string                   `json:"model"`
    Make         *string                   `json:"make"`
    Protocol     *CampaignMetaInfoProtocol `json:"protocol"`
}

func (f *tempFirmwarePackage) validate() error {
    var errs []string
    if f.FirmwareName == nil {
        errs = append(errs, "required field `firmwareName` is missing for type `FirmwarePackage`")
    }
    if f.FirmwareFrom == nil {
        errs = append(errs, "required field `firmwareFrom` is missing for type `FirmwarePackage`")
    }
    if f.FirmwareTo == nil {
        errs = append(errs, "required field `firmwareTo` is missing for type `FirmwarePackage`")
    }
    if f.LaunchDate == nil {
        errs = append(errs, "required field `launchDate` is missing for type `FirmwarePackage`")
    }
    if f.ReleaseNote == nil {
        errs = append(errs, "required field `releaseNote` is missing for type `FirmwarePackage`")
    }
    if f.Model == nil {
        errs = append(errs, "required field `model` is missing for type `FirmwarePackage`")
    }
    if f.Make == nil {
        errs = append(errs, "required field `make` is missing for type `FirmwarePackage`")
    }
    if f.Protocol == nil {
        errs = append(errs, "required field `protocol` is missing for type `FirmwarePackage`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
