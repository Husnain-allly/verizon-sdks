/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// DeviceListWithServiceAddress1 represents a DeviceListWithServiceAddress1 struct.
type DeviceListWithServiceAddress1 struct {
    DeviceId             []M5GBideviceId1        `json:"deviceId,omitempty"`
    PrimaryPlaceofuse    *M5GBiprimaryPlaceofuse `json:"primaryPlaceofuse,omitempty"`
    AdditionalProperties map[string]interface{}  `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceListWithServiceAddress1,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceListWithServiceAddress1) String() string {
    return fmt.Sprintf(
    	"DeviceListWithServiceAddress1[DeviceId=%v, PrimaryPlaceofuse=%v, AdditionalProperties=%v]",
    	d.DeviceId, d.PrimaryPlaceofuse, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceListWithServiceAddress1.
// It customizes the JSON marshaling process for DeviceListWithServiceAddress1 objects.
func (d DeviceListWithServiceAddress1) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "deviceId", "primaryPlaceofuse"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceListWithServiceAddress1 object to a map representation for JSON marshaling.
func (d DeviceListWithServiceAddress1) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    if d.DeviceId != nil {
        structMap["deviceId"] = d.DeviceId
    }
    if d.PrimaryPlaceofuse != nil {
        structMap["primaryPlaceofuse"] = d.PrimaryPlaceofuse.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceListWithServiceAddress1.
// It customizes the JSON unmarshaling process for DeviceListWithServiceAddress1 objects.
func (d *DeviceListWithServiceAddress1) UnmarshalJSON(input []byte) error {
    var temp tempDeviceListWithServiceAddress1
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceId", "primaryPlaceofuse")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.DeviceId = temp.DeviceId
    d.PrimaryPlaceofuse = temp.PrimaryPlaceofuse
    return nil
}

// tempDeviceListWithServiceAddress1 is a temporary struct used for validating the fields of DeviceListWithServiceAddress1.
type tempDeviceListWithServiceAddress1  struct {
    DeviceId          []M5GBideviceId1        `json:"deviceId,omitempty"`
    PrimaryPlaceofuse *M5GBiprimaryPlaceofuse `json:"primaryPlaceofuse,omitempty"`
}
