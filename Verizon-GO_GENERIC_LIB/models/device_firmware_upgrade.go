/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// DeviceFirmwareUpgrade represents a DeviceFirmwareUpgrade struct.
// Firmware upgrades information.
type DeviceFirmwareUpgrade struct {
    // Device identifier.
    DeviceId             string                 `json:"deviceId"`
    // Campaign identifier.
    CampaignId           string                 `json:"campaignId"`
    // Account identifier.
    AccountName          string                 `json:"accountName"`
    // Firmware name.
    FirmwareName         *string                `json:"firmwareName,omitempty"`
    // Old firmware version.
    FirmwareFrom         *string                `json:"firmwareFrom,omitempty"`
    // New firmware version.
    FirmwareTo           *string                `json:"firmwareTo,omitempty"`
    // Firmware upgrade start date.
    StartDate            time.Time              `json:"startDate"`
    // Firmware upgrade status.
    Status               string                 `json:"status"`
    // Software upgrade result reason.
    Reason               string                 `json:"reason"`
    // Report updated time.
    ReportUpdatedTime    *string                `json:"reportUpdatedTime,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceFirmwareUpgrade,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceFirmwareUpgrade) String() string {
    return fmt.Sprintf(
    	"DeviceFirmwareUpgrade[DeviceId=%v, CampaignId=%v, AccountName=%v, FirmwareName=%v, FirmwareFrom=%v, FirmwareTo=%v, StartDate=%v, Status=%v, Reason=%v, ReportUpdatedTime=%v, AdditionalProperties=%v]",
    	d.DeviceId, d.CampaignId, d.AccountName, d.FirmwareName, d.FirmwareFrom, d.FirmwareTo, d.StartDate, d.Status, d.Reason, d.ReportUpdatedTime, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceFirmwareUpgrade.
// It customizes the JSON marshaling process for DeviceFirmwareUpgrade objects.
func (d DeviceFirmwareUpgrade) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "deviceId", "campaignId", "accountName", "firmwareName", "firmwareFrom", "firmwareTo", "startDate", "status", "reason", "reportUpdatedTime"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceFirmwareUpgrade object to a map representation for JSON marshaling.
func (d DeviceFirmwareUpgrade) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    structMap["deviceId"] = d.DeviceId
    structMap["campaignId"] = d.CampaignId
    structMap["accountName"] = d.AccountName
    if d.FirmwareName != nil {
        structMap["firmwareName"] = d.FirmwareName
    }
    if d.FirmwareFrom != nil {
        structMap["firmwareFrom"] = d.FirmwareFrom
    }
    if d.FirmwareTo != nil {
        structMap["firmwareTo"] = d.FirmwareTo
    }
    structMap["startDate"] = d.StartDate.Format(DEFAULT_DATE)
    structMap["status"] = d.Status
    structMap["reason"] = d.Reason
    if d.ReportUpdatedTime != nil {
        structMap["reportUpdatedTime"] = d.ReportUpdatedTime
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceFirmwareUpgrade.
// It customizes the JSON unmarshaling process for DeviceFirmwareUpgrade objects.
func (d *DeviceFirmwareUpgrade) UnmarshalJSON(input []byte) error {
    var temp tempDeviceFirmwareUpgrade
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceId", "campaignId", "accountName", "firmwareName", "firmwareFrom", "firmwareTo", "startDate", "status", "reason", "reportUpdatedTime")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.DeviceId = *temp.DeviceId
    d.CampaignId = *temp.CampaignId
    d.AccountName = *temp.AccountName
    d.FirmwareName = temp.FirmwareName
    d.FirmwareFrom = temp.FirmwareFrom
    d.FirmwareTo = temp.FirmwareTo
    StartDateVal, err := time.Parse(DEFAULT_DATE, *temp.StartDate)
    if err != nil {
        log.Fatalf("Cannot Parse startDate as % s format.", DEFAULT_DATE)
    }
    d.StartDate = StartDateVal
    d.Status = *temp.Status
    d.Reason = *temp.Reason
    d.ReportUpdatedTime = temp.ReportUpdatedTime
    return nil
}

// tempDeviceFirmwareUpgrade is a temporary struct used for validating the fields of DeviceFirmwareUpgrade.
type tempDeviceFirmwareUpgrade  struct {
    DeviceId          *string `json:"deviceId"`
    CampaignId        *string `json:"campaignId"`
    AccountName       *string `json:"accountName"`
    FirmwareName      *string `json:"firmwareName,omitempty"`
    FirmwareFrom      *string `json:"firmwareFrom,omitempty"`
    FirmwareTo        *string `json:"firmwareTo,omitempty"`
    StartDate         *string `json:"startDate"`
    Status            *string `json:"status"`
    Reason            *string `json:"reason"`
    ReportUpdatedTime *string `json:"reportUpdatedTime,omitempty"`
}

func (d *tempDeviceFirmwareUpgrade) validate() error {
    var errs []string
    if d.DeviceId == nil {
        errs = append(errs, "required field `deviceId` is missing for type `DeviceFirmwareUpgrade`")
    }
    if d.CampaignId == nil {
        errs = append(errs, "required field `campaignId` is missing for type `DeviceFirmwareUpgrade`")
    }
    if d.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `DeviceFirmwareUpgrade`")
    }
    if d.StartDate == nil {
        errs = append(errs, "required field `startDate` is missing for type `DeviceFirmwareUpgrade`")
    }
    if d.Status == nil {
        errs = append(errs, "required field `status` is missing for type `DeviceFirmwareUpgrade`")
    }
    if d.Reason == nil {
        errs = append(errs, "required field `reason` is missing for type `DeviceFirmwareUpgrade`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
