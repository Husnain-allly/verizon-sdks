/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// ConsentRequest represents a ConsentRequest struct.
type ConsentRequest struct {
    // Account identifier in "##########-#####".
    AccountName          string                 `json:"accountName"`
    // Exclude all devices or not.
    AllDevice            *bool                  `json:"allDevice,omitempty"`
    // The change to make: append or replace.
    Type                 *string                `json:"type,omitempty"`
    // Device ID list.
    Exclusion            []string               `json:"exclusion,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for ConsentRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c ConsentRequest) String() string {
    return fmt.Sprintf(
    	"ConsentRequest[AccountName=%v, AllDevice=%v, Type=%v, Exclusion=%v, AdditionalProperties=%v]",
    	c.AccountName, c.AllDevice, c.Type, c.Exclusion, c.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for ConsentRequest.
// It customizes the JSON marshaling process for ConsentRequest objects.
func (c ConsentRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(c.AdditionalProperties,
        "accountName", "allDevice", "type", "exclusion"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(c.toMap())
}

// toMap converts the ConsentRequest object to a map representation for JSON marshaling.
func (c ConsentRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, c.AdditionalProperties)
    structMap["accountName"] = c.AccountName
    if c.AllDevice != nil {
        structMap["allDevice"] = c.AllDevice
    }
    if c.Type != nil {
        structMap["type"] = c.Type
    }
    if c.Exclusion != nil {
        structMap["exclusion"] = c.Exclusion
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ConsentRequest.
// It customizes the JSON unmarshaling process for ConsentRequest objects.
func (c *ConsentRequest) UnmarshalJSON(input []byte) error {
    var temp tempConsentRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "allDevice", "type", "exclusion")
    if err != nil {
    	return err
    }
    c.AdditionalProperties = additionalProperties
    
    c.AccountName = *temp.AccountName
    c.AllDevice = temp.AllDevice
    c.Type = temp.Type
    c.Exclusion = temp.Exclusion
    return nil
}

// tempConsentRequest is a temporary struct used for validating the fields of ConsentRequest.
type tempConsentRequest  struct {
    AccountName *string  `json:"accountName"`
    AllDevice   *bool    `json:"allDevice,omitempty"`
    Type        *string  `json:"type,omitempty"`
    Exclusion   []string `json:"exclusion,omitempty"`
}

func (c *tempConsentRequest) validate() error {
    var errs []string
    if c.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `ConsentRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
