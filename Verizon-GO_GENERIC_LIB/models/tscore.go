/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// Tscore represents a Tscore struct.
type Tscore struct {
    // the UUID of the profile
    Profileid            *string                `json:"profileid,omitempty"`
    // the UUID of the profile version
    Profileversionid     *string                `json:"profileversionid,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for Tscore,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (t Tscore) String() string {
    return fmt.Sprintf(
    	"Tscore[Profileid=%v, Profileversionid=%v, AdditionalProperties=%v]",
    	t.Profileid, t.Profileversionid, t.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for Tscore.
// It customizes the JSON marshaling process for Tscore objects.
func (t Tscore) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(t.AdditionalProperties,
        "profileid", "profileversionid"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(t.toMap())
}

// toMap converts the Tscore object to a map representation for JSON marshaling.
func (t Tscore) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, t.AdditionalProperties)
    if t.Profileid != nil {
        structMap["profileid"] = t.Profileid
    }
    if t.Profileversionid != nil {
        structMap["profileversionid"] = t.Profileversionid
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Tscore.
// It customizes the JSON unmarshaling process for Tscore objects.
func (t *Tscore) UnmarshalJSON(input []byte) error {
    var temp tempTscore
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "profileid", "profileversionid")
    if err != nil {
    	return err
    }
    t.AdditionalProperties = additionalProperties
    
    t.Profileid = temp.Profileid
    t.Profileversionid = temp.Profileversionid
    return nil
}

// tempTscore is a temporary struct used for validating the fields of Tscore.
type tempTscore  struct {
    Profileid        *string `json:"profileid,omitempty"`
    Profileversionid *string `json:"profileversionid,omitempty"`
}
