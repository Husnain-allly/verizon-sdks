/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// CheckInHistoryItem represents a CheckInHistoryItem struct.
// Check-in history for a device.
type CheckInHistoryItem struct {
    // Device IMEI.
    DeviceId             string                 `json:"deviceId"`
    // Type of client.
    ClientType           string                 `json:"clientType"`
    Result               string                 `json:"result"`
    FailureType          string                 `json:"failureType"`
    TimeCompleted        time.Time              `json:"timeCompleted"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for CheckInHistoryItem,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c CheckInHistoryItem) String() string {
    return fmt.Sprintf(
    	"CheckInHistoryItem[DeviceId=%v, ClientType=%v, Result=%v, FailureType=%v, TimeCompleted=%v, AdditionalProperties=%v]",
    	c.DeviceId, c.ClientType, c.Result, c.FailureType, c.TimeCompleted, c.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for CheckInHistoryItem.
// It customizes the JSON marshaling process for CheckInHistoryItem objects.
func (c CheckInHistoryItem) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(c.AdditionalProperties,
        "deviceId", "clientType", "result", "failureType", "timeCompleted"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(c.toMap())
}

// toMap converts the CheckInHistoryItem object to a map representation for JSON marshaling.
func (c CheckInHistoryItem) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, c.AdditionalProperties)
    structMap["deviceId"] = c.DeviceId
    structMap["clientType"] = c.ClientType
    structMap["result"] = c.Result
    structMap["failureType"] = c.FailureType
    structMap["timeCompleted"] = c.TimeCompleted.Format(time.RFC3339)
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for CheckInHistoryItem.
// It customizes the JSON unmarshaling process for CheckInHistoryItem objects.
func (c *CheckInHistoryItem) UnmarshalJSON(input []byte) error {
    var temp tempCheckInHistoryItem
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceId", "clientType", "result", "failureType", "timeCompleted")
    if err != nil {
    	return err
    }
    c.AdditionalProperties = additionalProperties
    
    c.DeviceId = *temp.DeviceId
    c.ClientType = *temp.ClientType
    c.Result = *temp.Result
    c.FailureType = *temp.FailureType
    TimeCompletedVal, err := time.Parse(time.RFC3339, *temp.TimeCompleted)
    if err != nil {
        log.Fatalf("Cannot Parse timeCompleted as % s format.", time.RFC3339)
    }
    c.TimeCompleted = TimeCompletedVal
    return nil
}

// tempCheckInHistoryItem is a temporary struct used for validating the fields of CheckInHistoryItem.
type tempCheckInHistoryItem  struct {
    DeviceId      *string `json:"deviceId"`
    ClientType    *string `json:"clientType"`
    Result        *string `json:"result"`
    FailureType   *string `json:"failureType"`
    TimeCompleted *string `json:"timeCompleted"`
}

func (c *tempCheckInHistoryItem) validate() error {
    var errs []string
    if c.DeviceId == nil {
        errs = append(errs, "required field `deviceId` is missing for type `CheckInHistoryItem`")
    }
    if c.ClientType == nil {
        errs = append(errs, "required field `clientType` is missing for type `CheckInHistoryItem`")
    }
    if c.Result == nil {
        errs = append(errs, "required field `result` is missing for type `CheckInHistoryItem`")
    }
    if c.FailureType == nil {
        errs = append(errs, "required field `failureType` is missing for type `CheckInHistoryItem`")
    }
    if c.TimeCompleted == nil {
        errs = append(errs, "required field `timeCompleted` is missing for type `CheckInHistoryItem`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
