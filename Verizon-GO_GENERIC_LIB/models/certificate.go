/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// Certificate represents a Certificate struct.
// Structure for the credentials required to connect to the ETX MQTT Message Exchange.
type Certificate struct {
    // The string containing the certificate
    CertPem        string    `json:"cert.pem"`
    // The string containing the private key
    KeyPem         string    `json:"key.pem"`
    // The string containing the CA certificate
    CaPem          string    `json:"ca.pem"`
    // The string describing the expiration timestamp of the certificate
    ExpirationTime time.Time `json:"ExpirationTime"`
}

// String implements the fmt.Stringer interface for Certificate,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c Certificate) String() string {
    return fmt.Sprintf(
    	"Certificate[CertPem=%v, KeyPem=%v, CaPem=%v, ExpirationTime=%v]",
    	c.CertPem, c.KeyPem, c.CaPem, c.ExpirationTime)
}

// MarshalJSON implements the json.Marshaler interface for Certificate.
// It customizes the JSON marshaling process for Certificate objects.
func (c Certificate) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(c.toMap())
}

// toMap converts the Certificate object to a map representation for JSON marshaling.
func (c Certificate) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["cert.pem"] = c.CertPem
    structMap["key.pem"] = c.KeyPem
    structMap["ca.pem"] = c.CaPem
    structMap["ExpirationTime"] = c.ExpirationTime.Format(time.RFC3339)
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Certificate.
// It customizes the JSON unmarshaling process for Certificate objects.
func (c *Certificate) UnmarshalJSON(input []byte) error {
    var temp tempCertificate
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    c.CertPem = *temp.CertPem
    c.KeyPem = *temp.KeyPem
    c.CaPem = *temp.CaPem
    ExpirationTimeVal, err := time.Parse(time.RFC3339, *temp.ExpirationTime)
    if err != nil {
        log.Fatalf("Cannot Parse ExpirationTime as % s format.", time.RFC3339)
    }
    c.ExpirationTime = ExpirationTimeVal
    return nil
}

// tempCertificate is a temporary struct used for validating the fields of Certificate.
type tempCertificate  struct {
    CertPem        *string `json:"cert.pem"`
    KeyPem         *string `json:"key.pem"`
    CaPem          *string `json:"ca.pem"`
    ExpirationTime *string `json:"ExpirationTime"`
}

func (c *tempCertificate) validate() error {
    var errs []string
    if c.CertPem == nil {
        errs = append(errs, "required field `cert.pem` is missing for type `Certificate`")
    }
    if c.KeyPem == nil {
        errs = append(errs, "required field `key.pem` is missing for type `Certificate`")
    }
    if c.CaPem == nil {
        errs = append(errs, "required field `ca.pem` is missing for type `Certificate`")
    }
    if c.ExpirationTime == nil {
        errs = append(errs, "required field `ExpirationTime` is missing for type `Certificate`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
