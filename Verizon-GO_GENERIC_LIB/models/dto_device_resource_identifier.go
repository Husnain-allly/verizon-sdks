/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// DtoDeviceResourceIdentifier represents a DtoDeviceResourceIdentifier struct.
// Device identifiers, one or more are required
type DtoDeviceResourceIdentifier struct {
    // the IEEE EUI64 address space used to identify a device. It is supplied by the device manufacturer
    Deveui       *string `json:"deveui,omitempty"`
    // This is a UUID value of the device created when the device is onboarded
    Deviceid     *string `json:"deviceid,omitempty"`
    // The Electronic Serial Number (ESN) of the device
    Esn          *int    `json:"esn,omitempty"`
    // The 20-digit Integrated Circuit Card ID (SIM card ID)
    Iccid        *string `json:"iccid,omitempty"`
    // The 15-digit International Mobile Equipment ID
    Imei         *int    `json:"imei,omitempty"`
    // The 64-bit International Mobile Subscriber Identity
    Imsi         *int    `json:"imsi,omitempty"`
    // The Media Access Control address of the device, listed on the device in the format XX-XX-XX-XX-XX-XX or XX:XX:XX:XX:XX:XX
    Mac          *string `json:"mac,omitempty"`
    // The manufacturer of the device
    Manufacturer *string `json:"manufacturer,omitempty"`
    // The 56-bit Mobile Equipment ID
    Meid         *string `json:"meid,omitempty"`
    // The Mobile Station International Subscriber Directory Number. In the USA, this is 1+ a 10-digit phone number
    Msisdn       *string `json:"msisdn,omitempty"`
    // The UUID of the node the device is associated with
    NodeUuid     *string `json:"node_uuid,omitempty"`
    // The numeric value of the Quick Response (QR) code
    Qrcode       *string `json:"qrcode,omitempty"`
    // The device's serial number
    Serial       *string `json:"serial,omitempty"`
}

// String implements the fmt.Stringer interface for DtoDeviceResourceIdentifier,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DtoDeviceResourceIdentifier) String() string {
    return fmt.Sprintf(
    	"DtoDeviceResourceIdentifier[Deveui=%v, Deviceid=%v, Esn=%v, Iccid=%v, Imei=%v, Imsi=%v, Mac=%v, Manufacturer=%v, Meid=%v, Msisdn=%v, NodeUuid=%v, Qrcode=%v, Serial=%v]",
    	d.Deveui, d.Deviceid, d.Esn, d.Iccid, d.Imei, d.Imsi, d.Mac, d.Manufacturer, d.Meid, d.Msisdn, d.NodeUuid, d.Qrcode, d.Serial)
}

// MarshalJSON implements the json.Marshaler interface for DtoDeviceResourceIdentifier.
// It customizes the JSON marshaling process for DtoDeviceResourceIdentifier objects.
func (d DtoDeviceResourceIdentifier) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(d.toMap())
}

// toMap converts the DtoDeviceResourceIdentifier object to a map representation for JSON marshaling.
func (d DtoDeviceResourceIdentifier) toMap() map[string]any {
    structMap := make(map[string]any)
    if d.Deveui != nil {
        structMap["deveui"] = d.Deveui
    }
    if d.Deviceid != nil {
        structMap["deviceid"] = d.Deviceid
    }
    if d.Esn != nil {
        structMap["esn"] = d.Esn
    }
    if d.Iccid != nil {
        structMap["iccid"] = d.Iccid
    }
    if d.Imei != nil {
        structMap["imei"] = d.Imei
    }
    if d.Imsi != nil {
        structMap["imsi"] = d.Imsi
    }
    if d.Mac != nil {
        structMap["mac"] = d.Mac
    }
    if d.Manufacturer != nil {
        structMap["manufacturer"] = d.Manufacturer
    }
    if d.Meid != nil {
        structMap["meid"] = d.Meid
    }
    if d.Msisdn != nil {
        structMap["msisdn"] = d.Msisdn
    }
    if d.NodeUuid != nil {
        structMap["node_uuid"] = d.NodeUuid
    }
    if d.Qrcode != nil {
        structMap["qrcode"] = d.Qrcode
    }
    if d.Serial != nil {
        structMap["serial"] = d.Serial
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DtoDeviceResourceIdentifier.
// It customizes the JSON unmarshaling process for DtoDeviceResourceIdentifier objects.
func (d *DtoDeviceResourceIdentifier) UnmarshalJSON(input []byte) error {
    var temp tempDtoDeviceResourceIdentifier
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    
    d.Deveui = temp.Deveui
    d.Deviceid = temp.Deviceid
    d.Esn = temp.Esn
    d.Iccid = temp.Iccid
    d.Imei = temp.Imei
    d.Imsi = temp.Imsi
    d.Mac = temp.Mac
    d.Manufacturer = temp.Manufacturer
    d.Meid = temp.Meid
    d.Msisdn = temp.Msisdn
    d.NodeUuid = temp.NodeUuid
    d.Qrcode = temp.Qrcode
    d.Serial = temp.Serial
    return nil
}

// tempDtoDeviceResourceIdentifier is a temporary struct used for validating the fields of DtoDeviceResourceIdentifier.
type tempDtoDeviceResourceIdentifier  struct {
    Deveui       *string `json:"deveui,omitempty"`
    Deviceid     *string `json:"deviceid,omitempty"`
    Esn          *int    `json:"esn,omitempty"`
    Iccid        *string `json:"iccid,omitempty"`
    Imei         *int    `json:"imei,omitempty"`
    Imsi         *int    `json:"imsi,omitempty"`
    Mac          *string `json:"mac,omitempty"`
    Manufacturer *string `json:"manufacturer,omitempty"`
    Meid         *string `json:"meid,omitempty"`
    Msisdn       *string `json:"msisdn,omitempty"`
    NodeUuid     *string `json:"node_uuid,omitempty"`
    Qrcode       *string `json:"qrcode,omitempty"`
    Serial       *string `json:"serial,omitempty"`
}
