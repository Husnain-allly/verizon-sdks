/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// MessageBase represents a MessageBase struct.
type MessageBase struct {
    // Defines whether the message is private or public.
    // Private messages are published under the Vendor ID defined in the configuration and only visible to devices of selected vendors.
    // Public messages are published under the Public vendor and are visible to all the users.
    IsPrivate            bool                   `json:"isPrivate"`
    // Type of the Road User.
    RoadUserType         []RoadUserTypes        `json:"roadUserType"`
    // Trigger conditions that define on which road user action the message will be sent. If multiple Trigger Conditions are defined any of them will trigger the message.
    TriggerConditions    []TriggerCondition     `json:"triggerConditions,omitempty"`
    // List of limitations. These limitations can be used for making the trigger condition more precise by defining speed and motion direction requirements to be met before the messages are sent out.
    Limits               []interface{}          `json:"limits,omitempty"`
    // Type of the distribution.
    DistributionType     []DistributionTypes    `json:"distributionType,omitempty"`
    // The distribution schedule parameters for broadcast messages.
    DistributionSchedule *DistributionSchedule  `json:"distributionSchedule,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for MessageBase,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (m MessageBase) String() string {
    return fmt.Sprintf(
    	"MessageBase[IsPrivate=%v, RoadUserType=%v, TriggerConditions=%v, Limits=%v, DistributionType=%v, DistributionSchedule=%v, AdditionalProperties=%v]",
    	m.IsPrivate, m.RoadUserType, m.TriggerConditions, m.Limits, m.DistributionType, m.DistributionSchedule, m.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for MessageBase.
// It customizes the JSON marshaling process for MessageBase objects.
func (m MessageBase) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(m.AdditionalProperties,
        "isPrivate", "roadUserType", "triggerConditions", "limits", "distributionType", "distributionSchedule"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(m.toMap())
}

// toMap converts the MessageBase object to a map representation for JSON marshaling.
func (m MessageBase) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, m.AdditionalProperties)
    structMap["isPrivate"] = m.IsPrivate
    structMap["roadUserType"] = m.RoadUserType
    if m.TriggerConditions != nil {
        structMap["triggerConditions"] = m.TriggerConditions
    }
    if m.Limits != nil {
        structMap["limits"] = m.Limits
    }
    if m.DistributionType != nil {
        structMap["distributionType"] = m.DistributionType
    }
    if m.DistributionSchedule != nil {
        structMap["distributionSchedule"] = m.DistributionSchedule.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for MessageBase.
// It customizes the JSON unmarshaling process for MessageBase objects.
func (m *MessageBase) UnmarshalJSON(input []byte) error {
    var temp tempMessageBase
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "isPrivate", "roadUserType", "triggerConditions", "limits", "distributionType", "distributionSchedule")
    if err != nil {
    	return err
    }
    m.AdditionalProperties = additionalProperties
    
    m.IsPrivate = *temp.IsPrivate
    m.RoadUserType = *temp.RoadUserType
    m.TriggerConditions = temp.TriggerConditions
    m.Limits = temp.Limits
    m.DistributionType = temp.DistributionType
    m.DistributionSchedule = temp.DistributionSchedule
    return nil
}

// tempMessageBase is a temporary struct used for validating the fields of MessageBase.
type tempMessageBase  struct {
    IsPrivate            *bool                 `json:"isPrivate"`
    RoadUserType         *[]RoadUserTypes      `json:"roadUserType"`
    TriggerConditions    []TriggerCondition    `json:"triggerConditions,omitempty"`
    Limits               []interface{}         `json:"limits,omitempty"`
    DistributionType     []DistributionTypes   `json:"distributionType,omitempty"`
    DistributionSchedule *DistributionSchedule `json:"distributionSchedule,omitempty"`
}

func (m *tempMessageBase) validate() error {
    var errs []string
    if m.IsPrivate == nil {
        errs = append(errs, "required field `isPrivate` is missing for type `MessageBase`")
    }
    if m.RoadUserType == nil {
        errs = append(errs, "required field `roadUserType` is missing for type `MessageBase`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
