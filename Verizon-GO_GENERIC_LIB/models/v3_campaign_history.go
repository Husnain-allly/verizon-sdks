/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// V3CampaignHistory represents a V3CampaignHistory struct.
// Campaign history.
type V3CampaignHistory struct {
    // Has more report flag?
    HasMoreData          bool                   `json:"hasMoreData"`
    // Campaign identifier.
    LastSeenCampaignId   *string                `json:"lastSeenCampaignId,omitempty"`
    // Firmware upgrade list.
    CampaignList         []V3CampaignMetaInfo   `json:"campaignList"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for V3CampaignHistory,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (v V3CampaignHistory) String() string {
    return fmt.Sprintf(
    	"V3CampaignHistory[HasMoreData=%v, LastSeenCampaignId=%v, CampaignList=%v, AdditionalProperties=%v]",
    	v.HasMoreData, v.LastSeenCampaignId, v.CampaignList, v.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for V3CampaignHistory.
// It customizes the JSON marshaling process for V3CampaignHistory objects.
func (v V3CampaignHistory) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(v.AdditionalProperties,
        "hasMoreData", "lastSeenCampaignId", "campaignList"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(v.toMap())
}

// toMap converts the V3CampaignHistory object to a map representation for JSON marshaling.
func (v V3CampaignHistory) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, v.AdditionalProperties)
    structMap["hasMoreData"] = v.HasMoreData
    if v.LastSeenCampaignId != nil {
        structMap["lastSeenCampaignId"] = v.LastSeenCampaignId
    }
    if v.CampaignList != nil {
        structMap["campaignList"] = v.CampaignList
    } else {
        structMap["campaignList"] = nil
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for V3CampaignHistory.
// It customizes the JSON unmarshaling process for V3CampaignHistory objects.
func (v *V3CampaignHistory) UnmarshalJSON(input []byte) error {
    var temp tempV3CampaignHistory
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "hasMoreData", "lastSeenCampaignId", "campaignList")
    if err != nil {
    	return err
    }
    v.AdditionalProperties = additionalProperties
    
    v.HasMoreData = *temp.HasMoreData
    v.LastSeenCampaignId = temp.LastSeenCampaignId
    v.CampaignList = temp.CampaignList
    return nil
}

// tempV3CampaignHistory is a temporary struct used for validating the fields of V3CampaignHistory.
type tempV3CampaignHistory  struct {
    HasMoreData        *bool                `json:"hasMoreData"`
    LastSeenCampaignId *string              `json:"lastSeenCampaignId,omitempty"`
    CampaignList       []V3CampaignMetaInfo `json:"campaignList"`
}

func (v *tempV3CampaignHistory) validate() error {
    var errs []string
    if v.HasMoreData == nil {
        errs = append(errs, "required field `hasMoreData` is missing for type `V3CampaignHistory`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
