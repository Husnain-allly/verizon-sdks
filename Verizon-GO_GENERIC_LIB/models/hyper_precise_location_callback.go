/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// HyperPreciseLocationCallback represents a HyperPreciseLocationCallback struct.
// Callback registration request.
type HyperPreciseLocationCallback struct {
    // The name of the callback service that you want to subscribe to.
    Name                 string                 `json:"name"`
    // The address on your server where you have enabled a listening service for the specific type of callback messages. Specify a URL that is reachable from the Verizon data centers. If your service is running on HTTPS, you should use a one-way authentication certificate with a white-listed IP address.
    Url                  string                 `json:"url"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for HyperPreciseLocationCallback,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (h HyperPreciseLocationCallback) String() string {
    return fmt.Sprintf(
    	"HyperPreciseLocationCallback[Name=%v, Url=%v, AdditionalProperties=%v]",
    	h.Name, h.Url, h.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for HyperPreciseLocationCallback.
// It customizes the JSON marshaling process for HyperPreciseLocationCallback objects.
func (h HyperPreciseLocationCallback) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(h.AdditionalProperties,
        "name", "url"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(h.toMap())
}

// toMap converts the HyperPreciseLocationCallback object to a map representation for JSON marshaling.
func (h HyperPreciseLocationCallback) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, h.AdditionalProperties)
    structMap["name"] = h.Name
    structMap["url"] = h.Url
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for HyperPreciseLocationCallback.
// It customizes the JSON unmarshaling process for HyperPreciseLocationCallback objects.
func (h *HyperPreciseLocationCallback) UnmarshalJSON(input []byte) error {
    var temp tempHyperPreciseLocationCallback
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "name", "url")
    if err != nil {
    	return err
    }
    h.AdditionalProperties = additionalProperties
    
    h.Name = *temp.Name
    h.Url = *temp.Url
    return nil
}

// tempHyperPreciseLocationCallback is a temporary struct used for validating the fields of HyperPreciseLocationCallback.
type tempHyperPreciseLocationCallback  struct {
    Name *string `json:"name"`
    Url  *string `json:"url"`
}

func (h *tempHyperPreciseLocationCallback) validate() error {
    var errs []string
    if h.Name == nil {
        errs = append(errs, "required field `name` is missing for type `HyperPreciseLocationCallback`")
    }
    if h.Url == nil {
        errs = append(errs, "required field `url` is missing for type `HyperPreciseLocationCallback`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
