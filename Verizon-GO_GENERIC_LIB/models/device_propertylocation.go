/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// DevicePropertylocation represents a DevicePropertylocation struct.
type DevicePropertylocation struct {
    Latitude             *string                `json:"latitude,omitempty"`
    Longitude            *string                `json:"longitude,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DevicePropertylocation,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DevicePropertylocation) String() string {
    return fmt.Sprintf(
    	"DevicePropertylocation[Latitude=%v, Longitude=%v, AdditionalProperties=%v]",
    	d.Latitude, d.Longitude, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DevicePropertylocation.
// It customizes the JSON marshaling process for DevicePropertylocation objects.
func (d DevicePropertylocation) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "latitude", "longitude"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DevicePropertylocation object to a map representation for JSON marshaling.
func (d DevicePropertylocation) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    if d.Latitude != nil {
        structMap["latitude"] = d.Latitude
    }
    if d.Longitude != nil {
        structMap["longitude"] = d.Longitude
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DevicePropertylocation.
// It customizes the JSON unmarshaling process for DevicePropertylocation objects.
func (d *DevicePropertylocation) UnmarshalJSON(input []byte) error {
    var temp tempDevicePropertylocation
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "latitude", "longitude")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.Latitude = temp.Latitude
    d.Longitude = temp.Longitude
    return nil
}

// tempDevicePropertylocation is a temporary struct used for validating the fields of DevicePropertylocation.
type tempDevicePropertylocation  struct {
    Latitude  *string `json:"latitude,omitempty"`
    Longitude *string `json:"longitude,omitempty"`
}
