/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// ConnectionEvent represents a ConnectionEvent struct.
// Network connection events for a device during a specified time period.
type ConnectionEvent struct {
    // The attributes that describe the connection event.
    ConnectionEventAttributes []CustomFields         `json:"connectionEventAttributes,omitempty"`
    // Currently not used.
    ExtendedAttributes        []CustomFields         `json:"extendedAttributes,omitempty"`
    // The date and time when the connection event occured.
    OccurredAt                *string                `json:"occurredAt,omitempty"`
    AdditionalProperties      map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for ConnectionEvent,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c ConnectionEvent) String() string {
    return fmt.Sprintf(
    	"ConnectionEvent[ConnectionEventAttributes=%v, ExtendedAttributes=%v, OccurredAt=%v, AdditionalProperties=%v]",
    	c.ConnectionEventAttributes, c.ExtendedAttributes, c.OccurredAt, c.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for ConnectionEvent.
// It customizes the JSON marshaling process for ConnectionEvent objects.
func (c ConnectionEvent) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(c.AdditionalProperties,
        "connectionEventAttributes", "extendedAttributes", "occurredAt"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(c.toMap())
}

// toMap converts the ConnectionEvent object to a map representation for JSON marshaling.
func (c ConnectionEvent) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, c.AdditionalProperties)
    if c.ConnectionEventAttributes != nil {
        structMap["connectionEventAttributes"] = c.ConnectionEventAttributes
    }
    if c.ExtendedAttributes != nil {
        structMap["extendedAttributes"] = c.ExtendedAttributes
    }
    if c.OccurredAt != nil {
        structMap["occurredAt"] = c.OccurredAt
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ConnectionEvent.
// It customizes the JSON unmarshaling process for ConnectionEvent objects.
func (c *ConnectionEvent) UnmarshalJSON(input []byte) error {
    var temp tempConnectionEvent
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "connectionEventAttributes", "extendedAttributes", "occurredAt")
    if err != nil {
    	return err
    }
    c.AdditionalProperties = additionalProperties
    
    c.ConnectionEventAttributes = temp.ConnectionEventAttributes
    c.ExtendedAttributes = temp.ExtendedAttributes
    c.OccurredAt = temp.OccurredAt
    return nil
}

// tempConnectionEvent is a temporary struct used for validating the fields of ConnectionEvent.
type tempConnectionEvent  struct {
    ConnectionEventAttributes []CustomFields `json:"connectionEventAttributes,omitempty"`
    ExtendedAttributes        []CustomFields `json:"extendedAttributes,omitempty"`
    OccurredAt                *string        `json:"occurredAt,omitempty"`
}
