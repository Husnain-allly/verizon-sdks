/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// FirmwareUpgradeRequest represents a FirmwareUpgradeRequest struct.
// Details of the firmware upgrade request.
type FirmwareUpgradeRequest struct {
    // Account identifier in "##########-#####".
    AccountName          string                 `json:"accountName"`
    // The name of the firmware image that will be used for the upgrade, from a GET /firmware response.
    FirmwareName         string                 `json:"firmwareName"`
    // The name of the firmware version that will be on the devices after a successful upgrade.
    FirmwareTo           string                 `json:"firmwareTo"`
    // The date that the upgrade begins.
    StartDate            time.Time              `json:"startDate"`
    // The date that the upgrade ends.
    EndDate              time.Time              `json:"endDate"`
    // The IMEIs of the devices.
    DeviceList           []string               `json:"deviceList"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for FirmwareUpgradeRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (f FirmwareUpgradeRequest) String() string {
    return fmt.Sprintf(
    	"FirmwareUpgradeRequest[AccountName=%v, FirmwareName=%v, FirmwareTo=%v, StartDate=%v, EndDate=%v, DeviceList=%v, AdditionalProperties=%v]",
    	f.AccountName, f.FirmwareName, f.FirmwareTo, f.StartDate, f.EndDate, f.DeviceList, f.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for FirmwareUpgradeRequest.
// It customizes the JSON marshaling process for FirmwareUpgradeRequest objects.
func (f FirmwareUpgradeRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(f.AdditionalProperties,
        "accountName", "firmwareName", "firmwareTo", "startDate", "endDate", "deviceList"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(f.toMap())
}

// toMap converts the FirmwareUpgradeRequest object to a map representation for JSON marshaling.
func (f FirmwareUpgradeRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, f.AdditionalProperties)
    structMap["accountName"] = f.AccountName
    structMap["firmwareName"] = f.FirmwareName
    structMap["firmwareTo"] = f.FirmwareTo
    structMap["startDate"] = f.StartDate.Format(DEFAULT_DATE)
    structMap["endDate"] = f.EndDate.Format(DEFAULT_DATE)
    structMap["deviceList"] = f.DeviceList
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for FirmwareUpgradeRequest.
// It customizes the JSON unmarshaling process for FirmwareUpgradeRequest objects.
func (f *FirmwareUpgradeRequest) UnmarshalJSON(input []byte) error {
    var temp tempFirmwareUpgradeRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "firmwareName", "firmwareTo", "startDate", "endDate", "deviceList")
    if err != nil {
    	return err
    }
    f.AdditionalProperties = additionalProperties
    
    f.AccountName = *temp.AccountName
    f.FirmwareName = *temp.FirmwareName
    f.FirmwareTo = *temp.FirmwareTo
    StartDateVal, err := time.Parse(DEFAULT_DATE, *temp.StartDate)
    if err != nil {
        log.Fatalf("Cannot Parse startDate as % s format.", DEFAULT_DATE)
    }
    f.StartDate = StartDateVal
    EndDateVal, err := time.Parse(DEFAULT_DATE, *temp.EndDate)
    if err != nil {
        log.Fatalf("Cannot Parse endDate as % s format.", DEFAULT_DATE)
    }
    f.EndDate = EndDateVal
    f.DeviceList = *temp.DeviceList
    return nil
}

// tempFirmwareUpgradeRequest is a temporary struct used for validating the fields of FirmwareUpgradeRequest.
type tempFirmwareUpgradeRequest  struct {
    AccountName  *string   `json:"accountName"`
    FirmwareName *string   `json:"firmwareName"`
    FirmwareTo   *string   `json:"firmwareTo"`
    StartDate    *string   `json:"startDate"`
    EndDate      *string   `json:"endDate"`
    DeviceList   *[]string `json:"deviceList"`
}

func (f *tempFirmwareUpgradeRequest) validate() error {
    var errs []string
    if f.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `FirmwareUpgradeRequest`")
    }
    if f.FirmwareName == nil {
        errs = append(errs, "required field `firmwareName` is missing for type `FirmwareUpgradeRequest`")
    }
    if f.FirmwareTo == nil {
        errs = append(errs, "required field `firmwareTo` is missing for type `FirmwareUpgradeRequest`")
    }
    if f.StartDate == nil {
        errs = append(errs, "required field `startDate` is missing for type `FirmwareUpgradeRequest`")
    }
    if f.EndDate == nil {
        errs = append(errs, "required field `endDate` is missing for type `FirmwareUpgradeRequest`")
    }
    if f.DeviceList == nil {
        errs = append(errs, "required field `deviceList` is missing for type `FirmwareUpgradeRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
