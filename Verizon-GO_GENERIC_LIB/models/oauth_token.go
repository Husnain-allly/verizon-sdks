/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "strings"
)

// OauthToken represents a OauthToken struct.
// OAuth 2 Authorization endpoint response
type OauthToken struct {
    // Access token
    AccessToken  string  `json:"access_token"`
    // Type of access token
    TokenType    string  `json:"token_type"`
    // Time in seconds before the access token expires
    ExpiresIn    *int64  `json:"expires_in,omitempty"`
    // List of scopes granted
    // This is a space-delimited list of strings.
    Scope        *string `json:"scope,omitempty"`
    // Time of token expiry as unix timestamp (UTC)
    Expiry       *int64  `json:"expiry,omitempty"`
    // Refresh token
    // Used to get a new access token when it expires.
    RefreshToken *string `json:"refresh_token,omitempty"`
}

// MarshalJSON implements the json.Marshaler interface for OauthToken.
// It customizes the JSON marshaling process for OauthToken objects.
func (o OauthToken) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(o.toMap())
}

// toMap converts the OauthToken object to a map representation for JSON marshaling.
func (o OauthToken) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["access_token"] = o.AccessToken
    structMap["token_type"] = o.TokenType
    if o.ExpiresIn != nil {
        structMap["expires_in"] = o.ExpiresIn
    }
    if o.Scope != nil {
        structMap["scope"] = o.Scope
    }
    if o.Expiry != nil {
        structMap["expiry"] = o.Expiry
    }
    if o.RefreshToken != nil {
        structMap["refresh_token"] = o.RefreshToken
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for OauthToken.
// It customizes the JSON unmarshaling process for OauthToken objects.
func (o *OauthToken) UnmarshalJSON(input []byte) error {
    var temp tempOauthToken
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    o.AccessToken = *temp.AccessToken
    o.TokenType = *temp.TokenType
    o.ExpiresIn = temp.ExpiresIn
    o.Scope = temp.Scope
    o.Expiry = temp.Expiry
    o.RefreshToken = temp.RefreshToken
    return nil
}

// tempOauthToken is a temporary struct used for validating the fields of OauthToken.
type tempOauthToken  struct {
    AccessToken  *string `json:"access_token"`
    TokenType    *string `json:"token_type"`
    ExpiresIn    *int64  `json:"expires_in,omitempty"`
    Scope        *string `json:"scope,omitempty"`
    Expiry       *int64  `json:"expiry,omitempty"`
    RefreshToken *string `json:"refresh_token,omitempty"`
}

func (o *tempOauthToken) validate() error {
    var errs []string
    if o.AccessToken == nil {
        errs = append(errs, "required field `access_token` is missing for type `OAuthToken`")
    }
    if o.TokenType == nil {
        errs = append(errs, "required field `token_type` is missing for type `OAuthToken`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
