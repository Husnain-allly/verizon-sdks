/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// DeactivateDeviceProfileRequest represents a DeactivateDeviceProfileRequest struct.
type DeactivateDeviceProfileRequest struct {
    AccountName          string                 `json:"accountName"`
    ReasonCode           string                 `json:"reasonCode"`
    Devices              []DeactivateDeviceList `json:"devices,omitempty"`
    CarrierName          *string                `json:"carrierName,omitempty"`
    EtfWaiver            *bool                  `json:"etfWaiver,omitempty"`
    CheckFallbackProfile *bool                  `json:"checkFallbackProfile,omitempty"`
}

// String implements the fmt.Stringer interface for DeactivateDeviceProfileRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeactivateDeviceProfileRequest) String() string {
    return fmt.Sprintf(
    	"DeactivateDeviceProfileRequest[AccountName=%v, ReasonCode=%v, Devices=%v, CarrierName=%v, EtfWaiver=%v, CheckFallbackProfile=%v]",
    	d.AccountName, d.ReasonCode, d.Devices, d.CarrierName, d.EtfWaiver, d.CheckFallbackProfile)
}

// MarshalJSON implements the json.Marshaler interface for DeactivateDeviceProfileRequest.
// It customizes the JSON marshaling process for DeactivateDeviceProfileRequest objects.
func (d DeactivateDeviceProfileRequest) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(d.toMap())
}

// toMap converts the DeactivateDeviceProfileRequest object to a map representation for JSON marshaling.
func (d DeactivateDeviceProfileRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["accountName"] = d.AccountName
    structMap["reasonCode"] = d.ReasonCode
    if d.Devices != nil {
        structMap["devices"] = d.Devices
    }
    if d.CarrierName != nil {
        structMap["carrierName"] = d.CarrierName
    }
    if d.EtfWaiver != nil {
        structMap["etfWaiver"] = d.EtfWaiver
    }
    if d.CheckFallbackProfile != nil {
        structMap["checkFallbackProfile"] = d.CheckFallbackProfile
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeactivateDeviceProfileRequest.
// It customizes the JSON unmarshaling process for DeactivateDeviceProfileRequest objects.
func (d *DeactivateDeviceProfileRequest) UnmarshalJSON(input []byte) error {
    var temp tempDeactivateDeviceProfileRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    d.AccountName = *temp.AccountName
    d.ReasonCode = *temp.ReasonCode
    d.Devices = temp.Devices
    d.CarrierName = temp.CarrierName
    d.EtfWaiver = temp.EtfWaiver
    d.CheckFallbackProfile = temp.CheckFallbackProfile
    return nil
}

// tempDeactivateDeviceProfileRequest is a temporary struct used for validating the fields of DeactivateDeviceProfileRequest.
type tempDeactivateDeviceProfileRequest  struct {
    AccountName          *string                `json:"accountName"`
    ReasonCode           *string                `json:"reasonCode"`
    Devices              []DeactivateDeviceList `json:"devices,omitempty"`
    CarrierName          *string                `json:"carrierName,omitempty"`
    EtfWaiver            *bool                  `json:"etfWaiver,omitempty"`
    CheckFallbackProfile *bool                  `json:"checkFallbackProfile,omitempty"`
}

func (d *tempDeactivateDeviceProfileRequest) validate() error {
    var errs []string
    if d.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `DeactivateDeviceProfileRequest`")
    }
    if d.ReasonCode == nil {
        errs = append(errs, "required field `reasonCode` is missing for type `DeactivateDeviceProfileRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
