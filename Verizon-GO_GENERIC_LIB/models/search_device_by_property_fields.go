/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// SearchDeviceByPropertyFields represents a SearchDeviceByPropertyFields struct.
// List of device sensors and their most recently reported values.
type SearchDeviceByPropertyFields struct {
    Acceleration           *Acceleration           `json:"acceleration,omitempty"`
    Battery                *string                 `json:"battery,omitempty"`
    Humidity               *string                 `json:"humidity,omitempty"`
    Light                  *string                 `json:"light,omitempty"`
    Pressure               *string                 `json:"pressure,omitempty"`
    SignalStrength         *string                 `json:"signalStrength,omitempty"`
    Temperature            *string                 `json:"temperature,omitempty"`
    DevicePropertylocation *DevicePropertylocation `json:"DevicePropertylocation,omitempty"`
    AdditionalProperties   map[string]interface{}  `json:"_"`
}

// String implements the fmt.Stringer interface for SearchDeviceByPropertyFields,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (s SearchDeviceByPropertyFields) String() string {
    return fmt.Sprintf(
    	"SearchDeviceByPropertyFields[Acceleration=%v, Battery=%v, Humidity=%v, Light=%v, Pressure=%v, SignalStrength=%v, Temperature=%v, DevicePropertylocation=%v, AdditionalProperties=%v]",
    	s.Acceleration, s.Battery, s.Humidity, s.Light, s.Pressure, s.SignalStrength, s.Temperature, s.DevicePropertylocation, s.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for SearchDeviceByPropertyFields.
// It customizes the JSON marshaling process for SearchDeviceByPropertyFields objects.
func (s SearchDeviceByPropertyFields) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(s.AdditionalProperties,
        "acceleration", "battery", "humidity", "light", "pressure", "signalStrength", "temperature", "DevicePropertylocation"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(s.toMap())
}

// toMap converts the SearchDeviceByPropertyFields object to a map representation for JSON marshaling.
func (s SearchDeviceByPropertyFields) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, s.AdditionalProperties)
    if s.Acceleration != nil {
        structMap["acceleration"] = s.Acceleration.toMap()
    }
    if s.Battery != nil {
        structMap["battery"] = s.Battery
    }
    if s.Humidity != nil {
        structMap["humidity"] = s.Humidity
    }
    if s.Light != nil {
        structMap["light"] = s.Light
    }
    if s.Pressure != nil {
        structMap["pressure"] = s.Pressure
    }
    if s.SignalStrength != nil {
        structMap["signalStrength"] = s.SignalStrength
    }
    if s.Temperature != nil {
        structMap["temperature"] = s.Temperature
    }
    if s.DevicePropertylocation != nil {
        structMap["DevicePropertylocation"] = s.DevicePropertylocation.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for SearchDeviceByPropertyFields.
// It customizes the JSON unmarshaling process for SearchDeviceByPropertyFields objects.
func (s *SearchDeviceByPropertyFields) UnmarshalJSON(input []byte) error {
    var temp tempSearchDeviceByPropertyFields
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "acceleration", "battery", "humidity", "light", "pressure", "signalStrength", "temperature", "DevicePropertylocation")
    if err != nil {
    	return err
    }
    s.AdditionalProperties = additionalProperties
    
    s.Acceleration = temp.Acceleration
    s.Battery = temp.Battery
    s.Humidity = temp.Humidity
    s.Light = temp.Light
    s.Pressure = temp.Pressure
    s.SignalStrength = temp.SignalStrength
    s.Temperature = temp.Temperature
    s.DevicePropertylocation = temp.DevicePropertylocation
    return nil
}

// tempSearchDeviceByPropertyFields is a temporary struct used for validating the fields of SearchDeviceByPropertyFields.
type tempSearchDeviceByPropertyFields  struct {
    Acceleration           *Acceleration           `json:"acceleration,omitempty"`
    Battery                *string                 `json:"battery,omitempty"`
    Humidity               *string                 `json:"humidity,omitempty"`
    Light                  *string                 `json:"light,omitempty"`
    Pressure               *string                 `json:"pressure,omitempty"`
    SignalStrength         *string                 `json:"signalStrength,omitempty"`
    Temperature            *string                 `json:"temperature,omitempty"`
    DevicePropertylocation *DevicePropertylocation `json:"DevicePropertylocation,omitempty"`
}
