/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// LineString represents a LineString struct.
// A LineString is a type of geometry that represents a collection of points that are connected by line segments.
type LineString struct {
    Type                 LineStringType         `json:"type"`
    Coordinates          [][]float64            `json:"coordinates"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for LineString,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (l LineString) String() string {
    return fmt.Sprintf(
    	"LineString[Type=%v, Coordinates=%v, AdditionalProperties=%v]",
    	l.Type, l.Coordinates, l.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for LineString.
// It customizes the JSON marshaling process for LineString objects.
func (l LineString) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(l.AdditionalProperties,
        "type", "coordinates"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(l.toMap())
}

// toMap converts the LineString object to a map representation for JSON marshaling.
func (l LineString) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, l.AdditionalProperties)
    structMap["type"] = l.Type
    structMap["coordinates"] = l.Coordinates
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for LineString.
// It customizes the JSON unmarshaling process for LineString objects.
func (l *LineString) UnmarshalJSON(input []byte) error {
    var temp tempLineString
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "type", "coordinates")
    if err != nil {
    	return err
    }
    l.AdditionalProperties = additionalProperties
    
    l.Type = *temp.Type
    l.Coordinates = *temp.Coordinates
    return nil
}

// tempLineString is a temporary struct used for validating the fields of LineString.
type tempLineString  struct {
    Type        *LineStringType `json:"type"`
    Coordinates *[][]float64    `json:"coordinates"`
}

func (l *tempLineString) validate() error {
    var errs []string
    if l.Type == nil {
        errs = append(errs, "required field `type` is missing for type `LineString`")
    }
    if l.Coordinates == nil {
        errs = append(errs, "required field `coordinates` is missing for type `LineString`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
