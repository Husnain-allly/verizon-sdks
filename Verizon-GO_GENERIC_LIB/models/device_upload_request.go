/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// DeviceUploadRequest represents a DeviceUploadRequest struct.
type DeviceUploadRequest struct {
    AccountName          string                 `json:"accountName"`
    Devices              []DeviceList           `json:"devices"`
    EmailAddress         string                 `json:"emailAddress"`
    DeviceSku            string                 `json:"deviceSku"`
    UploadType           string                 `json:"uploadType"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceUploadRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceUploadRequest) String() string {
    return fmt.Sprintf(
    	"DeviceUploadRequest[AccountName=%v, Devices=%v, EmailAddress=%v, DeviceSku=%v, UploadType=%v, AdditionalProperties=%v]",
    	d.AccountName, d.Devices, d.EmailAddress, d.DeviceSku, d.UploadType, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceUploadRequest.
// It customizes the JSON marshaling process for DeviceUploadRequest objects.
func (d DeviceUploadRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "accountName", "devices", "emailAddress", "deviceSku", "uploadType"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceUploadRequest object to a map representation for JSON marshaling.
func (d DeviceUploadRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    structMap["accountName"] = d.AccountName
    structMap["devices"] = d.Devices
    structMap["emailAddress"] = d.EmailAddress
    structMap["deviceSku"] = d.DeviceSku
    structMap["uploadType"] = d.UploadType
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceUploadRequest.
// It customizes the JSON unmarshaling process for DeviceUploadRequest objects.
func (d *DeviceUploadRequest) UnmarshalJSON(input []byte) error {
    var temp tempDeviceUploadRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "devices", "emailAddress", "deviceSku", "uploadType")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.AccountName = *temp.AccountName
    d.Devices = *temp.Devices
    d.EmailAddress = *temp.EmailAddress
    d.DeviceSku = *temp.DeviceSku
    d.UploadType = *temp.UploadType
    return nil
}

// tempDeviceUploadRequest is a temporary struct used for validating the fields of DeviceUploadRequest.
type tempDeviceUploadRequest  struct {
    AccountName  *string       `json:"accountName"`
    Devices      *[]DeviceList `json:"devices"`
    EmailAddress *string       `json:"emailAddress"`
    DeviceSku    *string       `json:"deviceSku"`
    UploadType   *string       `json:"uploadType"`
}

func (d *tempDeviceUploadRequest) validate() error {
    var errs []string
    if d.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `DeviceUploadRequest`")
    }
    if d.Devices == nil {
        errs = append(errs, "required field `devices` is missing for type `DeviceUploadRequest`")
    }
    if d.EmailAddress == nil {
        errs = append(errs, "required field `emailAddress` is missing for type `DeviceUploadRequest`")
    }
    if d.DeviceSku == nil {
        errs = append(errs, "required field `deviceSku` is missing for type `DeviceUploadRequest`")
    }
    if d.UploadType == nil {
        errs = append(errs, "required field `uploadType` is missing for type `DeviceUploadRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
