/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// CreateDeviceGroupRequest represents a CreateDeviceGroupRequest struct.
// Create request for a new device group and optionally add devices to the group.
type CreateDeviceGroupRequest struct {
    // The Verizon billing account that the device group will belong to. An account name is usually numeric, and must include any leading zeros.
    AccountName          string                 `json:"accountName"`
    // A description for the device group.
    GroupDescription     string                 `json:"groupDescription"`
    // The name for the new device group. This name must be unique within the specified account.
    GroupName            string                 `json:"groupName"`
    // Zero or more devices to add to the device group. You can use POST /devices/actions/list to get a list of all devices in the account.
    DevicesToAdd         []DeviceId             `json:"devicesToAdd,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for CreateDeviceGroupRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c CreateDeviceGroupRequest) String() string {
    return fmt.Sprintf(
    	"CreateDeviceGroupRequest[AccountName=%v, GroupDescription=%v, GroupName=%v, DevicesToAdd=%v, AdditionalProperties=%v]",
    	c.AccountName, c.GroupDescription, c.GroupName, c.DevicesToAdd, c.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for CreateDeviceGroupRequest.
// It customizes the JSON marshaling process for CreateDeviceGroupRequest objects.
func (c CreateDeviceGroupRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(c.AdditionalProperties,
        "accountName", "groupDescription", "groupName", "devicesToAdd"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(c.toMap())
}

// toMap converts the CreateDeviceGroupRequest object to a map representation for JSON marshaling.
func (c CreateDeviceGroupRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, c.AdditionalProperties)
    structMap["accountName"] = c.AccountName
    structMap["groupDescription"] = c.GroupDescription
    structMap["groupName"] = c.GroupName
    if c.DevicesToAdd != nil {
        structMap["devicesToAdd"] = c.DevicesToAdd
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for CreateDeviceGroupRequest.
// It customizes the JSON unmarshaling process for CreateDeviceGroupRequest objects.
func (c *CreateDeviceGroupRequest) UnmarshalJSON(input []byte) error {
    var temp tempCreateDeviceGroupRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "groupDescription", "groupName", "devicesToAdd")
    if err != nil {
    	return err
    }
    c.AdditionalProperties = additionalProperties
    
    c.AccountName = *temp.AccountName
    c.GroupDescription = *temp.GroupDescription
    c.GroupName = *temp.GroupName
    c.DevicesToAdd = temp.DevicesToAdd
    return nil
}

// tempCreateDeviceGroupRequest is a temporary struct used for validating the fields of CreateDeviceGroupRequest.
type tempCreateDeviceGroupRequest  struct {
    AccountName      *string    `json:"accountName"`
    GroupDescription *string    `json:"groupDescription"`
    GroupName        *string    `json:"groupName"`
    DevicesToAdd     []DeviceId `json:"devicesToAdd,omitempty"`
}

func (c *tempCreateDeviceGroupRequest) validate() error {
    var errs []string
    if c.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `CreateDeviceGroupRequest`")
    }
    if c.GroupDescription == nil {
        errs = append(errs, "required field `groupDescription` is missing for type `CreateDeviceGroupRequest`")
    }
    if c.GroupName == nil {
        errs = append(errs, "required field `groupName` is missing for type `CreateDeviceGroupRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
