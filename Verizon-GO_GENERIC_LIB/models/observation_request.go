/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// ObservationRequest represents a ObservationRequest struct.
// Used to define callbacks including the device identity, the attribute names, corresponding attribute values and the date/timestamp of when the observation was made.
type ObservationRequest struct {
    // Account identifier in "##########-#####".
    AccountName          string                        `json:"accountName"`
    // List of devices.
    Devices              []Device                      `json:"devices"`
    // Attributes are streaming RF parameters that you want to observe.
    Attributes           []ObservationRequestAttribute `json:"attributes"`
    // Describes value and unit of time.
    Frequency            *NumericalData                `json:"frequency,omitempty"`
    // Describes value and unit of time.
    Duration             *NumericalData                `json:"duration,omitempty"`
    AdditionalProperties map[string]interface{}        `json:"_"`
}

// String implements the fmt.Stringer interface for ObservationRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (o ObservationRequest) String() string {
    return fmt.Sprintf(
    	"ObservationRequest[AccountName=%v, Devices=%v, Attributes=%v, Frequency=%v, Duration=%v, AdditionalProperties=%v]",
    	o.AccountName, o.Devices, o.Attributes, o.Frequency, o.Duration, o.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for ObservationRequest.
// It customizes the JSON marshaling process for ObservationRequest objects.
func (o ObservationRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(o.AdditionalProperties,
        "accountName", "devices", "attributes", "frequency", "duration"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(o.toMap())
}

// toMap converts the ObservationRequest object to a map representation for JSON marshaling.
func (o ObservationRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, o.AdditionalProperties)
    structMap["accountName"] = o.AccountName
    structMap["devices"] = o.Devices
    structMap["attributes"] = o.Attributes
    if o.Frequency != nil {
        structMap["frequency"] = o.Frequency.toMap()
    }
    if o.Duration != nil {
        structMap["duration"] = o.Duration.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ObservationRequest.
// It customizes the JSON unmarshaling process for ObservationRequest objects.
func (o *ObservationRequest) UnmarshalJSON(input []byte) error {
    var temp tempObservationRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "devices", "attributes", "frequency", "duration")
    if err != nil {
    	return err
    }
    o.AdditionalProperties = additionalProperties
    
    o.AccountName = *temp.AccountName
    o.Devices = *temp.Devices
    o.Attributes = *temp.Attributes
    o.Frequency = temp.Frequency
    o.Duration = temp.Duration
    return nil
}

// tempObservationRequest is a temporary struct used for validating the fields of ObservationRequest.
type tempObservationRequest  struct {
    AccountName *string                        `json:"accountName"`
    Devices     *[]Device                      `json:"devices"`
    Attributes  *[]ObservationRequestAttribute `json:"attributes"`
    Frequency   *NumericalData                 `json:"frequency,omitempty"`
    Duration    *NumericalData                 `json:"duration,omitempty"`
}

func (o *tempObservationRequest) validate() error {
    var errs []string
    if o.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `ObservationRequest`")
    }
    if o.Devices == nil {
        errs = append(errs, "required field `devices` is missing for type `ObservationRequest`")
    }
    if o.Attributes == nil {
        errs = append(errs, "required field `attributes` is missing for type `ObservationRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
