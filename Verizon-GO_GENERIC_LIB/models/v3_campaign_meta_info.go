/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// V3CampaignMetaInfo represents a V3CampaignMetaInfo struct.
// Campaign and campaign details.
type V3CampaignMetaInfo struct {
    // Account identifier.
    AccountName            string                    `json:"accountName"`
    // Campaign identifier.
    Id                     string                    `json:"id"`
    // Campaign name.
    CampaignName           *string                   `json:"campaignName,omitempty"`
    // Firmware name.
    FirmwareName           *string                   `json:"firmwareName,omitempty"`
    // Old firmware version.
    FirmwareFrom           *string                   `json:"firmwareFrom,omitempty"`
    // New software version.
    FirmwareTo             *string                   `json:"firmwareTo,omitempty"`
    // Firmware protocol. Valid values include: LWM2M, OMD-DM.
    Protocol               *CampaignMetaInfoProtocol `json:"protocol,omitempty"`
    // Device make.
    Make                   string                    `json:"make"`
    // Device model.
    Model                  string                    `json:"model"`
    // Campaign start date.
    StartDate              time.Time                 `json:"startDate"`
    // Campaign end date.
    EndDate                time.Time                 `json:"endDate"`
    // List of allowed campaign time windows.
    CampaignTimeWindowList []V3TimeWindow            `json:"campaignTimeWindowList,omitempty"`
    // Firmware upgrade status.
    Status                 string                    `json:"status"`
    AdditionalProperties   map[string]interface{}    `json:"_"`
}

// String implements the fmt.Stringer interface for V3CampaignMetaInfo,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (v V3CampaignMetaInfo) String() string {
    return fmt.Sprintf(
    	"V3CampaignMetaInfo[AccountName=%v, Id=%v, CampaignName=%v, FirmwareName=%v, FirmwareFrom=%v, FirmwareTo=%v, Protocol=%v, Make=%v, Model=%v, StartDate=%v, EndDate=%v, CampaignTimeWindowList=%v, Status=%v, AdditionalProperties=%v]",
    	v.AccountName, v.Id, v.CampaignName, v.FirmwareName, v.FirmwareFrom, v.FirmwareTo, v.Protocol, v.Make, v.Model, v.StartDate, v.EndDate, v.CampaignTimeWindowList, v.Status, v.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for V3CampaignMetaInfo.
// It customizes the JSON marshaling process for V3CampaignMetaInfo objects.
func (v V3CampaignMetaInfo) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(v.AdditionalProperties,
        "accountName", "id", "campaignName", "firmwareName", "firmwareFrom", "firmwareTo", "protocol", "make", "model", "startDate", "endDate", "campaignTimeWindowList", "status"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(v.toMap())
}

// toMap converts the V3CampaignMetaInfo object to a map representation for JSON marshaling.
func (v V3CampaignMetaInfo) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, v.AdditionalProperties)
    structMap["accountName"] = v.AccountName
    structMap["id"] = v.Id
    if v.CampaignName != nil {
        structMap["campaignName"] = v.CampaignName
    }
    if v.FirmwareName != nil {
        structMap["firmwareName"] = v.FirmwareName
    }
    if v.FirmwareFrom != nil {
        structMap["firmwareFrom"] = v.FirmwareFrom
    }
    if v.FirmwareTo != nil {
        structMap["firmwareTo"] = v.FirmwareTo
    }
    if v.Protocol != nil {
        structMap["protocol"] = v.Protocol
    }
    structMap["make"] = v.Make
    structMap["model"] = v.Model
    structMap["startDate"] = v.StartDate.Format(DEFAULT_DATE)
    structMap["endDate"] = v.EndDate.Format(DEFAULT_DATE)
    if v.CampaignTimeWindowList != nil {
        structMap["campaignTimeWindowList"] = v.CampaignTimeWindowList
    }
    structMap["status"] = v.Status
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for V3CampaignMetaInfo.
// It customizes the JSON unmarshaling process for V3CampaignMetaInfo objects.
func (v *V3CampaignMetaInfo) UnmarshalJSON(input []byte) error {
    var temp tempV3CampaignMetaInfo
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "id", "campaignName", "firmwareName", "firmwareFrom", "firmwareTo", "protocol", "make", "model", "startDate", "endDate", "campaignTimeWindowList", "status")
    if err != nil {
    	return err
    }
    v.AdditionalProperties = additionalProperties
    
    v.AccountName = *temp.AccountName
    v.Id = *temp.Id
    v.CampaignName = temp.CampaignName
    v.FirmwareName = temp.FirmwareName
    v.FirmwareFrom = temp.FirmwareFrom
    v.FirmwareTo = temp.FirmwareTo
    v.Protocol = temp.Protocol
    v.Make = *temp.Make
    v.Model = *temp.Model
    StartDateVal, err := time.Parse(DEFAULT_DATE, *temp.StartDate)
    if err != nil {
        log.Fatalf("Cannot Parse startDate as % s format.", DEFAULT_DATE)
    }
    v.StartDate = StartDateVal
    EndDateVal, err := time.Parse(DEFAULT_DATE, *temp.EndDate)
    if err != nil {
        log.Fatalf("Cannot Parse endDate as % s format.", DEFAULT_DATE)
    }
    v.EndDate = EndDateVal
    v.CampaignTimeWindowList = temp.CampaignTimeWindowList
    v.Status = *temp.Status
    return nil
}

// tempV3CampaignMetaInfo is a temporary struct used for validating the fields of V3CampaignMetaInfo.
type tempV3CampaignMetaInfo  struct {
    AccountName            *string                   `json:"accountName"`
    Id                     *string                   `json:"id"`
    CampaignName           *string                   `json:"campaignName,omitempty"`
    FirmwareName           *string                   `json:"firmwareName,omitempty"`
    FirmwareFrom           *string                   `json:"firmwareFrom,omitempty"`
    FirmwareTo             *string                   `json:"firmwareTo,omitempty"`
    Protocol               *CampaignMetaInfoProtocol `json:"protocol,omitempty"`
    Make                   *string                   `json:"make"`
    Model                  *string                   `json:"model"`
    StartDate              *string                   `json:"startDate"`
    EndDate                *string                   `json:"endDate"`
    CampaignTimeWindowList []V3TimeWindow            `json:"campaignTimeWindowList,omitempty"`
    Status                 *string                   `json:"status"`
}

func (v *tempV3CampaignMetaInfo) validate() error {
    var errs []string
    if v.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `V3CampaignMetaInfo`")
    }
    if v.Id == nil {
        errs = append(errs, "required field `id` is missing for type `V3CampaignMetaInfo`")
    }
    if v.Make == nil {
        errs = append(errs, "required field `make` is missing for type `V3CampaignMetaInfo`")
    }
    if v.Model == nil {
        errs = append(errs, "required field `model` is missing for type `V3CampaignMetaInfo`")
    }
    if v.StartDate == nil {
        errs = append(errs, "required field `startDate` is missing for type `V3CampaignMetaInfo`")
    }
    if v.EndDate == nil {
        errs = append(errs, "required field `endDate` is missing for type `V3CampaignMetaInfo`")
    }
    if v.Status == nil {
        errs = append(errs, "required field `status` is missing for type `V3CampaignMetaInfo`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
