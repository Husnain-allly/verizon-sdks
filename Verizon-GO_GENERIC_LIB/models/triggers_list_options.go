/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// TriggersListOptions represents a TriggersListOptions struct.
type TriggersListOptions struct {
    // The system assigned name of the trigger being updated.
    TriggerId            *string                    `json:"triggerId,omitempty"`
    // The user defined name of the trigger.
    TriggerName          *string                    `json:"triggerName,omitempty"`
    // The user assigned name of the organization associated with the trigger.
    OrganizationName     *string                    `json:"organizationName,omitempty"`
    // This is the value to use in the request body to detect anomalous behaivior. The values in this table will only be relevant when this parameter is set to this value.
    TriggerCategory      *string                    `json:"triggerCategory,omitempty"`
    // Additional details and keys for the trigger.
    TriggerAttributes    []TriggerAttributesOptions `json:"triggerAttributes,omitempty"`
    // Timestamp for whe the trigger was created.
    CreatedAt            *string                    `json:"createdAt,omitempty"`
    // Timestamp for the most recent time the trigger was modified.
    ModifiedAt           *string                    `json:"modifiedAt,omitempty"`
    // The details of the UsageAnomaly trigger.
    Anomalyattributes    *UsageAnomalyAttributes    `json:"anomalyattributes,omitempty"`
    // The notification details of the trigger.
    Notification         *TriggerNotification       `json:"notification,omitempty"`
    AdditionalProperties map[string]interface{}     `json:"_"`
}

// String implements the fmt.Stringer interface for TriggersListOptions,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (t TriggersListOptions) String() string {
    return fmt.Sprintf(
    	"TriggersListOptions[TriggerId=%v, TriggerName=%v, OrganizationName=%v, TriggerCategory=%v, TriggerAttributes=%v, CreatedAt=%v, ModifiedAt=%v, Anomalyattributes=%v, Notification=%v, AdditionalProperties=%v]",
    	t.TriggerId, t.TriggerName, t.OrganizationName, t.TriggerCategory, t.TriggerAttributes, t.CreatedAt, t.ModifiedAt, t.Anomalyattributes, t.Notification, t.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for TriggersListOptions.
// It customizes the JSON marshaling process for TriggersListOptions objects.
func (t TriggersListOptions) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(t.AdditionalProperties,
        "triggerId", "triggerName", "organizationName", "triggerCategory", "triggerAttributes", "createdAt", "modifiedAt", "anomalyattributes", "notification"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(t.toMap())
}

// toMap converts the TriggersListOptions object to a map representation for JSON marshaling.
func (t TriggersListOptions) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, t.AdditionalProperties)
    if t.TriggerId != nil {
        structMap["triggerId"] = t.TriggerId
    }
    if t.TriggerName != nil {
        structMap["triggerName"] = t.TriggerName
    }
    if t.OrganizationName != nil {
        structMap["organizationName"] = t.OrganizationName
    }
    if t.TriggerCategory != nil {
        structMap["triggerCategory"] = t.TriggerCategory
    }
    if t.TriggerAttributes != nil {
        structMap["triggerAttributes"] = t.TriggerAttributes
    }
    if t.CreatedAt != nil {
        structMap["createdAt"] = t.CreatedAt
    }
    if t.ModifiedAt != nil {
        structMap["modifiedAt"] = t.ModifiedAt
    }
    if t.Anomalyattributes != nil {
        structMap["anomalyattributes"] = t.Anomalyattributes.toMap()
    }
    if t.Notification != nil {
        structMap["notification"] = t.Notification.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for TriggersListOptions.
// It customizes the JSON unmarshaling process for TriggersListOptions objects.
func (t *TriggersListOptions) UnmarshalJSON(input []byte) error {
    var temp tempTriggersListOptions
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "triggerId", "triggerName", "organizationName", "triggerCategory", "triggerAttributes", "createdAt", "modifiedAt", "anomalyattributes", "notification")
    if err != nil {
    	return err
    }
    t.AdditionalProperties = additionalProperties
    
    t.TriggerId = temp.TriggerId
    t.TriggerName = temp.TriggerName
    t.OrganizationName = temp.OrganizationName
    t.TriggerCategory = temp.TriggerCategory
    t.TriggerAttributes = temp.TriggerAttributes
    t.CreatedAt = temp.CreatedAt
    t.ModifiedAt = temp.ModifiedAt
    t.Anomalyattributes = temp.Anomalyattributes
    t.Notification = temp.Notification
    return nil
}

// tempTriggersListOptions is a temporary struct used for validating the fields of TriggersListOptions.
type tempTriggersListOptions  struct {
    TriggerId         *string                    `json:"triggerId,omitempty"`
    TriggerName       *string                    `json:"triggerName,omitempty"`
    OrganizationName  *string                    `json:"organizationName,omitempty"`
    TriggerCategory   *string                    `json:"triggerCategory,omitempty"`
    TriggerAttributes []TriggerAttributesOptions `json:"triggerAttributes,omitempty"`
    CreatedAt         *string                    `json:"createdAt,omitempty"`
    ModifiedAt        *string                    `json:"modifiedAt,omitempty"`
    Anomalyattributes *UsageAnomalyAttributes    `json:"anomalyattributes,omitempty"`
    Notification      *TriggerNotification       `json:"notification,omitempty"`
}
