/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// MismatchedDevice represents a MismatchedDevice struct.
// 4G devices with an ICCID (SIM) that was not activated with the expected IMEI (hardware) during a specified time frame.
type MismatchedDevice struct {
    // The account that the device is associated with.
    AccountName          *string                `json:"accountName,omitempty"`
    // The assigned phone number of the device.
    Mdn                  *string                `json:"mdn,omitempty"`
    // The date and time when the SIM was last activated.
    ActivationDate       *string                `json:"activationDate,omitempty"`
    // The ID of the SIM.
    Iccid                *string                `json:"iccid,omitempty"`
    // The IMEI of the device prior to the SIM OTA activation on simOtaDate.
    PreImei              *string                `json:"preImei,omitempty"`
    // The IMEI of the device after the SIM OTA activation on simOtaDate.
    PostImei             *string                `json:"postImei,omitempty"`
    // The date and time of the SIM OTA activation.
    SimOtaDate           *string                `json:"simOtaDate,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for MismatchedDevice,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (m MismatchedDevice) String() string {
    return fmt.Sprintf(
    	"MismatchedDevice[AccountName=%v, Mdn=%v, ActivationDate=%v, Iccid=%v, PreImei=%v, PostImei=%v, SimOtaDate=%v, AdditionalProperties=%v]",
    	m.AccountName, m.Mdn, m.ActivationDate, m.Iccid, m.PreImei, m.PostImei, m.SimOtaDate, m.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for MismatchedDevice.
// It customizes the JSON marshaling process for MismatchedDevice objects.
func (m MismatchedDevice) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(m.AdditionalProperties,
        "accountName", "mdn", "activationDate", "iccid", "preImei", "postImei", "simOtaDate"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(m.toMap())
}

// toMap converts the MismatchedDevice object to a map representation for JSON marshaling.
func (m MismatchedDevice) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, m.AdditionalProperties)
    if m.AccountName != nil {
        structMap["accountName"] = m.AccountName
    }
    if m.Mdn != nil {
        structMap["mdn"] = m.Mdn
    }
    if m.ActivationDate != nil {
        structMap["activationDate"] = m.ActivationDate
    }
    if m.Iccid != nil {
        structMap["iccid"] = m.Iccid
    }
    if m.PreImei != nil {
        structMap["preImei"] = m.PreImei
    }
    if m.PostImei != nil {
        structMap["postImei"] = m.PostImei
    }
    if m.SimOtaDate != nil {
        structMap["simOtaDate"] = m.SimOtaDate
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for MismatchedDevice.
// It customizes the JSON unmarshaling process for MismatchedDevice objects.
func (m *MismatchedDevice) UnmarshalJSON(input []byte) error {
    var temp tempMismatchedDevice
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "mdn", "activationDate", "iccid", "preImei", "postImei", "simOtaDate")
    if err != nil {
    	return err
    }
    m.AdditionalProperties = additionalProperties
    
    m.AccountName = temp.AccountName
    m.Mdn = temp.Mdn
    m.ActivationDate = temp.ActivationDate
    m.Iccid = temp.Iccid
    m.PreImei = temp.PreImei
    m.PostImei = temp.PostImei
    m.SimOtaDate = temp.SimOtaDate
    return nil
}

// tempMismatchedDevice is a temporary struct used for validating the fields of MismatchedDevice.
type tempMismatchedDevice  struct {
    AccountName    *string `json:"accountName,omitempty"`
    Mdn            *string `json:"mdn,omitempty"`
    ActivationDate *string `json:"activationDate,omitempty"`
    Iccid          *string `json:"iccid,omitempty"`
    PreImei        *string `json:"preImei,omitempty"`
    PostImei       *string `json:"postImei,omitempty"`
    SimOtaDate     *string `json:"simOtaDate,omitempty"`
}
