/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// HeadingItem represents a HeadingItem struct.
// Heading limitation provides minimum and maximum value for road user heading in unit of degrees. If the road user's heading value is between the given minimum and maximum value and the TriggerConditions are also met the message will be sent out.
// The heading minimum value can be bigger than the maximum value as negative number are not supported. For example, the +/- 10 degrees around the north (0 degrees) can be defined as 350 (min) to 10 (max) degrees.
type HeadingItem struct {
    Heading              *Heading               `json:"heading"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for HeadingItem,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (h HeadingItem) String() string {
    return fmt.Sprintf(
    	"HeadingItem[Heading=%v, AdditionalProperties=%v]",
    	h.Heading, h.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for HeadingItem.
// It customizes the JSON marshaling process for HeadingItem objects.
func (h HeadingItem) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(h.AdditionalProperties,
        "heading"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(h.toMap())
}

// toMap converts the HeadingItem object to a map representation for JSON marshaling.
func (h HeadingItem) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, h.AdditionalProperties)
    if h.Heading != nil {
        structMap["heading"] = h.Heading.toMap()
    } else {
        structMap["heading"] = nil
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for HeadingItem.
// It customizes the JSON unmarshaling process for HeadingItem objects.
func (h *HeadingItem) UnmarshalJSON(input []byte) error {
    var temp tempHeadingItem
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "heading")
    if err != nil {
    	return err
    }
    h.AdditionalProperties = additionalProperties
    
    h.Heading = temp.Heading
    return nil
}

// tempHeadingItem is a temporary struct used for validating the fields of HeadingItem.
type tempHeadingItem  struct {
    Heading *Heading `json:"heading"`
}

func (h *tempHeadingItem) validate() error {
    var errs []string
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
