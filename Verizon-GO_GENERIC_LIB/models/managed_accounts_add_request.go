/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// ManagedAccountsAddRequest represents a ManagedAccountsAddRequest struct.
type ManagedAccountsAddRequest struct {
    // Account identifier
    AccountName          string                 `json:"accountName"`
    // Service name
    ServiceName          ServiceName            `json:"serviceName"`
    // SKU name
    Type                 string                 `json:"type"`
    // managed account list
    ManagedAccList       []string               `json:"managedAccList"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for ManagedAccountsAddRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (m ManagedAccountsAddRequest) String() string {
    return fmt.Sprintf(
    	"ManagedAccountsAddRequest[AccountName=%v, ServiceName=%v, Type=%v, ManagedAccList=%v, AdditionalProperties=%v]",
    	m.AccountName, m.ServiceName, m.Type, m.ManagedAccList, m.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for ManagedAccountsAddRequest.
// It customizes the JSON marshaling process for ManagedAccountsAddRequest objects.
func (m ManagedAccountsAddRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(m.AdditionalProperties,
        "accountName", "serviceName", "type", "managedAccList"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(m.toMap())
}

// toMap converts the ManagedAccountsAddRequest object to a map representation for JSON marshaling.
func (m ManagedAccountsAddRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, m.AdditionalProperties)
    structMap["accountName"] = m.AccountName
    structMap["serviceName"] = m.ServiceName
    structMap["type"] = m.Type
    structMap["managedAccList"] = m.ManagedAccList
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ManagedAccountsAddRequest.
// It customizes the JSON unmarshaling process for ManagedAccountsAddRequest objects.
func (m *ManagedAccountsAddRequest) UnmarshalJSON(input []byte) error {
    var temp tempManagedAccountsAddRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "serviceName", "type", "managedAccList")
    if err != nil {
    	return err
    }
    m.AdditionalProperties = additionalProperties
    
    m.AccountName = *temp.AccountName
    m.ServiceName = *temp.ServiceName
    m.Type = *temp.Type
    m.ManagedAccList = *temp.ManagedAccList
    return nil
}

// tempManagedAccountsAddRequest is a temporary struct used for validating the fields of ManagedAccountsAddRequest.
type tempManagedAccountsAddRequest  struct {
    AccountName    *string      `json:"accountName"`
    ServiceName    *ServiceName `json:"serviceName"`
    Type           *string      `json:"type"`
    ManagedAccList *[]string    `json:"managedAccList"`
}

func (m *tempManagedAccountsAddRequest) validate() error {
    var errs []string
    if m.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `ManagedAccountsAddRequest`")
    }
    if m.ServiceName == nil {
        errs = append(errs, "required field `serviceName` is missing for type `ManagedAccountsAddRequest`")
    }
    if m.Type == nil {
        errs = append(errs, "required field `type` is missing for type `ManagedAccountsAddRequest`")
    }
    if m.ManagedAccList == nil {
        errs = append(errs, "required field `managedAccList` is missing for type `ManagedAccountsAddRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
