/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// V2DeviceStatus represents a V2DeviceStatus struct.
// Device with id in IMEI.
type V2DeviceStatus struct {
    // Device IMEI.
    DeviceId             string                 `json:"deviceId"`
    // Success or failure.
    Status               string                 `json:"status"`
    // Result reason.
    ResultReason         *string                `json:"resultReason,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for V2DeviceStatus,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (v V2DeviceStatus) String() string {
    return fmt.Sprintf(
    	"V2DeviceStatus[DeviceId=%v, Status=%v, ResultReason=%v, AdditionalProperties=%v]",
    	v.DeviceId, v.Status, v.ResultReason, v.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for V2DeviceStatus.
// It customizes the JSON marshaling process for V2DeviceStatus objects.
func (v V2DeviceStatus) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(v.AdditionalProperties,
        "deviceId", "status", "resultReason"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(v.toMap())
}

// toMap converts the V2DeviceStatus object to a map representation for JSON marshaling.
func (v V2DeviceStatus) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, v.AdditionalProperties)
    structMap["deviceId"] = v.DeviceId
    structMap["status"] = v.Status
    if v.ResultReason != nil {
        structMap["resultReason"] = v.ResultReason
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for V2DeviceStatus.
// It customizes the JSON unmarshaling process for V2DeviceStatus objects.
func (v *V2DeviceStatus) UnmarshalJSON(input []byte) error {
    var temp tempV2DeviceStatus
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceId", "status", "resultReason")
    if err != nil {
    	return err
    }
    v.AdditionalProperties = additionalProperties
    
    v.DeviceId = *temp.DeviceId
    v.Status = *temp.Status
    v.ResultReason = temp.ResultReason
    return nil
}

// tempV2DeviceStatus is a temporary struct used for validating the fields of V2DeviceStatus.
type tempV2DeviceStatus  struct {
    DeviceId     *string `json:"deviceId"`
    Status       *string `json:"status"`
    ResultReason *string `json:"resultReason,omitempty"`
}

func (v *tempV2DeviceStatus) validate() error {
    var errs []string
    if v.DeviceId == nil {
        errs = append(errs, "required field `deviceId` is missing for type `V2DeviceStatus`")
    }
    if v.Status == nil {
        errs = append(errs, "required field `status` is missing for type `V2DeviceStatus`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
