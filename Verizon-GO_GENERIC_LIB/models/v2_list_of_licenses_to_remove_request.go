/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// V2ListOfLicensesToRemoveRequest represents a V2ListOfLicensesToRemoveRequest struct.
// License cancellation candidate devices.
type V2ListOfLicensesToRemoveRequest struct {
    // List creation option.
    Type                 *string                `json:"type,omitempty"`
    // The number of devices.
    Count                *int                   `json:"count,omitempty"`
    // Device IMEI list.
    DeviceList           []string               `json:"deviceList"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for V2ListOfLicensesToRemoveRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (v V2ListOfLicensesToRemoveRequest) String() string {
    return fmt.Sprintf(
    	"V2ListOfLicensesToRemoveRequest[Type=%v, Count=%v, DeviceList=%v, AdditionalProperties=%v]",
    	v.Type, v.Count, v.DeviceList, v.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for V2ListOfLicensesToRemoveRequest.
// It customizes the JSON marshaling process for V2ListOfLicensesToRemoveRequest objects.
func (v V2ListOfLicensesToRemoveRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(v.AdditionalProperties,
        "type", "count", "deviceList"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(v.toMap())
}

// toMap converts the V2ListOfLicensesToRemoveRequest object to a map representation for JSON marshaling.
func (v V2ListOfLicensesToRemoveRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, v.AdditionalProperties)
    if v.Type != nil {
        structMap["type"] = v.Type
    }
    if v.Count != nil {
        structMap["count"] = v.Count
    }
    structMap["deviceList"] = v.DeviceList
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for V2ListOfLicensesToRemoveRequest.
// It customizes the JSON unmarshaling process for V2ListOfLicensesToRemoveRequest objects.
func (v *V2ListOfLicensesToRemoveRequest) UnmarshalJSON(input []byte) error {
    var temp tempV2ListOfLicensesToRemoveRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "type", "count", "deviceList")
    if err != nil {
    	return err
    }
    v.AdditionalProperties = additionalProperties
    
    v.Type = temp.Type
    v.Count = temp.Count
    v.DeviceList = *temp.DeviceList
    return nil
}

// tempV2ListOfLicensesToRemoveRequest is a temporary struct used for validating the fields of V2ListOfLicensesToRemoveRequest.
type tempV2ListOfLicensesToRemoveRequest  struct {
    Type       *string   `json:"type,omitempty"`
    Count      *int      `json:"count,omitempty"`
    DeviceList *[]string `json:"deviceList"`
}

func (v *tempV2ListOfLicensesToRemoveRequest) validate() error {
    var errs []string
    if v.DeviceList == nil {
        errs = append(errs, "required field `deviceList` is missing for type `V2ListOfLicensesToRemoveRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
