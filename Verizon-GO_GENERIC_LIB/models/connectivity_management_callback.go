/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// ConnectivityManagementCallback represents a ConnectivityManagementCallback struct.
// Includes callback listeners that were registered through the Connectivity Management API.
type ConnectivityManagementCallback struct {
    // The name of the billing account for which callback messages will be sent.
    AccountName          *string                `json:"accountName,omitempty"`
    // The password defined when a URL was registered for the callback service, or an empty string if no password was defined.
    Password             *string                `json:"password,omitempty"`
    // The name of the callback service, which identifies the type and format of messages that will be sent to the registered URL.
    ServiceName          *string                `json:"serviceName,omitempty"`
    // The address of the callback listening service where the ThingSpace Platform will send callback messages for the service type.
    Url                  *string                `json:"url,omitempty"`
    // The username defined when a URL was registered for the callback service, or an empty string if no username was defined.
    Username             *string                `json:"username,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for ConnectivityManagementCallback,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c ConnectivityManagementCallback) String() string {
    return fmt.Sprintf(
    	"ConnectivityManagementCallback[AccountName=%v, Password=%v, ServiceName=%v, Url=%v, Username=%v, AdditionalProperties=%v]",
    	c.AccountName, c.Password, c.ServiceName, c.Url, c.Username, c.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for ConnectivityManagementCallback.
// It customizes the JSON marshaling process for ConnectivityManagementCallback objects.
func (c ConnectivityManagementCallback) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(c.AdditionalProperties,
        "accountName", "password", "serviceName", "url", "username"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(c.toMap())
}

// toMap converts the ConnectivityManagementCallback object to a map representation for JSON marshaling.
func (c ConnectivityManagementCallback) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, c.AdditionalProperties)
    if c.AccountName != nil {
        structMap["accountName"] = c.AccountName
    }
    if c.Password != nil {
        structMap["password"] = c.Password
    }
    if c.ServiceName != nil {
        structMap["serviceName"] = c.ServiceName
    }
    if c.Url != nil {
        structMap["url"] = c.Url
    }
    if c.Username != nil {
        structMap["username"] = c.Username
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ConnectivityManagementCallback.
// It customizes the JSON unmarshaling process for ConnectivityManagementCallback objects.
func (c *ConnectivityManagementCallback) UnmarshalJSON(input []byte) error {
    var temp tempConnectivityManagementCallback
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "password", "serviceName", "url", "username")
    if err != nil {
    	return err
    }
    c.AdditionalProperties = additionalProperties
    
    c.AccountName = temp.AccountName
    c.Password = temp.Password
    c.ServiceName = temp.ServiceName
    c.Url = temp.Url
    c.Username = temp.Username
    return nil
}

// tempConnectivityManagementCallback is a temporary struct used for validating the fields of ConnectivityManagementCallback.
type tempConnectivityManagementCallback  struct {
    AccountName *string `json:"accountName,omitempty"`
    Password    *string `json:"password,omitempty"`
    ServiceName *string `json:"serviceName,omitempty"`
    Url         *string `json:"url,omitempty"`
    Username    *string `json:"username,omitempty"`
}
