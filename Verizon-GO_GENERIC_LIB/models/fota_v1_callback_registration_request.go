/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// FotaV1CallbackRegistrationRequest represents a FotaV1CallbackRegistrationRequest struct.
// Callback endpoint information.
type FotaV1CallbackRegistrationRequest struct {
    // The name of the callback service that you want to subscribe to, which must be 'Fota' for Software Management Services callbacks.
    Name                 string                 `json:"name"`
    // The address on your server where you have enabled a listening service for Software Management Services callback messages.
    Url                  string                 `json:"url"`
    // The user name that ThingSpace should return in the callback messages.
    Username             *string                `json:"username,omitempty"`
    // The password that ThingSpace should return in the callback messages.
    Password             *string                `json:"password,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for FotaV1CallbackRegistrationRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (f FotaV1CallbackRegistrationRequest) String() string {
    return fmt.Sprintf(
    	"FotaV1CallbackRegistrationRequest[Name=%v, Url=%v, Username=%v, Password=%v, AdditionalProperties=%v]",
    	f.Name, f.Url, f.Username, f.Password, f.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for FotaV1CallbackRegistrationRequest.
// It customizes the JSON marshaling process for FotaV1CallbackRegistrationRequest objects.
func (f FotaV1CallbackRegistrationRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(f.AdditionalProperties,
        "name", "url", "username", "password"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(f.toMap())
}

// toMap converts the FotaV1CallbackRegistrationRequest object to a map representation for JSON marshaling.
func (f FotaV1CallbackRegistrationRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, f.AdditionalProperties)
    structMap["name"] = f.Name
    structMap["url"] = f.Url
    if f.Username != nil {
        structMap["username"] = f.Username
    }
    if f.Password != nil {
        structMap["password"] = f.Password
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for FotaV1CallbackRegistrationRequest.
// It customizes the JSON unmarshaling process for FotaV1CallbackRegistrationRequest objects.
func (f *FotaV1CallbackRegistrationRequest) UnmarshalJSON(input []byte) error {
    var temp tempFotaV1CallbackRegistrationRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "name", "url", "username", "password")
    if err != nil {
    	return err
    }
    f.AdditionalProperties = additionalProperties
    
    f.Name = *temp.Name
    f.Url = *temp.Url
    f.Username = temp.Username
    f.Password = temp.Password
    return nil
}

// tempFotaV1CallbackRegistrationRequest is a temporary struct used for validating the fields of FotaV1CallbackRegistrationRequest.
type tempFotaV1CallbackRegistrationRequest  struct {
    Name     *string `json:"name"`
    Url      *string `json:"url"`
    Username *string `json:"username,omitempty"`
    Password *string `json:"password,omitempty"`
}

func (f *tempFotaV1CallbackRegistrationRequest) validate() error {
    var errs []string
    if f.Name == nil {
        errs = append(errs, "required field `name` is missing for type `FotaV1CallbackRegistrationRequest`")
    }
    if f.Url == nil {
        errs = append(errs, "required field `url` is missing for type `FotaV1CallbackRegistrationRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
