/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// V2TriggersRequest represents a V2TriggersRequest struct.
type V2TriggersRequest struct {
    // The user defined name of the trigger
    TriggerName                   *string                 `json:"triggerName,omitempty"`
    // The Enterprise Customer Profile Database ID
    EcpdId                        *string                 `json:"ecpdId,omitempty"`
    // The type of trigger being created or modified
    TriggerCategory               *TriggerCategory        `json:"triggerCategory,omitempty"`
    DataTrigger                   *DataTrigger4           `json:"dataTrigger,omitempty"`
    Notification                  *Notificationarray      `json:"notification,omitempty"`
    NotificationType              *string                 `json:"notificationType,omitempty"`
    Callback                      *bool                   `json:"callback,omitempty"`
    EmailNotification             *bool                   `json:"emailNotification,omitempty"`
    NotificationGroupName         *string                 `json:"notificationGroupName,omitempty"`
    NotificationFrequencyFactor   *int                    `json:"notificationFrequencyFactor,omitempty"`
    NotificationFrequencyInterval *string                 `json:"notificationFrequencyInterval,omitempty"`
    ExternalEmailRecipients       *string                 `json:"externalEmailRecipients,omitempty"`
    SmsNotification               *bool                   `json:"smsNotification,omitempty"`
    SmsNumbers                    []Cellphonenumber       `json:"smsNumbers,omitempty"`
    Reminder                      *bool                   `json:"reminder,omitempty"`
    Severity                      *string                 `json:"severity,omitempty"`
    // A flag to indicate of the trigger is active, true, or not, false
    Active                        *Active                 `json:"active,omitempty"`
    FilterCriteria                *AccountLevelFilter     `json:"filterCriteria,omitempty"`
    Condition                     *Rateplantype2Condition `json:"condition,omitempty"`
    // The action taken when trigger conditions are met
    Action                        *AccountLevelAction     `json:"action,omitempty"`
    // The numeric name of the account and must include leading zeroes
    AccountName                   *string                 `json:"accountName,omitempty"`
    PricePlanTrigger              *PricePlanTrigger1      `json:"pricePlanTrigger,omitempty"`
    AdditionalProperties          map[string]interface{}  `json:"_"`
}

// String implements the fmt.Stringer interface for V2TriggersRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (v V2TriggersRequest) String() string {
    return fmt.Sprintf(
    	"V2TriggersRequest[TriggerName=%v, EcpdId=%v, TriggerCategory=%v, DataTrigger=%v, Notification=%v, NotificationType=%v, Callback=%v, EmailNotification=%v, NotificationGroupName=%v, NotificationFrequencyFactor=%v, NotificationFrequencyInterval=%v, ExternalEmailRecipients=%v, SmsNotification=%v, SmsNumbers=%v, Reminder=%v, Severity=%v, Active=%v, FilterCriteria=%v, Condition=%v, Action=%v, AccountName=%v, PricePlanTrigger=%v, AdditionalProperties=%v]",
    	v.TriggerName, v.EcpdId, v.TriggerCategory, v.DataTrigger, v.Notification, v.NotificationType, v.Callback, v.EmailNotification, v.NotificationGroupName, v.NotificationFrequencyFactor, v.NotificationFrequencyInterval, v.ExternalEmailRecipients, v.SmsNotification, v.SmsNumbers, v.Reminder, v.Severity, v.Active, v.FilterCriteria, v.Condition, v.Action, v.AccountName, v.PricePlanTrigger, v.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for V2TriggersRequest.
// It customizes the JSON marshaling process for V2TriggersRequest objects.
func (v V2TriggersRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(v.AdditionalProperties,
        "triggerName", "ecpdId", "triggerCategory", "dataTrigger", "notification", "notificationType", "callback", "emailNotification", "notificationGroupName", "notificationFrequencyFactor", "notificationFrequencyInterval", "externalEmailRecipients", "smsNotification", "smsNumbers", "reminder", "severity", "active", "filterCriteria", "condition", "action", "accountName", "pricePlanTrigger"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(v.toMap())
}

// toMap converts the V2TriggersRequest object to a map representation for JSON marshaling.
func (v V2TriggersRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, v.AdditionalProperties)
    if v.TriggerName != nil {
        structMap["triggerName"] = v.TriggerName
    }
    if v.EcpdId != nil {
        structMap["ecpdId"] = v.EcpdId
    }
    if v.TriggerCategory != nil {
        structMap["triggerCategory"] = v.TriggerCategory
    }
    if v.DataTrigger != nil {
        structMap["dataTrigger"] = v.DataTrigger.toMap()
    }
    if v.Notification != nil {
        structMap["notification"] = v.Notification.toMap()
    }
    if v.NotificationType != nil {
        structMap["notificationType"] = v.NotificationType
    }
    if v.Callback != nil {
        structMap["callback"] = v.Callback
    }
    if v.EmailNotification != nil {
        structMap["emailNotification"] = v.EmailNotification
    }
    if v.NotificationGroupName != nil {
        structMap["notificationGroupName"] = v.NotificationGroupName
    }
    if v.NotificationFrequencyFactor != nil {
        structMap["notificationFrequencyFactor"] = v.NotificationFrequencyFactor
    }
    if v.NotificationFrequencyInterval != nil {
        structMap["notificationFrequencyInterval"] = v.NotificationFrequencyInterval
    }
    if v.ExternalEmailRecipients != nil {
        structMap["externalEmailRecipients"] = v.ExternalEmailRecipients
    }
    if v.SmsNotification != nil {
        structMap["smsNotification"] = v.SmsNotification
    }
    if v.SmsNumbers != nil {
        structMap["smsNumbers"] = v.SmsNumbers
    }
    if v.Reminder != nil {
        structMap["reminder"] = v.Reminder
    }
    if v.Severity != nil {
        structMap["severity"] = v.Severity
    }
    if v.Active != nil {
        structMap["active"] = v.Active
    }
    if v.FilterCriteria != nil {
        structMap["filterCriteria"] = v.FilterCriteria.toMap()
    }
    if v.Condition != nil {
        structMap["condition"] = v.Condition.toMap()
    }
    if v.Action != nil {
        structMap["action"] = v.Action
    }
    if v.AccountName != nil {
        structMap["accountName"] = v.AccountName
    }
    if v.PricePlanTrigger != nil {
        structMap["pricePlanTrigger"] = v.PricePlanTrigger.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for V2TriggersRequest.
// It customizes the JSON unmarshaling process for V2TriggersRequest objects.
func (v *V2TriggersRequest) UnmarshalJSON(input []byte) error {
    var temp tempV2TriggersRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "triggerName", "ecpdId", "triggerCategory", "dataTrigger", "notification", "notificationType", "callback", "emailNotification", "notificationGroupName", "notificationFrequencyFactor", "notificationFrequencyInterval", "externalEmailRecipients", "smsNotification", "smsNumbers", "reminder", "severity", "active", "filterCriteria", "condition", "action", "accountName", "pricePlanTrigger")
    if err != nil {
    	return err
    }
    v.AdditionalProperties = additionalProperties
    
    v.TriggerName = temp.TriggerName
    v.EcpdId = temp.EcpdId
    v.TriggerCategory = temp.TriggerCategory
    v.DataTrigger = temp.DataTrigger
    v.Notification = temp.Notification
    v.NotificationType = temp.NotificationType
    v.Callback = temp.Callback
    v.EmailNotification = temp.EmailNotification
    v.NotificationGroupName = temp.NotificationGroupName
    v.NotificationFrequencyFactor = temp.NotificationFrequencyFactor
    v.NotificationFrequencyInterval = temp.NotificationFrequencyInterval
    v.ExternalEmailRecipients = temp.ExternalEmailRecipients
    v.SmsNotification = temp.SmsNotification
    v.SmsNumbers = temp.SmsNumbers
    v.Reminder = temp.Reminder
    v.Severity = temp.Severity
    v.Active = temp.Active
    v.FilterCriteria = temp.FilterCriteria
    v.Condition = temp.Condition
    v.Action = temp.Action
    v.AccountName = temp.AccountName
    v.PricePlanTrigger = temp.PricePlanTrigger
    return nil
}

// tempV2TriggersRequest is a temporary struct used for validating the fields of V2TriggersRequest.
type tempV2TriggersRequest  struct {
    TriggerName                   *string                 `json:"triggerName,omitempty"`
    EcpdId                        *string                 `json:"ecpdId,omitempty"`
    TriggerCategory               *TriggerCategory        `json:"triggerCategory,omitempty"`
    DataTrigger                   *DataTrigger4           `json:"dataTrigger,omitempty"`
    Notification                  *Notificationarray      `json:"notification,omitempty"`
    NotificationType              *string                 `json:"notificationType,omitempty"`
    Callback                      *bool                   `json:"callback,omitempty"`
    EmailNotification             *bool                   `json:"emailNotification,omitempty"`
    NotificationGroupName         *string                 `json:"notificationGroupName,omitempty"`
    NotificationFrequencyFactor   *int                    `json:"notificationFrequencyFactor,omitempty"`
    NotificationFrequencyInterval *string                 `json:"notificationFrequencyInterval,omitempty"`
    ExternalEmailRecipients       *string                 `json:"externalEmailRecipients,omitempty"`
    SmsNotification               *bool                   `json:"smsNotification,omitempty"`
    SmsNumbers                    []Cellphonenumber       `json:"smsNumbers,omitempty"`
    Reminder                      *bool                   `json:"reminder,omitempty"`
    Severity                      *string                 `json:"severity,omitempty"`
    Active                        *Active                 `json:"active,omitempty"`
    FilterCriteria                *AccountLevelFilter     `json:"filterCriteria,omitempty"`
    Condition                     *Rateplantype2Condition `json:"condition,omitempty"`
    Action                        *AccountLevelAction     `json:"action,omitempty"`
    AccountName                   *string                 `json:"accountName,omitempty"`
    PricePlanTrigger              *PricePlanTrigger1      `json:"pricePlanTrigger,omitempty"`
}
