/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// DailyUsageResponse represents a DailyUsageResponse struct.
type DailyUsageResponse struct {
    // A flag set to indicate if there is more than one page of data returned by the query (true) or if only one page of data returned (false)
    HasMoreData          *bool                  `json:"hasMoreData,omitempty"`
    DeviceId             *GioDeviceId           `json:"deviceId,omitempty"`
    UsageHistory         []DailyUsageHistory    `json:"usageHistory,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DailyUsageResponse,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DailyUsageResponse) String() string {
    return fmt.Sprintf(
    	"DailyUsageResponse[HasMoreData=%v, DeviceId=%v, UsageHistory=%v, AdditionalProperties=%v]",
    	d.HasMoreData, d.DeviceId, d.UsageHistory, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DailyUsageResponse.
// It customizes the JSON marshaling process for DailyUsageResponse objects.
func (d DailyUsageResponse) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "hasMoreData", "deviceId", "usageHistory"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DailyUsageResponse object to a map representation for JSON marshaling.
func (d DailyUsageResponse) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    if d.HasMoreData != nil {
        structMap["hasMoreData"] = d.HasMoreData
    }
    if d.DeviceId != nil {
        structMap["deviceId"] = d.DeviceId.toMap()
    }
    if d.UsageHistory != nil {
        structMap["usageHistory"] = d.UsageHistory
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DailyUsageResponse.
// It customizes the JSON unmarshaling process for DailyUsageResponse objects.
func (d *DailyUsageResponse) UnmarshalJSON(input []byte) error {
    var temp tempDailyUsageResponse
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "hasMoreData", "deviceId", "usageHistory")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.HasMoreData = temp.HasMoreData
    d.DeviceId = temp.DeviceId
    d.UsageHistory = temp.UsageHistory
    return nil
}

// tempDailyUsageResponse is a temporary struct used for validating the fields of DailyUsageResponse.
type tempDailyUsageResponse  struct {
    HasMoreData  *bool               `json:"hasMoreData,omitempty"`
    DeviceId     *GioDeviceId        `json:"deviceId,omitempty"`
    UsageHistory []DailyUsageHistory `json:"usageHistory,omitempty"`
}
