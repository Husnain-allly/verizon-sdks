/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// SoftwarePackage represents a SoftwarePackage struct.
// Software package information.
type SoftwarePackage struct {
    // Software name.
    SoftwareName         string                 `json:"softwareName"`
    // Software launch date.
    LaunchDate           time.Time              `json:"launchDate"`
    // Software release note reserved for future use.
    ReleaseNote          *string                `json:"releaseNote,omitempty"`
    // Software applicable device model.
    Model                string                 `json:"model"`
    // Software applicable device make.
    Make                 string                 `json:"make"`
    // LWM2M, OMD-DM or HTTP.
    DistributionType     string                 `json:"distributionType"`
    // The platform (Android, iOS, etc.) that the software can be applied to.
    DevicePlatformId     string                 `json:"devicePlatformId"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for SoftwarePackage,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (s SoftwarePackage) String() string {
    return fmt.Sprintf(
    	"SoftwarePackage[SoftwareName=%v, LaunchDate=%v, ReleaseNote=%v, Model=%v, Make=%v, DistributionType=%v, DevicePlatformId=%v, AdditionalProperties=%v]",
    	s.SoftwareName, s.LaunchDate, s.ReleaseNote, s.Model, s.Make, s.DistributionType, s.DevicePlatformId, s.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for SoftwarePackage.
// It customizes the JSON marshaling process for SoftwarePackage objects.
func (s SoftwarePackage) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(s.AdditionalProperties,
        "softwareName", "launchDate", "releaseNote", "model", "make", "distributionType", "devicePlatformId"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(s.toMap())
}

// toMap converts the SoftwarePackage object to a map representation for JSON marshaling.
func (s SoftwarePackage) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, s.AdditionalProperties)
    structMap["softwareName"] = s.SoftwareName
    structMap["launchDate"] = s.LaunchDate.Format(DEFAULT_DATE)
    if s.ReleaseNote != nil {
        structMap["releaseNote"] = s.ReleaseNote
    }
    structMap["model"] = s.Model
    structMap["make"] = s.Make
    structMap["distributionType"] = s.DistributionType
    structMap["devicePlatformId"] = s.DevicePlatformId
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for SoftwarePackage.
// It customizes the JSON unmarshaling process for SoftwarePackage objects.
func (s *SoftwarePackage) UnmarshalJSON(input []byte) error {
    var temp tempSoftwarePackage
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "softwareName", "launchDate", "releaseNote", "model", "make", "distributionType", "devicePlatformId")
    if err != nil {
    	return err
    }
    s.AdditionalProperties = additionalProperties
    
    s.SoftwareName = *temp.SoftwareName
    LaunchDateVal, err := time.Parse(DEFAULT_DATE, *temp.LaunchDate)
    if err != nil {
        log.Fatalf("Cannot Parse launchDate as % s format.", DEFAULT_DATE)
    }
    s.LaunchDate = LaunchDateVal
    s.ReleaseNote = temp.ReleaseNote
    s.Model = *temp.Model
    s.Make = *temp.Make
    s.DistributionType = *temp.DistributionType
    s.DevicePlatformId = *temp.DevicePlatformId
    return nil
}

// tempSoftwarePackage is a temporary struct used for validating the fields of SoftwarePackage.
type tempSoftwarePackage  struct {
    SoftwareName     *string `json:"softwareName"`
    LaunchDate       *string `json:"launchDate"`
    ReleaseNote      *string `json:"releaseNote,omitempty"`
    Model            *string `json:"model"`
    Make             *string `json:"make"`
    DistributionType *string `json:"distributionType"`
    DevicePlatformId *string `json:"devicePlatformId"`
}

func (s *tempSoftwarePackage) validate() error {
    var errs []string
    if s.SoftwareName == nil {
        errs = append(errs, "required field `softwareName` is missing for type `SoftwarePackage`")
    }
    if s.LaunchDate == nil {
        errs = append(errs, "required field `launchDate` is missing for type `SoftwarePackage`")
    }
    if s.Model == nil {
        errs = append(errs, "required field `model` is missing for type `SoftwarePackage`")
    }
    if s.Make == nil {
        errs = append(errs, "required field `make` is missing for type `SoftwarePackage`")
    }
    if s.DistributionType == nil {
        errs = append(errs, "required field `distributionType` is missing for type `SoftwarePackage`")
    }
    if s.DevicePlatformId == nil {
        errs = append(errs, "required field `devicePlatformId` is missing for type `SoftwarePackage`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
