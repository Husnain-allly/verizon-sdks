/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// DiagnosticsSubscription represents a DiagnosticsSubscription struct.
// Status of the diagnostic services subscription.
type DiagnosticsSubscription struct {
    // Account identifier in "##########-#####". An account name is usually numeric, and must include any leading zeros.
    AccountName          string                 `json:"accountName"`
    // The date and time of when the subscription was created.
    CreatedOn            time.Time              `json:"createdOn"`
    // The date and time of when the subscription was last updated.
    LastUpdated          time.Time              `json:"lastUpdated"`
    // Number of licenses currently assigned to devices.
    TotalAllowed         int                    `json:"totalAllowed"`
    // Number of licenses currently used by the devices.
    TotalUsed            int                    `json:"totalUsed"`
    // Name of the SKU for the account.
    SkuName              string                 `json:"skuName"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DiagnosticsSubscription,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DiagnosticsSubscription) String() string {
    return fmt.Sprintf(
    	"DiagnosticsSubscription[AccountName=%v, CreatedOn=%v, LastUpdated=%v, TotalAllowed=%v, TotalUsed=%v, SkuName=%v, AdditionalProperties=%v]",
    	d.AccountName, d.CreatedOn, d.LastUpdated, d.TotalAllowed, d.TotalUsed, d.SkuName, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DiagnosticsSubscription.
// It customizes the JSON marshaling process for DiagnosticsSubscription objects.
func (d DiagnosticsSubscription) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "accountName", "createdOn", "lastUpdated", "totalAllowed", "totalUsed", "skuName"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DiagnosticsSubscription object to a map representation for JSON marshaling.
func (d DiagnosticsSubscription) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    structMap["accountName"] = d.AccountName
    structMap["createdOn"] = d.CreatedOn.Format(time.RFC3339)
    structMap["lastUpdated"] = d.LastUpdated.Format(time.RFC3339)
    structMap["totalAllowed"] = d.TotalAllowed
    structMap["totalUsed"] = d.TotalUsed
    structMap["skuName"] = d.SkuName
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DiagnosticsSubscription.
// It customizes the JSON unmarshaling process for DiagnosticsSubscription objects.
func (d *DiagnosticsSubscription) UnmarshalJSON(input []byte) error {
    var temp tempDiagnosticsSubscription
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "createdOn", "lastUpdated", "totalAllowed", "totalUsed", "skuName")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.AccountName = *temp.AccountName
    CreatedOnVal, err := time.Parse(time.RFC3339, *temp.CreatedOn)
    if err != nil {
        log.Fatalf("Cannot Parse createdOn as % s format.", time.RFC3339)
    }
    d.CreatedOn = CreatedOnVal
    LastUpdatedVal, err := time.Parse(time.RFC3339, *temp.LastUpdated)
    if err != nil {
        log.Fatalf("Cannot Parse lastUpdated as % s format.", time.RFC3339)
    }
    d.LastUpdated = LastUpdatedVal
    d.TotalAllowed = *temp.TotalAllowed
    d.TotalUsed = *temp.TotalUsed
    d.SkuName = *temp.SkuName
    return nil
}

// tempDiagnosticsSubscription is a temporary struct used for validating the fields of DiagnosticsSubscription.
type tempDiagnosticsSubscription  struct {
    AccountName  *string `json:"accountName"`
    CreatedOn    *string `json:"createdOn"`
    LastUpdated  *string `json:"lastUpdated"`
    TotalAllowed *int    `json:"totalAllowed"`
    TotalUsed    *int    `json:"totalUsed"`
    SkuName      *string `json:"skuName"`
}

func (d *tempDiagnosticsSubscription) validate() error {
    var errs []string
    if d.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `DiagnosticsSubscription`")
    }
    if d.CreatedOn == nil {
        errs = append(errs, "required field `createdOn` is missing for type `DiagnosticsSubscription`")
    }
    if d.LastUpdated == nil {
        errs = append(errs, "required field `lastUpdated` is missing for type `DiagnosticsSubscription`")
    }
    if d.TotalAllowed == nil {
        errs = append(errs, "required field `totalAllowed` is missing for type `DiagnosticsSubscription`")
    }
    if d.TotalUsed == nil {
        errs = append(errs, "required field `totalUsed` is missing for type `DiagnosticsSubscription`")
    }
    if d.SkuName == nil {
        errs = append(errs, "required field `skuName` is missing for type `DiagnosticsSubscription`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
