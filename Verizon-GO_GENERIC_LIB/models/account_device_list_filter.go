/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// AccountDeviceListFilter represents a AccountDeviceListFilter struct.
// Filter for a list of devices.
type AccountDeviceListFilter struct {
    // Specify the kind of the device identifier, the type of match, and the string that you want to match.
    DeviceIdentifierFilters []DeviceIdSearch       `json:"deviceIdentifierFilters"`
    AdditionalProperties    map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for AccountDeviceListFilter,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a AccountDeviceListFilter) String() string {
    return fmt.Sprintf(
    	"AccountDeviceListFilter[DeviceIdentifierFilters=%v, AdditionalProperties=%v]",
    	a.DeviceIdentifierFilters, a.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for AccountDeviceListFilter.
// It customizes the JSON marshaling process for AccountDeviceListFilter objects.
func (a AccountDeviceListFilter) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(a.AdditionalProperties,
        "deviceIdentifierFilters"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(a.toMap())
}

// toMap converts the AccountDeviceListFilter object to a map representation for JSON marshaling.
func (a AccountDeviceListFilter) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, a.AdditionalProperties)
    structMap["deviceIdentifierFilters"] = a.DeviceIdentifierFilters
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for AccountDeviceListFilter.
// It customizes the JSON unmarshaling process for AccountDeviceListFilter objects.
func (a *AccountDeviceListFilter) UnmarshalJSON(input []byte) error {
    var temp tempAccountDeviceListFilter
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceIdentifierFilters")
    if err != nil {
    	return err
    }
    a.AdditionalProperties = additionalProperties
    
    a.DeviceIdentifierFilters = *temp.DeviceIdentifierFilters
    return nil
}

// tempAccountDeviceListFilter is a temporary struct used for validating the fields of AccountDeviceListFilter.
type tempAccountDeviceListFilter  struct {
    DeviceIdentifierFilters *[]DeviceIdSearch `json:"deviceIdentifierFilters"`
}

func (a *tempAccountDeviceListFilter) validate() error {
    var errs []string
    if a.DeviceIdentifierFilters == nil {
        errs = append(errs, "required field `deviceIdentifierFilters` is missing for type `AccountDeviceListFilter`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
