/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// DiagnosticObservationSetting represents a DiagnosticObservationSetting struct.
// Diagnostic observation settings and attributes for a device.
type DiagnosticObservationSetting struct {
    // The name of the billing account for which callback messages will be sent. Format: "##########-#####".
    AccountName          *string                `json:"accountName,omitempty"`
    // Identifies a particular IoT device.
    Device               *Device                `json:"device,omitempty"`
    // Streaming RF parameters for which you want to retrieve diagnostic settings.
    Attributes           []AttributeSetting     `json:"attributes,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DiagnosticObservationSetting,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DiagnosticObservationSetting) String() string {
    return fmt.Sprintf(
    	"DiagnosticObservationSetting[AccountName=%v, Device=%v, Attributes=%v, AdditionalProperties=%v]",
    	d.AccountName, d.Device, d.Attributes, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DiagnosticObservationSetting.
// It customizes the JSON marshaling process for DiagnosticObservationSetting objects.
func (d DiagnosticObservationSetting) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "accountName", "device", "attributes"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DiagnosticObservationSetting object to a map representation for JSON marshaling.
func (d DiagnosticObservationSetting) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    if d.AccountName != nil {
        structMap["accountName"] = d.AccountName
    }
    if d.Device != nil {
        structMap["device"] = d.Device.toMap()
    }
    if d.Attributes != nil {
        structMap["attributes"] = d.Attributes
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DiagnosticObservationSetting.
// It customizes the JSON unmarshaling process for DiagnosticObservationSetting objects.
func (d *DiagnosticObservationSetting) UnmarshalJSON(input []byte) error {
    var temp tempDiagnosticObservationSetting
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "device", "attributes")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.AccountName = temp.AccountName
    d.Device = temp.Device
    d.Attributes = temp.Attributes
    return nil
}

// tempDiagnosticObservationSetting is a temporary struct used for validating the fields of DiagnosticObservationSetting.
type tempDiagnosticObservationSetting  struct {
    AccountName *string            `json:"accountName,omitempty"`
    Device      *Device            `json:"device,omitempty"`
    Attributes  []AttributeSetting `json:"attributes,omitempty"`
}
