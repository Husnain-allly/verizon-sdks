/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// FirmwareUpgradeChangeResult represents a FirmwareUpgradeChangeResult struct.
// Upgrade information.
type FirmwareUpgradeChangeResult struct {
    // Account identifier in "##########-#####".
    AccountName          *string                `json:"accountName,omitempty"`
    // The unique identifier for this upgrade.
    Id                   *string                `json:"id,omitempty"`
    // A JSON object for each device that was included in the request, showing the device IMEI, the status of the addition or removal, and additional information about the status.
    DeviceList           []V1DeviceListItem     `json:"deviceList,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for FirmwareUpgradeChangeResult,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (f FirmwareUpgradeChangeResult) String() string {
    return fmt.Sprintf(
    	"FirmwareUpgradeChangeResult[AccountName=%v, Id=%v, DeviceList=%v, AdditionalProperties=%v]",
    	f.AccountName, f.Id, f.DeviceList, f.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for FirmwareUpgradeChangeResult.
// It customizes the JSON marshaling process for FirmwareUpgradeChangeResult objects.
func (f FirmwareUpgradeChangeResult) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(f.AdditionalProperties,
        "accountName", "id", "deviceList"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(f.toMap())
}

// toMap converts the FirmwareUpgradeChangeResult object to a map representation for JSON marshaling.
func (f FirmwareUpgradeChangeResult) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, f.AdditionalProperties)
    if f.AccountName != nil {
        structMap["accountName"] = f.AccountName
    }
    if f.Id != nil {
        structMap["id"] = f.Id
    }
    if f.DeviceList != nil {
        structMap["deviceList"] = f.DeviceList
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for FirmwareUpgradeChangeResult.
// It customizes the JSON unmarshaling process for FirmwareUpgradeChangeResult objects.
func (f *FirmwareUpgradeChangeResult) UnmarshalJSON(input []byte) error {
    var temp tempFirmwareUpgradeChangeResult
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "id", "deviceList")
    if err != nil {
    	return err
    }
    f.AdditionalProperties = additionalProperties
    
    f.AccountName = temp.AccountName
    f.Id = temp.Id
    f.DeviceList = temp.DeviceList
    return nil
}

// tempFirmwareUpgradeChangeResult is a temporary struct used for validating the fields of FirmwareUpgradeChangeResult.
type tempFirmwareUpgradeChangeResult  struct {
    AccountName *string            `json:"accountName,omitempty"`
    Id          *string            `json:"id,omitempty"`
    DeviceList  []V1DeviceListItem `json:"deviceList,omitempty"`
}
