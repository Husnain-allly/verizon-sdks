/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
    "log"
    "time"
)

// DtoSensorBoardingEvent represents a DtoSensorBoardingEvent struct.
type DtoSensorBoardingEvent struct {
    // Timestamp of the record
    Createdon     *time.Time `json:"createdon,omitempty"`
    // Error message
    Errmsg        *string    `json:"errmsg,omitempty"`
    // Fields to return needed by search
    Fields        *DtoFields `json:"fields,omitempty"`
    // The current status of the device or transaction and will be `success` or `failed`
    State         *string    `json:"state,omitempty"`
    // The system-generated UUID of the transaction
    Transactionid *string    `json:"transactionid,omitempty"`
}

// String implements the fmt.Stringer interface for DtoSensorBoardingEvent,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DtoSensorBoardingEvent) String() string {
    return fmt.Sprintf(
    	"DtoSensorBoardingEvent[Createdon=%v, Errmsg=%v, Fields=%v, State=%v, Transactionid=%v]",
    	d.Createdon, d.Errmsg, d.Fields, d.State, d.Transactionid)
}

// MarshalJSON implements the json.Marshaler interface for DtoSensorBoardingEvent.
// It customizes the JSON marshaling process for DtoSensorBoardingEvent objects.
func (d DtoSensorBoardingEvent) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(d.toMap())
}

// toMap converts the DtoSensorBoardingEvent object to a map representation for JSON marshaling.
func (d DtoSensorBoardingEvent) toMap() map[string]any {
    structMap := make(map[string]any)
    if d.Createdon != nil {
        structMap["createdon"] = d.Createdon.Format(time.RFC3339)
    }
    if d.Errmsg != nil {
        structMap["errmsg"] = d.Errmsg
    }
    if d.Fields != nil {
        structMap["fields"] = d.Fields.toMap()
    }
    if d.State != nil {
        structMap["state"] = d.State
    }
    if d.Transactionid != nil {
        structMap["transactionid"] = d.Transactionid
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DtoSensorBoardingEvent.
// It customizes the JSON unmarshaling process for DtoSensorBoardingEvent objects.
func (d *DtoSensorBoardingEvent) UnmarshalJSON(input []byte) error {
    var temp tempDtoSensorBoardingEvent
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    
    if temp.Createdon != nil {
        CreatedonVal, err := time.Parse(time.RFC3339, *temp.Createdon)
        if err != nil {
            log.Fatalf("Cannot Parse createdon as % s format.", time.RFC3339)
        }
        d.Createdon = &CreatedonVal
    }
    d.Errmsg = temp.Errmsg
    d.Fields = temp.Fields
    d.State = temp.State
    d.Transactionid = temp.Transactionid
    return nil
}

// tempDtoSensorBoardingEvent is a temporary struct used for validating the fields of DtoSensorBoardingEvent.
type tempDtoSensorBoardingEvent  struct {
    Createdon     *string    `json:"createdon,omitempty"`
    Errmsg        *string    `json:"errmsg,omitempty"`
    Fields        *DtoFields `json:"fields,omitempty"`
    State         *string    `json:"state,omitempty"`
    Transactionid *string    `json:"transactionid,omitempty"`
}
