/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// V1ListOfLicensesToRemoveRequest represents a V1ListOfLicensesToRemoveRequest struct.
// List of devices to removes.
type V1ListOfLicensesToRemoveRequest struct {
    // Set to 'append' to append the devices in the current request to the existing list. If there is no existing list then it will be created with only these devices. Leave this parameter out when you want to replace the existing list with the devices in the current request.
    Type                 *string                `json:"type,omitempty"`
    // The IMEIs of the devices.
    DeviceList           []string               `json:"deviceList"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for V1ListOfLicensesToRemoveRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (v V1ListOfLicensesToRemoveRequest) String() string {
    return fmt.Sprintf(
    	"V1ListOfLicensesToRemoveRequest[Type=%v, DeviceList=%v, AdditionalProperties=%v]",
    	v.Type, v.DeviceList, v.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for V1ListOfLicensesToRemoveRequest.
// It customizes the JSON marshaling process for V1ListOfLicensesToRemoveRequest objects.
func (v V1ListOfLicensesToRemoveRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(v.AdditionalProperties,
        "type", "deviceList"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(v.toMap())
}

// toMap converts the V1ListOfLicensesToRemoveRequest object to a map representation for JSON marshaling.
func (v V1ListOfLicensesToRemoveRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, v.AdditionalProperties)
    if v.Type != nil {
        structMap["type"] = v.Type
    }
    structMap["deviceList"] = v.DeviceList
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for V1ListOfLicensesToRemoveRequest.
// It customizes the JSON unmarshaling process for V1ListOfLicensesToRemoveRequest objects.
func (v *V1ListOfLicensesToRemoveRequest) UnmarshalJSON(input []byte) error {
    var temp tempV1ListOfLicensesToRemoveRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "type", "deviceList")
    if err != nil {
    	return err
    }
    v.AdditionalProperties = additionalProperties
    
    v.Type = temp.Type
    v.DeviceList = *temp.DeviceList
    return nil
}

// tempV1ListOfLicensesToRemoveRequest is a temporary struct used for validating the fields of V1ListOfLicensesToRemoveRequest.
type tempV1ListOfLicensesToRemoveRequest  struct {
    Type       *string   `json:"type,omitempty"`
    DeviceList *[]string `json:"deviceList"`
}

func (v *tempV1ListOfLicensesToRemoveRequest) validate() error {
    var errs []string
    if v.DeviceList == nil {
        errs = append(errs, "required field `deviceList` is missing for type `V1ListOfLicensesToRemoveRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
