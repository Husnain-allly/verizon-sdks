/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// Keyschunk2 represents a Keyschunk2 struct.
type Keyschunk2 struct {
    DataPercentage50     *bool                  `json:"dataPercentage50,omitempty"`
    DataPercentage75     *bool                  `json:"dataPercentage75,omitempty"`
    DataPercentage90     *bool                  `json:"dataPercentage90,omitempty"`
    DataPercentage100    *bool                  `json:"dataPercentage100,omitempty"`
    SmsPercentage50      *bool                  `json:"smsPercentage50,omitempty"`
    SmsPercentage75      *bool                  `json:"smsPercentage75,omitempty"`
    SmsPercentage90      *bool                  `json:"smsPercentage90,omitempty"`
    SmsPercentage100     *bool                  `json:"smsPercentage100,omitempty"`
    NoOfDaysB4PromoExp   *int                   `json:"NoOfDaysB4PromoExp,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for Keyschunk2,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (k Keyschunk2) String() string {
    return fmt.Sprintf(
    	"Keyschunk2[DataPercentage50=%v, DataPercentage75=%v, DataPercentage90=%v, DataPercentage100=%v, SmsPercentage50=%v, SmsPercentage75=%v, SmsPercentage90=%v, SmsPercentage100=%v, NoOfDaysB4PromoExp=%v, AdditionalProperties=%v]",
    	k.DataPercentage50, k.DataPercentage75, k.DataPercentage90, k.DataPercentage100, k.SmsPercentage50, k.SmsPercentage75, k.SmsPercentage90, k.SmsPercentage100, k.NoOfDaysB4PromoExp, k.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for Keyschunk2.
// It customizes the JSON marshaling process for Keyschunk2 objects.
func (k Keyschunk2) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(k.AdditionalProperties,
        "dataPercentage50", "dataPercentage75", "dataPercentage90", "dataPercentage100", "smsPercentage50", "smsPercentage75", "smsPercentage90", "smsPercentage100", "NoOfDaysB4PromoExp"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(k.toMap())
}

// toMap converts the Keyschunk2 object to a map representation for JSON marshaling.
func (k Keyschunk2) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, k.AdditionalProperties)
    if k.DataPercentage50 != nil {
        structMap["dataPercentage50"] = k.DataPercentage50
    }
    if k.DataPercentage75 != nil {
        structMap["dataPercentage75"] = k.DataPercentage75
    }
    if k.DataPercentage90 != nil {
        structMap["dataPercentage90"] = k.DataPercentage90
    }
    if k.DataPercentage100 != nil {
        structMap["dataPercentage100"] = k.DataPercentage100
    }
    if k.SmsPercentage50 != nil {
        structMap["smsPercentage50"] = k.SmsPercentage50
    }
    if k.SmsPercentage75 != nil {
        structMap["smsPercentage75"] = k.SmsPercentage75
    }
    if k.SmsPercentage90 != nil {
        structMap["smsPercentage90"] = k.SmsPercentage90
    }
    if k.SmsPercentage100 != nil {
        structMap["smsPercentage100"] = k.SmsPercentage100
    }
    if k.NoOfDaysB4PromoExp != nil {
        structMap["NoOfDaysB4PromoExp"] = k.NoOfDaysB4PromoExp
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Keyschunk2.
// It customizes the JSON unmarshaling process for Keyschunk2 objects.
func (k *Keyschunk2) UnmarshalJSON(input []byte) error {
    var temp tempKeyschunk2
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "dataPercentage50", "dataPercentage75", "dataPercentage90", "dataPercentage100", "smsPercentage50", "smsPercentage75", "smsPercentage90", "smsPercentage100", "NoOfDaysB4PromoExp")
    if err != nil {
    	return err
    }
    k.AdditionalProperties = additionalProperties
    
    k.DataPercentage50 = temp.DataPercentage50
    k.DataPercentage75 = temp.DataPercentage75
    k.DataPercentage90 = temp.DataPercentage90
    k.DataPercentage100 = temp.DataPercentage100
    k.SmsPercentage50 = temp.SmsPercentage50
    k.SmsPercentage75 = temp.SmsPercentage75
    k.SmsPercentage90 = temp.SmsPercentage90
    k.SmsPercentage100 = temp.SmsPercentage100
    k.NoOfDaysB4PromoExp = temp.NoOfDaysB4PromoExp
    return nil
}

// tempKeyschunk2 is a temporary struct used for validating the fields of Keyschunk2.
type tempKeyschunk2  struct {
    DataPercentage50   *bool `json:"dataPercentage50,omitempty"`
    DataPercentage75   *bool `json:"dataPercentage75,omitempty"`
    DataPercentage90   *bool `json:"dataPercentage90,omitempty"`
    DataPercentage100  *bool `json:"dataPercentage100,omitempty"`
    SmsPercentage50    *bool `json:"smsPercentage50,omitempty"`
    SmsPercentage75    *bool `json:"smsPercentage75,omitempty"`
    SmsPercentage90    *bool `json:"smsPercentage90,omitempty"`
    SmsPercentage100   *bool `json:"smsPercentage100,omitempty"`
    NoOfDaysB4PromoExp *int  `json:"NoOfDaysB4PromoExp,omitempty"`
}
