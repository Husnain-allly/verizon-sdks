/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// AccountGroupShareUpdateTriggerRequest represents a AccountGroupShareUpdateTriggerRequest struct.
type AccountGroupShareUpdateTriggerRequest struct {
    // The system assigned UUID of the trigger
    TriggerId       *string                  `json:"triggerId,omitempty"`
    // The user defined name of the trigger
    TriggerName     *string                  `json:"triggerName,omitempty"`
    // The numeric name of the account and must include leading zeroes
    AccountName     *string                  `json:"accountName,omitempty"`
    // The type of trigger being created or modified
    TriggerCategory *TriggerCategory         `json:"triggerCategory,omitempty"`
    DataTrigger     *AccountGroupShareObject `json:"dataTrigger,omitempty"`
    Notification    *Notificationarray       `json:"notification,omitempty"`
    // A flag to indicate of the trigger is active, true, or not, false
    Active          *Active                  `json:"active,omitempty"`
}

// String implements the fmt.Stringer interface for AccountGroupShareUpdateTriggerRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a AccountGroupShareUpdateTriggerRequest) String() string {
    return fmt.Sprintf(
    	"AccountGroupShareUpdateTriggerRequest[TriggerId=%v, TriggerName=%v, AccountName=%v, TriggerCategory=%v, DataTrigger=%v, Notification=%v, Active=%v]",
    	a.TriggerId, a.TriggerName, a.AccountName, a.TriggerCategory, a.DataTrigger, a.Notification, a.Active)
}

// MarshalJSON implements the json.Marshaler interface for AccountGroupShareUpdateTriggerRequest.
// It customizes the JSON marshaling process for AccountGroupShareUpdateTriggerRequest objects.
func (a AccountGroupShareUpdateTriggerRequest) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(a.toMap())
}

// toMap converts the AccountGroupShareUpdateTriggerRequest object to a map representation for JSON marshaling.
func (a AccountGroupShareUpdateTriggerRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    if a.TriggerId != nil {
        structMap["triggerId"] = a.TriggerId
    }
    if a.TriggerName != nil {
        structMap["triggerName"] = a.TriggerName
    }
    if a.AccountName != nil {
        structMap["accountName"] = a.AccountName
    }
    if a.TriggerCategory != nil {
        structMap["triggerCategory"] = a.TriggerCategory
    }
    if a.DataTrigger != nil {
        structMap["dataTrigger"] = a.DataTrigger.toMap()
    }
    if a.Notification != nil {
        structMap["notification"] = a.Notification.toMap()
    }
    if a.Active != nil {
        structMap["active"] = a.Active
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for AccountGroupShareUpdateTriggerRequest.
// It customizes the JSON unmarshaling process for AccountGroupShareUpdateTriggerRequest objects.
func (a *AccountGroupShareUpdateTriggerRequest) UnmarshalJSON(input []byte) error {
    var temp tempAccountGroupShareUpdateTriggerRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    
    a.TriggerId = temp.TriggerId
    a.TriggerName = temp.TriggerName
    a.AccountName = temp.AccountName
    a.TriggerCategory = temp.TriggerCategory
    a.DataTrigger = temp.DataTrigger
    a.Notification = temp.Notification
    a.Active = temp.Active
    return nil
}

// tempAccountGroupShareUpdateTriggerRequest is a temporary struct used for validating the fields of AccountGroupShareUpdateTriggerRequest.
type tempAccountGroupShareUpdateTriggerRequest  struct {
    TriggerId       *string                  `json:"triggerId,omitempty"`
    TriggerName     *string                  `json:"triggerName,omitempty"`
    AccountName     *string                  `json:"accountName,omitempty"`
    TriggerCategory *TriggerCategory         `json:"triggerCategory,omitempty"`
    DataTrigger     *AccountGroupShareObject `json:"dataTrigger,omitempty"`
    Notification    *Notificationarray       `json:"notification,omitempty"`
    Active          *Active                  `json:"active,omitempty"`
}
