/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// ServiceUsage represents a ServiceUsage struct.
type ServiceUsage struct {
    // Account identifier.
    AccountName          *string                `json:"accountName,omitempty"`
    // Total requests for the account during the reporting period.
    TransactionsCount    *string                `json:"transactionsCount,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for ServiceUsage,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (s ServiceUsage) String() string {
    return fmt.Sprintf(
    	"ServiceUsage[AccountName=%v, TransactionsCount=%v, AdditionalProperties=%v]",
    	s.AccountName, s.TransactionsCount, s.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for ServiceUsage.
// It customizes the JSON marshaling process for ServiceUsage objects.
func (s ServiceUsage) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(s.AdditionalProperties,
        "accountName", "transactionsCount"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(s.toMap())
}

// toMap converts the ServiceUsage object to a map representation for JSON marshaling.
func (s ServiceUsage) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, s.AdditionalProperties)
    if s.AccountName != nil {
        structMap["accountName"] = s.AccountName
    }
    if s.TransactionsCount != nil {
        structMap["transactionsCount"] = s.TransactionsCount
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ServiceUsage.
// It customizes the JSON unmarshaling process for ServiceUsage objects.
func (s *ServiceUsage) UnmarshalJSON(input []byte) error {
    var temp tempServiceUsage
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "transactionsCount")
    if err != nil {
    	return err
    }
    s.AdditionalProperties = additionalProperties
    
    s.AccountName = temp.AccountName
    s.TransactionsCount = temp.TransactionsCount
    return nil
}

// tempServiceUsage is a temporary struct used for validating the fields of ServiceUsage.
type tempServiceUsage  struct {
    AccountName       *string `json:"accountName,omitempty"`
    TransactionsCount *string `json:"transactionsCount,omitempty"`
}
