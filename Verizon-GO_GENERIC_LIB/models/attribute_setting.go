/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
    "log"
    "time"
)

// AttributeSetting represents a AttributeSetting struct.
// Describes an attribute being observed and the frequency with which the attribute is being observed.
type AttributeSetting struct {
    // Attribute identifier.
    Name                 *AttributeIdentifier   `json:"name,omitempty"`
    // Attribute value.
    Value                *string                `json:"value,omitempty"`
    // Date and time request was created.
    CreatedOn            *time.Time             `json:"createdOn,omitempty"`
    // Is the attribute observable?
    IsObservable         *bool                  `json:"isObservable,omitempty"`
    // Is the attribute being observed?
    IsObserving          *bool                  `json:"isObserving,omitempty"`
    // Describes value and unit of time.
    Frequency            *NumericalData         `json:"frequency,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for AttributeSetting,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a AttributeSetting) String() string {
    return fmt.Sprintf(
    	"AttributeSetting[Name=%v, Value=%v, CreatedOn=%v, IsObservable=%v, IsObserving=%v, Frequency=%v, AdditionalProperties=%v]",
    	a.Name, a.Value, a.CreatedOn, a.IsObservable, a.IsObserving, a.Frequency, a.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for AttributeSetting.
// It customizes the JSON marshaling process for AttributeSetting objects.
func (a AttributeSetting) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(a.AdditionalProperties,
        "name", "value", "createdOn", "isObservable", "isObserving", "frequency"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(a.toMap())
}

// toMap converts the AttributeSetting object to a map representation for JSON marshaling.
func (a AttributeSetting) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, a.AdditionalProperties)
    if a.Name != nil {
        structMap["name"] = a.Name
    }
    if a.Value != nil {
        structMap["value"] = a.Value
    }
    if a.CreatedOn != nil {
        structMap["createdOn"] = a.CreatedOn.Format(time.RFC3339)
    }
    if a.IsObservable != nil {
        structMap["isObservable"] = a.IsObservable
    }
    if a.IsObserving != nil {
        structMap["isObserving"] = a.IsObserving
    }
    if a.Frequency != nil {
        structMap["frequency"] = a.Frequency.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for AttributeSetting.
// It customizes the JSON unmarshaling process for AttributeSetting objects.
func (a *AttributeSetting) UnmarshalJSON(input []byte) error {
    var temp tempAttributeSetting
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "name", "value", "createdOn", "isObservable", "isObserving", "frequency")
    if err != nil {
    	return err
    }
    a.AdditionalProperties = additionalProperties
    
    a.Name = temp.Name
    a.Value = temp.Value
    if temp.CreatedOn != nil {
        CreatedOnVal, err := time.Parse(time.RFC3339, *temp.CreatedOn)
        if err != nil {
            log.Fatalf("Cannot Parse createdOn as % s format.", time.RFC3339)
        }
        a.CreatedOn = &CreatedOnVal
    }
    a.IsObservable = temp.IsObservable
    a.IsObserving = temp.IsObserving
    a.Frequency = temp.Frequency
    return nil
}

// tempAttributeSetting is a temporary struct used for validating the fields of AttributeSetting.
type tempAttributeSetting  struct {
    Name         *AttributeIdentifier `json:"name,omitempty"`
    Value        *string              `json:"value,omitempty"`
    CreatedOn    *string              `json:"createdOn,omitempty"`
    IsObservable *bool                `json:"isObservable,omitempty"`
    IsObserving  *bool                `json:"isObserving,omitempty"`
    Frequency    *NumericalData       `json:"frequency,omitempty"`
}
