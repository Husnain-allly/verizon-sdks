/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// IpPool represents a IpPool struct.
// IP pool that is available to the account.
type IpPool struct {
    // The name of the IP pool.
    PoolName             *string                `json:"poolName,omitempty"`
    // The type of IP pool, such as “Static IP” or “Dynamic IP.”
    PoolType             *string                `json:"poolType,omitempty"`
    // True if this is the default IP pool for the account.
    IsDefaultPool        *bool                  `json:"isDefaultPool,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for IpPool,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (i IpPool) String() string {
    return fmt.Sprintf(
    	"IpPool[PoolName=%v, PoolType=%v, IsDefaultPool=%v, AdditionalProperties=%v]",
    	i.PoolName, i.PoolType, i.IsDefaultPool, i.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for IpPool.
// It customizes the JSON marshaling process for IpPool objects.
func (i IpPool) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(i.AdditionalProperties,
        "poolName", "poolType", "isDefaultPool"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(i.toMap())
}

// toMap converts the IpPool object to a map representation for JSON marshaling.
func (i IpPool) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, i.AdditionalProperties)
    if i.PoolName != nil {
        structMap["poolName"] = i.PoolName
    }
    if i.PoolType != nil {
        structMap["poolType"] = i.PoolType
    }
    if i.IsDefaultPool != nil {
        structMap["isDefaultPool"] = i.IsDefaultPool
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for IpPool.
// It customizes the JSON unmarshaling process for IpPool objects.
func (i *IpPool) UnmarshalJSON(input []byte) error {
    var temp tempIpPool
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "poolName", "poolType", "isDefaultPool")
    if err != nil {
    	return err
    }
    i.AdditionalProperties = additionalProperties
    
    i.PoolName = temp.PoolName
    i.PoolType = temp.PoolType
    i.IsDefaultPool = temp.IsDefaultPool
    return nil
}

// tempIpPool is a temporary struct used for validating the fields of IpPool.
type tempIpPool  struct {
    PoolName      *string `json:"poolName,omitempty"`
    PoolType      *string `json:"poolType,omitempty"`
    IsDefaultPool *bool   `json:"isDefaultPool,omitempty"`
}
