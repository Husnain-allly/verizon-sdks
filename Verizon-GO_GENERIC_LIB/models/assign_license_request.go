/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// AssignLicenseRequest represents a AssignLicenseRequest struct.
// Request to assign license.
type AssignLicenseRequest struct {
    // The name of a billing account.This parameter is required only if the UWS account used for the current API session has access to multiple accounts. An account name is usually numeric, and must include any leading zeros.
    AccountName *string             `json:"accountName,omitempty"`
    // A list of 4G devices.
    Devices     []LicenseDeviceList `json:"devices,omitempty"`
    // The Stock Keeping Unit (SKU). Valid skuNumbers for license types: “SIMSec-IoT-Lt”. (Lifetime) Once a license is assigned to a SIM, the SIM-Secure feature is enabled for the life of the SIM.“TS-BUNDLE-KTO-SIMSEC-MRC”. (Bundle) The SIM-Secure Flex license can be assigned to or removed from a SIM at any time. This SKU is bundled with other ThingSpace Services.“SIMSec-IoT”. (Flex) The SIM-Secure Flex license can be assigned to or removed from a SIM at any time. This SKU is purchased a la carte.
    SkuNumber   *string             `json:"skuNumber,omitempty"`
}

// String implements the fmt.Stringer interface for AssignLicenseRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a AssignLicenseRequest) String() string {
    return fmt.Sprintf(
    	"AssignLicenseRequest[AccountName=%v, Devices=%v, SkuNumber=%v]",
    	a.AccountName, a.Devices, a.SkuNumber)
}

// MarshalJSON implements the json.Marshaler interface for AssignLicenseRequest.
// It customizes the JSON marshaling process for AssignLicenseRequest objects.
func (a AssignLicenseRequest) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(a.toMap())
}

// toMap converts the AssignLicenseRequest object to a map representation for JSON marshaling.
func (a AssignLicenseRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    if a.AccountName != nil {
        structMap["accountName"] = a.AccountName
    }
    if a.Devices != nil {
        structMap["devices"] = a.Devices
    }
    if a.SkuNumber != nil {
        structMap["skuNumber"] = a.SkuNumber
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for AssignLicenseRequest.
// It customizes the JSON unmarshaling process for AssignLicenseRequest objects.
func (a *AssignLicenseRequest) UnmarshalJSON(input []byte) error {
    var temp tempAssignLicenseRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    
    a.AccountName = temp.AccountName
    a.Devices = temp.Devices
    a.SkuNumber = temp.SkuNumber
    return nil
}

// tempAssignLicenseRequest is a temporary struct used for validating the fields of AssignLicenseRequest.
type tempAssignLicenseRequest  struct {
    AccountName *string             `json:"accountName,omitempty"`
    Devices     []LicenseDeviceList `json:"devices,omitempty"`
    SkuNumber   *string             `json:"skuNumber,omitempty"`
}
