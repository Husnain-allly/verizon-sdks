/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// CarrierServicePlan represents a CarrierServicePlan struct.
type CarrierServicePlan struct {
    // The name of the service plan
    Name                   *string                `json:"name,omitempty"`
    // The inventory name or system name of the service plan
    Code                   *string                `json:"code,omitempty"`
    // The ammount of space the service plan will occupy on the Subscriber Information Module (SIM)
    SizeKb                 *string                `json:"sizeKb,omitempty"`
    // The billing record ID. This can be numeric, alpha or alphanumeric.
    CarrierServicePlanCode *string                `json:"carrierServicePlanCode,omitempty"`
    AdditionalProperties   map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for CarrierServicePlan,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c CarrierServicePlan) String() string {
    return fmt.Sprintf(
    	"CarrierServicePlan[Name=%v, Code=%v, SizeKb=%v, CarrierServicePlanCode=%v, AdditionalProperties=%v]",
    	c.Name, c.Code, c.SizeKb, c.CarrierServicePlanCode, c.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for CarrierServicePlan.
// It customizes the JSON marshaling process for CarrierServicePlan objects.
func (c CarrierServicePlan) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(c.AdditionalProperties,
        "name", "code", "sizeKb", "carrierServicePlanCode"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(c.toMap())
}

// toMap converts the CarrierServicePlan object to a map representation for JSON marshaling.
func (c CarrierServicePlan) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, c.AdditionalProperties)
    if c.Name != nil {
        structMap["name"] = c.Name
    }
    if c.Code != nil {
        structMap["code"] = c.Code
    }
    if c.SizeKb != nil {
        structMap["sizeKb"] = c.SizeKb
    }
    if c.CarrierServicePlanCode != nil {
        structMap["carrierServicePlanCode"] = c.CarrierServicePlanCode
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for CarrierServicePlan.
// It customizes the JSON unmarshaling process for CarrierServicePlan objects.
func (c *CarrierServicePlan) UnmarshalJSON(input []byte) error {
    var temp tempCarrierServicePlan
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "name", "code", "sizeKb", "carrierServicePlanCode")
    if err != nil {
    	return err
    }
    c.AdditionalProperties = additionalProperties
    
    c.Name = temp.Name
    c.Code = temp.Code
    c.SizeKb = temp.SizeKb
    c.CarrierServicePlanCode = temp.CarrierServicePlanCode
    return nil
}

// tempCarrierServicePlan is a temporary struct used for validating the fields of CarrierServicePlan.
type tempCarrierServicePlan  struct {
    Name                   *string `json:"name,omitempty"`
    Code                   *string `json:"code,omitempty"`
    SizeKb                 *string `json:"sizeKb,omitempty"`
    CarrierServicePlanCode *string `json:"carrierServicePlanCode,omitempty"`
}
