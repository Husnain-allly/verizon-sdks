/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// EsimGlobalDeviceList represents a EsimGlobalDeviceList struct.
type EsimGlobalDeviceList struct {
    // The numeric name of the account.
    AccountName              *string                   `json:"accountName,omitempty"`
    // The last status of the device as a list filter.
    ProvisioningStatusFilter *ProvisioningStatusFilter `json:"provisioningStatusFilter,omitempty"`
    // The last status of the device's profile as a filter.
    ProfileStatusFilter      *ProfileStatusFilter      `json:"profileStatusFilter,omitempty"`
    // The cellular service provider.
    CarrierNameFilter        *string                   `json:"carrierNameFilter,omitempty"`
    // An array of device identifiers to filter the list.
    DeviceFilter             []DeviceId2               `json:"deviceFilter,omitempty"`
}

// String implements the fmt.Stringer interface for EsimGlobalDeviceList,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (e EsimGlobalDeviceList) String() string {
    return fmt.Sprintf(
    	"EsimGlobalDeviceList[AccountName=%v, ProvisioningStatusFilter=%v, ProfileStatusFilter=%v, CarrierNameFilter=%v, DeviceFilter=%v]",
    	e.AccountName, e.ProvisioningStatusFilter, e.ProfileStatusFilter, e.CarrierNameFilter, e.DeviceFilter)
}

// MarshalJSON implements the json.Marshaler interface for EsimGlobalDeviceList.
// It customizes the JSON marshaling process for EsimGlobalDeviceList objects.
func (e EsimGlobalDeviceList) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(e.toMap())
}

// toMap converts the EsimGlobalDeviceList object to a map representation for JSON marshaling.
func (e EsimGlobalDeviceList) toMap() map[string]any {
    structMap := make(map[string]any)
    if e.AccountName != nil {
        structMap["accountName"] = e.AccountName
    }
    if e.ProvisioningStatusFilter != nil {
        structMap["provisioningStatusFilter"] = e.ProvisioningStatusFilter
    }
    if e.ProfileStatusFilter != nil {
        structMap["profileStatusFilter"] = e.ProfileStatusFilter
    }
    if e.CarrierNameFilter != nil {
        structMap["carrierNameFilter"] = e.CarrierNameFilter
    }
    if e.DeviceFilter != nil {
        structMap["deviceFilter"] = e.DeviceFilter
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for EsimGlobalDeviceList.
// It customizes the JSON unmarshaling process for EsimGlobalDeviceList objects.
func (e *EsimGlobalDeviceList) UnmarshalJSON(input []byte) error {
    var temp tempEsimGlobalDeviceList
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    
    e.AccountName = temp.AccountName
    e.ProvisioningStatusFilter = temp.ProvisioningStatusFilter
    e.ProfileStatusFilter = temp.ProfileStatusFilter
    e.CarrierNameFilter = temp.CarrierNameFilter
    e.DeviceFilter = temp.DeviceFilter
    return nil
}

// tempEsimGlobalDeviceList is a temporary struct used for validating the fields of EsimGlobalDeviceList.
type tempEsimGlobalDeviceList  struct {
    AccountName              *string                   `json:"accountName,omitempty"`
    ProvisioningStatusFilter *ProvisioningStatusFilter `json:"provisioningStatusFilter,omitempty"`
    ProfileStatusFilter      *ProfileStatusFilter      `json:"profileStatusFilter,omitempty"`
    CarrierNameFilter        *string                   `json:"carrierNameFilter,omitempty"`
    DeviceFilter             []DeviceId2               `json:"deviceFilter,omitempty"`
}
