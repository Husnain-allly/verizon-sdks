/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// AccountLevelUpdateTriggerRequest represents a AccountLevelUpdateTriggerRequest struct.
type AccountLevelUpdateTriggerRequest struct {
    // The system assigned UUID of the trigger
    TriggerId                     *string            `json:"triggerId,omitempty"`
    // The user defined name of the trigger
    TriggerName                   *string            `json:"triggerName,omitempty"`
    // The Enterprise Customer Profile Database ID
    EcpdId                        *string            `json:"ecpdId,omitempty"`
    // The type of trigger being created or modified
    TriggerCategory               *TriggerCategory   `json:"triggerCategory,omitempty"`
    DataTrigger                   *DataTrigger1      `json:"dataTrigger,omitempty"`
    Notification                  *Notificationarray `json:"notification,omitempty"`
    NotificationType              *string            `json:"notificationType,omitempty"`
    Callback                      *bool              `json:"callback,omitempty"`
    EmailNotification             *bool              `json:"emailNotification,omitempty"`
    NotificationGroupName         *string            `json:"notificationGroupName,omitempty"`
    NotificationFrequencyFactor   *int               `json:"notificationFrequencyFactor,omitempty"`
    NotificationFrequencyInterval *string            `json:"notificationFrequencyInterval,omitempty"`
    ExternalEmailRecipients       *string            `json:"externalEmailRecipients,omitempty"`
    SmsNotification               *bool              `json:"smsNotification,omitempty"`
    SmsNumbers                    []Cellphonenumber  `json:"smsNumbers,omitempty"`
    Reminder                      *bool              `json:"reminder,omitempty"`
    Severity                      *string            `json:"severity,omitempty"`
    // A flag to indicate of the trigger is active, true, or not, false
    Active                        *Active            `json:"active,omitempty"`
}

// String implements the fmt.Stringer interface for AccountLevelUpdateTriggerRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a AccountLevelUpdateTriggerRequest) String() string {
    return fmt.Sprintf(
    	"AccountLevelUpdateTriggerRequest[TriggerId=%v, TriggerName=%v, EcpdId=%v, TriggerCategory=%v, DataTrigger=%v, Notification=%v, NotificationType=%v, Callback=%v, EmailNotification=%v, NotificationGroupName=%v, NotificationFrequencyFactor=%v, NotificationFrequencyInterval=%v, ExternalEmailRecipients=%v, SmsNotification=%v, SmsNumbers=%v, Reminder=%v, Severity=%v, Active=%v]",
    	a.TriggerId, a.TriggerName, a.EcpdId, a.TriggerCategory, a.DataTrigger, a.Notification, a.NotificationType, a.Callback, a.EmailNotification, a.NotificationGroupName, a.NotificationFrequencyFactor, a.NotificationFrequencyInterval, a.ExternalEmailRecipients, a.SmsNotification, a.SmsNumbers, a.Reminder, a.Severity, a.Active)
}

// MarshalJSON implements the json.Marshaler interface for AccountLevelUpdateTriggerRequest.
// It customizes the JSON marshaling process for AccountLevelUpdateTriggerRequest objects.
func (a AccountLevelUpdateTriggerRequest) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(a.toMap())
}

// toMap converts the AccountLevelUpdateTriggerRequest object to a map representation for JSON marshaling.
func (a AccountLevelUpdateTriggerRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    if a.TriggerId != nil {
        structMap["triggerId"] = a.TriggerId
    }
    if a.TriggerName != nil {
        structMap["triggerName"] = a.TriggerName
    }
    if a.EcpdId != nil {
        structMap["ecpdId"] = a.EcpdId
    }
    if a.TriggerCategory != nil {
        structMap["triggerCategory"] = a.TriggerCategory
    }
    if a.DataTrigger != nil {
        structMap["dataTrigger"] = a.DataTrigger.toMap()
    }
    if a.Notification != nil {
        structMap["notification"] = a.Notification.toMap()
    }
    if a.NotificationType != nil {
        structMap["notificationType"] = a.NotificationType
    }
    if a.Callback != nil {
        structMap["callback"] = a.Callback
    }
    if a.EmailNotification != nil {
        structMap["emailNotification"] = a.EmailNotification
    }
    if a.NotificationGroupName != nil {
        structMap["notificationGroupName"] = a.NotificationGroupName
    }
    if a.NotificationFrequencyFactor != nil {
        structMap["notificationFrequencyFactor"] = a.NotificationFrequencyFactor
    }
    if a.NotificationFrequencyInterval != nil {
        structMap["notificationFrequencyInterval"] = a.NotificationFrequencyInterval
    }
    if a.ExternalEmailRecipients != nil {
        structMap["externalEmailRecipients"] = a.ExternalEmailRecipients
    }
    if a.SmsNotification != nil {
        structMap["smsNotification"] = a.SmsNotification
    }
    if a.SmsNumbers != nil {
        structMap["smsNumbers"] = a.SmsNumbers
    }
    if a.Reminder != nil {
        structMap["reminder"] = a.Reminder
    }
    if a.Severity != nil {
        structMap["severity"] = a.Severity
    }
    if a.Active != nil {
        structMap["active"] = a.Active
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for AccountLevelUpdateTriggerRequest.
// It customizes the JSON unmarshaling process for AccountLevelUpdateTriggerRequest objects.
func (a *AccountLevelUpdateTriggerRequest) UnmarshalJSON(input []byte) error {
    var temp tempAccountLevelUpdateTriggerRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    
    a.TriggerId = temp.TriggerId
    a.TriggerName = temp.TriggerName
    a.EcpdId = temp.EcpdId
    a.TriggerCategory = temp.TriggerCategory
    a.DataTrigger = temp.DataTrigger
    a.Notification = temp.Notification
    a.NotificationType = temp.NotificationType
    a.Callback = temp.Callback
    a.EmailNotification = temp.EmailNotification
    a.NotificationGroupName = temp.NotificationGroupName
    a.NotificationFrequencyFactor = temp.NotificationFrequencyFactor
    a.NotificationFrequencyInterval = temp.NotificationFrequencyInterval
    a.ExternalEmailRecipients = temp.ExternalEmailRecipients
    a.SmsNotification = temp.SmsNotification
    a.SmsNumbers = temp.SmsNumbers
    a.Reminder = temp.Reminder
    a.Severity = temp.Severity
    a.Active = temp.Active
    return nil
}

// tempAccountLevelUpdateTriggerRequest is a temporary struct used for validating the fields of AccountLevelUpdateTriggerRequest.
type tempAccountLevelUpdateTriggerRequest  struct {
    TriggerId                     *string            `json:"triggerId,omitempty"`
    TriggerName                   *string            `json:"triggerName,omitempty"`
    EcpdId                        *string            `json:"ecpdId,omitempty"`
    TriggerCategory               *TriggerCategory   `json:"triggerCategory,omitempty"`
    DataTrigger                   *DataTrigger1      `json:"dataTrigger,omitempty"`
    Notification                  *Notificationarray `json:"notification,omitempty"`
    NotificationType              *string            `json:"notificationType,omitempty"`
    Callback                      *bool              `json:"callback,omitempty"`
    EmailNotification             *bool              `json:"emailNotification,omitempty"`
    NotificationGroupName         *string            `json:"notificationGroupName,omitempty"`
    NotificationFrequencyFactor   *int               `json:"notificationFrequencyFactor,omitempty"`
    NotificationFrequencyInterval *string            `json:"notificationFrequencyInterval,omitempty"`
    ExternalEmailRecipients       *string            `json:"externalEmailRecipients,omitempty"`
    SmsNotification               *bool              `json:"smsNotification,omitempty"`
    SmsNumbers                    []Cellphonenumber  `json:"smsNumbers,omitempty"`
    Reminder                      *bool              `json:"reminder,omitempty"`
    Severity                      *string            `json:"severity,omitempty"`
    Active                        *Active            `json:"active,omitempty"`
}
