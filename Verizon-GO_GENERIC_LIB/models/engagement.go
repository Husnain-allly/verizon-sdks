/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// Engagement represents a Engagement struct.
// The engagements associated with the account.
type Engagement struct {
    // The engagement ID.
    EngagementId         *string                `json:"engagementId,omitempty"`
    // The charging group name.
    ChargingGroup        *string                `json:"chargingGroup,omitempty"`
    // The services associated with the account.
    Services             []AccountService       `json:"services,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for Engagement,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (e Engagement) String() string {
    return fmt.Sprintf(
    	"Engagement[EngagementId=%v, ChargingGroup=%v, Services=%v, AdditionalProperties=%v]",
    	e.EngagementId, e.ChargingGroup, e.Services, e.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for Engagement.
// It customizes the JSON marshaling process for Engagement objects.
func (e Engagement) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(e.AdditionalProperties,
        "engagementId", "chargingGroup", "services"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(e.toMap())
}

// toMap converts the Engagement object to a map representation for JSON marshaling.
func (e Engagement) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, e.AdditionalProperties)
    if e.EngagementId != nil {
        structMap["engagementId"] = e.EngagementId
    }
    if e.ChargingGroup != nil {
        structMap["chargingGroup"] = e.ChargingGroup
    }
    if e.Services != nil {
        structMap["services"] = e.Services
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Engagement.
// It customizes the JSON unmarshaling process for Engagement objects.
func (e *Engagement) UnmarshalJSON(input []byte) error {
    var temp tempEngagement
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "engagementId", "chargingGroup", "services")
    if err != nil {
    	return err
    }
    e.AdditionalProperties = additionalProperties
    
    e.EngagementId = temp.EngagementId
    e.ChargingGroup = temp.ChargingGroup
    e.Services = temp.Services
    return nil
}

// tempEngagement is a temporary struct used for validating the fields of Engagement.
type tempEngagement  struct {
    EngagementId  *string          `json:"engagementId,omitempty"`
    ChargingGroup *string          `json:"chargingGroup,omitempty"`
    Services      []AccountService `json:"services,omitempty"`
}
