/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// SessionResetPasswordRequest represents a SessionResetPasswordRequest struct.
// Request to a new, randomly generated password for the current username.
type SessionResetPasswordRequest struct {
    // The current password for the username.
    OldPassword          string                 `json:"oldPassword"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for SessionResetPasswordRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (s SessionResetPasswordRequest) String() string {
    return fmt.Sprintf(
    	"SessionResetPasswordRequest[OldPassword=%v, AdditionalProperties=%v]",
    	s.OldPassword, s.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for SessionResetPasswordRequest.
// It customizes the JSON marshaling process for SessionResetPasswordRequest objects.
func (s SessionResetPasswordRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(s.AdditionalProperties,
        "oldPassword"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(s.toMap())
}

// toMap converts the SessionResetPasswordRequest object to a map representation for JSON marshaling.
func (s SessionResetPasswordRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, s.AdditionalProperties)
    structMap["oldPassword"] = s.OldPassword
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for SessionResetPasswordRequest.
// It customizes the JSON unmarshaling process for SessionResetPasswordRequest objects.
func (s *SessionResetPasswordRequest) UnmarshalJSON(input []byte) error {
    var temp tempSessionResetPasswordRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "oldPassword")
    if err != nil {
    	return err
    }
    s.AdditionalProperties = additionalProperties
    
    s.OldPassword = *temp.OldPassword
    return nil
}

// tempSessionResetPasswordRequest is a temporary struct used for validating the fields of SessionResetPasswordRequest.
type tempSessionResetPasswordRequest  struct {
    OldPassword *string `json:"oldPassword"`
}

func (s *tempSessionResetPasswordRequest) validate() error {
    var errs []string
    if s.OldPassword == nil {
        errs = append(errs, "required field `oldPassword` is missing for type `SessionResetPasswordRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
