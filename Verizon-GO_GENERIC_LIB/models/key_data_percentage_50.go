/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// KeyDataPercentage50 represents a KeyDataPercentage50 struct.
type KeyDataPercentage50 struct {
    Key                  *string                `json:"key,omitempty"`
    Value                *bool                  `json:"value,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for KeyDataPercentage50,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (k KeyDataPercentage50) String() string {
    return fmt.Sprintf(
    	"KeyDataPercentage50[Key=%v, Value=%v, AdditionalProperties=%v]",
    	k.Key, k.Value, k.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for KeyDataPercentage50.
// It customizes the JSON marshaling process for KeyDataPercentage50 objects.
func (k KeyDataPercentage50) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(k.AdditionalProperties,
        "key", "value"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(k.toMap())
}

// toMap converts the KeyDataPercentage50 object to a map representation for JSON marshaling.
func (k KeyDataPercentage50) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, k.AdditionalProperties)
    if k.Key != nil {
        structMap["key"] = k.Key
    }
    if k.Value != nil {
        structMap["value"] = k.Value
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for KeyDataPercentage50.
// It customizes the JSON unmarshaling process for KeyDataPercentage50 objects.
func (k *KeyDataPercentage50) UnmarshalJSON(input []byte) error {
    var temp tempKeyDataPercentage50
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "key", "value")
    if err != nil {
    	return err
    }
    k.AdditionalProperties = additionalProperties
    
    k.Key = temp.Key
    k.Value = temp.Value
    return nil
}

// tempKeyDataPercentage50 is a temporary struct used for validating the fields of KeyDataPercentage50.
type tempKeyDataPercentage50  struct {
    Key   *string `json:"key,omitempty"`
    Value *bool   `json:"value,omitempty"`
}
