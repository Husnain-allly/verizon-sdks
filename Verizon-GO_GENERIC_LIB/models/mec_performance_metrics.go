/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// MecPerformanceMetrics represents a MecPerformanceMetrics struct.
// Response to query the most recent data for Key Performance Indicators (KPIs) like network availability, MEC hostnames and more.
type MecPerformanceMetrics struct {
    // Success or Failed.
    QueryStatus          *string                     `json:"QueryStatus,omitempty"`
    // Timestamp of the query's start, format:mm/dd/yyyy,hr:min:sec.
    Start                *string                     `json:"Start,omitempty"`
    // Timestamp of the query's end , format:mm/dd/yyyy, hr:min:sec.
    End                  *string                     `json:"End,omitempty"`
    // MEC performance query result.
    QueryResult          []MecPerformanceQueryResult `json:"QueryResult,omitempty"`
    AdditionalProperties map[string]interface{}      `json:"_"`
}

// String implements the fmt.Stringer interface for MecPerformanceMetrics,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (m MecPerformanceMetrics) String() string {
    return fmt.Sprintf(
    	"MecPerformanceMetrics[QueryStatus=%v, Start=%v, End=%v, QueryResult=%v, AdditionalProperties=%v]",
    	m.QueryStatus, m.Start, m.End, m.QueryResult, m.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for MecPerformanceMetrics.
// It customizes the JSON marshaling process for MecPerformanceMetrics objects.
func (m MecPerformanceMetrics) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(m.AdditionalProperties,
        "QueryStatus", "Start", "End", "QueryResult"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(m.toMap())
}

// toMap converts the MecPerformanceMetrics object to a map representation for JSON marshaling.
func (m MecPerformanceMetrics) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, m.AdditionalProperties)
    if m.QueryStatus != nil {
        structMap["QueryStatus"] = m.QueryStatus
    }
    if m.Start != nil {
        structMap["Start"] = m.Start
    }
    if m.End != nil {
        structMap["End"] = m.End
    }
    if m.QueryResult != nil {
        structMap["QueryResult"] = m.QueryResult
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for MecPerformanceMetrics.
// It customizes the JSON unmarshaling process for MecPerformanceMetrics objects.
func (m *MecPerformanceMetrics) UnmarshalJSON(input []byte) error {
    var temp tempMecPerformanceMetrics
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "QueryStatus", "Start", "End", "QueryResult")
    if err != nil {
    	return err
    }
    m.AdditionalProperties = additionalProperties
    
    m.QueryStatus = temp.QueryStatus
    m.Start = temp.Start
    m.End = temp.End
    m.QueryResult = temp.QueryResult
    return nil
}

// tempMecPerformanceMetrics is a temporary struct used for validating the fields of MecPerformanceMetrics.
type tempMecPerformanceMetrics  struct {
    QueryStatus *string                     `json:"QueryStatus,omitempty"`
    Start       *string                     `json:"Start,omitempty"`
    End         *string                     `json:"End,omitempty"`
    QueryResult []MecPerformanceQueryResult `json:"QueryResult,omitempty"`
}
