/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// Geolocation represents a Geolocation struct.
// Geolocation of the device at the time of the connection request in GPS coordinates.
type Geolocation struct {
    // The GPS Latitude value
    Latitude  float64 `json:"Latitude"`
    // The GPS Longitude value
    Longitude float64 `json:"Longitude"`
}

// String implements the fmt.Stringer interface for Geolocation,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (g Geolocation) String() string {
    return fmt.Sprintf(
    	"Geolocation[Latitude=%v, Longitude=%v]",
    	g.Latitude, g.Longitude)
}

// MarshalJSON implements the json.Marshaler interface for Geolocation.
// It customizes the JSON marshaling process for Geolocation objects.
func (g Geolocation) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(g.toMap())
}

// toMap converts the Geolocation object to a map representation for JSON marshaling.
func (g Geolocation) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["Latitude"] = g.Latitude
    structMap["Longitude"] = g.Longitude
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Geolocation.
// It customizes the JSON unmarshaling process for Geolocation objects.
func (g *Geolocation) UnmarshalJSON(input []byte) error {
    var temp tempGeolocation
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    g.Latitude = *temp.Latitude
    g.Longitude = *temp.Longitude
    return nil
}

// tempGeolocation is a temporary struct used for validating the fields of Geolocation.
type tempGeolocation  struct {
    Latitude  *float64 `json:"Latitude"`
    Longitude *float64 `json:"Longitude"`
}

func (g *tempGeolocation) validate() error {
    var errs []string
    if g.Latitude == nil {
        errs = append(errs, "required field `Latitude` is missing for type `Geolocation`")
    }
    if g.Longitude == nil {
        errs = append(errs, "required field `Longitude` is missing for type `Geolocation`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
