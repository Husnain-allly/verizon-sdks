/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// MultiLineString represents a MultiLineString struct.
// A MultiLineString is a type of geometry that represents a collection of LineString geometries.
type MultiLineString struct {
    Type                 MultiLineStringType    `json:"type"`
    Coordinates          [][][]float64          `json:"coordinates"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for MultiLineString,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (m MultiLineString) String() string {
    return fmt.Sprintf(
    	"MultiLineString[Type=%v, Coordinates=%v, AdditionalProperties=%v]",
    	m.Type, m.Coordinates, m.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for MultiLineString.
// It customizes the JSON marshaling process for MultiLineString objects.
func (m MultiLineString) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(m.AdditionalProperties,
        "type", "coordinates"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(m.toMap())
}

// toMap converts the MultiLineString object to a map representation for JSON marshaling.
func (m MultiLineString) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, m.AdditionalProperties)
    structMap["type"] = m.Type
    structMap["coordinates"] = m.Coordinates
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for MultiLineString.
// It customizes the JSON unmarshaling process for MultiLineString objects.
func (m *MultiLineString) UnmarshalJSON(input []byte) error {
    var temp tempMultiLineString
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "type", "coordinates")
    if err != nil {
    	return err
    }
    m.AdditionalProperties = additionalProperties
    
    m.Type = *temp.Type
    m.Coordinates = *temp.Coordinates
    return nil
}

// tempMultiLineString is a temporary struct used for validating the fields of MultiLineString.
type tempMultiLineString  struct {
    Type        *MultiLineStringType `json:"type"`
    Coordinates *[][][]float64       `json:"coordinates"`
}

func (m *tempMultiLineString) validate() error {
    var errs []string
    if m.Type == nil {
        errs = append(errs, "required field `type` is missing for type `MultiLineString`")
    }
    if m.Coordinates == nil {
        errs = append(errs, "required field `coordinates` is missing for type `MultiLineString`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
