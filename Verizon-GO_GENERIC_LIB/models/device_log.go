/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// DeviceLog represents a DeviceLog struct.
// Device logging information.
type DeviceLog struct {
    // Device IMEI.
    DeviceId             string                 `json:"deviceId"`
    // Time of log.
    LogTime              time.Time              `json:"logTime"`
    // Log type (one of SoftwareUpdate, Event, UserNotification, AgentService, Wireless, WirelessWeb, MobileBroadbandModem, WindowsMDM).
    LogType              string                 `json:"logType"`
    // Event log.
    EventLog             string                 `json:"eventLog"`
    // Base64-encoded contents of binary log file.
    BinaryLogFileBase64  string                 `json:"binaryLogFileBase64"`
    // File name of binary log file.
    BinaryLogFilename    string                 `json:"binaryLogFilename"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceLog,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceLog) String() string {
    return fmt.Sprintf(
    	"DeviceLog[DeviceId=%v, LogTime=%v, LogType=%v, EventLog=%v, BinaryLogFileBase64=%v, BinaryLogFilename=%v, AdditionalProperties=%v]",
    	d.DeviceId, d.LogTime, d.LogType, d.EventLog, d.BinaryLogFileBase64, d.BinaryLogFilename, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceLog.
// It customizes the JSON marshaling process for DeviceLog objects.
func (d DeviceLog) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "deviceId", "logTime", "logType", "eventLog", "binaryLogFileBase64", "binaryLogFilename"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceLog object to a map representation for JSON marshaling.
func (d DeviceLog) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    structMap["deviceId"] = d.DeviceId
    structMap["logTime"] = d.LogTime.Format(time.RFC3339)
    structMap["logType"] = d.LogType
    structMap["eventLog"] = d.EventLog
    structMap["binaryLogFileBase64"] = d.BinaryLogFileBase64
    structMap["binaryLogFilename"] = d.BinaryLogFilename
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceLog.
// It customizes the JSON unmarshaling process for DeviceLog objects.
func (d *DeviceLog) UnmarshalJSON(input []byte) error {
    var temp tempDeviceLog
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceId", "logTime", "logType", "eventLog", "binaryLogFileBase64", "binaryLogFilename")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.DeviceId = *temp.DeviceId
    LogTimeVal, err := time.Parse(time.RFC3339, *temp.LogTime)
    if err != nil {
        log.Fatalf("Cannot Parse logTime as % s format.", time.RFC3339)
    }
    d.LogTime = LogTimeVal
    d.LogType = *temp.LogType
    d.EventLog = *temp.EventLog
    d.BinaryLogFileBase64 = *temp.BinaryLogFileBase64
    d.BinaryLogFilename = *temp.BinaryLogFilename
    return nil
}

// tempDeviceLog is a temporary struct used for validating the fields of DeviceLog.
type tempDeviceLog  struct {
    DeviceId            *string `json:"deviceId"`
    LogTime             *string `json:"logTime"`
    LogType             *string `json:"logType"`
    EventLog            *string `json:"eventLog"`
    BinaryLogFileBase64 *string `json:"binaryLogFileBase64"`
    BinaryLogFilename   *string `json:"binaryLogFilename"`
}

func (d *tempDeviceLog) validate() error {
    var errs []string
    if d.DeviceId == nil {
        errs = append(errs, "required field `deviceId` is missing for type `DeviceLog`")
    }
    if d.LogTime == nil {
        errs = append(errs, "required field `logTime` is missing for type `DeviceLog`")
    }
    if d.LogType == nil {
        errs = append(errs, "required field `logType` is missing for type `DeviceLog`")
    }
    if d.EventLog == nil {
        errs = append(errs, "required field `eventLog` is missing for type `DeviceLog`")
    }
    if d.BinaryLogFileBase64 == nil {
        errs = append(errs, "required field `binaryLogFileBase64` is missing for type `DeviceLog`")
    }
    if d.BinaryLogFilename == nil {
        errs = append(errs, "required field `binaryLogFilename` is missing for type `DeviceLog`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
