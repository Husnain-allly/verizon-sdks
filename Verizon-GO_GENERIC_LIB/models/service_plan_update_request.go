/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// ServicePlanUpdateRequest represents a ServicePlanUpdateRequest struct.
// Request to update service plan.
type ServicePlanUpdateRequest struct {
    // The service plan code that you want to assign to all specified devices.
    ServicePlan          string                 `json:"servicePlan"`
    // The name of a billing account.
    AccountName          *string                `json:"accountName,omitempty"`
    // The name of a service plan, if you want to only include devices that have that service plan.
    CurrentServicePlan   *string                `json:"currentServicePlan,omitempty"`
    // Custom field names and values, if you want to only include devices that have matching values.
    CustomFields         []CustomFields         `json:"customFields,omitempty"`
    // A list of the devices that you want to change, specified by device identifier.
    Devices              []AccountDeviceList    `json:"devices,omitempty"`
    // The name of a device group, if you want to restore service for all devices in that group.
    GroupName            *string                `json:"groupName,omitempty"`
    CarrierIpPoolName    *string                `json:"carrierIpPoolName,omitempty"`
    TakeEffect           *time.Time             `json:"takeEffect,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for ServicePlanUpdateRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (s ServicePlanUpdateRequest) String() string {
    return fmt.Sprintf(
    	"ServicePlanUpdateRequest[ServicePlan=%v, AccountName=%v, CurrentServicePlan=%v, CustomFields=%v, Devices=%v, GroupName=%v, CarrierIpPoolName=%v, TakeEffect=%v, AdditionalProperties=%v]",
    	s.ServicePlan, s.AccountName, s.CurrentServicePlan, s.CustomFields, s.Devices, s.GroupName, s.CarrierIpPoolName, s.TakeEffect, s.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for ServicePlanUpdateRequest.
// It customizes the JSON marshaling process for ServicePlanUpdateRequest objects.
func (s ServicePlanUpdateRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(s.AdditionalProperties,
        "servicePlan", "accountName", "currentServicePlan", "customFields", "devices", "groupName", "carrierIpPoolName", "takeEffect"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(s.toMap())
}

// toMap converts the ServicePlanUpdateRequest object to a map representation for JSON marshaling.
func (s ServicePlanUpdateRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, s.AdditionalProperties)
    structMap["servicePlan"] = s.ServicePlan
    if s.AccountName != nil {
        structMap["accountName"] = s.AccountName
    }
    if s.CurrentServicePlan != nil {
        structMap["currentServicePlan"] = s.CurrentServicePlan
    }
    if s.CustomFields != nil {
        structMap["customFields"] = s.CustomFields
    }
    if s.Devices != nil {
        structMap["devices"] = s.Devices
    }
    if s.GroupName != nil {
        structMap["groupName"] = s.GroupName
    }
    if s.CarrierIpPoolName != nil {
        structMap["carrierIpPoolName"] = s.CarrierIpPoolName
    }
    if s.TakeEffect != nil {
        structMap["takeEffect"] = s.TakeEffect.Format(time.RFC3339)
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ServicePlanUpdateRequest.
// It customizes the JSON unmarshaling process for ServicePlanUpdateRequest objects.
func (s *ServicePlanUpdateRequest) UnmarshalJSON(input []byte) error {
    var temp tempServicePlanUpdateRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "servicePlan", "accountName", "currentServicePlan", "customFields", "devices", "groupName", "carrierIpPoolName", "takeEffect")
    if err != nil {
    	return err
    }
    s.AdditionalProperties = additionalProperties
    
    s.ServicePlan = *temp.ServicePlan
    s.AccountName = temp.AccountName
    s.CurrentServicePlan = temp.CurrentServicePlan
    s.CustomFields = temp.CustomFields
    s.Devices = temp.Devices
    s.GroupName = temp.GroupName
    s.CarrierIpPoolName = temp.CarrierIpPoolName
    if temp.TakeEffect != nil {
        TakeEffectVal, err := time.Parse(time.RFC3339, *temp.TakeEffect)
        if err != nil {
            log.Fatalf("Cannot Parse takeEffect as % s format.", time.RFC3339)
        }
        s.TakeEffect = &TakeEffectVal
    }
    return nil
}

// tempServicePlanUpdateRequest is a temporary struct used for validating the fields of ServicePlanUpdateRequest.
type tempServicePlanUpdateRequest  struct {
    ServicePlan        *string             `json:"servicePlan"`
    AccountName        *string             `json:"accountName,omitempty"`
    CurrentServicePlan *string             `json:"currentServicePlan,omitempty"`
    CustomFields       []CustomFields      `json:"customFields,omitempty"`
    Devices            []AccountDeviceList `json:"devices,omitempty"`
    GroupName          *string             `json:"groupName,omitempty"`
    CarrierIpPoolName  *string             `json:"carrierIpPoolName,omitempty"`
    TakeEffect         *string             `json:"takeEffect,omitempty"`
}

func (s *tempServicePlanUpdateRequest) validate() error {
    var errs []string
    if s.ServicePlan == nil {
        errs = append(errs, "required field `servicePlan` is missing for type `ServicePlanUpdateRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
