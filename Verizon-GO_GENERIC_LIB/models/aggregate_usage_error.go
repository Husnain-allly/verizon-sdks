/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// AggregateUsageError represents a AggregateUsageError struct.
// Error reported by a device.
type AggregateUsageError struct {
    // International Mobile Equipment Identifier. This is the ID of the device reporting errors.
    Imei                 *string                `json:"imei,omitempty"`
    // A general error message.
    ErrorMessage         *string                `json:"errorMessage,omitempty"`
    // Error message.
    ErrorResponse        *IErrorMessage         `json:"errorResponse,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for AggregateUsageError,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a AggregateUsageError) String() string {
    return fmt.Sprintf(
    	"AggregateUsageError[Imei=%v, ErrorMessage=%v, ErrorResponse=%v, AdditionalProperties=%v]",
    	a.Imei, a.ErrorMessage, a.ErrorResponse, a.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for AggregateUsageError.
// It customizes the JSON marshaling process for AggregateUsageError objects.
func (a AggregateUsageError) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(a.AdditionalProperties,
        "imei", "errorMessage", "errorResponse"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(a.toMap())
}

// toMap converts the AggregateUsageError object to a map representation for JSON marshaling.
func (a AggregateUsageError) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, a.AdditionalProperties)
    if a.Imei != nil {
        structMap["imei"] = a.Imei
    }
    if a.ErrorMessage != nil {
        structMap["errorMessage"] = a.ErrorMessage
    }
    if a.ErrorResponse != nil {
        structMap["errorResponse"] = a.ErrorResponse.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for AggregateUsageError.
// It customizes the JSON unmarshaling process for AggregateUsageError objects.
func (a *AggregateUsageError) UnmarshalJSON(input []byte) error {
    var temp tempAggregateUsageError
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "imei", "errorMessage", "errorResponse")
    if err != nil {
    	return err
    }
    a.AdditionalProperties = additionalProperties
    
    a.Imei = temp.Imei
    a.ErrorMessage = temp.ErrorMessage
    a.ErrorResponse = temp.ErrorResponse
    return nil
}

// tempAggregateUsageError is a temporary struct used for validating the fields of AggregateUsageError.
type tempAggregateUsageError  struct {
    Imei          *string        `json:"imei,omitempty"`
    ErrorMessage  *string        `json:"errorMessage,omitempty"`
    ErrorResponse *IErrorMessage `json:"errorResponse,omitempty"`
}
