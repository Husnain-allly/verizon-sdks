/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// Rateplantype2Condition represents a Rateplantype2Condition struct.
type Rateplantype2Condition struct {
    // The condition type being monitored
    ConditionType        *ConditionType         `json:"conditionType,omitempty"`
    // The boolean of the comparison. `gt` is Greater Than, `lt` is Less Than and `eq` is Equal To
    Comparitor           *Comparitor            `json:"comparitor,omitempty"`
    // The threshold value the trigger monitors for
    Threshold            *int                   `json:"threshold,omitempty"`
    // The units of the threshold. This can be KB, Kilobits, MB, Megabits, or GB, Gigabits
    ThresholdUnit        *ThresholdUnit         `json:"thresholdUnit,omitempty"`
    // The interval to monitor for the threshold. This can be Daily, Weekly or Monthly
    CycleType            *RulesCycleType        `json:"cycleType,omitempty"`
    AllowanceThreshold   *AllowanceThreshold    `json:"allowanceThreshold,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for Rateplantype2Condition,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (r Rateplantype2Condition) String() string {
    return fmt.Sprintf(
    	"Rateplantype2Condition[ConditionType=%v, Comparitor=%v, Threshold=%v, ThresholdUnit=%v, CycleType=%v, AllowanceThreshold=%v, AdditionalProperties=%v]",
    	r.ConditionType, r.Comparitor, r.Threshold, r.ThresholdUnit, r.CycleType, r.AllowanceThreshold, r.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for Rateplantype2Condition.
// It customizes the JSON marshaling process for Rateplantype2Condition objects.
func (r Rateplantype2Condition) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(r.AdditionalProperties,
        "conditionType", "comparitor", "threshold", "thresholdUnit", "cycleType", "allowanceThreshold"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(r.toMap())
}

// toMap converts the Rateplantype2Condition object to a map representation for JSON marshaling.
func (r Rateplantype2Condition) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, r.AdditionalProperties)
    if r.ConditionType != nil {
        structMap["conditionType"] = r.ConditionType
    }
    if r.Comparitor != nil {
        structMap["comparitor"] = r.Comparitor
    }
    if r.Threshold != nil {
        structMap["threshold"] = r.Threshold
    }
    if r.ThresholdUnit != nil {
        structMap["thresholdUnit"] = r.ThresholdUnit
    }
    if r.CycleType != nil {
        structMap["cycleType"] = r.CycleType
    }
    if r.AllowanceThreshold != nil {
        structMap["allowanceThreshold"] = r.AllowanceThreshold.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Rateplantype2Condition.
// It customizes the JSON unmarshaling process for Rateplantype2Condition objects.
func (r *Rateplantype2Condition) UnmarshalJSON(input []byte) error {
    var temp tempRateplantype2Condition
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "conditionType", "comparitor", "threshold", "thresholdUnit", "cycleType", "allowanceThreshold")
    if err != nil {
    	return err
    }
    r.AdditionalProperties = additionalProperties
    
    r.ConditionType = temp.ConditionType
    r.Comparitor = temp.Comparitor
    r.Threshold = temp.Threshold
    r.ThresholdUnit = temp.ThresholdUnit
    r.CycleType = temp.CycleType
    r.AllowanceThreshold = temp.AllowanceThreshold
    return nil
}

// tempRateplantype2Condition is a temporary struct used for validating the fields of Rateplantype2Condition.
type tempRateplantype2Condition  struct {
    ConditionType      *ConditionType      `json:"conditionType,omitempty"`
    Comparitor         *Comparitor         `json:"comparitor,omitempty"`
    Threshold          *int                `json:"threshold,omitempty"`
    ThresholdUnit      *ThresholdUnit      `json:"thresholdUnit,omitempty"`
    CycleType          *RulesCycleType     `json:"cycleType,omitempty"`
    AllowanceThreshold *AllowanceThreshold `json:"allowanceThreshold,omitempty"`
}
