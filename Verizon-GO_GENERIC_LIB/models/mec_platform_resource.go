/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// MecPlatformResource represents a MecPlatformResource struct.
// 5G Edge platform used for deployment of a service. The ern of each platform contains the name of the matching AWS Wavelength zone that can be used when deploying.
type MecPlatformResource struct {
    // Edge Resource Name. A string identifier for a set of edge resources.
    Ern        *string            `json:"ern,omitempty"`
    // Unique identifier representing a zone. *Note:* This will have a null value as a placeholder.
    Zone       Optional[string]   `json:"zone"`
    // MEC region name. Current valid values are US_WEST_2 and US_EAST_1.
    Region     *string            `json:"region,omitempty"`
    // Status of the MEC Platform (default is 'unknown')
    Status     *MecPlatformStatus `json:"status,omitempty"`
    Properties *interface{}       `json:"properties,omitempty"`
}

// String implements the fmt.Stringer interface for MecPlatformResource,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (m MecPlatformResource) String() string {
    return fmt.Sprintf(
    	"MecPlatformResource[Ern=%v, Zone=%v, Region=%v, Status=%v, Properties=%v]",
    	m.Ern, m.Zone, m.Region, m.Status, m.Properties)
}

// MarshalJSON implements the json.Marshaler interface for MecPlatformResource.
// It customizes the JSON marshaling process for MecPlatformResource objects.
func (m MecPlatformResource) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(m.toMap())
}

// toMap converts the MecPlatformResource object to a map representation for JSON marshaling.
func (m MecPlatformResource) toMap() map[string]any {
    structMap := make(map[string]any)
    if m.Ern != nil {
        structMap["ern"] = m.Ern
    }
    if m.Zone.IsValueSet() {
        if m.Zone.Value() != nil {
            structMap["zone"] = m.Zone.Value()
        } else {
            structMap["zone"] = nil
        }
    }
    if m.Region != nil {
        structMap["region"] = m.Region
    }
    if m.Status != nil {
        structMap["status"] = m.Status
    }
    if m.Properties != nil {
        structMap["properties"] = m.Properties
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for MecPlatformResource.
// It customizes the JSON unmarshaling process for MecPlatformResource objects.
func (m *MecPlatformResource) UnmarshalJSON(input []byte) error {
    var temp tempMecPlatformResource
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    
    m.Ern = temp.Ern
    m.Zone = temp.Zone
    m.Region = temp.Region
    m.Status = temp.Status
    m.Properties = temp.Properties
    return nil
}

// tempMecPlatformResource is a temporary struct used for validating the fields of MecPlatformResource.
type tempMecPlatformResource  struct {
    Ern        *string            `json:"ern,omitempty"`
    Zone       Optional[string]   `json:"zone"`
    Region     *string            `json:"region,omitempty"`
    Status     *MecPlatformStatus `json:"status,omitempty"`
    Properties *interface{}       `json:"properties,omitempty"`
}
