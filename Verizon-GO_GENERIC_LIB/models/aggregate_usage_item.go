/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// AggregateUsageItem represents a AggregateUsageItem struct.
// Contains usage information per device.
type AggregateUsageItem struct {
    // International Mobile Equipment Identifier. This is the ID of the device reporting usage.
    Imei                 *string                `json:"imei,omitempty"`
    // Number of sessions established by the device reporting usage.
    NumberOfSessions     *int                   `json:"numberOfSessions,omitempty"`
    // The amount of data transferred by the device reporting usage, measured in Bytes.
    BytesTransferred     *int                   `json:"bytesTransferred,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for AggregateUsageItem,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a AggregateUsageItem) String() string {
    return fmt.Sprintf(
    	"AggregateUsageItem[Imei=%v, NumberOfSessions=%v, BytesTransferred=%v, AdditionalProperties=%v]",
    	a.Imei, a.NumberOfSessions, a.BytesTransferred, a.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for AggregateUsageItem.
// It customizes the JSON marshaling process for AggregateUsageItem objects.
func (a AggregateUsageItem) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(a.AdditionalProperties,
        "imei", "numberOfSessions", "bytesTransferred"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(a.toMap())
}

// toMap converts the AggregateUsageItem object to a map representation for JSON marshaling.
func (a AggregateUsageItem) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, a.AdditionalProperties)
    if a.Imei != nil {
        structMap["imei"] = a.Imei
    }
    if a.NumberOfSessions != nil {
        structMap["numberOfSessions"] = a.NumberOfSessions
    }
    if a.BytesTransferred != nil {
        structMap["bytesTransferred"] = a.BytesTransferred
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for AggregateUsageItem.
// It customizes the JSON unmarshaling process for AggregateUsageItem objects.
func (a *AggregateUsageItem) UnmarshalJSON(input []byte) error {
    var temp tempAggregateUsageItem
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "imei", "numberOfSessions", "bytesTransferred")
    if err != nil {
    	return err
    }
    a.AdditionalProperties = additionalProperties
    
    a.Imei = temp.Imei
    a.NumberOfSessions = temp.NumberOfSessions
    a.BytesTransferred = temp.BytesTransferred
    return nil
}

// tempAggregateUsageItem is a temporary struct used for validating the fields of AggregateUsageItem.
type tempAggregateUsageItem  struct {
    Imei             *string `json:"imei,omitempty"`
    NumberOfSessions *int    `json:"numberOfSessions,omitempty"`
    BytesTransferred *int    `json:"bytesTransferred,omitempty"`
}
