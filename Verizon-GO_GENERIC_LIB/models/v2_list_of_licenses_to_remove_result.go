/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// V2ListOfLicensesToRemoveResult represents a V2ListOfLicensesToRemoveResult struct.
// List of created license cancellation devices.
type V2ListOfLicensesToRemoveResult struct {
    // The number of devices.
    Count                int                    `json:"count"`
    // Device IMEI list.
    DeviceList           []string               `json:"deviceList"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for V2ListOfLicensesToRemoveResult,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (v V2ListOfLicensesToRemoveResult) String() string {
    return fmt.Sprintf(
    	"V2ListOfLicensesToRemoveResult[Count=%v, DeviceList=%v, AdditionalProperties=%v]",
    	v.Count, v.DeviceList, v.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for V2ListOfLicensesToRemoveResult.
// It customizes the JSON marshaling process for V2ListOfLicensesToRemoveResult objects.
func (v V2ListOfLicensesToRemoveResult) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(v.AdditionalProperties,
        "count", "deviceList"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(v.toMap())
}

// toMap converts the V2ListOfLicensesToRemoveResult object to a map representation for JSON marshaling.
func (v V2ListOfLicensesToRemoveResult) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, v.AdditionalProperties)
    structMap["count"] = v.Count
    structMap["deviceList"] = v.DeviceList
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for V2ListOfLicensesToRemoveResult.
// It customizes the JSON unmarshaling process for V2ListOfLicensesToRemoveResult objects.
func (v *V2ListOfLicensesToRemoveResult) UnmarshalJSON(input []byte) error {
    var temp tempV2ListOfLicensesToRemoveResult
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "count", "deviceList")
    if err != nil {
    	return err
    }
    v.AdditionalProperties = additionalProperties
    
    v.Count = *temp.Count
    v.DeviceList = *temp.DeviceList
    return nil
}

// tempV2ListOfLicensesToRemoveResult is a temporary struct used for validating the fields of V2ListOfLicensesToRemoveResult.
type tempV2ListOfLicensesToRemoveResult  struct {
    Count      *int      `json:"count"`
    DeviceList *[]string `json:"deviceList"`
}

func (v *tempV2ListOfLicensesToRemoveResult) validate() error {
    var errs []string
    if v.Count == nil {
        errs = append(errs, "required field `count` is missing for type `V2ListOfLicensesToRemoveResult`")
    }
    if v.DeviceList == nil {
        errs = append(errs, "required field `deviceList` is missing for type `V2ListOfLicensesToRemoveResult`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
