/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// ConfigurationListItem represents a ConfigurationListItem struct.
// The ConfigurationList's item that contains the configuration identifier, name, description and the active flag.
type ConfigurationListItem struct {
    // The generated ID (UUID v4) for the configuration. It has to be used when asking for changing any of the configuration parameters.
    Id          string  `json:"id"`
    // Name of the configuration.
    Name        *string `json:"name,omitempty"`
    // Description of the configuration.
    Description *string `json:"description,omitempty"`
    IsActive    bool    `json:"isActive"`
}

// String implements the fmt.Stringer interface for ConfigurationListItem,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c ConfigurationListItem) String() string {
    return fmt.Sprintf(
    	"ConfigurationListItem[Id=%v, Name=%v, Description=%v, IsActive=%v]",
    	c.Id, c.Name, c.Description, c.IsActive)
}

// MarshalJSON implements the json.Marshaler interface for ConfigurationListItem.
// It customizes the JSON marshaling process for ConfigurationListItem objects.
func (c ConfigurationListItem) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(c.toMap())
}

// toMap converts the ConfigurationListItem object to a map representation for JSON marshaling.
func (c ConfigurationListItem) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["id"] = c.Id
    if c.Name != nil {
        structMap["name"] = c.Name
    }
    if c.Description != nil {
        structMap["description"] = c.Description
    }
    structMap["isActive"] = c.IsActive
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ConfigurationListItem.
// It customizes the JSON unmarshaling process for ConfigurationListItem objects.
func (c *ConfigurationListItem) UnmarshalJSON(input []byte) error {
    var temp tempConfigurationListItem
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    c.Id = *temp.Id
    c.Name = temp.Name
    c.Description = temp.Description
    c.IsActive = *temp.IsActive
    return nil
}

// tempConfigurationListItem is a temporary struct used for validating the fields of ConfigurationListItem.
type tempConfigurationListItem  struct {
    Id          *string `json:"id"`
    Name        *string `json:"name,omitempty"`
    Description *string `json:"description,omitempty"`
    IsActive    *bool   `json:"isActive"`
}

func (c *tempConfigurationListItem) validate() error {
    var errs []string
    if c.Id == nil {
        errs = append(errs, "required field `id` is missing for type `ConfigurationListItem`")
    }
    if c.IsActive == nil {
        errs = append(errs, "required field `isActive` is missing for type `ConfigurationListItem`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
