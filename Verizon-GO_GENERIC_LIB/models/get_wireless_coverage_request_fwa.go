/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// GetWirelessCoverageRequestFwa represents a GetWirelessCoverageRequestFwa struct.
// Get wireless coverage FWA.
type GetWirelessCoverageRequestFwa struct {
    // Account name.
    AccountName      string              `json:"accountName"`
    // Type of request made. FWA for address qualification and NW for Nationwide coverage.
    RequestType      string              `json:"requestType"`
    // Type of location detail.
    LocationType     string              `json:"locationType"`
    Locations        Locations           `json:"locations"`
    NetworkTypesList []NetworkTypeObject `json:"networkTypesList"`
}

// String implements the fmt.Stringer interface for GetWirelessCoverageRequestFwa,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (g GetWirelessCoverageRequestFwa) String() string {
    return fmt.Sprintf(
    	"GetWirelessCoverageRequestFwa[AccountName=%v, RequestType=%v, LocationType=%v, Locations=%v, NetworkTypesList=%v]",
    	g.AccountName, g.RequestType, g.LocationType, g.Locations, g.NetworkTypesList)
}

// MarshalJSON implements the json.Marshaler interface for GetWirelessCoverageRequestFwa.
// It customizes the JSON marshaling process for GetWirelessCoverageRequestFwa objects.
func (g GetWirelessCoverageRequestFwa) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(g.toMap())
}

// toMap converts the GetWirelessCoverageRequestFwa object to a map representation for JSON marshaling.
func (g GetWirelessCoverageRequestFwa) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["accountName"] = g.AccountName
    structMap["requestType"] = g.RequestType
    structMap["locationType"] = g.LocationType
    structMap["locations"] = g.Locations.toMap()
    structMap["networkTypesList"] = g.NetworkTypesList
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for GetWirelessCoverageRequestFwa.
// It customizes the JSON unmarshaling process for GetWirelessCoverageRequestFwa objects.
func (g *GetWirelessCoverageRequestFwa) UnmarshalJSON(input []byte) error {
    var temp tempGetWirelessCoverageRequestFwa
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    g.AccountName = *temp.AccountName
    g.RequestType = *temp.RequestType
    g.LocationType = *temp.LocationType
    g.Locations = *temp.Locations
    g.NetworkTypesList = *temp.NetworkTypesList
    return nil
}

// tempGetWirelessCoverageRequestFwa is a temporary struct used for validating the fields of GetWirelessCoverageRequestFwa.
type tempGetWirelessCoverageRequestFwa  struct {
    AccountName      *string              `json:"accountName"`
    RequestType      *string              `json:"requestType"`
    LocationType     *string              `json:"locationType"`
    Locations        *Locations           `json:"locations"`
    NetworkTypesList *[]NetworkTypeObject `json:"networkTypesList"`
}

func (g *tempGetWirelessCoverageRequestFwa) validate() error {
    var errs []string
    if g.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `GetWirelessCoverageRequestFWA`")
    }
    if g.RequestType == nil {
        errs = append(errs, "required field `requestType` is missing for type `GetWirelessCoverageRequestFWA`")
    }
    if g.LocationType == nil {
        errs = append(errs, "required field `locationType` is missing for type `GetWirelessCoverageRequestFWA`")
    }
    if g.Locations == nil {
        errs = append(errs, "required field `locations` is missing for type `GetWirelessCoverageRequestFWA`")
    }
    if g.NetworkTypesList == nil {
        errs = append(errs, "required field `networkTypesList` is missing for type `GetWirelessCoverageRequestFWA`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
