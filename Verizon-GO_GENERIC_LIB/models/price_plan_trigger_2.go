/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// PricePlanTrigger2 represents a PricePlanTrigger2 struct.
type PricePlanTrigger2 struct {
    AccountShare         *AccountShareFilterCriteria `json:"accountShare,omitempty"`
    Condition            *Rateplantype2Condition     `json:"condition,omitempty"`
    // a flag to set if the trigger changes service plans, true, or not, false
    ChangePlan           *bool                       `json:"changePlan,omitempty"`
    // The service plan code to switch to
    ChangePlanDetails    *ChangePlanDetails          `json:"changePlanDetails,omitempty"`
    PayAsYouGo           *PayAsYouGoFilterCriteria   `json:"payAsYouGo,omitempty"`
    Action               *Actionobject               `json:"action,omitempty"`
    StandAlone           *FiltercriteriaObjectCall   `json:"standAlone,omitempty"`
    AdditionalProperties map[string]interface{}      `json:"_"`
}

// String implements the fmt.Stringer interface for PricePlanTrigger2,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (p PricePlanTrigger2) String() string {
    return fmt.Sprintf(
    	"PricePlanTrigger2[AccountShare=%v, Condition=%v, ChangePlan=%v, ChangePlanDetails=%v, PayAsYouGo=%v, Action=%v, StandAlone=%v, AdditionalProperties=%v]",
    	p.AccountShare, p.Condition, p.ChangePlan, p.ChangePlanDetails, p.PayAsYouGo, p.Action, p.StandAlone, p.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for PricePlanTrigger2.
// It customizes the JSON marshaling process for PricePlanTrigger2 objects.
func (p PricePlanTrigger2) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(p.AdditionalProperties,
        "accountShare", "condition", "changePlan", "changePlanDetails", "payAsYouGo", "action", "standAlone"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(p.toMap())
}

// toMap converts the PricePlanTrigger2 object to a map representation for JSON marshaling.
func (p PricePlanTrigger2) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, p.AdditionalProperties)
    if p.AccountShare != nil {
        structMap["accountShare"] = p.AccountShare.toMap()
    }
    if p.Condition != nil {
        structMap["condition"] = p.Condition.toMap()
    }
    if p.ChangePlan != nil {
        structMap["changePlan"] = p.ChangePlan
    }
    if p.ChangePlanDetails != nil {
        structMap["changePlanDetails"] = p.ChangePlanDetails.toMap()
    }
    if p.PayAsYouGo != nil {
        structMap["payAsYouGo"] = p.PayAsYouGo.toMap()
    }
    if p.Action != nil {
        structMap["action"] = p.Action.toMap()
    }
    if p.StandAlone != nil {
        structMap["standAlone"] = p.StandAlone.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for PricePlanTrigger2.
// It customizes the JSON unmarshaling process for PricePlanTrigger2 objects.
func (p *PricePlanTrigger2) UnmarshalJSON(input []byte) error {
    var temp tempPricePlanTrigger2
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountShare", "condition", "changePlan", "changePlanDetails", "payAsYouGo", "action", "standAlone")
    if err != nil {
    	return err
    }
    p.AdditionalProperties = additionalProperties
    
    p.AccountShare = temp.AccountShare
    p.Condition = temp.Condition
    p.ChangePlan = temp.ChangePlan
    p.ChangePlanDetails = temp.ChangePlanDetails
    p.PayAsYouGo = temp.PayAsYouGo
    p.Action = temp.Action
    p.StandAlone = temp.StandAlone
    return nil
}

// tempPricePlanTrigger2 is a temporary struct used for validating the fields of PricePlanTrigger2.
type tempPricePlanTrigger2  struct {
    AccountShare      *AccountShareFilterCriteria `json:"accountShare,omitempty"`
    Condition         *Rateplantype2Condition     `json:"condition,omitempty"`
    ChangePlan        *bool                       `json:"changePlan,omitempty"`
    ChangePlanDetails *ChangePlanDetails          `json:"changePlanDetails,omitempty"`
    PayAsYouGo        *PayAsYouGoFilterCriteria   `json:"payAsYouGo,omitempty"`
    Action            *Actionobject               `json:"action,omitempty"`
    StandAlone        *FiltercriteriaObjectCall   `json:"standAlone,omitempty"`
}
