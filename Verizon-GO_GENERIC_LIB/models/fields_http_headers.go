/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// FieldsHttpHeaders represents a FieldsHttpHeaders struct.
type FieldsHttpHeaders struct {
    Authorization        *string                `json:"Authorization,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for FieldsHttpHeaders,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (f FieldsHttpHeaders) String() string {
    return fmt.Sprintf(
    	"FieldsHttpHeaders[Authorization=%v, AdditionalProperties=%v]",
    	f.Authorization, f.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for FieldsHttpHeaders.
// It customizes the JSON marshaling process for FieldsHttpHeaders objects.
func (f FieldsHttpHeaders) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(f.AdditionalProperties,
        "Authorization"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(f.toMap())
}

// toMap converts the FieldsHttpHeaders object to a map representation for JSON marshaling.
func (f FieldsHttpHeaders) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, f.AdditionalProperties)
    if f.Authorization != nil {
        structMap["Authorization"] = f.Authorization
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for FieldsHttpHeaders.
// It customizes the JSON unmarshaling process for FieldsHttpHeaders objects.
func (f *FieldsHttpHeaders) UnmarshalJSON(input []byte) error {
    var temp tempFieldsHttpHeaders
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "Authorization")
    if err != nil {
    	return err
    }
    f.AdditionalProperties = additionalProperties
    
    f.Authorization = temp.Authorization
    return nil
}

// tempFieldsHttpHeaders is a temporary struct used for validating the fields of FieldsHttpHeaders.
type tempFieldsHttpHeaders  struct {
    Authorization *string `json:"Authorization,omitempty"`
}
