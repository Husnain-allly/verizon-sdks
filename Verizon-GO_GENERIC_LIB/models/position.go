/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// Position represents a Position struct.
// It provides a precise location in the WGS-84 coordinate system, from which short offsets may be used to create additional data using a flat earth projection centered on this location.
type Position struct {
    // The geographic latitude of an object, expressed in 1/10th integer microdegrees, as a 31 bit value, and with reference to the horizontal datum then in use. The value 900000001 shall be used when unavailable.
    Lat  int `json:"lat"`
    // The geographic longitude of an object, expressed in 1/10th integer microdegrees, as a 32-bit value, and with reference to the horizontal datum then in use. The value 1800000001 shall be used when unavailable.
    Long int `json:"long"`
}

// String implements the fmt.Stringer interface for Position,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (p Position) String() string {
    return fmt.Sprintf(
    	"Position[Lat=%v, Long=%v]",
    	p.Lat, p.Long)
}

// MarshalJSON implements the json.Marshaler interface for Position.
// It customizes the JSON marshaling process for Position objects.
func (p Position) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(p.toMap())
}

// toMap converts the Position object to a map representation for JSON marshaling.
func (p Position) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["lat"] = p.Lat
    structMap["long"] = p.Long
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Position.
// It customizes the JSON unmarshaling process for Position objects.
func (p *Position) UnmarshalJSON(input []byte) error {
    var temp tempPosition
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    p.Lat = *temp.Lat
    p.Long = *temp.Long
    return nil
}

// tempPosition is a temporary struct used for validating the fields of Position.
type tempPosition  struct {
    Lat  *int `json:"lat"`
    Long *int `json:"long"`
}

func (p *tempPosition) validate() error {
    var errs []string
    if p.Lat == nil {
        errs = append(errs, "required field `lat` is missing for type `Position`")
    }
    if p.Long == nil {
        errs = append(errs, "required field `long` is missing for type `Position`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
