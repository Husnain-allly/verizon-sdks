/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// LocationReport represents a LocationReport struct.
// Location information for up to 1,000 devices.
type LocationReport struct {
    // Device location information.
    DevLocationList      []Location             `json:"devLocationList,omitempty"`
    // True if there are more device locations to retrieve.
    HasMoreData          *bool                  `json:"hasMoreData,omitempty"`
    // The zero-based number of the first record to return. Set startIndex=0 for the first request. If there are more than 1,000 devices to be returned (hasMoreData=true), set startIndex=1000 for the second request, 2000 for the third request, etc.
    StartIndex           *string                `json:"startIndex,omitempty"`
    // The total number of devices in the original request and in the report.
    TotalCount           *int                   `json:"totalCount,omitempty"`
    // The transaction ID of the report.
    Txid                 *string                `json:"txid,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for LocationReport,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (l LocationReport) String() string {
    return fmt.Sprintf(
    	"LocationReport[DevLocationList=%v, HasMoreData=%v, StartIndex=%v, TotalCount=%v, Txid=%v, AdditionalProperties=%v]",
    	l.DevLocationList, l.HasMoreData, l.StartIndex, l.TotalCount, l.Txid, l.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for LocationReport.
// It customizes the JSON marshaling process for LocationReport objects.
func (l LocationReport) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(l.AdditionalProperties,
        "devLocationList", "hasMoreData", "startIndex", "totalCount", "txid"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(l.toMap())
}

// toMap converts the LocationReport object to a map representation for JSON marshaling.
func (l LocationReport) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, l.AdditionalProperties)
    if l.DevLocationList != nil {
        structMap["devLocationList"] = l.DevLocationList
    }
    if l.HasMoreData != nil {
        structMap["hasMoreData"] = l.HasMoreData
    }
    if l.StartIndex != nil {
        structMap["startIndex"] = l.StartIndex
    }
    if l.TotalCount != nil {
        structMap["totalCount"] = l.TotalCount
    }
    if l.Txid != nil {
        structMap["txid"] = l.Txid
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for LocationReport.
// It customizes the JSON unmarshaling process for LocationReport objects.
func (l *LocationReport) UnmarshalJSON(input []byte) error {
    var temp tempLocationReport
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "devLocationList", "hasMoreData", "startIndex", "totalCount", "txid")
    if err != nil {
    	return err
    }
    l.AdditionalProperties = additionalProperties
    
    l.DevLocationList = temp.DevLocationList
    l.HasMoreData = temp.HasMoreData
    l.StartIndex = temp.StartIndex
    l.TotalCount = temp.TotalCount
    l.Txid = temp.Txid
    return nil
}

// tempLocationReport is a temporary struct used for validating the fields of LocationReport.
type tempLocationReport  struct {
    DevLocationList []Location `json:"devLocationList,omitempty"`
    HasMoreData     *bool      `json:"hasMoreData,omitempty"`
    StartIndex      *string    `json:"startIndex,omitempty"`
    TotalCount      *int       `json:"totalCount,omitempty"`
    Txid            *string    `json:"txid,omitempty"`
}
