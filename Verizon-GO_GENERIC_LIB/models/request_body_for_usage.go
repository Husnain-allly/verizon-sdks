/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
    "log"
    "time"
)

// RequestBodyForUsage represents a RequestBodyForUsage struct.
type RequestBodyForUsage struct {
    AccountId            *string                `json:"accountId,omitempty"`
    DeviceId             []ReadySimDeviceId     `json:"deviceId,omitempty"`
    StartTime            *time.Time             `json:"startTime,omitempty"`
    EndTime              *time.Time             `json:"endTime,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for RequestBodyForUsage,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (r RequestBodyForUsage) String() string {
    return fmt.Sprintf(
    	"RequestBodyForUsage[AccountId=%v, DeviceId=%v, StartTime=%v, EndTime=%v, AdditionalProperties=%v]",
    	r.AccountId, r.DeviceId, r.StartTime, r.EndTime, r.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for RequestBodyForUsage.
// It customizes the JSON marshaling process for RequestBodyForUsage objects.
func (r RequestBodyForUsage) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(r.AdditionalProperties,
        "accountId", "deviceId", "startTime", "endTime"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(r.toMap())
}

// toMap converts the RequestBodyForUsage object to a map representation for JSON marshaling.
func (r RequestBodyForUsage) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, r.AdditionalProperties)
    if r.AccountId != nil {
        structMap["accountId"] = r.AccountId
    }
    if r.DeviceId != nil {
        structMap["deviceId"] = r.DeviceId
    }
    if r.StartTime != nil {
        structMap["startTime"] = r.StartTime.Format(time.RFC3339)
    }
    if r.EndTime != nil {
        structMap["endTime"] = r.EndTime.Format(time.RFC3339)
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for RequestBodyForUsage.
// It customizes the JSON unmarshaling process for RequestBodyForUsage objects.
func (r *RequestBodyForUsage) UnmarshalJSON(input []byte) error {
    var temp tempRequestBodyForUsage
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountId", "deviceId", "startTime", "endTime")
    if err != nil {
    	return err
    }
    r.AdditionalProperties = additionalProperties
    
    r.AccountId = temp.AccountId
    r.DeviceId = temp.DeviceId
    if temp.StartTime != nil {
        StartTimeVal, err := time.Parse(time.RFC3339, *temp.StartTime)
        if err != nil {
            log.Fatalf("Cannot Parse startTime as % s format.", time.RFC3339)
        }
        r.StartTime = &StartTimeVal
    }
    if temp.EndTime != nil {
        EndTimeVal, err := time.Parse(time.RFC3339, *temp.EndTime)
        if err != nil {
            log.Fatalf("Cannot Parse endTime as % s format.", time.RFC3339)
        }
        r.EndTime = &EndTimeVal
    }
    return nil
}

// tempRequestBodyForUsage is a temporary struct used for validating the fields of RequestBodyForUsage.
type tempRequestBodyForUsage  struct {
    AccountId *string            `json:"accountId,omitempty"`
    DeviceId  []ReadySimDeviceId `json:"deviceId,omitempty"`
    StartTime *string            `json:"startTime,omitempty"`
    EndTime   *string            `json:"endTime,omitempty"`
}
