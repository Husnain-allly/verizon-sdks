/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// Createtriggerchunk represents a Createtriggerchunk struct.
type Createtriggerchunk struct {
    // The user defined name of the trigger
    TriggerName          *string                `json:"triggerName,omitempty"`
    // The Enterprise Customer Profile Database ID
    EcpdId               *string                `json:"ecpdId,omitempty"`
    // The type of trigger being created or modified
    TriggerCategory      *TriggerCategory       `json:"triggerCategory,omitempty"`
    PricePlanTrigger     *PricePlanTrigger      `json:"pricePlanTrigger,omitempty"`
    Notification         *Notificationarray     `json:"notification,omitempty"`
    // A flag to indicate of the trigger is active, true, or not, false
    Active               *Active                `json:"active,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for Createtriggerchunk,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c Createtriggerchunk) String() string {
    return fmt.Sprintf(
    	"Createtriggerchunk[TriggerName=%v, EcpdId=%v, TriggerCategory=%v, PricePlanTrigger=%v, Notification=%v, Active=%v, AdditionalProperties=%v]",
    	c.TriggerName, c.EcpdId, c.TriggerCategory, c.PricePlanTrigger, c.Notification, c.Active, c.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for Createtriggerchunk.
// It customizes the JSON marshaling process for Createtriggerchunk objects.
func (c Createtriggerchunk) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(c.AdditionalProperties,
        "triggerName", "ecpdId", "triggerCategory", "pricePlanTrigger", "notification", "active"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(c.toMap())
}

// toMap converts the Createtriggerchunk object to a map representation for JSON marshaling.
func (c Createtriggerchunk) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, c.AdditionalProperties)
    if c.TriggerName != nil {
        structMap["triggerName"] = c.TriggerName
    }
    if c.EcpdId != nil {
        structMap["ecpdId"] = c.EcpdId
    }
    if c.TriggerCategory != nil {
        structMap["triggerCategory"] = c.TriggerCategory
    }
    if c.PricePlanTrigger != nil {
        structMap["pricePlanTrigger"] = c.PricePlanTrigger.toMap()
    }
    if c.Notification != nil {
        structMap["notification"] = c.Notification.toMap()
    }
    if c.Active != nil {
        structMap["active"] = c.Active
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Createtriggerchunk.
// It customizes the JSON unmarshaling process for Createtriggerchunk objects.
func (c *Createtriggerchunk) UnmarshalJSON(input []byte) error {
    var temp tempCreatetriggerchunk
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "triggerName", "ecpdId", "triggerCategory", "pricePlanTrigger", "notification", "active")
    if err != nil {
    	return err
    }
    c.AdditionalProperties = additionalProperties
    
    c.TriggerName = temp.TriggerName
    c.EcpdId = temp.EcpdId
    c.TriggerCategory = temp.TriggerCategory
    c.PricePlanTrigger = temp.PricePlanTrigger
    c.Notification = temp.Notification
    c.Active = temp.Active
    return nil
}

// tempCreatetriggerchunk is a temporary struct used for validating the fields of Createtriggerchunk.
type tempCreatetriggerchunk  struct {
    TriggerName      *string            `json:"triggerName,omitempty"`
    EcpdId           *string            `json:"ecpdId,omitempty"`
    TriggerCategory  *TriggerCategory   `json:"triggerCategory,omitempty"`
    PricePlanTrigger *PricePlanTrigger  `json:"pricePlanTrigger,omitempty"`
    Notification     *Notificationarray `json:"notification,omitempty"`
    Active           *Active            `json:"active,omitempty"`
}
