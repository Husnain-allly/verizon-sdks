/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// GoToStateRequest represents a GoToStateRequest struct.
// Changes the provisioning state of one or more devices to a specified customer-defined service and state.
type GoToStateRequest struct {
    // The name of a customer-defined service to push the devices to.
    ServiceName               string                 `json:"serviceName"`
    // The name of a customer-defined stage state to push the devices to.
    StateName                 string                 `json:"stateName"`
    // The service plan code that you want to assign to all specified devices in the new state.
    ServicePlan               string                 `json:"servicePlan"`
    // The Zip code of the location where the line of service will primarily be used, or a Zip code that you have been told to use with these devices. For accounts that are configured for geographic numbering, this is the ZIP code from which the MDN will be derived.
    MdnZipCode                string                 `json:"mdnZipCode"`
    // Up to 10,000 devices that you want to push to a different state, specified by device identifier.
    Devices                   []AccountDeviceList    `json:"devices,omitempty"`
    // Specify the kind of the device identifier, the type of match, and the string that you want to match.
    Filter                    *DeviceFilter          `json:"filter,omitempty"`
    // The pool from which your device IP addresses will be derived if the service or state change requires new IP addresses.If you do not include this element, the default pool will be used.
    CarrierIpPoolName         *string                `json:"carrierIpPoolName,omitempty"`
    // For devices with static IP addresses on the public network, this specifies whether the devices have general access to the Internet. Valid values are “restricted” or “unrestricted”.
    PublicIpRestriction       *string                `json:"publicIpRestriction,omitempty"`
    // The Stock Keeping Unit (SKU) number of a 4G device type with an embedded SIM. Can be used with ICCID or EID device identifiers in lieu of an IMEI when activating 4G devices. The SkuNumber will be used with all devices in the request, so all devices must be of the same type.
    SkuNumber                 *string                `json:"skuNumber,omitempty"`
    // The names and values of any custom fields that you want to set for the devices.
    CustomFields              []CustomFields         `json:"customFields,omitempty"`
    // This is an array that associates an IP address with a device identifier. This variable is only relevant for Business Internet/Fixed Wireless Access
    DevicesWithServiceAddress []interface{}          `json:"devicesWithServiceAddress,omitempty"`
    // The IP address of the device.
    Ipaddress                 *string                `json:"ipAddress,omitempty"`
    // The name of a device group that the devices should be added to.
    GroupName                 *string                `json:"groupName,omitempty"`
    // The customer name and the address of the device's primary place of use. Leave these fields empty to use the account profile address as the primary place of use. These values will be applied to all devices in the request.If the account is enabled for non-geographic MDNs and the device supports it, the primaryPlaceOfUse address will also be used to derive the MDN for the device.
    PrimaryPlaceOfUse         *PlaceOfUse            `json:"primaryPlaceOfUse,omitempty"`
    AdditionalProperties      map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for GoToStateRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (g GoToStateRequest) String() string {
    return fmt.Sprintf(
    	"GoToStateRequest[ServiceName=%v, StateName=%v, ServicePlan=%v, MdnZipCode=%v, Devices=%v, Filter=%v, CarrierIpPoolName=%v, PublicIpRestriction=%v, SkuNumber=%v, CustomFields=%v, DevicesWithServiceAddress=%v, Ipaddress=%v, GroupName=%v, PrimaryPlaceOfUse=%v, AdditionalProperties=%v]",
    	g.ServiceName, g.StateName, g.ServicePlan, g.MdnZipCode, g.Devices, g.Filter, g.CarrierIpPoolName, g.PublicIpRestriction, g.SkuNumber, g.CustomFields, g.DevicesWithServiceAddress, g.Ipaddress, g.GroupName, g.PrimaryPlaceOfUse, g.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for GoToStateRequest.
// It customizes the JSON marshaling process for GoToStateRequest objects.
func (g GoToStateRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(g.AdditionalProperties,
        "serviceName", "stateName", "servicePlan", "mdnZipCode", "devices", "filter", "carrierIpPoolName", "publicIpRestriction", "skuNumber", "customFields", "devicesWithServiceAddress", "ipAddress", "groupName", "primaryPlaceOfUse"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(g.toMap())
}

// toMap converts the GoToStateRequest object to a map representation for JSON marshaling.
func (g GoToStateRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, g.AdditionalProperties)
    structMap["serviceName"] = g.ServiceName
    structMap["stateName"] = g.StateName
    structMap["servicePlan"] = g.ServicePlan
    structMap["mdnZipCode"] = g.MdnZipCode
    if g.Devices != nil {
        structMap["devices"] = g.Devices
    }
    if g.Filter != nil {
        structMap["filter"] = g.Filter.toMap()
    }
    if g.CarrierIpPoolName != nil {
        structMap["carrierIpPoolName"] = g.CarrierIpPoolName
    }
    if g.PublicIpRestriction != nil {
        structMap["publicIpRestriction"] = g.PublicIpRestriction
    }
    if g.SkuNumber != nil {
        structMap["skuNumber"] = g.SkuNumber
    }
    if g.CustomFields != nil {
        structMap["customFields"] = g.CustomFields
    }
    if g.DevicesWithServiceAddress != nil {
        structMap["devicesWithServiceAddress"] = g.DevicesWithServiceAddress
    }
    if g.Ipaddress != nil {
        structMap["ipAddress"] = g.Ipaddress
    }
    if g.GroupName != nil {
        structMap["groupName"] = g.GroupName
    }
    if g.PrimaryPlaceOfUse != nil {
        structMap["primaryPlaceOfUse"] = g.PrimaryPlaceOfUse.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for GoToStateRequest.
// It customizes the JSON unmarshaling process for GoToStateRequest objects.
func (g *GoToStateRequest) UnmarshalJSON(input []byte) error {
    var temp tempGoToStateRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "serviceName", "stateName", "servicePlan", "mdnZipCode", "devices", "filter", "carrierIpPoolName", "publicIpRestriction", "skuNumber", "customFields", "devicesWithServiceAddress", "ipAddress", "groupName", "primaryPlaceOfUse")
    if err != nil {
    	return err
    }
    g.AdditionalProperties = additionalProperties
    
    g.ServiceName = *temp.ServiceName
    g.StateName = *temp.StateName
    g.ServicePlan = *temp.ServicePlan
    g.MdnZipCode = *temp.MdnZipCode
    g.Devices = temp.Devices
    g.Filter = temp.Filter
    g.CarrierIpPoolName = temp.CarrierIpPoolName
    g.PublicIpRestriction = temp.PublicIpRestriction
    g.SkuNumber = temp.SkuNumber
    g.CustomFields = temp.CustomFields
    g.DevicesWithServiceAddress = temp.DevicesWithServiceAddress
    g.Ipaddress = temp.Ipaddress
    g.GroupName = temp.GroupName
    g.PrimaryPlaceOfUse = temp.PrimaryPlaceOfUse
    return nil
}

// tempGoToStateRequest is a temporary struct used for validating the fields of GoToStateRequest.
type tempGoToStateRequest  struct {
    ServiceName               *string             `json:"serviceName"`
    StateName                 *string             `json:"stateName"`
    ServicePlan               *string             `json:"servicePlan"`
    MdnZipCode                *string             `json:"mdnZipCode"`
    Devices                   []AccountDeviceList `json:"devices,omitempty"`
    Filter                    *DeviceFilter       `json:"filter,omitempty"`
    CarrierIpPoolName         *string             `json:"carrierIpPoolName,omitempty"`
    PublicIpRestriction       *string             `json:"publicIpRestriction,omitempty"`
    SkuNumber                 *string             `json:"skuNumber,omitempty"`
    CustomFields              []CustomFields      `json:"customFields,omitempty"`
    DevicesWithServiceAddress []interface{}       `json:"devicesWithServiceAddress,omitempty"`
    Ipaddress                 *string             `json:"ipAddress,omitempty"`
    GroupName                 *string             `json:"groupName,omitempty"`
    PrimaryPlaceOfUse         *PlaceOfUse         `json:"primaryPlaceOfUse,omitempty"`
}

func (g *tempGoToStateRequest) validate() error {
    var errs []string
    if g.ServiceName == nil {
        errs = append(errs, "required field `serviceName` is missing for type `GoToStateRequest`")
    }
    if g.StateName == nil {
        errs = append(errs, "required field `stateName` is missing for type `GoToStateRequest`")
    }
    if g.ServicePlan == nil {
        errs = append(errs, "required field `servicePlan` is missing for type `GoToStateRequest`")
    }
    if g.MdnZipCode == nil {
        errs = append(errs, "required field `mdnZipCode` is missing for type `GoToStateRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
