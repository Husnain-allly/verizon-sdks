/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// SearchDeviceResponse represents a SearchDeviceResponse struct.
// A success response includes an array of all matching events. Each event includes the full event resource definition.
type SearchDeviceResponse struct {
    // The action requested in this event; “change” for device configuration changes.
    Action               *string                `json:"action,omitempty"`
    // The date and time of the change request.
    Createdon            *string                `json:"createdon,omitempty"`
    // The device’s ThingSpace UUID.
    Deviceid             *string                `json:"deviceid,omitempty"`
    // List of fields affected by the event.
    Fields               *Fields2               `json:"fields,omitempty"`
    // The unique ID of this ts.event.configuration event.
    Id                   *string                `json:"id,omitempty"`
    // The kind of the ThingSpace resource that is being reported; “ts.event.configuration” for device configuration changes.
    Kind                 *string                `json:"kind,omitempty"`
    // The date and time that the event was last updated.
    Lastupdated          *string                `json:"lastupdated,omitempty"`
    // The name of the event
    Name                 *string                `json:"name,omitempty"`
    // The current status of the request.
    State                *string                `json:"state,omitempty"`
    // UUIDs of tag resources that are applied to this device.
    Tagids               []string               `json:"tagids,omitempty"`
    // transaction id
    Transactionid        *string                `json:"transactionid,omitempty"`
    // The version of the resource.
    Version              *string                `json:"version,omitempty"`
    // The version of the resource.
    Versionid            *string                `json:"versionid,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for SearchDeviceResponse,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (s SearchDeviceResponse) String() string {
    return fmt.Sprintf(
    	"SearchDeviceResponse[Action=%v, Createdon=%v, Deviceid=%v, Fields=%v, Id=%v, Kind=%v, Lastupdated=%v, Name=%v, State=%v, Tagids=%v, Transactionid=%v, Version=%v, Versionid=%v, AdditionalProperties=%v]",
    	s.Action, s.Createdon, s.Deviceid, s.Fields, s.Id, s.Kind, s.Lastupdated, s.Name, s.State, s.Tagids, s.Transactionid, s.Version, s.Versionid, s.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for SearchDeviceResponse.
// It customizes the JSON marshaling process for SearchDeviceResponse objects.
func (s SearchDeviceResponse) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(s.AdditionalProperties,
        "action", "createdon", "deviceid", "fields", "id", "kind", "lastupdated", "name", "state", "tagids", "transactionid", "version", "versionid"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(s.toMap())
}

// toMap converts the SearchDeviceResponse object to a map representation for JSON marshaling.
func (s SearchDeviceResponse) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, s.AdditionalProperties)
    if s.Action != nil {
        structMap["action"] = s.Action
    }
    if s.Createdon != nil {
        structMap["createdon"] = s.Createdon
    }
    if s.Deviceid != nil {
        structMap["deviceid"] = s.Deviceid
    }
    if s.Fields != nil {
        structMap["fields"] = s.Fields.toMap()
    }
    if s.Id != nil {
        structMap["id"] = s.Id
    }
    if s.Kind != nil {
        structMap["kind"] = s.Kind
    }
    if s.Lastupdated != nil {
        structMap["lastupdated"] = s.Lastupdated
    }
    if s.Name != nil {
        structMap["name"] = s.Name
    }
    if s.State != nil {
        structMap["state"] = s.State
    }
    if s.Tagids != nil {
        structMap["tagids"] = s.Tagids
    }
    if s.Transactionid != nil {
        structMap["transactionid"] = s.Transactionid
    }
    if s.Version != nil {
        structMap["version"] = s.Version
    }
    if s.Versionid != nil {
        structMap["versionid"] = s.Versionid
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for SearchDeviceResponse.
// It customizes the JSON unmarshaling process for SearchDeviceResponse objects.
func (s *SearchDeviceResponse) UnmarshalJSON(input []byte) error {
    var temp tempSearchDeviceResponse
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "action", "createdon", "deviceid", "fields", "id", "kind", "lastupdated", "name", "state", "tagids", "transactionid", "version", "versionid")
    if err != nil {
    	return err
    }
    s.AdditionalProperties = additionalProperties
    
    s.Action = temp.Action
    s.Createdon = temp.Createdon
    s.Deviceid = temp.Deviceid
    s.Fields = temp.Fields
    s.Id = temp.Id
    s.Kind = temp.Kind
    s.Lastupdated = temp.Lastupdated
    s.Name = temp.Name
    s.State = temp.State
    s.Tagids = temp.Tagids
    s.Transactionid = temp.Transactionid
    s.Version = temp.Version
    s.Versionid = temp.Versionid
    return nil
}

// tempSearchDeviceResponse is a temporary struct used for validating the fields of SearchDeviceResponse.
type tempSearchDeviceResponse  struct {
    Action        *string  `json:"action,omitempty"`
    Createdon     *string  `json:"createdon,omitempty"`
    Deviceid      *string  `json:"deviceid,omitempty"`
    Fields        *Fields2 `json:"fields,omitempty"`
    Id            *string  `json:"id,omitempty"`
    Kind          *string  `json:"kind,omitempty"`
    Lastupdated   *string  `json:"lastupdated,omitempty"`
    Name          *string  `json:"name,omitempty"`
    State         *string  `json:"state,omitempty"`
    Tagids        []string `json:"tagids,omitempty"`
    Transactionid *string  `json:"transactionid,omitempty"`
    Version       *string  `json:"version,omitempty"`
    Versionid     *string  `json:"versionid,omitempty"`
}
