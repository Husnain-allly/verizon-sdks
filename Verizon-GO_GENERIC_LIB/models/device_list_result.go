/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// DeviceListResult represents a DeviceListResult struct.
// Device list information.
type DeviceListResult struct {
    // Account name.
    AccountName          string                 `json:"accountName"`
    // Total device count.
    DeviceCount          int                    `json:"deviceCount"`
    // List of devices with id in IMEI.
    DeviceList           []V3Device             `json:"deviceList"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceListResult,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceListResult) String() string {
    return fmt.Sprintf(
    	"DeviceListResult[AccountName=%v, DeviceCount=%v, DeviceList=%v, AdditionalProperties=%v]",
    	d.AccountName, d.DeviceCount, d.DeviceList, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceListResult.
// It customizes the JSON marshaling process for DeviceListResult objects.
func (d DeviceListResult) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "accountName", "deviceCount", "deviceList"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceListResult object to a map representation for JSON marshaling.
func (d DeviceListResult) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    structMap["accountName"] = d.AccountName
    structMap["deviceCount"] = d.DeviceCount
    structMap["deviceList"] = d.DeviceList
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceListResult.
// It customizes the JSON unmarshaling process for DeviceListResult objects.
func (d *DeviceListResult) UnmarshalJSON(input []byte) error {
    var temp tempDeviceListResult
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "deviceCount", "deviceList")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.AccountName = *temp.AccountName
    d.DeviceCount = *temp.DeviceCount
    d.DeviceList = *temp.DeviceList
    return nil
}

// tempDeviceListResult is a temporary struct used for validating the fields of DeviceListResult.
type tempDeviceListResult  struct {
    AccountName *string     `json:"accountName"`
    DeviceCount *int        `json:"deviceCount"`
    DeviceList  *[]V3Device `json:"deviceList"`
}

func (d *tempDeviceListResult) validate() error {
    var errs []string
    if d.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `DeviceListResult`")
    }
    if d.DeviceCount == nil {
        errs = append(errs, "required field `deviceCount` is missing for type `DeviceListResult`")
    }
    if d.DeviceList == nil {
        errs = append(errs, "required field `deviceList` is missing for type `DeviceListResult`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
