/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// Locations1 represents a Locations1 struct.
type Locations1 struct {
    CoordinatesList      []Coordinates          `json:"coordinatesList,omitempty"`
    AddressList          []AddressItem          `json:"addressList,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for Locations1,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (l Locations1) String() string {
    return fmt.Sprintf(
    	"Locations1[CoordinatesList=%v, AddressList=%v, AdditionalProperties=%v]",
    	l.CoordinatesList, l.AddressList, l.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for Locations1.
// It customizes the JSON marshaling process for Locations1 objects.
func (l Locations1) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(l.AdditionalProperties,
        "coordinatesList", "addressList"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(l.toMap())
}

// toMap converts the Locations1 object to a map representation for JSON marshaling.
func (l Locations1) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, l.AdditionalProperties)
    if l.CoordinatesList != nil {
        structMap["coordinatesList"] = l.CoordinatesList
    }
    if l.AddressList != nil {
        structMap["addressList"] = l.AddressList
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Locations1.
// It customizes the JSON unmarshaling process for Locations1 objects.
func (l *Locations1) UnmarshalJSON(input []byte) error {
    var temp tempLocations1
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "coordinatesList", "addressList")
    if err != nil {
    	return err
    }
    l.AdditionalProperties = additionalProperties
    
    l.CoordinatesList = temp.CoordinatesList
    l.AddressList = temp.AddressList
    return nil
}

// tempLocations1 is a temporary struct used for validating the fields of Locations1.
type tempLocations1  struct {
    CoordinatesList []Coordinates `json:"coordinatesList,omitempty"`
    AddressList     []AddressItem `json:"addressList,omitempty"`
}
