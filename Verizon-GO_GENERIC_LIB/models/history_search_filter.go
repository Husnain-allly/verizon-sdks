/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// HistorySearchFilter represents a HistorySearchFilter struct.
// The selected device and attributes for which a request should retrieve data.
type HistorySearchFilter struct {
    // Account name identifier.
    AccountName          string                         `json:"accountName"`
    // Identifies a particular IoT device.
    Device               Device                         `json:"device"`
    // Streaming RF parameters for which you want to retrieve history data.
    Attributes           *HistorySearchFilterAttributes `json:"attributes,omitempty"`
    AdditionalProperties map[string]interface{}         `json:"_"`
}

// String implements the fmt.Stringer interface for HistorySearchFilter,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (h HistorySearchFilter) String() string {
    return fmt.Sprintf(
    	"HistorySearchFilter[AccountName=%v, Device=%v, Attributes=%v, AdditionalProperties=%v]",
    	h.AccountName, h.Device, h.Attributes, h.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for HistorySearchFilter.
// It customizes the JSON marshaling process for HistorySearchFilter objects.
func (h HistorySearchFilter) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(h.AdditionalProperties,
        "accountName", "device", "attributes"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(h.toMap())
}

// toMap converts the HistorySearchFilter object to a map representation for JSON marshaling.
func (h HistorySearchFilter) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, h.AdditionalProperties)
    structMap["accountName"] = h.AccountName
    structMap["device"] = h.Device.toMap()
    if h.Attributes != nil {
        structMap["attributes"] = h.Attributes.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for HistorySearchFilter.
// It customizes the JSON unmarshaling process for HistorySearchFilter objects.
func (h *HistorySearchFilter) UnmarshalJSON(input []byte) error {
    var temp tempHistorySearchFilter
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "device", "attributes")
    if err != nil {
    	return err
    }
    h.AdditionalProperties = additionalProperties
    
    h.AccountName = *temp.AccountName
    h.Device = *temp.Device
    h.Attributes = temp.Attributes
    return nil
}

// tempHistorySearchFilter is a temporary struct used for validating the fields of HistorySearchFilter.
type tempHistorySearchFilter  struct {
    AccountName *string                        `json:"accountName"`
    Device      *Device                        `json:"device"`
    Attributes  *HistorySearchFilterAttributes `json:"attributes,omitempty"`
}

func (h *tempHistorySearchFilter) validate() error {
    var errs []string
    if h.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `HistorySearchFilter`")
    }
    if h.Device == nil {
        errs = append(errs, "required field `device` is missing for type `HistorySearchFilter`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
