/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// DtoExpandedDeviceResponse represents a DtoExpandedDeviceResponse struct.
type DtoExpandedDeviceResponse struct {
    // Not used in this release, future functionality
    Accountclientid  *string                `json:"accountclientid,omitempty"`
    // The billing account ID. This is the same value as the Account ID
    Billingaccountid *string                `json:"billingaccountid,omitempty"`
    // The Identifier of chipset used by the device
    Chipset          *string                `json:"chipset,omitempty"`
    Commands         map[string]interface{} `json:"commands,omitempty"`
    // Timestamp of the record
    Createdon        time.Time              `json:"createdon"`
    // Name/value pair, where the value is client defined.  The purpose is to keep track of current state per device action.
    Customdata       map[string]interface{} `json:"customdata,omitempty"`
    // a short description
    Description      *string                `json:"description,omitempty"`
    // The Electronic Serial Number (ESN) of the device
    Esn              *int                   `json:"esn,omitempty"`
    // Fields to return needed by search
    Fields           *DtoFields             `json:"fields,omitempty"`
    // UUID of the ECPD account the user belongs to
    Foreignid        string                 `json:"foreignid"`
    // The manufacturer's hardware version of the device
    Hardwareversion  *string                `json:"hardwareversion,omitempty"`
    // The 20-digit Integrated Circuit Card ID (SIM card ID)
    Iccid            *string                `json:"iccid,omitempty"`
    // UUID of the user record, assigned at creation
    Id               *string                `json:"id,omitempty"`
    // The 15-digit International Mobile Equipment ID
    Imei             *int                   `json:"imei,omitempty"`
    // The 64-bit International Mobile Subscriber Identity
    Imsi             *int                   `json:"imsi,omitempty"`
    // Timestamp of the record
    Lastupdated      time.Time              `json:"lastupdated"`
    // licenses assigned to the device
    Licenses         []string               `json:"licenses,omitempty"`
    // The Media Access Control address of the device, listed on the device in the format XX-XX-XX-XX-XX-XX or XX:XX:XX:XX:XX:XX
    Mac              *string                `json:"mac,omitempty"`
    // The manufacturer of the device
    Manufacturer     *string                `json:"manufacturer,omitempty"`
    // The 56-bit Mobile Equipment ID
    Meid             *string                `json:"meid,omitempty"`
    // Detail
    Modelmetadata    *interface{}           `json:"modelmetadata,omitempty"`
    // The Mobile Station International Subscriber Directory Number. In the USA, this is 1+ a 10-digit phone number
    Msisdn           *string                `json:"msisdn,omitempty"`
    // User defined name of the record
    Name             *string                `json:"name,omitempty"`
    // this field is applicable for BLE sensors. This represents the value of parent gateway device
    Parentdeviceid   *string                `json:"parentdeviceid,omitempty"`
    // The device model name
    Productmodel     *string                `json:"productmodel,omitempty"`
    // The id of the provider who is responible for talking to the device
    Providerid       *string                `json:"providerid,omitempty"`
    // The numeric value of the Quick Response (QR) code
    Qrcode           *string                `json:"qrcode,omitempty"`
    // The device reference ID
    Refid            *string                `json:"refid,omitempty"`
    // The type of value represented by `refid`
    Refidtype        *string                `json:"refidtype,omitempty"`
    // The device's serial number
    Serial           *string                `json:"serial,omitempty"`
    Services         []string               `json:"services,omitempty"`
    // The Stock Keeping Unit (SKU) number of the device
    Sku              *string                `json:"sku,omitempty"`
    // the current device software version
    Softwareversion  *string                `json:"softwareversion,omitempty"`
    // The current status of the device or transaction and will be `success` or `failed`
    State            string                 `json:"state"`
    // The resource version
    Version          *string                `json:"version,omitempty"`
    // The UUID of the resource version
    Versionid        string                 `json:"versionid"`
}

// String implements the fmt.Stringer interface for DtoExpandedDeviceResponse,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DtoExpandedDeviceResponse) String() string {
    return fmt.Sprintf(
    	"DtoExpandedDeviceResponse[Accountclientid=%v, Billingaccountid=%v, Chipset=%v, Commands=%v, Createdon=%v, Customdata=%v, Description=%v, Esn=%v, Fields=%v, Foreignid=%v, Hardwareversion=%v, Iccid=%v, Id=%v, Imei=%v, Imsi=%v, Lastupdated=%v, Licenses=%v, Mac=%v, Manufacturer=%v, Meid=%v, Modelmetadata=%v, Msisdn=%v, Name=%v, Parentdeviceid=%v, Productmodel=%v, Providerid=%v, Qrcode=%v, Refid=%v, Refidtype=%v, Serial=%v, Services=%v, Sku=%v, Softwareversion=%v, State=%v, Version=%v, Versionid=%v]",
    	d.Accountclientid, d.Billingaccountid, d.Chipset, d.Commands, d.Createdon, d.Customdata, d.Description, d.Esn, d.Fields, d.Foreignid, d.Hardwareversion, d.Iccid, d.Id, d.Imei, d.Imsi, d.Lastupdated, d.Licenses, d.Mac, d.Manufacturer, d.Meid, d.Modelmetadata, d.Msisdn, d.Name, d.Parentdeviceid, d.Productmodel, d.Providerid, d.Qrcode, d.Refid, d.Refidtype, d.Serial, d.Services, d.Sku, d.Softwareversion, d.State, d.Version, d.Versionid)
}

// MarshalJSON implements the json.Marshaler interface for DtoExpandedDeviceResponse.
// It customizes the JSON marshaling process for DtoExpandedDeviceResponse objects.
func (d DtoExpandedDeviceResponse) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(d.toMap())
}

// toMap converts the DtoExpandedDeviceResponse object to a map representation for JSON marshaling.
func (d DtoExpandedDeviceResponse) toMap() map[string]any {
    structMap := make(map[string]any)
    if d.Accountclientid != nil {
        structMap["accountclientid"] = d.Accountclientid
    }
    if d.Billingaccountid != nil {
        structMap["billingaccountid"] = d.Billingaccountid
    }
    if d.Chipset != nil {
        structMap["chipset"] = d.Chipset
    }
    if d.Commands != nil {
        structMap["commands"] = d.Commands
    }
    structMap["createdon"] = d.Createdon.Format(time.RFC3339)
    if d.Customdata != nil {
        structMap["customdata"] = d.Customdata
    }
    if d.Description != nil {
        structMap["description"] = d.Description
    }
    if d.Esn != nil {
        structMap["esn"] = d.Esn
    }
    if d.Fields != nil {
        structMap["fields"] = d.Fields.toMap()
    }
    structMap["foreignid"] = d.Foreignid
    if d.Hardwareversion != nil {
        structMap["hardwareversion"] = d.Hardwareversion
    }
    if d.Iccid != nil {
        structMap["iccid"] = d.Iccid
    }
    if d.Id != nil {
        structMap["id"] = d.Id
    }
    if d.Imei != nil {
        structMap["imei"] = d.Imei
    }
    if d.Imsi != nil {
        structMap["imsi"] = d.Imsi
    }
    structMap["lastupdated"] = d.Lastupdated.Format(time.RFC3339)
    if d.Licenses != nil {
        structMap["licenses"] = d.Licenses
    }
    if d.Mac != nil {
        structMap["mac"] = d.Mac
    }
    if d.Manufacturer != nil {
        structMap["manufacturer"] = d.Manufacturer
    }
    if d.Meid != nil {
        structMap["meid"] = d.Meid
    }
    if d.Modelmetadata != nil {
        structMap["modelmetadata"] = d.Modelmetadata
    }
    if d.Msisdn != nil {
        structMap["msisdn"] = d.Msisdn
    }
    if d.Name != nil {
        structMap["name"] = d.Name
    }
    if d.Parentdeviceid != nil {
        structMap["parentdeviceid"] = d.Parentdeviceid
    }
    if d.Productmodel != nil {
        structMap["productmodel"] = d.Productmodel
    }
    if d.Providerid != nil {
        structMap["providerid"] = d.Providerid
    }
    if d.Qrcode != nil {
        structMap["qrcode"] = d.Qrcode
    }
    if d.Refid != nil {
        structMap["refid"] = d.Refid
    }
    if d.Refidtype != nil {
        structMap["refidtype"] = d.Refidtype
    }
    if d.Serial != nil {
        structMap["serial"] = d.Serial
    }
    if d.Services != nil {
        structMap["services"] = d.Services
    }
    if d.Sku != nil {
        structMap["sku"] = d.Sku
    }
    if d.Softwareversion != nil {
        structMap["softwareversion"] = d.Softwareversion
    }
    structMap["state"] = d.State
    if d.Version != nil {
        structMap["version"] = d.Version
    }
    structMap["versionid"] = d.Versionid
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DtoExpandedDeviceResponse.
// It customizes the JSON unmarshaling process for DtoExpandedDeviceResponse objects.
func (d *DtoExpandedDeviceResponse) UnmarshalJSON(input []byte) error {
    var temp tempDtoExpandedDeviceResponse
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    d.Accountclientid = temp.Accountclientid
    d.Billingaccountid = temp.Billingaccountid
    d.Chipset = temp.Chipset
    d.Commands = temp.Commands
    CreatedonVal, err := time.Parse(time.RFC3339, *temp.Createdon)
    if err != nil {
        log.Fatalf("Cannot Parse createdon as % s format.", time.RFC3339)
    }
    d.Createdon = CreatedonVal
    d.Customdata = temp.Customdata
    d.Description = temp.Description
    d.Esn = temp.Esn
    d.Fields = temp.Fields
    d.Foreignid = *temp.Foreignid
    d.Hardwareversion = temp.Hardwareversion
    d.Iccid = temp.Iccid
    d.Id = temp.Id
    d.Imei = temp.Imei
    d.Imsi = temp.Imsi
    LastupdatedVal, err := time.Parse(time.RFC3339, *temp.Lastupdated)
    if err != nil {
        log.Fatalf("Cannot Parse lastupdated as % s format.", time.RFC3339)
    }
    d.Lastupdated = LastupdatedVal
    d.Licenses = temp.Licenses
    d.Mac = temp.Mac
    d.Manufacturer = temp.Manufacturer
    d.Meid = temp.Meid
    d.Modelmetadata = temp.Modelmetadata
    d.Msisdn = temp.Msisdn
    d.Name = temp.Name
    d.Parentdeviceid = temp.Parentdeviceid
    d.Productmodel = temp.Productmodel
    d.Providerid = temp.Providerid
    d.Qrcode = temp.Qrcode
    d.Refid = temp.Refid
    d.Refidtype = temp.Refidtype
    d.Serial = temp.Serial
    d.Services = temp.Services
    d.Sku = temp.Sku
    d.Softwareversion = temp.Softwareversion
    d.State = *temp.State
    d.Version = temp.Version
    d.Versionid = *temp.Versionid
    return nil
}

// tempDtoExpandedDeviceResponse is a temporary struct used for validating the fields of DtoExpandedDeviceResponse.
type tempDtoExpandedDeviceResponse  struct {
    Accountclientid  *string                `json:"accountclientid,omitempty"`
    Billingaccountid *string                `json:"billingaccountid,omitempty"`
    Chipset          *string                `json:"chipset,omitempty"`
    Commands         map[string]interface{} `json:"commands,omitempty"`
    Createdon        *string                `json:"createdon"`
    Customdata       map[string]interface{} `json:"customdata,omitempty"`
    Description      *string                `json:"description,omitempty"`
    Esn              *int                   `json:"esn,omitempty"`
    Fields           *DtoFields             `json:"fields,omitempty"`
    Foreignid        *string                `json:"foreignid"`
    Hardwareversion  *string                `json:"hardwareversion,omitempty"`
    Iccid            *string                `json:"iccid,omitempty"`
    Id               *string                `json:"id,omitempty"`
    Imei             *int                   `json:"imei,omitempty"`
    Imsi             *int                   `json:"imsi,omitempty"`
    Lastupdated      *string                `json:"lastupdated"`
    Licenses         []string               `json:"licenses,omitempty"`
    Mac              *string                `json:"mac,omitempty"`
    Manufacturer     *string                `json:"manufacturer,omitempty"`
    Meid             *string                `json:"meid,omitempty"`
    Modelmetadata    *interface{}           `json:"modelmetadata,omitempty"`
    Msisdn           *string                `json:"msisdn,omitempty"`
    Name             *string                `json:"name,omitempty"`
    Parentdeviceid   *string                `json:"parentdeviceid,omitempty"`
    Productmodel     *string                `json:"productmodel,omitempty"`
    Providerid       *string                `json:"providerid,omitempty"`
    Qrcode           *string                `json:"qrcode,omitempty"`
    Refid            *string                `json:"refid,omitempty"`
    Refidtype        *string                `json:"refidtype,omitempty"`
    Serial           *string                `json:"serial,omitempty"`
    Services         []string               `json:"services,omitempty"`
    Sku              *string                `json:"sku,omitempty"`
    Softwareversion  *string                `json:"softwareversion,omitempty"`
    State            *string                `json:"state"`
    Version          *string                `json:"version,omitempty"`
    Versionid        *string                `json:"versionid"`
}

func (d *tempDtoExpandedDeviceResponse) validate() error {
    var errs []string
    if d.Createdon == nil {
        errs = append(errs, "required field `createdon` is missing for type `dto.ExpandedDeviceResponse`")
    }
    if d.Foreignid == nil {
        errs = append(errs, "required field `foreignid` is missing for type `dto.ExpandedDeviceResponse`")
    }
    if d.Lastupdated == nil {
        errs = append(errs, "required field `lastupdated` is missing for type `dto.ExpandedDeviceResponse`")
    }
    if d.State == nil {
        errs = append(errs, "required field `state` is missing for type `dto.ExpandedDeviceResponse`")
    }
    if d.Versionid == nil {
        errs = append(errs, "required field `versionid` is missing for type `dto.ExpandedDeviceResponse`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
