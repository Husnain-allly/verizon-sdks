/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// DeviceGroupDevicesData represents a DeviceGroupDevicesData struct.
// Returns the name, description, and list of devices in a device group.
type DeviceGroupDevicesData struct {
    // The description of the device group.
    Description          *string                `json:"description,omitempty"`
    // The devices in the device group.
    Devices              []AccountDeviceList    `json:"devices,omitempty"`
    // False for a status 200 response.True for a status 202 response, indicating that there is more data to be retrieved.
    HasMoreData          *bool                  `json:"hasMoreData,omitempty"`
    // The name of the device group.
    Name                 *string                `json:"name,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceGroupDevicesData,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceGroupDevicesData) String() string {
    return fmt.Sprintf(
    	"DeviceGroupDevicesData[Description=%v, Devices=%v, HasMoreData=%v, Name=%v, AdditionalProperties=%v]",
    	d.Description, d.Devices, d.HasMoreData, d.Name, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceGroupDevicesData.
// It customizes the JSON marshaling process for DeviceGroupDevicesData objects.
func (d DeviceGroupDevicesData) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "description", "devices", "hasMoreData", "name"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceGroupDevicesData object to a map representation for JSON marshaling.
func (d DeviceGroupDevicesData) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    if d.Description != nil {
        structMap["description"] = d.Description
    }
    if d.Devices != nil {
        structMap["devices"] = d.Devices
    }
    if d.HasMoreData != nil {
        structMap["hasMoreData"] = d.HasMoreData
    }
    if d.Name != nil {
        structMap["name"] = d.Name
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceGroupDevicesData.
// It customizes the JSON unmarshaling process for DeviceGroupDevicesData objects.
func (d *DeviceGroupDevicesData) UnmarshalJSON(input []byte) error {
    var temp tempDeviceGroupDevicesData
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "description", "devices", "hasMoreData", "name")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.Description = temp.Description
    d.Devices = temp.Devices
    d.HasMoreData = temp.HasMoreData
    d.Name = temp.Name
    return nil
}

// tempDeviceGroupDevicesData is a temporary struct used for validating the fields of DeviceGroupDevicesData.
type tempDeviceGroupDevicesData  struct {
    Description *string             `json:"description,omitempty"`
    Devices     []AccountDeviceList `json:"devices,omitempty"`
    HasMoreData *bool               `json:"hasMoreData,omitempty"`
    Name        *string             `json:"name,omitempty"`
}
