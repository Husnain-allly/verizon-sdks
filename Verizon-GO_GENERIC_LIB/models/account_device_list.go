/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// AccountDeviceList represents a AccountDeviceList struct.
// A list of deviceId objects to use when requesting information from multiple devices.
type AccountDeviceList struct {
    // All identifiers for the device.
    DeviceIds            []DeviceId             `json:"deviceIds"`
    Ipaddress            *string                `json:"ipAddress,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for AccountDeviceList,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a AccountDeviceList) String() string {
    return fmt.Sprintf(
    	"AccountDeviceList[DeviceIds=%v, Ipaddress=%v, AdditionalProperties=%v]",
    	a.DeviceIds, a.Ipaddress, a.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for AccountDeviceList.
// It customizes the JSON marshaling process for AccountDeviceList objects.
func (a AccountDeviceList) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(a.AdditionalProperties,
        "deviceIds", "ipAddress"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(a.toMap())
}

// toMap converts the AccountDeviceList object to a map representation for JSON marshaling.
func (a AccountDeviceList) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, a.AdditionalProperties)
    structMap["deviceIds"] = a.DeviceIds
    if a.Ipaddress != nil {
        structMap["ipAddress"] = a.Ipaddress
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for AccountDeviceList.
// It customizes the JSON unmarshaling process for AccountDeviceList objects.
func (a *AccountDeviceList) UnmarshalJSON(input []byte) error {
    var temp tempAccountDeviceList
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceIds", "ipAddress")
    if err != nil {
    	return err
    }
    a.AdditionalProperties = additionalProperties
    
    a.DeviceIds = *temp.DeviceIds
    a.Ipaddress = temp.Ipaddress
    return nil
}

// tempAccountDeviceList is a temporary struct used for validating the fields of AccountDeviceList.
type tempAccountDeviceList  struct {
    DeviceIds *[]DeviceId `json:"deviceIds"`
    Ipaddress *string     `json:"ipAddress,omitempty"`
}

func (a *tempAccountDeviceList) validate() error {
    var errs []string
    if a.DeviceIds == nil {
        errs = append(errs, "required field `deviceIds` is missing for type `AccountDeviceList`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
