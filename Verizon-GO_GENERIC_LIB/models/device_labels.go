/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// DeviceLabels represents a DeviceLabels struct.
// A label for a single device.
type DeviceLabels struct {
    // The label you want to associate with the device.
    Name                 string                 `json:"name"`
    // The value of label
    Value                string                 `json:"value"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceLabels,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceLabels) String() string {
    return fmt.Sprintf(
    	"DeviceLabels[Name=%v, Value=%v, AdditionalProperties=%v]",
    	d.Name, d.Value, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceLabels.
// It customizes the JSON marshaling process for DeviceLabels objects.
func (d DeviceLabels) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "name", "value"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceLabels object to a map representation for JSON marshaling.
func (d DeviceLabels) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    structMap["name"] = d.Name
    structMap["value"] = d.Value
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceLabels.
// It customizes the JSON unmarshaling process for DeviceLabels objects.
func (d *DeviceLabels) UnmarshalJSON(input []byte) error {
    var temp tempDeviceLabels
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "name", "value")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.Name = *temp.Name
    d.Value = *temp.Value
    return nil
}

// tempDeviceLabels is a temporary struct used for validating the fields of DeviceLabels.
type tempDeviceLabels  struct {
    Name  *string `json:"name"`
    Value *string `json:"value"`
}

func (d *tempDeviceLabels) validate() error {
    var errs []string
    if d.Name == nil {
        errs = append(errs, "required field `name` is missing for type `DeviceLabels`")
    }
    if d.Value == nil {
        errs = append(errs, "required field `value` is missing for type `DeviceLabels`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
