/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// Id represents a Id struct.
type Id struct {
    // The value of the device identifier.
    Id                   *string                `json:"id,omitempty"`
    // The type of the device identifier. Valid types of identifiers are:ESN (decimal),EID,ICCID (up to 20 digits),IMEI (up to 16 digits),MDN,MEID (hexadecimal),MSISDN.
    Kind                 *string                `json:"kind,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for Id,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (i Id) String() string {
    return fmt.Sprintf(
    	"Id[Id=%v, Kind=%v, AdditionalProperties=%v]",
    	i.Id, i.Kind, i.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for Id.
// It customizes the JSON marshaling process for Id objects.
func (i Id) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(i.AdditionalProperties,
        "id", "kind"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(i.toMap())
}

// toMap converts the Id object to a map representation for JSON marshaling.
func (i Id) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, i.AdditionalProperties)
    if i.Id != nil {
        structMap["id"] = i.Id
    }
    if i.Kind != nil {
        structMap["kind"] = i.Kind
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Id.
// It customizes the JSON unmarshaling process for Id objects.
func (i *Id) UnmarshalJSON(input []byte) error {
    var temp tempId
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "id", "kind")
    if err != nil {
    	return err
    }
    i.AdditionalProperties = additionalProperties
    
    i.Id = temp.Id
    i.Kind = temp.Kind
    return nil
}

// tempId is a temporary struct used for validating the fields of Id.
type tempId  struct {
    Id   *string `json:"id,omitempty"`
    Kind *string `json:"kind,omitempty"`
}
