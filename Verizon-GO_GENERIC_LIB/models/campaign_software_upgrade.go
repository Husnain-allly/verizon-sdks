/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// CampaignSoftwareUpgrade represents a CampaignSoftwareUpgrade struct.
// Software upgrade information.
type CampaignSoftwareUpgrade struct {
    // Campaign name.
    CampaignName           *string                `json:"campaignName,omitempty"`
    // Software name to upgrade to.
    SoftwareName           string                 `json:"softwareName"`
    // Old software name.
    SoftwareFrom           string                 `json:"softwareFrom"`
    // New software name.
    SoftwareTo             string                 `json:"softwareTo"`
    // OMA or HTTP.
    DistributionType       string                 `json:"distributionType"`
    // Campaign start date.
    StartDate              time.Time              `json:"startDate"`
    // Campaign end date.
    EndDate                time.Time              `json:"endDate"`
    // Specifies starting date client should download package. If null, client will download as soon as possible.
    DownloadAfterDate      *time.Time             `json:"downloadAfterDate,omitempty"`
    // List of allowed download time windows.
    DownloadTimeWindowList []V2TimeWindow         `json:"downloadTimeWindowList,omitempty"`
    // Client will install package after date. If null, client will install as soon as possible.
    InstallAfterDate       *time.Time             `json:"installAfterDate,omitempty"`
    // List of allowed install time windows.
    InstallTimeWindowList  []V2TimeWindow         `json:"installTimeWindowList,omitempty"`
    // Device IMEI list.
    DeviceList             []string               `json:"deviceList"`
    AdditionalProperties   map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for CampaignSoftwareUpgrade,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c CampaignSoftwareUpgrade) String() string {
    return fmt.Sprintf(
    	"CampaignSoftwareUpgrade[CampaignName=%v, SoftwareName=%v, SoftwareFrom=%v, SoftwareTo=%v, DistributionType=%v, StartDate=%v, EndDate=%v, DownloadAfterDate=%v, DownloadTimeWindowList=%v, InstallAfterDate=%v, InstallTimeWindowList=%v, DeviceList=%v, AdditionalProperties=%v]",
    	c.CampaignName, c.SoftwareName, c.SoftwareFrom, c.SoftwareTo, c.DistributionType, c.StartDate, c.EndDate, c.DownloadAfterDate, c.DownloadTimeWindowList, c.InstallAfterDate, c.InstallTimeWindowList, c.DeviceList, c.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for CampaignSoftwareUpgrade.
// It customizes the JSON marshaling process for CampaignSoftwareUpgrade objects.
func (c CampaignSoftwareUpgrade) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(c.AdditionalProperties,
        "campaignName", "softwareName", "softwareFrom", "softwareTo", "distributionType", "startDate", "endDate", "downloadAfterDate", "downloadTimeWindowList", "installAfterDate", "installTimeWindowList", "deviceList"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(c.toMap())
}

// toMap converts the CampaignSoftwareUpgrade object to a map representation for JSON marshaling.
func (c CampaignSoftwareUpgrade) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, c.AdditionalProperties)
    if c.CampaignName != nil {
        structMap["campaignName"] = c.CampaignName
    }
    structMap["softwareName"] = c.SoftwareName
    structMap["softwareFrom"] = c.SoftwareFrom
    structMap["softwareTo"] = c.SoftwareTo
    structMap["distributionType"] = c.DistributionType
    structMap["startDate"] = c.StartDate.Format(DEFAULT_DATE)
    structMap["endDate"] = c.EndDate.Format(DEFAULT_DATE)
    if c.DownloadAfterDate != nil {
        structMap["downloadAfterDate"] = c.DownloadAfterDate.Format(DEFAULT_DATE)
    }
    if c.DownloadTimeWindowList != nil {
        structMap["downloadTimeWindowList"] = c.DownloadTimeWindowList
    }
    if c.InstallAfterDate != nil {
        structMap["installAfterDate"] = c.InstallAfterDate.Format(DEFAULT_DATE)
    }
    if c.InstallTimeWindowList != nil {
        structMap["installTimeWindowList"] = c.InstallTimeWindowList
    }
    structMap["deviceList"] = c.DeviceList
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for CampaignSoftwareUpgrade.
// It customizes the JSON unmarshaling process for CampaignSoftwareUpgrade objects.
func (c *CampaignSoftwareUpgrade) UnmarshalJSON(input []byte) error {
    var temp tempCampaignSoftwareUpgrade
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "campaignName", "softwareName", "softwareFrom", "softwareTo", "distributionType", "startDate", "endDate", "downloadAfterDate", "downloadTimeWindowList", "installAfterDate", "installTimeWindowList", "deviceList")
    if err != nil {
    	return err
    }
    c.AdditionalProperties = additionalProperties
    
    c.CampaignName = temp.CampaignName
    c.SoftwareName = *temp.SoftwareName
    c.SoftwareFrom = *temp.SoftwareFrom
    c.SoftwareTo = *temp.SoftwareTo
    c.DistributionType = *temp.DistributionType
    StartDateVal, err := time.Parse(DEFAULT_DATE, *temp.StartDate)
    if err != nil {
        log.Fatalf("Cannot Parse startDate as % s format.", DEFAULT_DATE)
    }
    c.StartDate = StartDateVal
    EndDateVal, err := time.Parse(DEFAULT_DATE, *temp.EndDate)
    if err != nil {
        log.Fatalf("Cannot Parse endDate as % s format.", DEFAULT_DATE)
    }
    c.EndDate = EndDateVal
    if temp.DownloadAfterDate != nil {
        DownloadAfterDateVal, err := time.Parse(DEFAULT_DATE, *temp.DownloadAfterDate)
        if err != nil {
            log.Fatalf("Cannot Parse downloadAfterDate as % s format.", DEFAULT_DATE)
        }
        c.DownloadAfterDate = &DownloadAfterDateVal
    }
    c.DownloadTimeWindowList = temp.DownloadTimeWindowList
    if temp.InstallAfterDate != nil {
        InstallAfterDateVal, err := time.Parse(DEFAULT_DATE, *temp.InstallAfterDate)
        if err != nil {
            log.Fatalf("Cannot Parse installAfterDate as % s format.", DEFAULT_DATE)
        }
        c.InstallAfterDate = &InstallAfterDateVal
    }
    c.InstallTimeWindowList = temp.InstallTimeWindowList
    c.DeviceList = *temp.DeviceList
    return nil
}

// tempCampaignSoftwareUpgrade is a temporary struct used for validating the fields of CampaignSoftwareUpgrade.
type tempCampaignSoftwareUpgrade  struct {
    CampaignName           *string        `json:"campaignName,omitempty"`
    SoftwareName           *string        `json:"softwareName"`
    SoftwareFrom           *string        `json:"softwareFrom"`
    SoftwareTo             *string        `json:"softwareTo"`
    DistributionType       *string        `json:"distributionType"`
    StartDate              *string        `json:"startDate"`
    EndDate                *string        `json:"endDate"`
    DownloadAfterDate      *string        `json:"downloadAfterDate,omitempty"`
    DownloadTimeWindowList []V2TimeWindow `json:"downloadTimeWindowList,omitempty"`
    InstallAfterDate       *string        `json:"installAfterDate,omitempty"`
    InstallTimeWindowList  []V2TimeWindow `json:"installTimeWindowList,omitempty"`
    DeviceList             *[]string      `json:"deviceList"`
}

func (c *tempCampaignSoftwareUpgrade) validate() error {
    var errs []string
    if c.SoftwareName == nil {
        errs = append(errs, "required field `softwareName` is missing for type `CampaignSoftwareUpgrade`")
    }
    if c.SoftwareFrom == nil {
        errs = append(errs, "required field `softwareFrom` is missing for type `CampaignSoftwareUpgrade`")
    }
    if c.SoftwareTo == nil {
        errs = append(errs, "required field `softwareTo` is missing for type `CampaignSoftwareUpgrade`")
    }
    if c.DistributionType == nil {
        errs = append(errs, "required field `distributionType` is missing for type `CampaignSoftwareUpgrade`")
    }
    if c.StartDate == nil {
        errs = append(errs, "required field `startDate` is missing for type `CampaignSoftwareUpgrade`")
    }
    if c.EndDate == nil {
        errs = append(errs, "required field `endDate` is missing for type `CampaignSoftwareUpgrade`")
    }
    if c.DeviceList == nil {
        errs = append(errs, "required field `deviceList` is missing for type `CampaignSoftwareUpgrade`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
