/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// V2AddOrRemoveDeviceResult represents a V2AddOrRemoveDeviceResult struct.
// Add or remove devices from the existing software upgrade information.
type V2AddOrRemoveDeviceResult struct {
    // Account identifier.
    AccountName          string                 `json:"accountName"`
    // Campaign identifier.
    CampaignId           string                 `json:"campaignId"`
    // Request identifier.
    RequestId            string                 `json:"requestId"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for V2AddOrRemoveDeviceResult,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (v V2AddOrRemoveDeviceResult) String() string {
    return fmt.Sprintf(
    	"V2AddOrRemoveDeviceResult[AccountName=%v, CampaignId=%v, RequestId=%v, AdditionalProperties=%v]",
    	v.AccountName, v.CampaignId, v.RequestId, v.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for V2AddOrRemoveDeviceResult.
// It customizes the JSON marshaling process for V2AddOrRemoveDeviceResult objects.
func (v V2AddOrRemoveDeviceResult) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(v.AdditionalProperties,
        "accountName", "campaignId", "requestId"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(v.toMap())
}

// toMap converts the V2AddOrRemoveDeviceResult object to a map representation for JSON marshaling.
func (v V2AddOrRemoveDeviceResult) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, v.AdditionalProperties)
    structMap["accountName"] = v.AccountName
    structMap["campaignId"] = v.CampaignId
    structMap["requestId"] = v.RequestId
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for V2AddOrRemoveDeviceResult.
// It customizes the JSON unmarshaling process for V2AddOrRemoveDeviceResult objects.
func (v *V2AddOrRemoveDeviceResult) UnmarshalJSON(input []byte) error {
    var temp tempV2AddOrRemoveDeviceResult
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "campaignId", "requestId")
    if err != nil {
    	return err
    }
    v.AdditionalProperties = additionalProperties
    
    v.AccountName = *temp.AccountName
    v.CampaignId = *temp.CampaignId
    v.RequestId = *temp.RequestId
    return nil
}

// tempV2AddOrRemoveDeviceResult is a temporary struct used for validating the fields of V2AddOrRemoveDeviceResult.
type tempV2AddOrRemoveDeviceResult  struct {
    AccountName *string `json:"accountName"`
    CampaignId  *string `json:"campaignId"`
    RequestId   *string `json:"requestId"`
}

func (v *tempV2AddOrRemoveDeviceResult) validate() error {
    var errs []string
    if v.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `V2AddOrRemoveDeviceResult`")
    }
    if v.CampaignId == nil {
        errs = append(errs, "required field `campaignId` is missing for type `V2AddOrRemoveDeviceResult`")
    }
    if v.RequestId == nil {
        errs = append(errs, "required field `requestId` is missing for type `V2AddOrRemoveDeviceResult`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
