/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// RequestTrigger represents a RequestTrigger struct.
type RequestTrigger struct {
    TriggerId            *string                `json:"triggerId,omitempty"`
    TriggerName          *string                `json:"triggerName,omitempty"`
    AccountName          *string                `json:"accountName,omitempty"`
    OrganizationName     *string                `json:"organizationName,omitempty"`
    TriggerCategory      *string                `json:"triggerCategory,omitempty"`
    PromoAlerts          []PromoAlert1          `json:"promoAlerts,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for RequestTrigger,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (r RequestTrigger) String() string {
    return fmt.Sprintf(
    	"RequestTrigger[TriggerId=%v, TriggerName=%v, AccountName=%v, OrganizationName=%v, TriggerCategory=%v, PromoAlerts=%v, AdditionalProperties=%v]",
    	r.TriggerId, r.TriggerName, r.AccountName, r.OrganizationName, r.TriggerCategory, r.PromoAlerts, r.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for RequestTrigger.
// It customizes the JSON marshaling process for RequestTrigger objects.
func (r RequestTrigger) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(r.AdditionalProperties,
        "triggerId", "triggerName", "accountName", "organizationName", "triggerCategory", "promoAlerts"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(r.toMap())
}

// toMap converts the RequestTrigger object to a map representation for JSON marshaling.
func (r RequestTrigger) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, r.AdditionalProperties)
    if r.TriggerId != nil {
        structMap["triggerId"] = r.TriggerId
    }
    if r.TriggerName != nil {
        structMap["triggerName"] = r.TriggerName
    }
    if r.AccountName != nil {
        structMap["accountName"] = r.AccountName
    }
    if r.OrganizationName != nil {
        structMap["organizationName"] = r.OrganizationName
    }
    if r.TriggerCategory != nil {
        structMap["triggerCategory"] = r.TriggerCategory
    }
    if r.PromoAlerts != nil {
        structMap["promoAlerts"] = r.PromoAlerts
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for RequestTrigger.
// It customizes the JSON unmarshaling process for RequestTrigger objects.
func (r *RequestTrigger) UnmarshalJSON(input []byte) error {
    var temp tempRequestTrigger
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "triggerId", "triggerName", "accountName", "organizationName", "triggerCategory", "promoAlerts")
    if err != nil {
    	return err
    }
    r.AdditionalProperties = additionalProperties
    
    r.TriggerId = temp.TriggerId
    r.TriggerName = temp.TriggerName
    r.AccountName = temp.AccountName
    r.OrganizationName = temp.OrganizationName
    r.TriggerCategory = temp.TriggerCategory
    r.PromoAlerts = temp.PromoAlerts
    return nil
}

// tempRequestTrigger is a temporary struct used for validating the fields of RequestTrigger.
type tempRequestTrigger  struct {
    TriggerId        *string       `json:"triggerId,omitempty"`
    TriggerName      *string       `json:"triggerName,omitempty"`
    AccountName      *string       `json:"accountName,omitempty"`
    OrganizationName *string       `json:"organizationName,omitempty"`
    TriggerCategory  *string       `json:"triggerCategory,omitempty"`
    PromoAlerts      []PromoAlert1 `json:"promoAlerts,omitempty"`
}
