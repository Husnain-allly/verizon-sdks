/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// AccountDevicesApi represents a controller struct.
type AccountDevicesApi struct {
    baseApi
}

// NewAccountDevicesApi creates a new instance of AccountDevicesApi.
// It takes a baseController as a parameter and returns a pointer to the AccountDevicesApi.
func NewAccountDevicesApi(baseApi baseApi) *AccountDevicesApi {
    accountDevicesApi := AccountDevicesApi{baseApi: baseApi}
    return &accountDevicesApi
}

// GetAccountDeviceInformation takes context, acc, lastSeenDeviceId, protocol as parameters and
// returns an models.ApiResponse with models.V3AccountDeviceList data and
// an error if there was an issue with the request or response.
// Retrieve account device information such as reported firmware on the devices.
func (a *AccountDevicesApi) GetAccountDeviceInformation(
    ctx context.Context,
    acc string,
    lastSeenDeviceId *string,
    protocol *models.DevicesProtocol) (
    models.ApiResponse[models.V3AccountDeviceList],
    error) {
    req := a.prepareRequest(ctx, "GET", "/devices/%v")
    req.AppendTemplateParams(acc)
    req.BaseUrl("Software Management V3")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV3Result},
    })
    if lastSeenDeviceId != nil {
        req.QueryParam("lastSeenDeviceId", *lastSeenDeviceId)
    }
    if protocol != nil {
        req.QueryParam("protocol", *protocol)
    }
    
    var result models.V3AccountDeviceList
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.V3AccountDeviceList](decoder)
    return models.NewApiResponse(result, resp), err
}

// ListAccountDevicesInformation takes context, acc, body as parameters and
// returns an models.ApiResponse with models.DeviceListResult data and
// an error if there was an issue with the request or response.
// Retrieve device information for a list of devices on an account.
func (a *AccountDevicesApi) ListAccountDevicesInformation(
    ctx context.Context,
    acc string,
    body models.DeviceImei) (
    models.ApiResponse[models.DeviceListResult],
    error) {
    req := a.prepareRequest(ctx, "POST", "/devices/%v")
    req.AppendTemplateParams(acc)
    req.BaseUrl("Software Management V3")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV3Result},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    
    var result models.DeviceListResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceListResult](decoder)
    return models.NewApiResponse(result, resp), err
}
