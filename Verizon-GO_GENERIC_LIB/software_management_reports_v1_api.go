/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// SoftwareManagementReportsV1Api represents a controller struct.
type SoftwareManagementReportsV1Api struct {
    baseApi
}

// NewSoftwareManagementReportsV1Api creates a new instance of SoftwareManagementReportsV1Api.
// It takes a baseController as a parameter and returns a pointer to the SoftwareManagementReportsV1Api.
func NewSoftwareManagementReportsV1Api(baseApi baseApi) *SoftwareManagementReportsV1Api {
    softwareManagementReportsV1Api := SoftwareManagementReportsV1Api{baseApi: baseApi}
    return &softwareManagementReportsV1Api
}

// ListAccountDevices takes context, account, startIndex as parameters and
// returns an models.ApiResponse with models.DeviceListQueryResult data and
// an error if there was an issue with the request or response.
// Returns an array of all devices in the specified account. Each device object includes information needed for managing firmware, including the device make and model, MDN and IMEI, and current firmware version.
func (s *SoftwareManagementReportsV1Api) ListAccountDevices(
    ctx context.Context,
    account string,
    startIndex string) (
    models.ApiResponse[models.DeviceListQueryResult],
    error) {
    req := s.prepareRequest(ctx, "GET", "/devices/%v/index/%v")
    req.AppendTemplateParams(account, startIndex)
    req.BaseUrl("Software Management V1")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV1Result},
    })
    
    var result models.DeviceListQueryResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceListQueryResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// ListUpgradesForSpecifiedStatus takes context, account, upgradeStatus, startIndex as parameters and
// returns an models.ApiResponse with models.UpgradeListQueryResult data and
// an error if there was an issue with the request or response.
// Returns a list of all upgrades with a specified status.
func (s *SoftwareManagementReportsV1Api) ListUpgradesForSpecifiedStatus(
    ctx context.Context,
    account string,
    upgradeStatus models.UpgradeStatus,
    startIndex string) (
    models.ApiResponse[models.UpgradeListQueryResult],
    error) {
    req := s.prepareRequest(ctx, "GET", "/reports/%v/status/%v/index/%v")
    req.AppendTemplateParams(account, upgradeStatus, startIndex)
    req.BaseUrl("Software Management V1")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV1Result},
    })
    
    var result models.UpgradeListQueryResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.UpgradeListQueryResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// GetDeviceFirmwareUpgradeHistory takes context, account, deviceId as parameters and
// returns an models.ApiResponse with []models.DeviceUpgradeHistory data and
// an error if there was an issue with the request or response.
// Returns the upgrade history of the specified device from the previous six months.
func (s *SoftwareManagementReportsV1Api) GetDeviceFirmwareUpgradeHistory(
    ctx context.Context,
    account string,
    deviceId string) (
    models.ApiResponse[[]models.DeviceUpgradeHistory],
    error) {
    req := s.prepareRequest(ctx, "GET", "/reports/%v/devices/%v")
    req.AppendTemplateParams(account, deviceId)
    req.BaseUrl("Software Management V1")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV1Result},
    })
    
    var result []models.DeviceUpgradeHistory
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.DeviceUpgradeHistory](decoder)
    return models.NewApiResponse(result, resp), err
}
