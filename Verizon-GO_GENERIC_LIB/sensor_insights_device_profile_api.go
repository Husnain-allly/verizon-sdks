/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// SensorInsightsDeviceProfileApi represents a controller struct.
type SensorInsightsDeviceProfileApi struct {
    baseApi
}

// NewSensorInsightsDeviceProfileApi creates a new instance of SensorInsightsDeviceProfileApi.
// It takes a baseController as a parameter and returns a pointer to the SensorInsightsDeviceProfileApi.
func NewSensorInsightsDeviceProfileApi(baseApi baseApi) *SensorInsightsDeviceProfileApi {
    sensorInsightsDeviceProfileApi := SensorInsightsDeviceProfileApi{baseApi: baseApi}
    return &sensorInsightsDeviceProfileApi
}

// CreateAProfile takes context, body as parameters and
// returns an models.ApiResponse with []models.DtoProfileResponse data and
// an error if there was an issue with the request or response.
// Create a device profile
func (s *SensorInsightsDeviceProfileApi) CreateAProfile(
    ctx context.Context,
    body models.DtoConfigurationProfile) (
    models.ApiResponse[[]models.DtoProfileResponse],
    error) {
    req := s.prepareRequest(ctx, "POST", "/dm/v1/deviceConfigurationProfiles")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad Request", Unmarshaller: errors.NewM400ManagementError},
        "401": {Message: "UnAuthorized", Unmarshaller: errors.NewManagementError},
        "403": {Message: "Forbidden", Unmarshaller: errors.NewM403ManagementError},
        "500": {Message: "Internal server error.", Unmarshaller: errors.NewM500ManagementError},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result []models.DtoProfileResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.DtoProfileResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// DeleteAProfile takes context, deleterequest as parameters and
// returns an models.ApiResponse with []models.DtoProfileResponse data and
// an error if there was an issue with the request or response.
// Delete a device profile
func (s *SensorInsightsDeviceProfileApi) DeleteAProfile(
    ctx context.Context,
    deleterequest models.DtoConfigurationProfileDelete) (
    models.ApiResponse[[]models.DtoProfileResponse],
    error) {
    req := s.prepareRequest(ctx, "DELETE", "/dm/v1/deviceConfigurationProfiles")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad Request", Unmarshaller: errors.NewM400ManagementError},
        "401": {Message: "UnAuthorized", Unmarshaller: errors.NewManagementError},
        "403": {Message: "Forbidden", Unmarshaller: errors.NewM403ManagementError},
        "500": {Message: "Internal server error.", Unmarshaller: errors.NewM500ManagementError},
    })
    req.Header("deleterequest", deleterequest)
    var result []models.DtoProfileResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.DtoProfileResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// UpdateAProfile takes context, body as parameters and
// returns an models.ApiResponse with []models.DtoProfileResponse data and
// an error if there was an issue with the request or response.
// Partially update a device profile
func (s *SensorInsightsDeviceProfileApi) UpdateAProfile(
    ctx context.Context,
    body models.DtoConfigurationProfilePath) (
    models.ApiResponse[[]models.DtoProfileResponse],
    error) {
    req := s.prepareRequest(ctx, "PATCH", "/dm/v1/deviceConfigurationProfiles")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad Request", Unmarshaller: errors.NewM400ManagementError},
        "401": {Message: "UnAuthorized", Unmarshaller: errors.NewManagementError},
        "403": {Message: "Forbidden", Unmarshaller: errors.NewM403ManagementError},
        "500": {Message: "Internal server error.", Unmarshaller: errors.NewM500ManagementError},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result []models.DtoProfileResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.DtoProfileResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// QueryAProfile takes context, body as parameters and
// returns an models.ApiResponse with []models.DtoProfileResponse data and
// an error if there was an issue with the request or response.
// Query a device profile for an individual device
func (s *SensorInsightsDeviceProfileApi) QueryAProfile(
    ctx context.Context,
    body models.ResourceResourceQuery) (
    models.ApiResponse[[]models.DtoProfileResponse],
    error) {
    req := s.prepareRequest(
      ctx,
      "POST",
      "/dm/v1/deviceConfigurationProfiles/actions/query",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad Request", Unmarshaller: errors.NewM400ManagementError},
        "401": {Message: "UnAuthorized", Unmarshaller: errors.NewManagementError},
        "403": {Message: "Forbidden", Unmarshaller: errors.NewM403ManagementError},
        "500": {Message: "Internal server error.", Unmarshaller: errors.NewM500ManagementError},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result []models.DtoProfileResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.DtoProfileResponse](decoder)
    return models.NewApiResponse(result, resp), err
}
