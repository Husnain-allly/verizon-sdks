/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "encoding/base64"
    "errors"
    "github.com/apimatic/go-core-runtime/https"
    "net/http"
    "time"
    "verizon/models"
)

// ThingspaceOauthCredentials represents the credentials required for `thingspace_oauth` authentication.
type ThingspaceOauthCredentials struct {
    oauthClientId      string
    oauthClientSecret  string
    oauthToken         models.OauthToken
    oauthScopes        []models.OauthScopeThingspaceOauth
    oauthTokenProvider func (models.OauthToken, ThingspaceOauthManager) models.OauthToken
    oauthOnTokenUpdate func (token models.OauthToken)
    oauthClockSkew     int64
}

// NewThingspaceOauthCredentials creates a new instance of ThingspaceOauthCredentials with provided parameters.
func NewThingspaceOauthCredentials(
    oauthClientId string,
    oauthClientSecret string) ThingspaceOauthCredentials {
    return ThingspaceOauthCredentials {
        oauthClientId: oauthClientId,
        oauthClientSecret: oauthClientSecret,
        oauthClockSkew: 0,
    }
}

// WithOauthClientId sets oauthClientId in ThingspaceOauthCredentials.
func (t ThingspaceOauthCredentials) WithOauthClientId(oauthClientId string) ThingspaceOauthCredentials {
    t.oauthClientId = oauthClientId
    return t
}

// WithOauthClientSecret sets oauthClientSecret in ThingspaceOauthCredentials.
func (t ThingspaceOauthCredentials) WithOauthClientSecret(oauthClientSecret string) ThingspaceOauthCredentials {
    t.oauthClientSecret = oauthClientSecret
    return t
}

// WithOauthToken sets oauthToken in ThingspaceOauthCredentials.
func (t ThingspaceOauthCredentials) WithOauthToken(oauthToken models.OauthToken) ThingspaceOauthCredentials {
    t.oauthToken = oauthToken
    return t
}

// WithOauthScopes sets oauthScopes in ThingspaceOauthCredentials.
func (t ThingspaceOauthCredentials) WithOauthScopes(oauthScopes []models.OauthScopeThingspaceOauth) ThingspaceOauthCredentials {
    t.oauthScopes = oauthScopes
    return t
}

// WithOauthTokenProvider sets oauthTokenProvider in ThingspaceOauthCredentials.
func (t ThingspaceOauthCredentials) WithOauthTokenProvider(oauthTokenProvider func (models.OauthToken, ThingspaceOauthManager) models.OauthToken) ThingspaceOauthCredentials {
    t.oauthTokenProvider = oauthTokenProvider
    return t
}

// WithOauthOnTokenUpdate sets oauthOnTokenUpdate in ThingspaceOauthCredentials.
func (t ThingspaceOauthCredentials) WithOauthOnTokenUpdate(oauthOnTokenUpdate func (token models.OauthToken)) ThingspaceOauthCredentials {
    t.oauthOnTokenUpdate = oauthOnTokenUpdate
    return t
}

// WithOauthClockSkew sets oauthClockSkew in ThingspaceOauthCredentials.
func (t ThingspaceOauthCredentials) WithOauthClockSkew(oauthClockSkew int64) ThingspaceOauthCredentials {
    t.oauthClockSkew = oauthClockSkew
    return t
}

// OauthClientId returns the oauthClientId associated with the ThingspaceOauthCredentials.
func (t ThingspaceOauthCredentials) OauthClientId() string {
    return t.oauthClientId
}

// OauthClientSecret returns the oauthClientSecret associated with the ThingspaceOauthCredentials.
func (t ThingspaceOauthCredentials) OauthClientSecret() string {
    return t.oauthClientSecret
}

// OauthToken returns the oauthToken associated with the ThingspaceOauthCredentials.
func (t ThingspaceOauthCredentials) OauthToken() models.OauthToken {
    return t.oauthToken
}

// OauthScopes returns the oauthScopes associated with the ThingspaceOauthCredentials.
func (t ThingspaceOauthCredentials) OauthScopes() []models.OauthScopeThingspaceOauth {
    return t.oauthScopes
}

// OauthTokenProvider returns the oauthTokenProvider associated with the ThingspaceOauthCredentials.
func (t ThingspaceOauthCredentials) OauthTokenProvider() func (models.OauthToken, ThingspaceOauthManager) models.OauthToken {
    return t.oauthTokenProvider
}

// OauthOnTokenUpdate returns the oauthOnTokenUpdate associated with the ThingspaceOauthCredentials.
func (t ThingspaceOauthCredentials) OauthOnTokenUpdate() func (token models.OauthToken) {
    return t.oauthOnTokenUpdate
}

// OauthClockSkew returns the oauthClockSkew associated with the ThingspaceOauthCredentials.
func (t ThingspaceOauthCredentials) OauthClockSkew() int64 {
    return t.oauthClockSkew
}

// isTokenValid checks if the provided OauthToken is valid.
func (t ThingspaceOauthCredentials) isTokenValid() bool {
    return t.OauthToken().AccessToken != ""
}

// isTokenExpired checks if the provided OauthToken is expired based on the expiry timestamp.
func (t ThingspaceOauthCredentials) isTokenExpired() bool {
    return *t.OauthToken().Expiry <= int64(time.Now().Second())
}

// ThingspaceOauthManager is a manager responsible for handling authorization related operations.
type ThingspaceOauthManager struct {
    thingspaceOauthCredentials ThingspaceOauthCredentials
    oauthAuthorizationApi      OauthAuthorizationApi
    oauthToken                 models.OauthToken
}

// newThingspaceOauthManager creates a new instance of ThingspaceOauthManager with the given thingspaceOauthCredentials and OauthAuthorizationApi.
func newThingspaceOauthManager(
    thingspaceOauthCredentials ThingspaceOauthCredentials,
    oauthAuthorizationApi OauthAuthorizationApi) *ThingspaceOauthManager {
    thingspaceOauthManager := &ThingspaceOauthManager{
        thingspaceOauthCredentials: thingspaceOauthCredentials,
        oauthAuthorizationApi: oauthAuthorizationApi,
        oauthToken: thingspaceOauthCredentials.OauthToken(),
    }
    
    return thingspaceOauthManager
}

// Validate function returns validation error associated with the ThingspaceOauthManager.
func (t *ThingspaceOauthManager) Validate() error {
    if t.thingspaceOauthCredentials.OauthClientId() == "" || t.thingspaceOauthCredentials.OauthClientSecret() == "" {
        return errors.New("thingspace_oauth : missing auth credentials -> OauthClientId && OauthClientSecret")
    }
    
    if !t.OauthTokenIsAuthorize() || t.OauthTokenIsExpired() {
        tokenProvider := t.thingspaceOauthCredentials.OauthTokenProvider()
        if tokenProvider != nil {
            t.oauthToken = tokenProvider(t.thingspaceOauthCredentials.OauthToken(), *t)
        } else if token, err := t.FetchToken(context.TODO()); err == nil {
            t.oauthToken = token
        }
    
        onTokenUpdate := t.thingspaceOauthCredentials.OauthOnTokenUpdate()
        if onTokenUpdate != nil {
            onTokenUpdate(t.oauthToken)
        }
    }
    
    if !t.OauthTokenIsAuthorize() {
    return errors.New("thingspace_oauth : Client is not authorized. An OAuth token is needed to make API calls")
}
     if t.OauthTokenIsExpired() {
    return errors.New("thingspace_oauth : OAuth token is expired. A valid token is needed to make API calls")
}
    return nil
}

// Authenticator function returns HttpInterceptor function that provides authentication for API calls.
func (t *ThingspaceOauthManager) Authenticator() https.HttpInterceptor {
    return func(req *http.Request,
        next https.HttpCallExecutor,
    ) https.HttpContext {
            req.Header.Set(https.AUTHORIZATION_HEADER, "Bearer "+ t.oauthToken.AccessToken)
        return next(req)
    }
}

// FetchToken fetches the token. It makes a request to the OauthAuthorizationApi
// to obtain the token and returns the token and any error occurred during the request.
func (t *ThingspaceOauthManager) FetchToken(ctx context.Context) (
    models.OauthToken,
    error) {
    authorization := t.getEncodedString()
    scope := t.getStringScopes()
    result, err := t.oauthAuthorizationApi.RequestTokenThingspaceOauth(ctx, authorization, &scope, nil)
    if result.Data.ExpiresIn != nil && *result.Data.ExpiresIn != 0 {
        result.Data.Expiry = models.ToPointer(int64(time.Now().Second() + int(*result.Data.ExpiresIn)))
    }
    
    return result.Data, err
}

// getEncodedString encodes the provided credentials (OAuthClientId and OAuthClientSecret) to a Basic Auth string.
func (t *ThingspaceOauthManager) getEncodedString() string {
    return "Basic " + base64.StdEncoding.EncodeToString([]byte(t.thingspaceOauthCredentials.OauthClientId() + ":" + t.thingspaceOauthCredentials.OauthClientSecret()))
}

// getStringScopes concatenate the provided slice of oauthScopes Enum to string.
func (t *ThingspaceOauthManager) getStringScopes() string {
    var oauthScopes string
    for i, scope := range t.thingspaceOauthCredentials.OauthScopes() {
        if i == 0 {
            oauthScopes = string(scope)
        } else {
            oauthScopes = oauthScopes + " " + string(scope)
        }
    }
    return oauthScopes
}

// OAuthTokenIsAuthorize checks the expiry of OAuth Token.
func (t *ThingspaceOauthManager) OauthTokenIsAuthorize() bool {
    return t.oauthToken.AccessToken != ""
}

// OAuthTokenIsExpired checks the expiry of OAuth Token.
func (t *ThingspaceOauthManager) OauthTokenIsExpired() bool {
    return *t.oauthToken.Expiry <= int64(time.Now().Second()) + t.thingspaceOauthCredentials.OauthClockSkew()
}
