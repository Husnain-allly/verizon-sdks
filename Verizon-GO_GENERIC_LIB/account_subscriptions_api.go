/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// AccountSubscriptionsApi represents a controller struct.
type AccountSubscriptionsApi struct {
    baseApi
}

// NewAccountSubscriptionsApi creates a new instance of AccountSubscriptionsApi.
// It takes a baseController as a parameter and returns a pointer to the AccountSubscriptionsApi.
func NewAccountSubscriptionsApi(baseApi baseApi) *AccountSubscriptionsApi {
    accountSubscriptionsApi := AccountSubscriptionsApi{baseApi: baseApi}
    return &accountSubscriptionsApi
}

// ListAccountSubscriptions takes context, body, xRequestId as parameters and
// returns an models.ApiResponse with models.SecuritySubscriptionResult data and
// an error if there was an issue with the request or response.
// Retrieves the total number of SIM-Secure for IoT subscription licenses purchased for your account by license type, and lists the number of licenses assigned and available for each license type.
func (a *AccountSubscriptionsApi) ListAccountSubscriptions(
    ctx context.Context,
    body models.SecuritySubscriptionRequest,
    xRequestId *string) (
    models.ApiResponse[models.SecuritySubscriptionResult],
    error) {
    req := a.prepareRequest(ctx, "POST", "/v1/accounts/subscriptions/actions/list")
    
    req.BaseUrl("M2M")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad request.", Unmarshaller: errors.NewSecurityResult},
        "401": {Message: "Unauthorized request.", Unmarshaller: errors.NewSecurityResult},
        "403": {Message: "Request forbidden.", Unmarshaller: errors.NewSecurityResult},
        "404": {Message: "Not Found / Does not exist.", Unmarshaller: errors.NewSecurityResult},
        "406": {Message: "Format / Request Unacceptable.", Unmarshaller: errors.NewSecurityResult},
        "429": {Message: "Too many requests.", Unmarshaller: errors.NewSecurityResult},
        "0": {Message: "Error response.", Unmarshaller: errors.NewSecurityResult},
    })
    req.Header("Content-Type", "application/json")
    if xRequestId != nil {
        req.Header("X-Request-ID", *xRequestId)
    }
    req.Json(&body)
    var result models.SecuritySubscriptionResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.SecuritySubscriptionResult](decoder)
    return models.NewApiResponse(result, resp), err
}
