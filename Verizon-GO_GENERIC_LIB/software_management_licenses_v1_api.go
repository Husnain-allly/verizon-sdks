/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// SoftwareManagementLicensesV1Api represents a controller struct.
type SoftwareManagementLicensesV1Api struct {
    baseApi
}

// NewSoftwareManagementLicensesV1Api creates a new instance of SoftwareManagementLicensesV1Api.
// It takes a baseController as a parameter and returns a pointer to the SoftwareManagementLicensesV1Api.
func NewSoftwareManagementLicensesV1Api(baseApi baseApi) *SoftwareManagementLicensesV1Api {
    softwareManagementLicensesV1Api := SoftwareManagementLicensesV1Api{baseApi: baseApi}
    return &softwareManagementLicensesV1Api
}

// AssignLicensesToDevices takes context, account, body as parameters and
// returns an models.ApiResponse with models.V1LicensesAssignedRemovedResult data and
// an error if there was an issue with the request or response.
// Deprecated: AssignLicensesToDevices is deprecated
// Assigns licenses to a specified list of devices so that firmware upgrades can be scheduled for those devices.
func (s *SoftwareManagementLicensesV1Api) AssignLicensesToDevices(
    ctx context.Context,
    account string,
    body models.V1LicensesAssignedRemovedRequest) (
    models.ApiResponse[models.V1LicensesAssignedRemovedResult],
    error) {
    req := s.prepareRequest(ctx, "POST", "/licenses/%v/assign")
    req.AppendTemplateParams(account)
    req.BaseUrl("Software Management V1")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV1Result},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    
    var result models.V1LicensesAssignedRemovedResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.V1LicensesAssignedRemovedResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// RemoveLicensesFromDevices takes context, account, body as parameters and
// returns an models.ApiResponse with models.V1LicensesAssignedRemovedResult data and
// an error if there was an issue with the request or response.
// Deprecated: RemoveLicensesFromDevices is deprecated
// Remove unused licenses from device.
func (s *SoftwareManagementLicensesV1Api) RemoveLicensesFromDevices(
    ctx context.Context,
    account string,
    body models.V1LicensesAssignedRemovedRequest) (
    models.ApiResponse[models.V1LicensesAssignedRemovedResult],
    error) {
    req := s.prepareRequest(ctx, "POST", "/licenses/%v/remove")
    req.AppendTemplateParams(account)
    req.BaseUrl("Software Management V1")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV1Result},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    
    var result models.V1LicensesAssignedRemovedResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.V1LicensesAssignedRemovedResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// CreateListOfLicensesToRemove takes context, account, body as parameters and
// returns an models.ApiResponse with models.V1ListOfLicensesToRemoveResult data and
// an error if there was an issue with the request or response.
// Deprecated: CreateListOfLicensesToRemove is deprecated
// Creates a list of devices from which licenses will be removed if the number of MRC licenses becomes less than the number of assigned licenses.
func (s *SoftwareManagementLicensesV1Api) CreateListOfLicensesToRemove(
    ctx context.Context,
    account string,
    body models.V1ListOfLicensesToRemoveRequest) (
    models.ApiResponse[models.V1ListOfLicensesToRemoveResult],
    error) {
    req := s.prepareRequest(ctx, "POST", "/licenses/%v/cancel")
    req.AppendTemplateParams(account)
    req.BaseUrl("Software Management V1")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV1Result},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    
    var result models.V1ListOfLicensesToRemoveResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.V1ListOfLicensesToRemoveResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// DeleteListOfLicensesToRemove takes context, account as parameters and
// returns an models.ApiResponse with models.FotaV1SuccessResult data and
// an error if there was an issue with the request or response.
// Deprecated: DeleteListOfLicensesToRemove is deprecated
// Deletes the entire list of cancellation candidate devices.
func (s *SoftwareManagementLicensesV1Api) DeleteListOfLicensesToRemove(
    ctx context.Context,
    account string) (
    models.ApiResponse[models.FotaV1SuccessResult],
    error) {
    req := s.prepareRequest(ctx, "DELETE", "/licenses/%v/cancel")
    req.AppendTemplateParams(account)
    req.BaseUrl("Software Management V1")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV1Result},
    })
    
    var result models.FotaV1SuccessResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.FotaV1SuccessResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// ListLicensesToRemove takes context, account, startIndex as parameters and
// returns an models.ApiResponse with models.V1ListOfLicensesToRemove data and
// an error if there was an issue with the request or response.
// Deprecated: ListLicensesToRemove is deprecated
// Returns a list of devices from which licenses will be removed if the number of MRC licenses becomes less than the number of assigned licenses.
func (s *SoftwareManagementLicensesV1Api) ListLicensesToRemove(
    ctx context.Context,
    account string,
    startIndex string) (
    models.ApiResponse[models.V1ListOfLicensesToRemove],
    error) {
    req := s.prepareRequest(ctx, "GET", "/licenses/%v/cancel/index/%v")
    req.AppendTemplateParams(account, startIndex)
    req.BaseUrl("Software Management V1")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV1Result},
    })
    
    var result models.V1ListOfLicensesToRemove
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.V1ListOfLicensesToRemove](decoder)
    return models.NewApiResponse(result, resp), err
}
