/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// SoftwareManagementCallbacksV1Api represents a controller struct.
type SoftwareManagementCallbacksV1Api struct {
    baseApi
}

// NewSoftwareManagementCallbacksV1Api creates a new instance of SoftwareManagementCallbacksV1Api.
// It takes a baseController as a parameter and returns a pointer to the SoftwareManagementCallbacksV1Api.
func NewSoftwareManagementCallbacksV1Api(baseApi baseApi) *SoftwareManagementCallbacksV1Api {
    softwareManagementCallbacksV1Api := SoftwareManagementCallbacksV1Api{baseApi: baseApi}
    return &softwareManagementCallbacksV1Api
}

// ListRegisteredCallbacks takes context, account as parameters and
// returns an models.ApiResponse with []models.RegisteredCallbacks data and
// an error if there was an issue with the request or response.
// Returns the name and endpoint URL of the callback listening services registered for a given account.
func (s *SoftwareManagementCallbacksV1Api) ListRegisteredCallbacks(
    ctx context.Context,
    account string) (
    models.ApiResponse[[]models.RegisteredCallbacks],
    error) {
    req := s.prepareRequest(ctx, "GET", "/callbacks/%v")
    req.AppendTemplateParams(account)
    req.BaseUrl("Software Management V1")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV1Result},
    })
    
    var result []models.RegisteredCallbacks
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.RegisteredCallbacks](decoder)
    return models.NewApiResponse(result, resp), err
}

// RegisterCallback takes context, account, body as parameters and
// returns an models.ApiResponse with models.FotaV1CallbackRegistrationResult data and
// an error if there was an issue with the request or response.
// Registers a URL to receive RESTful messages from a callback service when new firmware versions are available and when upgrades start and finish.
func (s *SoftwareManagementCallbacksV1Api) RegisterCallback(
    ctx context.Context,
    account string,
    body models.FotaV1CallbackRegistrationRequest) (
    models.ApiResponse[models.FotaV1CallbackRegistrationResult],
    error) {
    req := s.prepareRequest(ctx, "POST", "/callbacks/%v")
    req.AppendTemplateParams(account)
    req.BaseUrl("Software Management V1")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV1Result},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    
    var result models.FotaV1CallbackRegistrationResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.FotaV1CallbackRegistrationResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// DeregisterCallback takes context, account, service as parameters and
// returns an models.ApiResponse with models.FotaV1SuccessResult data and
// an error if there was an issue with the request or response.
// Deregisters the callback endpoint and stops ThingSpace from sending FOTA callback messages for the specified account.
func (s *SoftwareManagementCallbacksV1Api) DeregisterCallback(
    ctx context.Context,
    account string,
    service models.CallbackService) (
    models.ApiResponse[models.FotaV1SuccessResult],
    error) {
    req := s.prepareRequest(ctx, "DELETE", "/callbacks/%v/name/%v")
    req.AppendTemplateParams(account, service)
    req.BaseUrl("Software Management V1")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV1Result},
    })
    
    var result models.FotaV1SuccessResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.FotaV1SuccessResult](decoder)
    return models.NewApiResponse(result, resp), err
}
