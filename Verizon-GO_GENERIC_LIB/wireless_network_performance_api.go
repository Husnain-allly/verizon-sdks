/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// WirelessNetworkPerformanceApi represents a controller struct.
type WirelessNetworkPerformanceApi struct {
    baseApi
}

// NewWirelessNetworkPerformanceApi creates a new instance of WirelessNetworkPerformanceApi.
// It takes a baseController as a parameter and returns a pointer to the WirelessNetworkPerformanceApi.
func NewWirelessNetworkPerformanceApi(baseApi baseApi) *WirelessNetworkPerformanceApi {
    wirelessNetworkPerformanceApi := WirelessNetworkPerformanceApi{baseApi: baseApi}
    return &wirelessNetworkPerformanceApi
}

// NearRealTimeNetworkConditions takes context, body as parameters and
// returns an models.ApiResponse with models.WnpRequestResponse data and
// an error if there was an issue with the request or response.
// WNP Query for current network condition.
func (w *WirelessNetworkPerformanceApi) NearRealTimeNetworkConditions(
    ctx context.Context,
    body models.GetNetworkConditionsRequest) (
    models.ApiResponse[models.WnpRequestResponse],
    error) {
    req := w.prepareRequest(ctx, "POST", "/m2m/v1/intelligence/network-conditions")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewWnpRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.WnpRequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.WnpRequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// Domestic4GAnd5GNationwideNetworkCoverage takes context, body as parameters and
// returns an models.ApiResponse with models.WnpRequestResponse data and
// an error if there was an issue with the request or response.
// Run a report for FWA Address qualification or to determine network types available and available coverage. Network types covered include: CAT-M, NB-IOT, LTE, LTE-AWS, 5GNW, MMWAVE and C-BAND.
func (w *WirelessNetworkPerformanceApi) Domestic4GAnd5GNationwideNetworkCoverage(
    ctx context.Context,
    body models.M2MV1IntelligenceWirelessCoverageRequest) (
    models.ApiResponse[models.WnpRequestResponse],
    error) {
    req := w.prepareRequest(ctx, "POST", "/m2m/v1/intelligence/wireless-coverage")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewWnpRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.WnpRequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.WnpRequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// SiteProximity takes context, body as parameters and
// returns an models.ApiResponse with models.WnpRequestResponse data and
// an error if there was an issue with the request or response.
// Identify the direction and general distance of nearby cell sites and the technology supported by the equipment.
func (w *WirelessNetworkPerformanceApi) SiteProximity(
    ctx context.Context,
    body models.GetNetworkConditionsRequest) (
    models.ApiResponse[models.WnpRequestResponse],
    error) {
    req := w.prepareRequest(
      ctx,
      "POST",
      "/m2m/v1/intelligence/site-proximity/action/list",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewWnpRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.WnpRequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.WnpRequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// DeviceExperience30DaysHistory takes context, body as parameters and
// returns an models.ApiResponse with models.WnpRequestResponse data and
// an error if there was an issue with the request or response.
// A report of a specific device's service scores over a 30 day period.
func (w *WirelessNetworkPerformanceApi) DeviceExperience30DaysHistory(
    ctx context.Context,
    body models.GetDeviceExperienceScoreHistoryRequest) (
    models.ApiResponse[models.WnpRequestResponse],
    error) {
    req := w.prepareRequest(
      ctx,
      "POST",
      "/m2m/v1/intelligence/device-experience/history/30-days",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewWnpRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.WnpRequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.WnpRequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// DeviceExperienceBulkLatest takes context, body as parameters and
// returns an models.ApiResponse with models.WnpRequestResponse data and
// an error if there was an issue with the request or response.
// Run a report to view the latest device experience score for specific devices.
func (w *WirelessNetworkPerformanceApi) DeviceExperienceBulkLatest(
    ctx context.Context,
    body models.GetDeviceExperienceScoreBulkRequest) (
    models.ApiResponse[models.WnpRequestResponse],
    error) {
    req := w.prepareRequest(
      ctx,
      "POST",
      "/m2m/v1/intelligence/device-experience/bulk/latest",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewWnpRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.WnpRequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.WnpRequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}
