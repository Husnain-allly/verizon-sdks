/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// FirmwareV1Api represents a controller struct.
type FirmwareV1Api struct {
    baseApi
}

// NewFirmwareV1Api creates a new instance of FirmwareV1Api.
// It takes a baseController as a parameter and returns a pointer to the FirmwareV1Api.
func NewFirmwareV1Api(baseApi baseApi) *FirmwareV1Api {
    firmwareV1Api := FirmwareV1Api{baseApi: baseApi}
    return &firmwareV1Api
}

// ListAvailableFirmware takes context, account as parameters and
// returns an models.ApiResponse with []models.Firmware data and
// an error if there was an issue with the request or response.
// Lists all device firmware images available for an account, based on the devices registered to that account.
func (f *FirmwareV1Api) ListAvailableFirmware(
    ctx context.Context,
    account string) (
    models.ApiResponse[[]models.Firmware],
    error) {
    req := f.prepareRequest(ctx, "GET", "/firmware/%v")
    req.AppendTemplateParams(account)
    req.BaseUrl("Software Management V1")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV1Result},
    })
    
    var result []models.Firmware
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.Firmware](decoder)
    return models.NewApiResponse(result, resp), err
}

// ScheduleFirmwareUpgrade takes context, body as parameters and
// returns an models.ApiResponse with models.FirmwareUpgrade data and
// an error if there was an issue with the request or response.
// Schedules a firmware upgrade for devices.
func (f *FirmwareV1Api) ScheduleFirmwareUpgrade(
    ctx context.Context,
    body models.FirmwareUpgradeRequest) (
    models.ApiResponse[models.FirmwareUpgrade],
    error) {
    req := f.prepareRequest(ctx, "POST", "/upgrades")
    
    req.BaseUrl("Software Management V1")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV1Result},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.FirmwareUpgrade
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.FirmwareUpgrade](decoder)
    return models.NewApiResponse(result, resp), err
}

// ListFirmwareUpgradeDetails takes context, accountName, upgradeId as parameters and
// returns an models.ApiResponse with models.FirmwareUpgrade data and
// an error if there was an issue with the request or response.
// Returns information about a specified upgrade, include the target date of the upgrade, the list of devices in the upgrade, and the status of the upgrade for each device.
func (f *FirmwareV1Api) ListFirmwareUpgradeDetails(
    ctx context.Context,
    accountName string,
    upgradeId string) (
    models.ApiResponse[models.FirmwareUpgrade],
    error) {
    req := f.prepareRequest(ctx, "GET", "/upgrades/%v/upgrade/%v")
    req.AppendTemplateParams(accountName, upgradeId)
    req.BaseUrl("Software Management V1")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV1Result},
    })
    
    var result models.FirmwareUpgrade
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.FirmwareUpgrade](decoder)
    return models.NewApiResponse(result, resp), err
}

// UpdateFirmwareUpgradeDevices takes context, accountName, upgradeId, body as parameters and
// returns an models.ApiResponse with models.FirmwareUpgradeChangeResult data and
// an error if there was an issue with the request or response.
// Add or remove devices from a scheduled upgrade.
func (f *FirmwareV1Api) UpdateFirmwareUpgradeDevices(
    ctx context.Context,
    accountName string,
    upgradeId string,
    body models.FirmwareUpgradeChangeRequest) (
    models.ApiResponse[models.FirmwareUpgradeChangeResult],
    error) {
    req := f.prepareRequest(ctx, "PUT", "/upgrades/%v/upgrade/%v")
    req.AppendTemplateParams(accountName, upgradeId)
    req.BaseUrl("Software Management V1")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV1Result},
    })
    req.Header("Content-Type", "*/*")
    req.Json(&body)
    
    var result models.FirmwareUpgradeChangeResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.FirmwareUpgradeChangeResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// CancelScheduledFirmwareUpgrade takes context, accountName, upgradeId as parameters and
// returns an models.ApiResponse with models.FotaV1SuccessResult data and
// an error if there was an issue with the request or response.
// Cancel a scheduled firmware upgrade.
func (f *FirmwareV1Api) CancelScheduledFirmwareUpgrade(
    ctx context.Context,
    accountName string,
    upgradeId string) (
    models.ApiResponse[models.FotaV1SuccessResult],
    error) {
    req := f.prepareRequest(ctx, "DELETE", "/upgrades/%v/upgrade/%v")
    req.AppendTemplateParams(accountName, upgradeId)
    req.BaseUrl("Software Management V1")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV1Result},
    })
    
    var result models.FotaV1SuccessResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.FotaV1SuccessResult](decoder)
    return models.NewApiResponse(result, resp), err
}
