/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// DeviceGroupsApi represents a controller struct.
type DeviceGroupsApi struct {
    baseApi
}

// NewDeviceGroupsApi creates a new instance of DeviceGroupsApi.
// It takes a baseController as a parameter and returns a pointer to the DeviceGroupsApi.
func NewDeviceGroupsApi(baseApi baseApi) *DeviceGroupsApi {
    deviceGroupsApi := DeviceGroupsApi{baseApi: baseApi}
    return &deviceGroupsApi
}

// CreateDeviceGroup takes context, body as parameters and
// returns an models.ApiResponse with models.ConnectivityManagementSuccessResult data and
// an error if there was an issue with the request or response.
// Create a new device group and optionally add devices to the group. Device groups can make it easier to manage similar devices and to get reports on their usage.
func (d *DeviceGroupsApi) CreateDeviceGroup(
    ctx context.Context,
    body models.CreateDeviceGroupRequest) (
    models.ApiResponse[models.ConnectivityManagementSuccessResult],
    error) {
    req := d.prepareRequest(ctx, "POST", "/m2m/v1/groups")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.ConnectivityManagementSuccessResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.ConnectivityManagementSuccessResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// ListDeviceGroups takes context, aname as parameters and
// returns an models.ApiResponse with []models.DeviceGroup data and
// an error if there was an issue with the request or response.
// Returns a list of all device groups in a specified account.
func (d *DeviceGroupsApi) ListDeviceGroups(
    ctx context.Context,
    aname string) (
    models.ApiResponse[[]models.DeviceGroup],
    error) {
    req := d.prepareRequest(ctx, "GET", "/m2m/v1/groups/%v")
    req.AppendTemplateParams(aname)
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    
    var result []models.DeviceGroup
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.DeviceGroup](decoder)
    return models.NewApiResponse(result, resp), err
}

// GetDeviceGroupInformation takes context, aname, gname, next as parameters and
// returns an models.ApiResponse with models.DeviceGroupDevicesData data and
// an error if there was an issue with the request or response.
// When HTTP status is 202, a URL will be returned in the Location header of the form /groups/{aname}/name/{gname}/?next={token}. This URL can be used to request the next set of groups.
func (d *DeviceGroupsApi) GetDeviceGroupInformation(
    ctx context.Context,
    aname string,
    gname string,
    next *int64) (
    models.ApiResponse[models.DeviceGroupDevicesData],
    error) {
    req := d.prepareRequest(ctx, "GET", "/m2m/v1/groups/%v/name/%v")
    req.AppendTemplateParams(aname, gname)
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    if next != nil {
        req.QueryParam("next", *next)
    }
    
    var result models.DeviceGroupDevicesData
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceGroupDevicesData](decoder)
    return models.NewApiResponse(result, resp), err
}

// UpdateDeviceGroup takes context, aname, gname, body as parameters and
// returns an models.ApiResponse with models.ConnectivityManagementSuccessResult data and
// an error if there was an issue with the request or response.
// Make changes to a device group, including changing the name and description, and adding or removing devices.
func (d *DeviceGroupsApi) UpdateDeviceGroup(
    ctx context.Context,
    aname string,
    gname string,
    body models.DeviceGroupUpdateRequest) (
    models.ApiResponse[models.ConnectivityManagementSuccessResult],
    error) {
    req := d.prepareRequest(ctx, "PUT", "/m2m/v1/groups/%v/name/%v")
    req.AppendTemplateParams(aname, gname)
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    
    var result models.ConnectivityManagementSuccessResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.ConnectivityManagementSuccessResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// DeleteDeviceGroup takes context, aname, gname as parameters and
// returns an models.ApiResponse with models.ConnectivityManagementSuccessResult data and
// an error if there was an issue with the request or response.
// Deletes a device group from the account. Devices in the group are moved to the default device group and are not deleted from the account.
func (d *DeviceGroupsApi) DeleteDeviceGroup(
    ctx context.Context,
    aname string,
    gname string) (
    models.ApiResponse[models.ConnectivityManagementSuccessResult],
    error) {
    req := d.prepareRequest(ctx, "DELETE", "/m2m/v1/groups/%v/name/%v")
    req.AppendTemplateParams(aname, gname)
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    
    var result models.ConnectivityManagementSuccessResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.ConnectivityManagementSuccessResult](decoder)
    return models.NewApiResponse(result, resp), err
}
