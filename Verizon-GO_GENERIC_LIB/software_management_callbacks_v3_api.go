/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// SoftwareManagementCallbacksV3Api represents a controller struct.
type SoftwareManagementCallbacksV3Api struct {
    baseApi
}

// NewSoftwareManagementCallbacksV3Api creates a new instance of SoftwareManagementCallbacksV3Api.
// It takes a baseController as a parameter and returns a pointer to the SoftwareManagementCallbacksV3Api.
func NewSoftwareManagementCallbacksV3Api(baseApi baseApi) *SoftwareManagementCallbacksV3Api {
    softwareManagementCallbacksV3Api := SoftwareManagementCallbacksV3Api{baseApi: baseApi}
    return &softwareManagementCallbacksV3Api
}

// ListRegisteredCallbacks takes context, acc as parameters and
// returns an models.ApiResponse with models.FotaV3CallbackSummary data and
// an error if there was an issue with the request or response.
// This endpoint allows user to get the registered callback information.
func (s *SoftwareManagementCallbacksV3Api) ListRegisteredCallbacks(
    ctx context.Context,
    acc string) (
    models.ApiResponse[models.FotaV3CallbackSummary],
    error) {
    req := s.prepareRequest(ctx, "GET", "/callbacks/%v")
    req.AppendTemplateParams(acc)
    req.BaseUrl("Software Management V3")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV3Result},
    })
    
    var result models.FotaV3CallbackSummary
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.FotaV3CallbackSummary](decoder)
    return models.NewApiResponse(result, resp), err
}

// UpdateCallback takes context, acc, body as parameters and
// returns an models.ApiResponse with models.FotaV3CallbackRegistrationResult data and
// an error if there was an issue with the request or response.
// This endpoint allows the user to update the HTTPS callback address.
func (s *SoftwareManagementCallbacksV3Api) UpdateCallback(
    ctx context.Context,
    acc string,
    body models.FotaV3CallbackRegistrationRequest) (
    models.ApiResponse[models.FotaV3CallbackRegistrationResult],
    error) {
    req := s.prepareRequest(ctx, "PUT", "/callbacks/%v")
    req.AppendTemplateParams(acc)
    req.BaseUrl("Software Management V3")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV3Result},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    
    var result models.FotaV3CallbackRegistrationResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.FotaV3CallbackRegistrationResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// RegisterCallback takes context, acc, body as parameters and
// returns an models.ApiResponse with models.FotaV3CallbackRegistrationResult data and
// an error if there was an issue with the request or response.
// This endpoint allows the user to create the HTTPS callback address.
func (s *SoftwareManagementCallbacksV3Api) RegisterCallback(
    ctx context.Context,
    acc string,
    body models.FotaV3CallbackRegistrationRequest) (
    models.ApiResponse[models.FotaV3CallbackRegistrationResult],
    error) {
    req := s.prepareRequest(ctx, "POST", "/callbacks/%v")
    req.AppendTemplateParams(acc)
    req.BaseUrl("Software Management V3")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV3Result},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    
    var result models.FotaV3CallbackRegistrationResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.FotaV3CallbackRegistrationResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// DeregisterCallback takes context, acc as parameters and
// returns an models.ApiResponse with models.FotaV3SuccessResult data and
// an error if there was an issue with the request or response.
// This endpoint allows user to delete a previously registered callback URL.
func (s *SoftwareManagementCallbacksV3Api) DeregisterCallback(
    ctx context.Context,
    acc string) (
    models.ApiResponse[models.FotaV3SuccessResult],
    error) {
    req := s.prepareRequest(ctx, "DELETE", "/callbacks/%v")
    req.AppendTemplateParams(acc)
    req.BaseUrl("Software Management V3")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV3Result},
    })
    
    var result models.FotaV3SuccessResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.FotaV3SuccessResult](decoder)
    return models.NewApiResponse(result, resp), err
}
