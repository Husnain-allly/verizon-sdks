/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// SoftwareManagementReportsV3Api represents a controller struct.
type SoftwareManagementReportsV3Api struct {
    baseApi
}

// NewSoftwareManagementReportsV3Api creates a new instance of SoftwareManagementReportsV3Api.
// It takes a baseController as a parameter and returns a pointer to the SoftwareManagementReportsV3Api.
func NewSoftwareManagementReportsV3Api(baseApi baseApi) *SoftwareManagementReportsV3Api {
    softwareManagementReportsV3Api := SoftwareManagementReportsV3Api{baseApi: baseApi}
    return &softwareManagementReportsV3Api
}

// GetCampaignHistoryByStatus takes context, acc, campaignStatus, lastSeenCampaignId as parameters and
// returns an models.ApiResponse with models.V3CampaignHistory data and
// an error if there was an issue with the request or response.
// Retrieve a list of campaigns for an account that have a specified campaign status.
func (s *SoftwareManagementReportsV3Api) GetCampaignHistoryByStatus(
    ctx context.Context,
    acc string,
    campaignStatus models.CampaignStatus,
    lastSeenCampaignId *string) (
    models.ApiResponse[models.V3CampaignHistory],
    error) {
    req := s.prepareRequest(ctx, "GET", "/reports/%v/firmware/campaigns")
    req.AppendTemplateParams(acc)
    req.BaseUrl("Software Management V3")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV3Result},
    })
    req.QueryParam("campaignStatus", campaignStatus)
    if lastSeenCampaignId != nil {
        req.QueryParam("lastSeenCampaignId", *lastSeenCampaignId)
    }
    
    var result models.V3CampaignHistory
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.V3CampaignHistory](decoder)
    return models.NewApiResponse(result, resp), err
}

// GetDeviceFirmwareUpgradeHistory takes context, acc, deviceId as parameters and
// returns an models.ApiResponse with []models.DeviceFirmwareUpgrade data and
// an error if there was an issue with the request or response.
// Retrieve campaign history for a specific device.
func (s *SoftwareManagementReportsV3Api) GetDeviceFirmwareUpgradeHistory(
    ctx context.Context,
    acc string,
    deviceId string) (
    models.ApiResponse[[]models.DeviceFirmwareUpgrade],
    error) {
    req := s.prepareRequest(ctx, "GET", "/reports/%v/devices/%v")
    req.AppendTemplateParams(acc, deviceId)
    req.BaseUrl("Software Management V3")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV3Result},
    })
    
    var result []models.DeviceFirmwareUpgrade
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.DeviceFirmwareUpgrade](decoder)
    return models.NewApiResponse(result, resp), err
}

// GetCampaignDeviceStatus takes context, acc, campaignId, lastSeenDeviceId as parameters and
// returns an models.ApiResponse with models.V3CampaignDevice data and
// an error if there was an issue with the request or response.
// Retrieve a list of all devices in a campaign and the status of each device.
func (s *SoftwareManagementReportsV3Api) GetCampaignDeviceStatus(
    ctx context.Context,
    acc string,
    campaignId string,
    lastSeenDeviceId *string) (
    models.ApiResponse[models.V3CampaignDevice],
    error) {
    req := s.prepareRequest(ctx, "GET", "/reports/%v/campaigns/%v/devices")
    req.AppendTemplateParams(acc, campaignId)
    req.BaseUrl("Software Management V3")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV3Result},
    })
    if lastSeenDeviceId != nil {
        req.QueryParam("lastSeenDeviceId", *lastSeenDeviceId)
    }
    
    var result models.V3CampaignDevice
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.V3CampaignDevice](decoder)
    return models.NewApiResponse(result, resp), err
}
