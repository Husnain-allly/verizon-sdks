/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// SensorInsightsDevicesApi represents a controller struct.
type SensorInsightsDevicesApi struct {
    baseApi
}

// NewSensorInsightsDevicesApi creates a new instance of SensorInsightsDevicesApi.
// It takes a baseController as a parameter and returns a pointer to the SensorInsightsDevicesApi.
func NewSensorInsightsDevicesApi(baseApi baseApi) *SensorInsightsDevicesApi {
    sensorInsightsDevicesApi := SensorInsightsDevicesApi{baseApi: baseApi}
    return &sensorInsightsDevicesApi
}

// SensorInsightsListDevicesRequest takes context, body as parameters and
// returns an models.ApiResponse with []models.DtoExpandedDeviceResponse data and
// an error if there was an issue with the request or response.
func (s *SensorInsightsDevicesApi) SensorInsightsListDevicesRequest(
    ctx context.Context,
    body models.DtoListDevicesRequest) (
    models.ApiResponse[[]models.DtoExpandedDeviceResponse],
    error) {
    req := s.prepareRequest(ctx, "POST", "/dm/v1/devices/actions/query")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad Request", Unmarshaller: errors.NewManagementError},
        "401": {Message: "UnAuthorized", Unmarshaller: errors.NewManagementError},
        "403": {Message: "Forbidden", Unmarshaller: errors.NewManagementError},
        "404": {Message: "Not Found", Unmarshaller: errors.NewManagementError},
        "406": {Message: "Not Acceptable", Unmarshaller: errors.NewManagementError},
        "415": {Message: "Unsupported media type", Unmarshaller: errors.NewManagementError},
        "429": {Message: "Too many requests", Unmarshaller: errors.NewManagementError},
        "500": {Message: "Internal server error.", Unmarshaller: errors.NewManagementError},
        "0": {Message: "Unexpected error", Unmarshaller: errors.NewManagementError},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result []models.DtoExpandedDeviceResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.DtoExpandedDeviceResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// SensorInsightsPatchDeviceRequest takes context, body as parameters and
// returns an models.ApiResponse with models.ResourceDevice data and
// an error if there was an issue with the request or response.
func (s *SensorInsightsDevicesApi) SensorInsightsPatchDeviceRequest(
    ctx context.Context,
    body models.DtoPatchDeviceRequest) (
    models.ApiResponse[models.ResourceDevice],
    error) {
    req := s.prepareRequest(ctx, "PATCH", "/dm/v1/devices")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad Request", Unmarshaller: errors.NewM400ManagementError},
        "401": {Message: "UnAuthorized", Unmarshaller: errors.NewManagementError},
        "403": {Message: "Forbidden", Unmarshaller: errors.NewM403ManagementError},
        "404": {Message: "Not Found", Unmarshaller: errors.NewM404ManagementError},
        "406": {Message: "Not Acceptable", Unmarshaller: errors.NewManagementError},
        "415": {Message: "Unsupported media type", Unmarshaller: errors.NewManagementError},
        "429": {Message: "Too many requests", Unmarshaller: errors.NewManagementError},
        "500": {Message: "Internal server error.", Unmarshaller: errors.NewM500ManagementError},
        "0": {Message: "Unexpected error", Unmarshaller: errors.NewManagementError},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.ResourceDevice
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.ResourceDevice](decoder)
    return models.NewApiResponse(result, resp), err
}

// SensorInsightsLastReportedTimeRequest takes context, body as parameters and
// returns an models.ApiResponse with models.DtoLastReportedTimeResponse data and
// an error if there was an issue with the request or response.
func (s *SensorInsightsDevicesApi) SensorInsightsLastReportedTimeRequest(
    ctx context.Context,
    body models.DtoLastReportedTimeRequest) (
    models.ApiResponse[models.DtoLastReportedTimeResponse],
    error) {
    req := s.prepareRequest(ctx, "POST", "/dm/v1/devices/lastreported")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad Request", Unmarshaller: errors.NewM400ManagementError},
        "403": {Message: "Forbidden", Unmarshaller: errors.NewM403ManagementError},
        "404": {Message: "Not Found", Unmarshaller: errors.NewM404ManagementError},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DtoLastReportedTimeResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DtoLastReportedTimeResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// SensorInsightsDeviceActionSetRequest takes context, body as parameters and
// returns an models.ApiResponse with models.DtoDeviceActionSetResponse data and
// an error if there was an issue with the request or response.
func (s *SensorInsightsDevicesApi) SensorInsightsDeviceActionSetRequest(
    ctx context.Context,
    body models.DmV1DevicesActionsSetRequest) (
    models.ApiResponse[models.DtoDeviceActionSetResponse],
    error) {
    req := s.prepareRequest(ctx, "POST", "/dm/v1/devices/actions/set")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad Request", Unmarshaller: errors.NewM400ManagementError},
        "403": {Message: "Forbidden", Unmarshaller: errors.NewM403ManagementError},
        "404": {Message: "Not Found", Unmarshaller: errors.NewM404ManagementError},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DtoDeviceActionSetResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DtoDeviceActionSetResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// SensorInsightsListDeviceExperienceHistoryRequest takes context, body as parameters and
// returns an models.ApiResponse with []models.UserDeviceExperienceHistory data and
// an error if there was an issue with the request or response.
func (s *SensorInsightsDevicesApi) SensorInsightsListDeviceExperienceHistoryRequest(
    ctx context.Context,
    body models.DtoListDeviceExperienceHistoryRequest) (
    models.ApiResponse[[]models.UserDeviceExperienceHistory],
    error) {
    req := s.prepareRequest(ctx, "POST", "/dm/v1/devices/experience/actions/query")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad Request", Unmarshaller: errors.NewM400ManagementError},
        "401": {Message: "UnAuthorized", Unmarshaller: errors.NewManagementError},
        "403": {Message: "Forbidden", Unmarshaller: errors.NewM403ManagementError},
        "404": {Message: "Not Found", Unmarshaller: errors.NewM404ManagementError},
        "406": {Message: "Not Acceptable", Unmarshaller: errors.NewManagementError},
        "415": {Message: "Unsupported media type", Unmarshaller: errors.NewManagementError},
        "429": {Message: "Too many requests", Unmarshaller: errors.NewManagementError},
        "500": {Message: "Internal server error.", Unmarshaller: errors.NewM500ManagementError},
        "0": {Message: "Unexpected error", Unmarshaller: errors.NewManagementError},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result []models.UserDeviceExperienceHistory
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.UserDeviceExperienceHistory](decoder)
    return models.NewApiResponse(result, resp), err
}

// SensorInsightsListNetworkExperienceHistoryRequest takes context, body as parameters and
// returns an models.ApiResponse with []models.UserNetworkExperienceHistory data and
// an error if there was an issue with the request or response.
func (s *SensorInsightsDevicesApi) SensorInsightsListNetworkExperienceHistoryRequest(
    ctx context.Context,
    body models.DtoListNetworkExperienceHistoryRequest) (
    models.ApiResponse[[]models.UserNetworkExperienceHistory],
    error) {
    req := s.prepareRequest(
      ctx,
      "POST",
      "/dm/v1/devices/networkexperience/actions/query",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad Request", Unmarshaller: errors.NewM400ManagementError},
        "401": {Message: "UnAuthorized", Unmarshaller: errors.NewManagementError},
        "403": {Message: "Forbidden", Unmarshaller: errors.NewM403ManagementError},
        "404": {Message: "Not Found", Unmarshaller: errors.NewM404ManagementError},
        "406": {Message: "Not Acceptable", Unmarshaller: errors.NewManagementError},
        "415": {Message: "Unsupported media type", Unmarshaller: errors.NewManagementError},
        "429": {Message: "Too many requests", Unmarshaller: errors.NewManagementError},
        "500": {Message: "Internal server error.", Unmarshaller: errors.NewM500ManagementError},
        "0": {Message: "Unexpected error", Unmarshaller: errors.NewManagementError},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result []models.UserNetworkExperienceHistory
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.UserNetworkExperienceHistory](decoder)
    return models.NewApiResponse(result, resp), err
}
