# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.types.union_types.any_of import AnyOf
from apimatic_core.types.union_types.leaf_type import LeafType
from apimatic_core.types.union_types.one_of import OneOf
from apimatic_core.types.union_types.union_type_context import UnionTypeContext as Context
from verizon.models.account_group_share_create_trigger_request import AccountGroupShareCreateTriggerRequest
from verizon.models.account_group_share_update_trigger_request import AccountGroupShareUpdateTriggerRequest
from verizon.models.account_level_create_trigger_request import AccountLevelCreateTriggerRequest
from verizon.models.account_level_object import AccountLevelObject
from verizon.models.account_level_update_trigger_request import AccountLevelUpdateTriggerRequest
from verizon.models.account_share_create_trigger_request import AccountShareCreateTriggerRequest
from verizon.models.account_share_update_trigger_request import AccountShareUpdateTriggerRequest
from verizon.models.active_anomaly_indicator import ActiveAnomalyIndicator
from verizon.models.active_trigger_indicator import ActiveTriggerIndicator
from verizon.models.addressquery import Addressquery
from verizon.models.advisory_item import AdvisoryItem
from verizon.models.advisory_item_1 import AdvisoryItem1
from verizon.models.anomaly_trigger_value import AnomalyTriggerValue
from verizon.models.carriercode_1 import Carriercode1
from verizon.models.cellphonenumber import Cellphonenumber
from verizon.models.condition_object_call import ConditionObjectCall
from verizon.models.condition_type import ConditionType
from verizon.models.content import Content
from verizon.models.content_1 import Content1
from verizon.models.content_2 import Content2
from verizon.models.content_3 import Content3
from verizon.models.content_4 import Content4
from verizon.models.createtriggerchunk import Createtriggerchunk
from verizon.models.customernamequery import Customernamequery
from verizon.models.data_percentage_100_trigger_attribute import DataPercentage100TriggerAttribute
from verizon.models.data_percentage_50_trigger_attribute import DataPercentage50TriggerAttribute
from verizon.models.data_percentage_75_trigger_attribute import DataPercentage75TriggerAttribute
from verizon.models.data_percentage_90_trigger_attribute import DataPercentage90TriggerAttribute
from verizon.models.device_id import DeviceId
from verizon.models.device_id_2 import DeviceId2
from verizon.models.device_level_create_trigger_request import DeviceLevelCreateTriggerRequest
from verizon.models.device_level_update_trigger_request import DeviceLevelUpdateTriggerRequest
from verizon.models.dto_device_action_set_request import DtoDeviceActionSetRequest
from verizon.models.dto_device_command import DtoDeviceCommand
from verizon.models.enable_promo_exp import EnablePromoExp
from verizon.models.esim_device_id import EsimDeviceId
from verizon.models.get_wireless_coverage_request import GetWirelessCoverageRequest
from verizon.models.get_wireless_coverage_request_fwa import GetWirelessCoverageRequestFwa
from verizon.models.heading_item import HeadingItem
from verizon.models.key_data_percentage_50 import KeyDataPercentage50
from verizon.models.key_service_plan import KeyServicePlan
from verizon.models.keysms_percentage_50 import KeysmsPercentage50
from verizon.models.line_string import LineString
from verizon.models.m_5g_biaddress_andcustomerinfo import M5GBiaddressAndcustomerinfo
from verizon.models.m_5g_biaddress_andcustomerinfo_2 import M5GBiaddressAndcustomerinfo2
from verizon.models.m_5g_biattribute_1 import M5GBiattribute1
from verizon.models.m_5g_biattribute_2 import M5GBiattribute2
from verizon.models.m_5g_bidevice_id_1 import M5GBideviceId1
from verizon.models.m_5g_bidevice_idarray import M5GBideviceIdarray
from verizon.models.m_5g_bidevice_idarray_2 import M5GBideviceIdarray2
from verizon.models.m_5g_bikey_value_1 import M5GBikeyValue1
from verizon.models.mec_platforms_additional_support_info import MecPlatformsAdditionalSupportInfo
from verizon.models.message import Message
from verizon.models.message_1 import Message1
from verizon.models.message_2 import Message2
from verizon.models.msg_id import MsgId
from verizon.models.msg_id_1 import MsgId1
from verizon.models.multi_line_string import MultiLineString
from verizon.models.multi_polygon import MultiPolygon
from verizon.models.no_of_days_b_4_promo_exp import NoOfDaysB4PromoExp
from verizon.models.notification_group_name_trigger_attribute import NotificationGroupNameTriggerAttribute
from verizon.models.pay_as_you_go_create_trigger_request import PayAsYouGoCreateTriggerRequest
from verizon.models.pay_as_you_go_update_trigger_request import PayAsYouGoUpdateTriggerRequest
from verizon.models.polygon import Polygon
from verizon.models.property_device_id import PropertyDeviceId
from verizon.models.rateplantype_2 import Rateplantype2
from verizon.models.rateplantype_object import RateplantypeObject
from verizon.models.service_plan_trigger_attribute import ServicePlanTriggerAttribute
from verizon.models.speed_item import SpeedItem
from verizon.models.text_phrase_or_itis import TextPhraseOrItis
from verizon.models.text_phrase_or_itis_1 import TextPhraseOrItis1
from verizon.models.trigger_type_1 import TriggerType1
from verizon.models.trigger_type_2 import TriggerType2
from verizon.models.trigger_type_3 import TriggerType3
from verizon.models.updatetriggerchunk import Updatetriggerchunk


class UnionTypeLookUp:

    """The `UnionTypeLookUp` class serves as a utility class for 
    storing and managing type combinator templates.It acts as a container for the templates 
    used in handling various data types within the application.

    """
    _templates = {
        'CreateTriggerRequestOptions': AnyOf(
            [
                LeafType(TriggerType1),
                LeafType(ActiveAnomalyIndicator),
                LeafType(ActiveTriggerIndicator)
            ],
            Context.create(
               is_array=True
            )
        ),
        'UpdateTriggerRequestOptions': AnyOf(
            [
                LeafType(TriggerType3),
                LeafType(ActiveAnomalyIndicator)
            ],
            Context.create(
               is_array=True
            )
        ),
        'Domestic4GAnd5GNationwideNetworkCoverageBody': AnyOf(
            [
                LeafType(GetWirelessCoverageRequest),
                LeafType(GetWirelessCoverageRequestFwa)
            ]
        ),
        'CreateTriggerRulesBody': AnyOf(
            [
                LeafType(AccountLevelCreateTriggerRequest),
                LeafType(AccountLevelObject),
                LeafType(DeviceLevelCreateTriggerRequest),
                LeafType(AccountGroupShareCreateTriggerRequest),
                LeafType(AccountShareCreateTriggerRequest),
                LeafType(PayAsYouGoCreateTriggerRequest),
                LeafType(Createtriggerchunk)
            ]
        ),
        'UpdateTriggerRulesBody': AnyOf(
            [
                LeafType(AccountLevelUpdateTriggerRequest),
                LeafType(DeviceLevelUpdateTriggerRequest),
                LeafType(AccountGroupShareUpdateTriggerRequest),
                LeafType(AccountShareUpdateTriggerRequest),
                LeafType(PayAsYouGoUpdateTriggerRequest),
                LeafType(Updatetriggerchunk)
            ]
        ),
        'SensorInsightsDeviceActionSetRequestBody': AnyOf(
            [
                LeafType(DtoDeviceActionSetRequest),
                LeafType(DtoDeviceCommand)
            ]
        ),
        'MECPlatformResourceProperties': OneOf(
            [
                LeafType(MecPlatformsAdditionalSupportInfo,
                         Context.create(
                             is_array=True
                         )),
                LeafType(MecPlatformsAdditionalSupportInfo)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'DeleteDevicesResultDeviceIds': OneOf(
            [
                LeafType(DeviceId,
                         Context.create(
                             is_array=True
                         )),
                LeafType(DeviceId)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'ProfileRequestPrimaryPlaceOfUse': AnyOf(
            [
                LeafType(Customernamequery),
                LeafType(Addressquery)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        ),
        'DeactivateDeviceListIds': AnyOf(
            [
                LeafType(DeviceId),
                LeafType(PropertyDeviceId)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        ),
        'TriggersListOptions': AnyOf(
            [
                LeafType(AnomalyTriggerValue),
                LeafType(TriggerType2)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        ),
        'TriggerAttributesOptions': AnyOf(
            [
                LeafType(NotificationGroupNameTriggerAttribute),
                LeafType(ServicePlanTriggerAttribute),
                LeafType(DataPercentage50TriggerAttribute),
                LeafType(DataPercentage75TriggerAttribute),
                LeafType(DataPercentage90TriggerAttribute),
                LeafType(DataPercentage100TriggerAttribute)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        ),
        'keysChunk': AnyOf(
            [
                LeafType(KeyServicePlan),
                LeafType(KeyDataPercentage50),
                LeafType(KeysmsPercentage50),
                LeafType(NoOfDaysB4PromoExp),
                LeafType(EnablePromoExp)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        ),
        'DeviceList2Ids': AnyOf(
            [
                LeafType(EsimDeviceId),
                LeafType(DeviceId2)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        ),
        'ESIMGlobalDeviceListDeviceFilter': AnyOf(
            [
                LeafType(EsimDeviceId),
                LeafType(DeviceId2)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        ),
        'ESIMDeviceListDeviceIds': AnyOf(
            [
                LeafType(EsimDeviceId),
                LeafType(DeviceId2)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        ),
        'AccountLevelCreateTriggerRequestSmsNumbers': AnyOf(
            [
                LeafType(Cellphonenumber)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        ),
        'AccountLevelUpdateTriggerRequestSmsNumbers': AnyOf(
            [
                LeafType(Cellphonenumber)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        ),
        'AccountLevelObjectCondition': AnyOf(
            [
                LeafType(ConditionType),
                LeafType(ConditionObjectCall)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'AccountSharePricePlanTriggerCondition': AnyOf(
            [
                LeafType(ConditionType),
                LeafType(ConditionObjectCall)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'PayAsYouGoPricePlanTriggerCondition': AnyOf(
            [
                LeafType(ConditionType),
                LeafType(ConditionObjectCall)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'RateplanRatePlanGroup': AnyOf(
            [
                LeafType(RateplantypeObject),
                LeafType(Rateplantype2)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        ),
        'NotificationarraySmsNumbers': AnyOf(
            [
                LeafType(Cellphonenumber)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        ),
        'PricePlanTriggerCondition': AnyOf(
            [
                LeafType(ConditionType),
                LeafType(ConditionObjectCall)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'DataTrigger1Condition': AnyOf(
            [
                LeafType(ConditionType),
                LeafType(ConditionObjectCall)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'NotifyThreshold': AnyOf(
            [
                LeafType(Carriercode1)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        ),
        '5gbichangeRequestDeviceListWithServiceAddress': AnyOf(
            [
                LeafType(M5GBideviceIdarray2),
                LeafType(M5GBiaddressAndcustomerinfo2)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        ),
        '5gbiactivateRequestDeviceListWithServiceAddress': AnyOf(
            [
                LeafType(M5GBideviceIdarray),
                LeafType(M5GBiaddressAndcustomerinfo)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        ),
        '5gbiaccountNameobjectCustomFields': AnyOf(
            [
                LeafType(M5GBikeyValue1)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        ),
        '5gbiaccountNameobjectDeviceIds': AnyOf(
            [
                LeafType(M5GBideviceId1)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        ),
        '5gbiaccountNameobjectExtendedAttributes': AnyOf(
            [
                LeafType(M5GBiattribute1),
                LeafType(M5GBiattribute2)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        ),
        '5gbideviceIdarrayDeviceId': AnyOf(
            [
                LeafType(M5GBideviceId1)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        ),
        'Message3': OneOf(
            [
                LeafType(Message),
                LeafType(Message1),
                LeafType(Message2)
            ],
            Context.create(
               is_array=True
            )
        ),
        'Message32': OneOf(
            [
                LeafType(Message),
                LeafType(Message1),
                LeafType(Message2)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        ),
        'Geometry': OneOf(
            [
                LeafType(LineString,
                         Context.create(
                             discriminator_value='LineString',
                             discriminator='type'
                         )),
                LeafType(Polygon,
                         Context.create(
                             discriminator_value='Polygon',
                             discriminator='type'
                         )),
                LeafType(MultiLineString,
                         Context.create(
                             discriminator_value='MultiLineString',
                             discriminator='type'
                         )),
                LeafType(MultiPolygon,
                         Context.create(
                             discriminator_value='MultiPolygon',
                             discriminator='type'
                         ))
            ]
        ),
        'Limits': OneOf(
            [
                LeafType(SpeedItem),
                LeafType(HeadingItem)
            ],
            Context.create(
               is_array=True,
               is_optional=True
            )
        ),
        'DataFrameMsgId': OneOf(
            [
                LeafType(MsgId),
                LeafType(MsgId1)
            ]
        ),
        'DataFrameContent': OneOf(
            [
                LeafType(Content),
                LeafType(Content1),
                LeafType(Content2),
                LeafType(Content3),
                LeafType(Content4)
            ]
        ),
        'AdvisoryItem2': OneOf(
            [
                LeafType(AdvisoryItem),
                LeafType(AdvisoryItem1)
            ],
            Context.create(
               is_array=True
            )
        ),
        'TextPhraseOrITIS2': OneOf(
            [
                LeafType(TextPhraseOrItis),
                LeafType(TextPhraseOrItis1)
            ],
            Context.create(
               is_array=True
            )
        )
    }

    @staticmethod
    def get(name):
        return UnionTypeLookUp._templates[name]

