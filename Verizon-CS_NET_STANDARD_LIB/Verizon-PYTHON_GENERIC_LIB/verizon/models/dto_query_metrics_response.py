# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class DtoQueryMetricsResponse(object):

    """Implementation of the 'dto.queryMetricsResponse' model.

    Attributes:
        critical (int): The number of critical alerts in the queried time
            period
        major (int): The number of major alerts in the queried time period
        minor (int): The number of minor alerts in the queried time period
        noalert (int): The number of sensor reports containing no  alerts in
            the queried time period
        total (int): The total number of alerts in the queried time period
        deltacritical (int): The change in the number of critical alerts in
            the queried time period
        deltamajor (int): The change in the number of major alerts in the
            queried time period
        deltaminor (int): The change in the number of minor alerts in the
            queried time period
        deltanoalert (int): The change in the number of sensor reports
            containing no alerts in the queried time period

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "critical": 'critical',
        "major": 'major',
        "minor": 'minor',
        "noalert": 'noalert',
        "total": 'total',
        "deltacritical": 'deltacritical',
        "deltamajor": 'deltamajor',
        "deltaminor": 'deltaminor',
        "deltanoalert": 'deltanoalert'
    }

    _optionals = [
        'critical',
        'major',
        'minor',
        'noalert',
        'total',
        'deltacritical',
        'deltamajor',
        'deltaminor',
        'deltanoalert',
    ]

    def __init__(self,
                 critical=APIHelper.SKIP,
                 major=APIHelper.SKIP,
                 minor=APIHelper.SKIP,
                 noalert=APIHelper.SKIP,
                 total=APIHelper.SKIP,
                 deltacritical=APIHelper.SKIP,
                 deltamajor=APIHelper.SKIP,
                 deltaminor=APIHelper.SKIP,
                 deltanoalert=APIHelper.SKIP):
        """Constructor for the DtoQueryMetricsResponse class"""

        # Initialize members of the class
        if critical is not APIHelper.SKIP:
            self.critical = critical 
        if major is not APIHelper.SKIP:
            self.major = major 
        if minor is not APIHelper.SKIP:
            self.minor = minor 
        if noalert is not APIHelper.SKIP:
            self.noalert = noalert 
        if total is not APIHelper.SKIP:
            self.total = total 
        if deltacritical is not APIHelper.SKIP:
            self.deltacritical = deltacritical 
        if deltamajor is not APIHelper.SKIP:
            self.deltamajor = deltamajor 
        if deltaminor is not APIHelper.SKIP:
            self.deltaminor = deltaminor 
        if deltanoalert is not APIHelper.SKIP:
            self.deltanoalert = deltanoalert 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        critical = dictionary.get("critical") if dictionary.get("critical") else APIHelper.SKIP
        major = dictionary.get("major") if dictionary.get("major") else APIHelper.SKIP
        minor = dictionary.get("minor") if dictionary.get("minor") else APIHelper.SKIP
        noalert = dictionary.get("noalert") if dictionary.get("noalert") else APIHelper.SKIP
        total = dictionary.get("total") if dictionary.get("total") else APIHelper.SKIP
        deltacritical = dictionary.get("deltacritical") if dictionary.get("deltacritical") else APIHelper.SKIP
        deltamajor = dictionary.get("deltamajor") if dictionary.get("deltamajor") else APIHelper.SKIP
        deltaminor = dictionary.get("deltaminor") if dictionary.get("deltaminor") else APIHelper.SKIP
        deltanoalert = dictionary.get("deltanoalert") if dictionary.get("deltanoalert") else APIHelper.SKIP
        # Return an object of this model
        return cls(critical,
                   major,
                   minor,
                   noalert,
                   total,
                   deltacritical,
                   deltamajor,
                   deltaminor,
                   deltanoalert)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'critical={(self.critical if hasattr(self, "critical") else None)!r}, '
                f'major={(self.major if hasattr(self, "major") else None)!r}, '
                f'minor={(self.minor if hasattr(self, "minor") else None)!r}, '
                f'noalert={(self.noalert if hasattr(self, "noalert") else None)!r}, '
                f'total={(self.total if hasattr(self, "total") else None)!r}, '
                f'deltacritical={(self.deltacritical if hasattr(self, "deltacritical") else None)!r}, '
                f'deltamajor={(self.deltamajor if hasattr(self, "deltamajor") else None)!r}, '
                f'deltaminor={(self.deltaminor if hasattr(self, "deltaminor") else None)!r}, '
                f'deltanoalert={(self.deltanoalert if hasattr(self, "deltanoalert") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'critical={(self.critical if hasattr(self, "critical") else None)!s}, '
                f'major={(self.major if hasattr(self, "major") else None)!s}, '
                f'minor={(self.minor if hasattr(self, "minor") else None)!s}, '
                f'noalert={(self.noalert if hasattr(self, "noalert") else None)!s}, '
                f'total={(self.total if hasattr(self, "total") else None)!s}, '
                f'deltacritical={(self.deltacritical if hasattr(self, "deltacritical") else None)!s}, '
                f'deltamajor={(self.deltamajor if hasattr(self, "deltamajor") else None)!s}, '
                f'deltaminor={(self.deltaminor if hasattr(self, "deltaminor") else None)!s}, '
                f'deltanoalert={(self.deltanoalert if hasattr(self, "deltanoalert") else None)!s})')
