# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class AllowanceThreshold(object):

    """Implementation of the 'AllowanceThreshold' model.

    Attributes:
        percentage_50 (bool): The model property of type bool.
        percentage_75 (bool): The model property of type bool.
        percentage_90 (bool): The model property of type bool.
        percentage_100 (bool): The model property of type bool.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "percentage_50": 'percentage50',
        "percentage_75": 'percentage75',
        "percentage_90": 'percentage90',
        "percentage_100": 'percentage100'
    }

    _optionals = [
        'percentage_50',
        'percentage_75',
        'percentage_90',
        'percentage_100',
    ]

    def __init__(self,
                 percentage_50=APIHelper.SKIP,
                 percentage_75=APIHelper.SKIP,
                 percentage_90=APIHelper.SKIP,
                 percentage_100=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the AllowanceThreshold class"""

        # Initialize members of the class
        if percentage_50 is not APIHelper.SKIP:
            self.percentage_50 = percentage_50 
        if percentage_75 is not APIHelper.SKIP:
            self.percentage_75 = percentage_75 
        if percentage_90 is not APIHelper.SKIP:
            self.percentage_90 = percentage_90 
        if percentage_100 is not APIHelper.SKIP:
            self.percentage_100 = percentage_100 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        percentage_50 = dictionary.get("percentage50") if "percentage50" in dictionary.keys() else APIHelper.SKIP
        percentage_75 = dictionary.get("percentage75") if "percentage75" in dictionary.keys() else APIHelper.SKIP
        percentage_90 = dictionary.get("percentage90") if "percentage90" in dictionary.keys() else APIHelper.SKIP
        percentage_100 = dictionary.get("percentage100") if "percentage100" in dictionary.keys() else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(percentage_50,
                   percentage_75,
                   percentage_90,
                   percentage_100,
                   additional_properties)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'percentage_50={(self.percentage_50 if hasattr(self, "percentage_50") else None)!r}, '
                f'percentage_75={(self.percentage_75 if hasattr(self, "percentage_75") else None)!r}, '
                f'percentage_90={(self.percentage_90 if hasattr(self, "percentage_90") else None)!r}, '
                f'percentage_100={(self.percentage_100 if hasattr(self, "percentage_100") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'percentage_50={(self.percentage_50 if hasattr(self, "percentage_50") else None)!s}, '
                f'percentage_75={(self.percentage_75 if hasattr(self, "percentage_75") else None)!s}, '
                f'percentage_90={(self.percentage_90 if hasattr(self, "percentage_90") else None)!s}, '
                f'percentage_100={(self.percentage_100 if hasattr(self, "percentage_100") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
