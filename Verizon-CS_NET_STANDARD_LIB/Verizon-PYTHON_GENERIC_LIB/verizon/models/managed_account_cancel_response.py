# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class ManagedAccountCancelResponse(object):

    """Implementation of the 'ManagedAccountCancelResponse' model.

    Attributes:
        txid (str): Transaction identifier
        account_name (str): Managed account identifier
        paccount_name (str): Primary account identifier
        service_name (ServiceName): Service name
        status (str): Deactivate/cancel status, Success or Fail
        reason (str): Detailed reason
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "txid": 'txid',
        "account_name": 'accountName',
        "paccount_name": 'paccountName',
        "service_name": 'serviceName',
        "status": 'status',
        "reason": 'reason'
    }

    def __init__(self,
                 txid=None,
                 account_name=None,
                 paccount_name=None,
                 service_name='Location',
                 status=None,
                 reason=None,
                 additional_properties=None):
        """Constructor for the ManagedAccountCancelResponse class"""

        # Initialize members of the class
        self.txid = txid 
        self.account_name = account_name 
        self.paccount_name = paccount_name 
        self.service_name = service_name 
        self.status = status 
        self.reason = reason 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        txid = dictionary.get("txid") if dictionary.get("txid") else None
        account_name = dictionary.get("accountName") if dictionary.get("accountName") else None
        paccount_name = dictionary.get("paccountName") if dictionary.get("paccountName") else None
        service_name = dictionary.get("serviceName") if dictionary.get("serviceName") else 'Location'
        status = dictionary.get("status") if dictionary.get("status") else None
        reason = dictionary.get("reason") if dictionary.get("reason") else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(txid,
                   account_name,
                   paccount_name,
                   service_name,
                   status,
                   reason,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'txid={self.txid!r}, '
                f'account_name={self.account_name!r}, '
                f'paccount_name={self.paccount_name!r}, '
                f'service_name={self.service_name!r}, '
                f'status={self.status!r}, '
                f'reason={self.reason!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'txid={self.txid!s}, '
                f'account_name={self.account_name!s}, '
                f'paccount_name={self.paccount_name!s}, '
                f'service_name={self.service_name!s}, '
                f'status={self.status!s}, '
                f'reason={self.reason!s}, '
                f'additional_properties={self.additional_properties!s})')
