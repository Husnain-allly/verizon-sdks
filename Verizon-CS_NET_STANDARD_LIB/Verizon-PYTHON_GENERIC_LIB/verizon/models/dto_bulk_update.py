# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.bulk_update_smartalert import BulkUpdateSmartalert
from verizon.models.the_i_dresourceand_device_id import TheIDresourceandDeviceId


class DtoBulkUpdate(object):

    """Implementation of the 'dto.BulkUpdate' model.

    Attributes:
        accountname (str): The numeric account name, which must include
            leading zeros
        resourceidentifiers (List[TheIDresourceandDeviceId]): The model
            property of type List[TheIDresourceandDeviceId].
        smartalert (BulkUpdateSmartalert): The model property of type
            BulkUpdateSmartalert.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "accountname": 'accountname',
        "resourceidentifiers": 'resourceidentifiers',
        "smartalert": 'smartalert'
    }

    _optionals = [
        'accountname',
        'resourceidentifiers',
        'smartalert',
    ]

    def __init__(self,
                 accountname=APIHelper.SKIP,
                 resourceidentifiers=APIHelper.SKIP,
                 smartalert=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the DtoBulkUpdate class"""

        # Initialize members of the class
        if accountname is not APIHelper.SKIP:
            self.accountname = accountname 
        if resourceidentifiers is not APIHelper.SKIP:
            self.resourceidentifiers = resourceidentifiers 
        if smartalert is not APIHelper.SKIP:
            self.smartalert = smartalert 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        accountname = dictionary.get("accountname") if dictionary.get("accountname") else APIHelper.SKIP
        resourceidentifiers = None
        if dictionary.get('resourceidentifiers') is not None:
            resourceidentifiers = [TheIDresourceandDeviceId.from_dictionary(x) for x in dictionary.get('resourceidentifiers')]
        else:
            resourceidentifiers = APIHelper.SKIP
        smartalert = BulkUpdateSmartalert.from_dictionary(dictionary.get('smartalert')) if 'smartalert' in dictionary.keys() else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(accountname,
                   resourceidentifiers,
                   smartalert,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'accountname={(self.accountname if hasattr(self, "accountname") else None)!r}, '
                f'resourceidentifiers={(self.resourceidentifiers if hasattr(self, "resourceidentifiers") else None)!r}, '
                f'smartalert={(self.smartalert if hasattr(self, "smartalert") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'accountname={(self.accountname if hasattr(self, "accountname") else None)!s}, '
                f'resourceidentifiers={(self.resourceidentifiers if hasattr(self, "resourceidentifiers") else None)!s}, '
                f'smartalert={(self.smartalert if hasattr(self, "smartalert") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
