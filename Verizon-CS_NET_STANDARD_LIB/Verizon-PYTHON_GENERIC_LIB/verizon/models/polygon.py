# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.polygon_type import PolygonType


class Polygon(object):

    """Implementation of the 'Polygon' model.

    A Polygon is a type of geometry that represents a collection of points
    that form a closed ring.
    NOTE: This API only supports a single polygon in the Polygon geometry, so
    holes cannot be defines at this point. Support for hole will be added in
    future releases.

    Attributes:
        mtype (PolygonType): The model property of type PolygonType.
        coordinates (List[float]): The model property of type List[float].
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'type',
        "coordinates": 'coordinates'
    }

    def __init__(self,
                 mtype=None,
                 coordinates=None,
                 additional_properties=None):
        """Constructor for the Polygon class"""

        # Initialize members of the class
        self.mtype = mtype 
        self.coordinates = coordinates 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        mtype = dictionary.get("type") if dictionary.get("type") else None
        coordinates = dictionary.get("coordinates") if dictionary.get("coordinates") else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(mtype,
                   coordinates,
                   additional_properties)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.mtype,
                                           type_callable=lambda value: PolygonType.validate(value)) \
                and APIHelper.is_valid_type(value=dictionary.coordinates,
                                            type_callable=lambda value: isinstance(value, float))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('type'),
                                       type_callable=lambda value: PolygonType.validate(value)) \
            and APIHelper.is_valid_type(value=dictionary.get('coordinates'),
                                        type_callable=lambda value: isinstance(value, float))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!r}, '
                f'coordinates={self.coordinates!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!s}, '
                f'coordinates={self.coordinates!s}, '
                f'additional_properties={self.additional_properties!s})')
