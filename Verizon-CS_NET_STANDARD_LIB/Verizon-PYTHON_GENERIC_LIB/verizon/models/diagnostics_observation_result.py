# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class DiagnosticsObservationResult(object):

    """Implementation of the 'DiagnosticsObservationResult' model.

    A success response containing the current status of the request.

    Attributes:
        transaction_id (str): Transaction identifier.
        status (str): Status of the request.
        created_on (datetime): The date and time of when this request was
            created.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "transaction_id": 'transactionID',
        "status": 'status',
        "created_on": 'createdOn'
    }

    def __init__(self,
                 transaction_id=None,
                 status=None,
                 created_on=None,
                 additional_properties=None):
        """Constructor for the DiagnosticsObservationResult class"""

        # Initialize members of the class
        self.transaction_id = transaction_id 
        self.status = status 
        self.created_on = APIHelper.apply_datetime_converter(created_on, APIHelper.RFC3339DateTime) if created_on else None 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        transaction_id = dictionary.get("transactionID") if dictionary.get("transactionID") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        created_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdOn")).datetime if dictionary.get("createdOn") else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(transaction_id,
                   status,
                   created_on,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'transaction_id={self.transaction_id!r}, '
                f'status={self.status!r}, '
                f'created_on={self.created_on!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'transaction_id={self.transaction_id!s}, '
                f'status={self.status!s}, '
                f'created_on={self.created_on!s}, '
                f'additional_properties={self.additional_properties!s})')
