# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class DeleteDevicesResult(object):

    """Implementation of the 'DeleteDevicesResult' model.

    Response for a request made to delete a device.

    Attributes:
        device_ids (List[DeviceId] | DeviceId | None): One object per device
            to be deleted. Each object must contain a kind and id element
            identifying the device.
        status (str): “Success” if the device was deleted, or “Failed” if
            there was a problem.
        message (str): Not present if status=Success. One of these messages if
            status=Failed:The device is not in deactivate state.The user does
            not have access to delete the device.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "device_ids": 'deviceIds',
        "status": 'status',
        "message": 'message'
    }

    _optionals = [
        'device_ids',
        'status',
        'message',
    ]

    def __init__(self,
                 device_ids=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 message=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the DeleteDevicesResult class"""

        # Initialize members of the class
        if device_ids is not APIHelper.SKIP:
            self.device_ids = device_ids 
        if status is not APIHelper.SKIP:
            self.status = status 
        if message is not APIHelper.SKIP:
            self.message = message 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from verizon.utilities.union_type_lookup import UnionTypeLookUp

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        device_ids = APIHelper.deserialize_union_type(UnionTypeLookUp.get('DeleteDevicesResultDeviceIds'), dictionary.get('deviceIds'), False) if dictionary.get('deviceIds') is not None else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        message = dictionary.get("message") if dictionary.get("message") else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(device_ids,
                   status,
                   message,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'device_ids={(self.device_ids if hasattr(self, "device_ids") else None)!r}, '
                f'status={(self.status if hasattr(self, "status") else None)!r}, '
                f'message={(self.message if hasattr(self, "message") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'device_ids={(self.device_ids if hasattr(self, "device_ids") else None)!s}, '
                f'status={(self.status if hasattr(self, "status") else None)!s}, '
                f'message={(self.message if hasattr(self, "message") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
