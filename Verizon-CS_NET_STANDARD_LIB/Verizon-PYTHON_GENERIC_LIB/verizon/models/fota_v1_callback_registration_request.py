# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class FotaV1CallbackRegistrationRequest(object):

    """Implementation of the 'FotaV1CallbackRegistrationRequest' model.

    Callback endpoint information.

    Attributes:
        name (str): The name of the callback service that you want to
            subscribe to, which must be 'Fota' for Software Management
            Services callbacks.
        url (str): The address on your server where you have enabled a
            listening service for Software Management Services callback
            messages.
        username (str): The user name that ThingSpace should return in the
            callback messages.
        password (str): The password that ThingSpace should return in the
            callback messages.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "url": 'url',
        "username": 'username',
        "password": 'password'
    }

    _optionals = [
        'username',
        'password',
    ]

    def __init__(self,
                 name=None,
                 url=None,
                 username=APIHelper.SKIP,
                 password=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the FotaV1CallbackRegistrationRequest class"""

        # Initialize members of the class
        self.name = name 
        self.url = url 
        if username is not APIHelper.SKIP:
            self.username = username 
        if password is not APIHelper.SKIP:
            self.password = password 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        username = dictionary.get("username") if dictionary.get("username") else APIHelper.SKIP
        password = dictionary.get("password") if dictionary.get("password") else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(name,
                   url,
                   username,
                   password,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!r}, '
                f'url={self.url!r}, '
                f'username={(self.username if hasattr(self, "username") else None)!r}, '
                f'password={(self.password if hasattr(self, "password") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!s}, '
                f'url={self.url!s}, '
                f'username={(self.username if hasattr(self, "username") else None)!s}, '
                f'password={(self.password if hasattr(self, "password") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
