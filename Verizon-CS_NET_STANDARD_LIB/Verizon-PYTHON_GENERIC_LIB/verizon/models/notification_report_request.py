# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.device_list import DeviceList


class NotificationReportRequest(object):

    """Implementation of the 'NotificationReportRequest' model.

    Attributes:
        account_name (str): The model property of type str.
        request_type (str): The model property of type str.
        devices (List[DeviceList]): The model property of type
            List[DeviceList].
        monitor_expiration_time (str): The model property of type str.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_name": 'accountName',
        "request_type": 'requestType',
        "devices": 'devices',
        "monitor_expiration_time": 'monitorExpirationTime'
    }

    def __init__(self,
                 account_name=None,
                 request_type=None,
                 devices=None,
                 monitor_expiration_time=None,
                 additional_properties=None):
        """Constructor for the NotificationReportRequest class"""

        # Initialize members of the class
        self.account_name = account_name 
        self.request_type = request_type 
        self.devices = devices 
        self.monitor_expiration_time = monitor_expiration_time 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_name = dictionary.get("accountName") if dictionary.get("accountName") else None
        request_type = dictionary.get("requestType") if dictionary.get("requestType") else None
        devices = None
        if dictionary.get('devices') is not None:
            devices = [DeviceList.from_dictionary(x) for x in dictionary.get('devices')]
        monitor_expiration_time = dictionary.get("monitorExpirationTime") if dictionary.get("monitorExpirationTime") else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(account_name,
                   request_type,
                   devices,
                   monitor_expiration_time,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_name={self.account_name!r}, '
                f'request_type={self.request_type!r}, '
                f'devices={self.devices!r}, '
                f'monitor_expiration_time={self.monitor_expiration_time!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_name={self.account_name!s}, '
                f'request_type={self.request_type!s}, '
                f'devices={self.devices!s}, '
                f'monitor_expiration_time={self.monitor_expiration_time!s}, '
                f'additional_properties={self.additional_properties!s})')
