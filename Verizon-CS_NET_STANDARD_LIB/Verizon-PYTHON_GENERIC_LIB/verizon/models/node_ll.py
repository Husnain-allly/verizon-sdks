# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.node_offset_point_ll import NodeOffsetPointLl


class NodeLl(object):

    """Implementation of the 'NodeLL' model.

    The NodeLL data frame presents a structure to hold data for a signal node
    point in a lane. Each selected node has a complete lat-long representation.

    Attributes:
        delta (NodeOffsetPointLl): The NodeOffsetPointLL data frame presents a
            structure to hold 64 bits sized data frames for a single node
            geometry path. Nodes are described in terms of latitude and
            longitude.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "delta": 'delta'
    }

    def __init__(self,
                 delta=None):
        """Constructor for the NodeLl class"""

        # Initialize members of the class
        self.delta = delta 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        delta = NodeOffsetPointLl.from_dictionary(dictionary.get('delta')) if dictionary.get('delta') else None
        # Return an object of this model
        return cls(delta)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.delta,
                                           type_callable=lambda value: NodeOffsetPointLl.validate(value),
                                           is_model_dict=True)

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('delta'),
                                       type_callable=lambda value: NodeOffsetPointLl.validate(value),
                                       is_model_dict=True)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'delta={self.delta!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'delta={self.delta!s})')
