# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class State(object):

    """Implementation of the 'State' model.

    Each service includes custom states.

    Attributes:
        name (str): The name of the state.
        workflow_sequence_number (float): The workflow sequence number of this
            state.
        service_plans (List[str]): The service plans that can be used to
            charge for services for devices in this state.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "workflow_sequence_number": 'workflowSequenceNumber',
        "service_plans": 'servicePlans'
    }

    _optionals = [
        'name',
        'workflow_sequence_number',
        'service_plans',
    ]

    def __init__(self,
                 name=APIHelper.SKIP,
                 workflow_sequence_number=APIHelper.SKIP,
                 service_plans=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the State class"""

        # Initialize members of the class
        if name is not APIHelper.SKIP:
            self.name = name 
        if workflow_sequence_number is not APIHelper.SKIP:
            self.workflow_sequence_number = workflow_sequence_number 
        if service_plans is not APIHelper.SKIP:
            self.service_plans = service_plans 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        workflow_sequence_number = dictionary.get("workflowSequenceNumber") if dictionary.get("workflowSequenceNumber") else APIHelper.SKIP
        service_plans = dictionary.get("servicePlans") if dictionary.get("servicePlans") else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(name,
                   workflow_sequence_number,
                   service_plans,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'workflow_sequence_number={(self.workflow_sequence_number if hasattr(self, "workflow_sequence_number") else None)!r}, '
                f'service_plans={(self.service_plans if hasattr(self, "service_plans") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'workflow_sequence_number={(self.workflow_sequence_number if hasattr(self, "workflow_sequence_number") else None)!s}, '
                f'service_plans={(self.service_plans if hasattr(self, "service_plans") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
