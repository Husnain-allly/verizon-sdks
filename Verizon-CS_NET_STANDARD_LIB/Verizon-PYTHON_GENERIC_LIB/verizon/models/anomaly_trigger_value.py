# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class AnomalyTriggerValue(object):

    """Implementation of the 'AnomalyTriggerValue' model.

    Trigger details.

    Attributes:
        trigger_id (str): The system assigned name of the trigger being
            updated.
        trigger_name (str): The user defined name of the trigger.
        organization_name (str): The user assigned name of the organization
            associated with the trigger.
        trigger_category (str): This is the value to use in the request body
            to detect anomalous behaivior. The values in this table will only
            be relevant when this parameter is set to this value.
        trigger_attributes (List[NotificationGroupNameTriggerAttribute |
            ServicePlanTriggerAttribute | DataPercentage50TriggerAttribute |
            DataPercentage75TriggerAttribute |
            DataPercentage90TriggerAttribute |
            DataPercentage100TriggerAttribute] | None): Additional details and
            keys for the trigger.
        created_at (str): Timestamp for whe the trigger was created.
        modified_at (str): Timestamp for the most recent time the trigger was
            modified.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "trigger_id": 'triggerId',
        "trigger_name": 'triggerName',
        "organization_name": 'organizationName',
        "trigger_category": 'triggerCategory',
        "trigger_attributes": 'triggerAttributes',
        "created_at": 'createdAt',
        "modified_at": 'modifiedAt'
    }

    _optionals = [
        'trigger_id',
        'trigger_name',
        'organization_name',
        'trigger_category',
        'trigger_attributes',
        'created_at',
        'modified_at',
    ]

    def __init__(self,
                 trigger_id=APIHelper.SKIP,
                 trigger_name=APIHelper.SKIP,
                 organization_name=APIHelper.SKIP,
                 trigger_category=APIHelper.SKIP,
                 trigger_attributes=APIHelper.SKIP,
                 created_at=APIHelper.SKIP,
                 modified_at=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the AnomalyTriggerValue class"""

        # Initialize members of the class
        if trigger_id is not APIHelper.SKIP:
            self.trigger_id = trigger_id 
        if trigger_name is not APIHelper.SKIP:
            self.trigger_name = trigger_name 
        if organization_name is not APIHelper.SKIP:
            self.organization_name = organization_name 
        if trigger_category is not APIHelper.SKIP:
            self.trigger_category = trigger_category 
        if trigger_attributes is not APIHelper.SKIP:
            self.trigger_attributes = trigger_attributes 
        if created_at is not APIHelper.SKIP:
            self.created_at = created_at 
        if modified_at is not APIHelper.SKIP:
            self.modified_at = modified_at 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from verizon.utilities.union_type_lookup import UnionTypeLookUp

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        trigger_id = dictionary.get("triggerId") if dictionary.get("triggerId") else APIHelper.SKIP
        trigger_name = dictionary.get("triggerName") if dictionary.get("triggerName") else APIHelper.SKIP
        organization_name = dictionary.get("organizationName") if dictionary.get("organizationName") else APIHelper.SKIP
        trigger_category = dictionary.get("triggerCategory") if dictionary.get("triggerCategory") else APIHelper.SKIP
        trigger_attributes = APIHelper.deserialize_union_type(UnionTypeLookUp.get('TriggerAttributesOptions'), dictionary.get('triggerAttributes'), False) if dictionary.get('triggerAttributes') is not None else APIHelper.SKIP
        created_at = dictionary.get("createdAt") if dictionary.get("createdAt") else APIHelper.SKIP
        modified_at = dictionary.get("modifiedAt") if dictionary.get("modifiedAt") else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(trigger_id,
                   trigger_name,
                   organization_name,
                   trigger_category,
                   trigger_attributes,
                   created_at,
                   modified_at,
                   additional_properties)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'trigger_id={(self.trigger_id if hasattr(self, "trigger_id") else None)!r}, '
                f'trigger_name={(self.trigger_name if hasattr(self, "trigger_name") else None)!r}, '
                f'organization_name={(self.organization_name if hasattr(self, "organization_name") else None)!r}, '
                f'trigger_category={(self.trigger_category if hasattr(self, "trigger_category") else None)!r}, '
                f'trigger_attributes={(self.trigger_attributes if hasattr(self, "trigger_attributes") else None)!r}, '
                f'created_at={(self.created_at if hasattr(self, "created_at") else None)!r}, '
                f'modified_at={(self.modified_at if hasattr(self, "modified_at") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'trigger_id={(self.trigger_id if hasattr(self, "trigger_id") else None)!s}, '
                f'trigger_name={(self.trigger_name if hasattr(self, "trigger_name") else None)!s}, '
                f'organization_name={(self.organization_name if hasattr(self, "organization_name") else None)!s}, '
                f'trigger_category={(self.trigger_category if hasattr(self, "trigger_category") else None)!s}, '
                f'trigger_attributes={(self.trigger_attributes if hasattr(self, "trigger_attributes") else None)!s}, '
                f'created_at={(self.created_at if hasattr(self, "created_at") else None)!s}, '
                f'modified_at={(self.modified_at if hasattr(self, "modified_at") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
