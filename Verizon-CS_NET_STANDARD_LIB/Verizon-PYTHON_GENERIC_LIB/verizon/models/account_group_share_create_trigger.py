# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.account_group_share_object import AccountGroupShareObject
from verizon.models.notificationarray import Notificationarray


class AccountGroupShareCreateTrigger(object):

    """Implementation of the 'accountGroupShareCreateTrigger' model.

    Attributes:
        trigger_name (str): The user defined name of the trigger
        account_name (str): The numeric name of the account and must include
            leading zeroes
        trigger_category (TriggerCategory): The type of trigger being created
            or modified
        price_plan_trigger (AccountGroupShareObject): The model property of
            type AccountGroupShareObject.
        notification (Notificationarray): The model property of type
            Notificationarray.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "trigger_name": 'triggerName',
        "account_name": 'accountName',
        "trigger_category": 'triggerCategory',
        "price_plan_trigger": 'pricePlanTrigger',
        "notification": 'notification'
    }

    _optionals = [
        'trigger_name',
        'account_name',
        'trigger_category',
        'price_plan_trigger',
        'notification',
    ]

    def __init__(self,
                 trigger_name=APIHelper.SKIP,
                 account_name=APIHelper.SKIP,
                 trigger_category=APIHelper.SKIP,
                 price_plan_trigger=APIHelper.SKIP,
                 notification=APIHelper.SKIP):
        """Constructor for the AccountGroupShareCreateTrigger class"""

        # Initialize members of the class
        if trigger_name is not APIHelper.SKIP:
            self.trigger_name = trigger_name 
        if account_name is not APIHelper.SKIP:
            self.account_name = account_name 
        if trigger_category is not APIHelper.SKIP:
            self.trigger_category = trigger_category 
        if price_plan_trigger is not APIHelper.SKIP:
            self.price_plan_trigger = price_plan_trigger 
        if notification is not APIHelper.SKIP:
            self.notification = notification 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        trigger_name = dictionary.get("triggerName") if dictionary.get("triggerName") else APIHelper.SKIP
        account_name = dictionary.get("accountName") if dictionary.get("accountName") else APIHelper.SKIP
        trigger_category = dictionary.get("triggerCategory") if dictionary.get("triggerCategory") else APIHelper.SKIP
        price_plan_trigger = AccountGroupShareObject.from_dictionary(dictionary.get('pricePlanTrigger')) if 'pricePlanTrigger' in dictionary.keys() else APIHelper.SKIP
        notification = Notificationarray.from_dictionary(dictionary.get('notification')) if 'notification' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(trigger_name,
                   account_name,
                   trigger_category,
                   price_plan_trigger,
                   notification)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'trigger_name={(self.trigger_name if hasattr(self, "trigger_name") else None)!r}, '
                f'account_name={(self.account_name if hasattr(self, "account_name") else None)!r}, '
                f'trigger_category={(self.trigger_category if hasattr(self, "trigger_category") else None)!r}, '
                f'price_plan_trigger={(self.price_plan_trigger if hasattr(self, "price_plan_trigger") else None)!r}, '
                f'notification={(self.notification if hasattr(self, "notification") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'trigger_name={(self.trigger_name if hasattr(self, "trigger_name") else None)!s}, '
                f'account_name={(self.account_name if hasattr(self, "account_name") else None)!s}, '
                f'trigger_category={(self.trigger_category if hasattr(self, "trigger_category") else None)!s}, '
                f'price_plan_trigger={(self.price_plan_trigger if hasattr(self, "price_plan_trigger") else None)!s}, '
                f'notification={(self.notification if hasattr(self, "notification") else None)!s})')
