# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.device_firmware_version import DeviceFirmwareVersion


class DeviceFirmwareList(object):

    """Implementation of the 'DeviceFirmwareList' model.

    Device Firmware Information.

    Attributes:
        account_name (str): Account name.
        device_firmwar_version_list (List[DeviceFirmwareVersion]): List of
            device & firmware.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_name": 'accountName',
        "device_firmwar_version_list": 'deviceFirmwarVersionList'
    }

    _optionals = [
        'device_firmwar_version_list',
    ]

    def __init__(self,
                 account_name=None,
                 device_firmwar_version_list=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the DeviceFirmwareList class"""

        # Initialize members of the class
        self.account_name = account_name 
        if device_firmwar_version_list is not APIHelper.SKIP:
            self.device_firmwar_version_list = device_firmwar_version_list 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_name = dictionary.get("accountName") if dictionary.get("accountName") else None
        device_firmwar_version_list = None
        if dictionary.get('deviceFirmwarVersionList') is not None:
            device_firmwar_version_list = [DeviceFirmwareVersion.from_dictionary(x) for x in dictionary.get('deviceFirmwarVersionList')]
        else:
            device_firmwar_version_list = APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(account_name,
                   device_firmwar_version_list,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_name={self.account_name!r}, '
                f'device_firmwar_version_list={(self.device_firmwar_version_list if hasattr(self, "device_firmwar_version_list") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_name={self.account_name!s}, '
                f'device_firmwar_version_list={(self.device_firmwar_version_list if hasattr(self, "device_firmwar_version_list") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
