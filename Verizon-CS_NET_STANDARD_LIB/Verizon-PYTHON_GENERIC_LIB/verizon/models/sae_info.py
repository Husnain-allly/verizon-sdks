# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.data_frame import DataFrame


class SaeInfo(object):

    """Implementation of the 'SaeInfo' model.

    Attributes:
        data_frames (List[DataFrame]): List of data frames.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "data_frames": 'dataFrames'
    }

    def __init__(self,
                 data_frames=None):
        """Constructor for the SaeInfo class"""

        # Initialize members of the class
        self.data_frames = data_frames 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        data_frames = None
        if dictionary.get('dataFrames') is not None:
            data_frames = [DataFrame.from_dictionary(x) for x in dictionary.get('dataFrames')]
        # Return an object of this model
        return cls(data_frames)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.data_frames,
                                           type_callable=lambda value: DataFrame.validate(value),
                                           is_model_dict=True,
                                           is_inner_model_dict=True)

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('dataFrames'),
                                       type_callable=lambda value: DataFrame.validate(value),
                                       is_model_dict=True,
                                       is_inner_model_dict=True)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'data_frames={self.data_frames!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'data_frames={self.data_frames!s})')
