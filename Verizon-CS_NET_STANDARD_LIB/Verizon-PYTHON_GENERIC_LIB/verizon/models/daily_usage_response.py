# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.daily_usage_history import DailyUsageHistory
from verizon.models.gio_device_id import GioDeviceId


class DailyUsageResponse(object):

    """Implementation of the 'dailyUsageResponse' model.

    Attributes:
        has_more_data (bool): A flag set to indicate if there is more than one
            page of data returned by the query (true) or if only one page of
            data returned (false)
        device_id (GioDeviceId): The model property of type GioDeviceId.
        usage_history (List[DailyUsageHistory]): The model property of type
            List[DailyUsageHistory].
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "has_more_data": 'hasMoreData',
        "device_id": 'deviceId',
        "usage_history": 'usageHistory'
    }

    _optionals = [
        'has_more_data',
        'device_id',
        'usage_history',
    ]

    def __init__(self,
                 has_more_data=APIHelper.SKIP,
                 device_id=APIHelper.SKIP,
                 usage_history=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the DailyUsageResponse class"""

        # Initialize members of the class
        if has_more_data is not APIHelper.SKIP:
            self.has_more_data = has_more_data 
        if device_id is not APIHelper.SKIP:
            self.device_id = device_id 
        if usage_history is not APIHelper.SKIP:
            self.usage_history = usage_history 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        has_more_data = dictionary.get("hasMoreData") if "hasMoreData" in dictionary.keys() else APIHelper.SKIP
        device_id = GioDeviceId.from_dictionary(dictionary.get('deviceId')) if 'deviceId' in dictionary.keys() else APIHelper.SKIP
        usage_history = None
        if dictionary.get('usageHistory') is not None:
            usage_history = [DailyUsageHistory.from_dictionary(x) for x in dictionary.get('usageHistory')]
        else:
            usage_history = APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(has_more_data,
                   device_id,
                   usage_history,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'has_more_data={(self.has_more_data if hasattr(self, "has_more_data") else None)!r}, '
                f'device_id={(self.device_id if hasattr(self, "device_id") else None)!r}, '
                f'usage_history={(self.usage_history if hasattr(self, "usage_history") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'has_more_data={(self.has_more_data if hasattr(self, "has_more_data") else None)!s}, '
                f'device_id={(self.device_id if hasattr(self, "device_id") else None)!s}, '
                f'usage_history={(self.usage_history if hasattr(self, "usage_history") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
