# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class Content3(object):

    """Implementation of the 'Content3' model.

    Attributes:
        speed_limit (List[TextPhraseOrItis | TextPhraseOrItis1]): List of
            speed limits and cautions.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "speed_limit": 'speedLimit'
    }

    def __init__(self,
                 speed_limit=None,
                 additional_properties=None):
        """Constructor for the Content3 class"""

        # Initialize members of the class
        self.speed_limit = speed_limit 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from verizon.utilities.union_type_lookup import UnionTypeLookUp

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        speed_limit = APIHelper.deserialize_union_type(UnionTypeLookUp.get('TextPhraseOrITIS2'), dictionary.get('speedLimit'), False) if dictionary.get('speedLimit') is not None else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(speed_limit,
                   additional_properties)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """
        from verizon.utilities.union_type_lookup import UnionTypeLookUp

        if isinstance(dictionary, cls):
            return UnionTypeLookUp.get('TextPhraseOrITIS2').validate(dictionary.speed_limit).is_valid

        if not isinstance(dictionary, dict):
            return False

        return UnionTypeLookUp.get('TextPhraseOrITIS2').validate(dictionary.get('speedLimit')).is_valid

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'speed_limit={self.speed_limit!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'speed_limit={self.speed_limit!s}, '
                f'additional_properties={self.additional_properties!s})')
