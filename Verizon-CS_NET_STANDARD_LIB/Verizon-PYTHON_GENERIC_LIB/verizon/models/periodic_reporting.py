# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class PeriodicReporting(object):

    """Implementation of the 'PeriodicReporting' model.

    The units and values of the time interval for the sensor to send a report

    Attributes:
        unit (Unit): The model property of type Unit.
        hours (int): whole numbers from 0 to 24
        minutes (int): whole numbers from 0 to 59
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "unit": 'unit',
        "hours": 'hours',
        "minutes": 'minutes'
    }

    _optionals = [
        'unit',
        'hours',
        'minutes',
    ]

    def __init__(self,
                 unit=APIHelper.SKIP,
                 hours=APIHelper.SKIP,
                 minutes=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the PeriodicReporting class"""

        # Initialize members of the class
        if unit is not APIHelper.SKIP:
            self.unit = unit 
        if hours is not APIHelper.SKIP:
            self.hours = hours 
        if minutes is not APIHelper.SKIP:
            self.minutes = minutes 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        unit = dictionary.get("unit") if dictionary.get("unit") else APIHelper.SKIP
        hours = dictionary.get("hours") if dictionary.get("hours") else APIHelper.SKIP
        minutes = dictionary.get("minutes") if dictionary.get("minutes") else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(unit,
                   hours,
                   minutes,
                   additional_properties)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'unit={(self.unit if hasattr(self, "unit") else None)!r}, '
                f'hours={(self.hours if hasattr(self, "hours") else None)!r}, '
                f'minutes={(self.minutes if hasattr(self, "minutes") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'unit={(self.unit if hasattr(self, "unit") else None)!s}, '
                f'hours={(self.hours if hasattr(self, "hours") else None)!s}, '
                f'minutes={(self.minutes if hasattr(self, "minutes") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
