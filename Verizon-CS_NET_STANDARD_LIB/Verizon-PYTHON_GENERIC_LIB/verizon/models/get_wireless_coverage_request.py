# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.locationscoord import Locationscoord
from verizon.models.network_type_object import NetworkTypeObject


class GetWirelessCoverageRequest(object):

    """Implementation of the 'GetWirelessCoverageRequest' model.

    Get wireless coverage.

    Attributes:
        account_name (str): Account name.
        request_type (str): Type of request made. FWA for address
            qualification and NW for Nationwide coverage.
        location_type (str): Type of location detail.
        locations (Locationscoord): The model property of type Locationscoord.
        network_types_list (List[NetworkTypeObject]): The model property of
            type List[NetworkTypeObject].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_name": 'accountName',
        "request_type": 'requestType',
        "location_type": 'locationType',
        "locations": 'locations',
        "network_types_list": 'networkTypesList'
    }

    def __init__(self,
                 account_name=None,
                 request_type=None,
                 location_type=None,
                 locations=None,
                 network_types_list=None):
        """Constructor for the GetWirelessCoverageRequest class"""

        # Initialize members of the class
        self.account_name = account_name 
        self.request_type = request_type 
        self.location_type = location_type 
        self.locations = locations 
        self.network_types_list = network_types_list 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_name = dictionary.get("accountName") if dictionary.get("accountName") else None
        request_type = dictionary.get("requestType") if dictionary.get("requestType") else None
        location_type = dictionary.get("locationType") if dictionary.get("locationType") else None
        locations = Locationscoord.from_dictionary(dictionary.get('locations')) if dictionary.get('locations') else None
        network_types_list = None
        if dictionary.get('networkTypesList') is not None:
            network_types_list = [NetworkTypeObject.from_dictionary(x) for x in dictionary.get('networkTypesList')]
        # Return an object of this model
        return cls(account_name,
                   request_type,
                   location_type,
                   locations,
                   network_types_list)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.account_name,
                                           type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.request_type,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.location_type,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.locations,
                                            type_callable=lambda value: Locationscoord.validate(value),
                                            is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.network_types_list,
                                            type_callable=lambda value: NetworkTypeObject.validate(value),
                                            is_model_dict=True,
                                            is_inner_model_dict=True)

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('accountName'),
                                       type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('requestType'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('locationType'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('locations'),
                                        type_callable=lambda value: Locationscoord.validate(value),
                                        is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('networkTypesList'),
                                        type_callable=lambda value: NetworkTypeObject.validate(value),
                                        is_model_dict=True,
                                        is_inner_model_dict=True)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_name={self.account_name!r}, '
                f'request_type={self.request_type!r}, '
                f'location_type={self.location_type!r}, '
                f'locations={self.locations!r}, '
                f'network_types_list={self.network_types_list!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_name={self.account_name!s}, '
                f'request_type={self.request_type!s}, '
                f'location_type={self.location_type!s}, '
                f'locations={self.locations!s}, '
                f'network_types_list={self.network_types_list!s})')
