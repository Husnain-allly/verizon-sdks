# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class Position(object):

    """Implementation of the 'Position' model.

    It provides a precise location in the WGS-84 coordinate system, from which
    short offsets may be used to create additional data using a flat earth
    projection centered on this location.

    Attributes:
        lat (int): The geographic latitude of an object, expressed in 1/10th
            integer microdegrees, as a 31 bit value, and with reference to the
            horizontal datum then in use. The value 900000001 shall be used
            when unavailable.
        long (int): The geographic longitude of an object, expressed in 1/10th
            integer microdegrees, as a 32-bit value, and with reference to the
            horizontal datum then in use. The value 1800000001 shall be used
            when unavailable.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "lat": 'lat',
        "long": 'long'
    }

    def __init__(self,
                 lat=None,
                 long=None):
        """Constructor for the Position class"""

        # Initialize members of the class
        self.lat = lat 
        self.long = long 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        lat = dictionary.get("lat") if dictionary.get("lat") else None
        long = dictionary.get("long") if dictionary.get("long") else None
        # Return an object of this model
        return cls(lat,
                   long)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.lat,
                                           type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.long,
                                            type_callable=lambda value: isinstance(value, int))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('lat'),
                                       type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('long'),
                                        type_callable=lambda value: isinstance(value, int))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'lat={self.lat!r}, '
                f'long={self.long!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'lat={self.lat!s}, '
                f'long={self.long!s})')
