# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class DtoFilter(object):

    """Implementation of the 'dto.Filter' model.

    Attributes:
        m_expand (str): Use to provide device details for alerts specific to a
            device
        m_limitnumber (int): Limit the number of results returned
        m_nopagination (bool): A flag set to show if pagination requested
            (false) or not (true)
        m_page (str): The model property of type str.
        m_pagenumber (int): The model property of type int.
        m_projection (List[str]): Limits the fields of the device that the
            user is interested in rather than all of the fields
        m_selection (Dict[str, Any]): Filters results based on user defined
            criteria

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "m_expand": '$expand',
        "m_limitnumber": '$limitnumber',
        "m_nopagination": '$nopagination',
        "m_page": '$page',
        "m_pagenumber": '$pagenumber',
        "m_projection": '$projection',
        "m_selection": '$selection'
    }

    _optionals = [
        'm_expand',
        'm_limitnumber',
        'm_nopagination',
        'm_page',
        'm_pagenumber',
        'm_projection',
        'm_selection',
    ]

    def __init__(self,
                 m_expand=APIHelper.SKIP,
                 m_limitnumber=APIHelper.SKIP,
                 m_nopagination=APIHelper.SKIP,
                 m_page=APIHelper.SKIP,
                 m_pagenumber=APIHelper.SKIP,
                 m_projection=APIHelper.SKIP,
                 m_selection=APIHelper.SKIP):
        """Constructor for the DtoFilter class"""

        # Initialize members of the class
        if m_expand is not APIHelper.SKIP:
            self.m_expand = m_expand 
        if m_limitnumber is not APIHelper.SKIP:
            self.m_limitnumber = m_limitnumber 
        if m_nopagination is not APIHelper.SKIP:
            self.m_nopagination = m_nopagination 
        if m_page is not APIHelper.SKIP:
            self.m_page = m_page 
        if m_pagenumber is not APIHelper.SKIP:
            self.m_pagenumber = m_pagenumber 
        if m_projection is not APIHelper.SKIP:
            self.m_projection = m_projection 
        if m_selection is not APIHelper.SKIP:
            self.m_selection = m_selection 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        m_expand = dictionary.get("$expand") if dictionary.get("$expand") else APIHelper.SKIP
        m_limitnumber = dictionary.get("$limitnumber") if dictionary.get("$limitnumber") else APIHelper.SKIP
        m_nopagination = dictionary.get("$nopagination") if "$nopagination" in dictionary.keys() else APIHelper.SKIP
        m_page = dictionary.get("$page") if dictionary.get("$page") else APIHelper.SKIP
        m_pagenumber = dictionary.get("$pagenumber") if dictionary.get("$pagenumber") else APIHelper.SKIP
        m_projection = dictionary.get("$projection") if dictionary.get("$projection") else APIHelper.SKIP
        m_selection = dictionary.get("$selection") if dictionary.get("$selection") else APIHelper.SKIP
        # Return an object of this model
        return cls(m_expand,
                   m_limitnumber,
                   m_nopagination,
                   m_page,
                   m_pagenumber,
                   m_projection,
                   m_selection)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'm_expand={(self.m_expand if hasattr(self, "m_expand") else None)!r}, '
                f'm_limitnumber={(self.m_limitnumber if hasattr(self, "m_limitnumber") else None)!r}, '
                f'm_nopagination={(self.m_nopagination if hasattr(self, "m_nopagination") else None)!r}, '
                f'm_page={(self.m_page if hasattr(self, "m_page") else None)!r}, '
                f'm_pagenumber={(self.m_pagenumber if hasattr(self, "m_pagenumber") else None)!r}, '
                f'm_projection={(self.m_projection if hasattr(self, "m_projection") else None)!r}, '
                f'm_selection={(self.m_selection if hasattr(self, "m_selection") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'm_expand={(self.m_expand if hasattr(self, "m_expand") else None)!s}, '
                f'm_limitnumber={(self.m_limitnumber if hasattr(self, "m_limitnumber") else None)!s}, '
                f'm_nopagination={(self.m_nopagination if hasattr(self, "m_nopagination") else None)!s}, '
                f'm_page={(self.m_page if hasattr(self, "m_page") else None)!s}, '
                f'm_pagenumber={(self.m_pagenumber if hasattr(self, "m_pagenumber") else None)!s}, '
                f'm_projection={(self.m_projection if hasattr(self, "m_projection") else None)!s}, '
                f'm_selection={(self.m_selection if hasattr(self, "m_selection") else None)!s})')
