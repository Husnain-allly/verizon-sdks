# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class ItisItem(object):

    """Implementation of the 'ITISItem' model.

    Attributes:
        itis (int): The ITIS Code that describes the alert/danger/hazard. All
            ITS standards use the same types here to explain the type of the
            alert/danger/hazard involved.  The complete set of ITIS codes can
            be found in Volume Two of the SAE J2540 standard. This is a set of
            over 1000 items which are used to encode common events and list
            items in ITS.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "itis": 'itis'
    }

    def __init__(self,
                 itis=None):
        """Constructor for the ItisItem class"""

        # Initialize members of the class
        self.itis = itis 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        itis = dictionary.get("itis") if dictionary.get("itis") else None
        # Return an object of this model
        return cls(itis)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.itis,
                                           type_callable=lambda value: isinstance(value, int))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('itis'),
                                       type_callable=lambda value: isinstance(value, int))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'itis={self.itis!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'itis={self.itis!s})')
