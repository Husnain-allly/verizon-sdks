# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.account_device_list import AccountDeviceList
from verizon.models.date_filter import DateFilter


class DeviceMismatchListRequest(object):

    """Implementation of the 'DeviceMismatchListRequest' model.

    Request to list of all 4G devices with an ICCID (SIM) that was not
    activated with the expected IMEI (hardware) during a specified time frame.

    Attributes:
        filter (DateFilter): Filter out the dates.
        devices (List[AccountDeviceList]): A list of specific devices that you
            want to check, specified by ICCID or MDN.
        account_name (str): The account that you want to search for mismatched
            devices. If you don't specify an accountName, the search includes
            all devices to which you have access.
        group_name (str): The name of a device group, to only include devices
            in that group.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "filter": 'filter',
        "devices": 'devices',
        "account_name": 'accountName',
        "group_name": 'groupName'
    }

    _optionals = [
        'devices',
        'account_name',
        'group_name',
    ]

    def __init__(self,
                 filter=None,
                 devices=APIHelper.SKIP,
                 account_name=APIHelper.SKIP,
                 group_name=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the DeviceMismatchListRequest class"""

        # Initialize members of the class
        self.filter = filter 
        if devices is not APIHelper.SKIP:
            self.devices = devices 
        if account_name is not APIHelper.SKIP:
            self.account_name = account_name 
        if group_name is not APIHelper.SKIP:
            self.group_name = group_name 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        filter = DateFilter.from_dictionary(dictionary.get('filter')) if dictionary.get('filter') else None
        devices = None
        if dictionary.get('devices') is not None:
            devices = [AccountDeviceList.from_dictionary(x) for x in dictionary.get('devices')]
        else:
            devices = APIHelper.SKIP
        account_name = dictionary.get("accountName") if dictionary.get("accountName") else APIHelper.SKIP
        group_name = dictionary.get("groupName") if dictionary.get("groupName") else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(filter,
                   devices,
                   account_name,
                   group_name,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'filter={self.filter!r}, '
                f'devices={(self.devices if hasattr(self, "devices") else None)!r}, '
                f'account_name={(self.account_name if hasattr(self, "account_name") else None)!r}, '
                f'group_name={(self.group_name if hasattr(self, "group_name") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'filter={self.filter!s}, '
                f'devices={(self.devices if hasattr(self, "devices") else None)!s}, '
                f'account_name={(self.account_name if hasattr(self, "account_name") else None)!s}, '
                f'group_name={(self.group_name if hasattr(self, "group_name") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
