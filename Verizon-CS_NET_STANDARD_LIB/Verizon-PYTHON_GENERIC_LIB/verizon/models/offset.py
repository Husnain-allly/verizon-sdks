# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.node_list_ll import NodeListLl


class Offset(object):

    """Implementation of the 'Offset' model.

    The sequence of node offsets then describes a path or polygon in the
    Lat-Long system.

    Attributes:
        ll (NodeListLl): The NodeListLL data structure provides the sequence
            of signed offset node point values for determining the latitude
            and longitude. Each LL point is referred to as a node point.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ll": 'll'
    }

    def __init__(self,
                 ll=None):
        """Constructor for the Offset class"""

        # Initialize members of the class
        self.ll = ll 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        ll = NodeListLl.from_dictionary(dictionary.get('ll')) if dictionary.get('ll') else None
        # Return an object of this model
        return cls(ll)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.ll,
                                           type_callable=lambda value: NodeListLl.validate(value),
                                           is_model_dict=True)

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('ll'),
                                       type_callable=lambda value: NodeListLl.validate(value),
                                       is_model_dict=True)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'll={self.ll!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'll={self.ll!s})')
