# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.position import Position


class RoadSignId(object):

    """Implementation of the 'RoadSignID' model.

    It provide a precise location of one or more roadside signs.

    Attributes:
        position (Position): It provides a precise location in the WGS-84
            coordinate system, from which short offsets may be used to create
            additional data using a flat earth projection centered on this
            location.
        view_angle (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "position": 'position',
        "view_angle": 'viewAngle'
    }

    def __init__(self,
                 position=None,
                 view_angle=None):
        """Constructor for the RoadSignId class"""

        # Initialize members of the class
        self.position = position 
        self.view_angle = view_angle 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        position = Position.from_dictionary(dictionary.get('position')) if dictionary.get('position') else None
        view_angle = dictionary.get("viewAngle") if dictionary.get("viewAngle") else None
        # Return an object of this model
        return cls(position,
                   view_angle)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.position,
                                           type_callable=lambda value: Position.validate(value),
                                           is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.view_angle,
                                            type_callable=lambda value: isinstance(value, str))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('position'),
                                       type_callable=lambda value: Position.validate(value),
                                       is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('viewAngle'),
                                        type_callable=lambda value: isinstance(value, str))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'position={self.position!r}, '
                f'view_angle={self.view_angle!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'position={self.position!s}, '
                f'view_angle={self.view_angle!s})')
