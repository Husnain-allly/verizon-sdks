# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.history_search_filter import HistorySearchFilter
from verizon.models.history_search_limit_time import HistorySearchLimitTime


class HistorySearchRequest(object):

    """Implementation of the 'HistorySearchRequest' model.

    Used to filter data by time period or number of devices.

    Attributes:
        m_filter (HistorySearchFilter): The selected device and attributes for
            which a request should retrieve data.
        m_limit_number (int): The maximum number of historical attributes to
            include in the response. If the request matches more than this
            number of attributes, the response will contain an X-Next value in
            the header that can be used as the page value in the next request
            to retrieve the next page of events.
        m_limit_time (HistorySearchLimitTime): The time period for which a
            request should retrieve data, beginning with the limitTime.startOn
            and proceeding with the limitTime.duration.
        m_page (str): Page number for pagination purposes.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "m_filter": '$filter',
        "m_limit_number": '$limitNumber',
        "m_limit_time": '$limitTime',
        "m_page": '$page'
    }

    _optionals = [
        'm_limit_number',
        'm_limit_time',
        'm_page',
    ]

    def __init__(self,
                 m_filter=None,
                 m_limit_number=APIHelper.SKIP,
                 m_limit_time=APIHelper.SKIP,
                 m_page=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the HistorySearchRequest class"""

        # Initialize members of the class
        self.m_filter = m_filter 
        if m_limit_number is not APIHelper.SKIP:
            self.m_limit_number = m_limit_number 
        if m_limit_time is not APIHelper.SKIP:
            self.m_limit_time = m_limit_time 
        if m_page is not APIHelper.SKIP:
            self.m_page = m_page 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        m_filter = HistorySearchFilter.from_dictionary(dictionary.get('$filter')) if dictionary.get('$filter') else None
        m_limit_number = dictionary.get("$limitNumber") if dictionary.get("$limitNumber") else APIHelper.SKIP
        m_limit_time = HistorySearchLimitTime.from_dictionary(dictionary.get('$limitTime')) if '$limitTime' in dictionary.keys() else APIHelper.SKIP
        m_page = dictionary.get("$page") if dictionary.get("$page") else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(m_filter,
                   m_limit_number,
                   m_limit_time,
                   m_page,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'm_filter={self.m_filter!r}, '
                f'm_limit_number={(self.m_limit_number if hasattr(self, "m_limit_number") else None)!r}, '
                f'm_limit_time={(self.m_limit_time if hasattr(self, "m_limit_time") else None)!r}, '
                f'm_page={(self.m_page if hasattr(self, "m_page") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'm_filter={self.m_filter!s}, '
                f'm_limit_number={(self.m_limit_number if hasattr(self, "m_limit_number") else None)!s}, '
                f'm_limit_time={(self.m_limit_time if hasattr(self, "m_limit_time") else None)!s}, '
                f'm_page={(self.m_page if hasattr(self, "m_page") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
