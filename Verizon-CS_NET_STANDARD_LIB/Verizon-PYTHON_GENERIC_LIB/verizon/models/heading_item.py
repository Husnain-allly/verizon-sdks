# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.heading import Heading


class HeadingItem(object):

    """Implementation of the 'HeadingItem' model.

    Heading limitation provides minimum and maximum value for road user
    heading in unit of degrees. If the road user's heading value is between
    the given minimum and maximum value and the TriggerConditions are also met
    the message will be sent out.
    The heading minimum value can be bigger than the maximum value as negative
    number are not supported. For example, the +/- 10 degrees around the north
    (0 degrees) can be defined as 350 (min) to 10 (max) degrees.

    Attributes:
        heading (Heading): The model property of type Heading.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "heading": 'heading'
    }

    _nullables = [
        'heading',
    ]

    def __init__(self,
                 heading=None,
                 additional_properties=None):
        """Constructor for the HeadingItem class"""

        # Initialize members of the class
        self.heading = heading 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        heading = Heading.from_dictionary(dictionary.get('heading')) if dictionary.get('heading') else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(heading,
                   additional_properties)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.heading,
                                           type_callable=lambda value: Heading.validate(value),
                                           is_value_nullable=True,
                                           is_model_dict=True)

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('heading'),
                                       type_callable=lambda value: Heading.validate(value),
                                       is_value_nullable=True,
                                       is_model_dict=True)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'heading={self.heading!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'heading={self.heading!s}, '
                f'additional_properties={self.additional_properties!s})')
