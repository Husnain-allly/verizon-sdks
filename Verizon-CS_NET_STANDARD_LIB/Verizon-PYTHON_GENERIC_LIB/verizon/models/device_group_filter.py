# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class DeviceGroupFilter(object):

    """Implementation of the 'deviceGroupFilter' model.

    Attributes:
        device_group_name (str): The model property of type str.
        individual_or_combined (str): The model property of type str.
        account_name (str): The numeric name of the account and must include
            leading zeroes
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "device_group_name": 'deviceGroupName',
        "individual_or_combined": 'IndividualOrCombined',
        "account_name": 'accountName'
    }

    _optionals = [
        'device_group_name',
        'individual_or_combined',
        'account_name',
    ]

    def __init__(self,
                 device_group_name=APIHelper.SKIP,
                 individual_or_combined=APIHelper.SKIP,
                 account_name=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the DeviceGroupFilter class"""

        # Initialize members of the class
        if device_group_name is not APIHelper.SKIP:
            self.device_group_name = device_group_name 
        if individual_or_combined is not APIHelper.SKIP:
            self.individual_or_combined = individual_or_combined 
        if account_name is not APIHelper.SKIP:
            self.account_name = account_name 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        device_group_name = dictionary.get("deviceGroupName") if dictionary.get("deviceGroupName") else APIHelper.SKIP
        individual_or_combined = dictionary.get("IndividualOrCombined") if dictionary.get("IndividualOrCombined") else APIHelper.SKIP
        account_name = dictionary.get("accountName") if dictionary.get("accountName") else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(device_group_name,
                   individual_or_combined,
                   account_name,
                   additional_properties)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'device_group_name={(self.device_group_name if hasattr(self, "device_group_name") else None)!r}, '
                f'individual_or_combined={(self.individual_or_combined if hasattr(self, "individual_or_combined") else None)!r}, '
                f'account_name={(self.account_name if hasattr(self, "account_name") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'device_group_name={(self.device_group_name if hasattr(self, "device_group_name") else None)!s}, '
                f'individual_or_combined={(self.individual_or_combined if hasattr(self, "individual_or_combined") else None)!s}, '
                f'account_name={(self.account_name if hasattr(self, "account_name") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
