# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.periodic_reporting import PeriodicReporting
from verizon.models.tscore import Tscore


class RbsHighPrecisionTiltConfig(object):

    """Implementation of the 'RbsHighPrecisionTiltConfig' model.

    Attributes:
        mode (Mode): the reporting mode of the tilt sensor
        periodic_reporting (PeriodicReporting): The units and values of the
            time interval for the sensor to send a report
        hold_time (int): The time the threshold condition exists, in
            milliseconds, to recognize an event
        angle_away (int): the threshold value, from verticle, to recognize an
            event
        angle_toward (int): the threshold value, moving towards  verticle, to
            recognize an event
        tscore (Tscore): The model property of type Tscore.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mode": 'mode',
        "periodic_reporting": 'periodic-reporting',
        "hold_time": 'hold-time',
        "angle_away": 'angle-away',
        "angle_toward": 'angle-toward',
        "tscore": 'tscore'
    }

    _optionals = [
        'mode',
        'periodic_reporting',
        'hold_time',
        'angle_away',
        'angle_toward',
        'tscore',
    ]

    def __init__(self,
                 mode=APIHelper.SKIP,
                 periodic_reporting=APIHelper.SKIP,
                 hold_time=APIHelper.SKIP,
                 angle_away=APIHelper.SKIP,
                 angle_toward=APIHelper.SKIP,
                 tscore=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the RbsHighPrecisionTiltConfig class"""

        # Initialize members of the class
        if mode is not APIHelper.SKIP:
            self.mode = mode 
        if periodic_reporting is not APIHelper.SKIP:
            self.periodic_reporting = periodic_reporting 
        if hold_time is not APIHelper.SKIP:
            self.hold_time = hold_time 
        if angle_away is not APIHelper.SKIP:
            self.angle_away = angle_away 
        if angle_toward is not APIHelper.SKIP:
            self.angle_toward = angle_toward 
        if tscore is not APIHelper.SKIP:
            self.tscore = tscore 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        mode = dictionary.get("mode") if dictionary.get("mode") else APIHelper.SKIP
        periodic_reporting = PeriodicReporting.from_dictionary(dictionary.get('periodic-reporting')) if 'periodic-reporting' in dictionary.keys() else APIHelper.SKIP
        hold_time = dictionary.get("hold-time") if dictionary.get("hold-time") else APIHelper.SKIP
        angle_away = dictionary.get("angle-away") if dictionary.get("angle-away") else APIHelper.SKIP
        angle_toward = dictionary.get("angle-toward") if dictionary.get("angle-toward") else APIHelper.SKIP
        tscore = Tscore.from_dictionary(dictionary.get('tscore')) if 'tscore' in dictionary.keys() else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(mode,
                   periodic_reporting,
                   hold_time,
                   angle_away,
                   angle_toward,
                   tscore,
                   additional_properties)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mode={(self.mode if hasattr(self, "mode") else None)!r}, '
                f'periodic_reporting={(self.periodic_reporting if hasattr(self, "periodic_reporting") else None)!r}, '
                f'hold_time={(self.hold_time if hasattr(self, "hold_time") else None)!r}, '
                f'angle_away={(self.angle_away if hasattr(self, "angle_away") else None)!r}, '
                f'angle_toward={(self.angle_toward if hasattr(self, "angle_toward") else None)!r}, '
                f'tscore={(self.tscore if hasattr(self, "tscore") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mode={(self.mode if hasattr(self, "mode") else None)!s}, '
                f'periodic_reporting={(self.periodic_reporting if hasattr(self, "periodic_reporting") else None)!s}, '
                f'hold_time={(self.hold_time if hasattr(self, "hold_time") else None)!s}, '
                f'angle_away={(self.angle_away if hasattr(self, "angle_away") else None)!s}, '
                f'angle_toward={(self.angle_toward if hasattr(self, "angle_toward") else None)!s}, '
                f'tscore={(self.tscore if hasattr(self, "tscore") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
