# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.target_authentication_body_headers import TargetAuthenticationBodyHeaders
from verizon.models.target_authentication_body_host import TargetAuthenticationBodyHost


class TargetAuthenticationBody(object):

    """Implementation of the 'TargetAuthenticationBody' model.

    Attributes:
        grant_type (str): Authentication grant type.
        refresh_token (str): Refresh token.
        scope (str): Authentication scopes.
        headers (TargetAuthenticationBodyHeaders): Authentication headers.
        host (TargetAuthenticationBodyHost): Host information.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "grant_type": 'grant_type',
        "refresh_token": 'refresh_token',
        "scope": 'scope',
        "headers": 'headers',
        "host": 'host'
    }

    _optionals = [
        'grant_type',
        'refresh_token',
        'scope',
        'headers',
        'host',
    ]

    def __init__(self,
                 grant_type=APIHelper.SKIP,
                 refresh_token=APIHelper.SKIP,
                 scope=APIHelper.SKIP,
                 headers=APIHelper.SKIP,
                 host=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the TargetAuthenticationBody class"""

        # Initialize members of the class
        if grant_type is not APIHelper.SKIP:
            self.grant_type = grant_type 
        if refresh_token is not APIHelper.SKIP:
            self.refresh_token = refresh_token 
        if scope is not APIHelper.SKIP:
            self.scope = scope 
        if headers is not APIHelper.SKIP:
            self.headers = headers 
        if host is not APIHelper.SKIP:
            self.host = host 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        grant_type = dictionary.get("grant_type") if dictionary.get("grant_type") else APIHelper.SKIP
        refresh_token = dictionary.get("refresh_token") if dictionary.get("refresh_token") else APIHelper.SKIP
        scope = dictionary.get("scope") if dictionary.get("scope") else APIHelper.SKIP
        headers = TargetAuthenticationBodyHeaders.from_dictionary(dictionary.get('headers')) if 'headers' in dictionary.keys() else APIHelper.SKIP
        host = TargetAuthenticationBodyHost.from_dictionary(dictionary.get('host')) if 'host' in dictionary.keys() else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(grant_type,
                   refresh_token,
                   scope,
                   headers,
                   host,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'grant_type={(self.grant_type if hasattr(self, "grant_type") else None)!r}, '
                f'refresh_token={(self.refresh_token if hasattr(self, "refresh_token") else None)!r}, '
                f'scope={(self.scope if hasattr(self, "scope") else None)!r}, '
                f'headers={(self.headers if hasattr(self, "headers") else None)!r}, '
                f'host={(self.host if hasattr(self, "host") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'grant_type={(self.grant_type if hasattr(self, "grant_type") else None)!s}, '
                f'refresh_token={(self.refresh_token if hasattr(self, "refresh_token") else None)!s}, '
                f'scope={(self.scope if hasattr(self, "scope") else None)!s}, '
                f'headers={(self.headers if hasattr(self, "headers") else None)!s}, '
                f'host={(self.host if hasattr(self, "host") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
