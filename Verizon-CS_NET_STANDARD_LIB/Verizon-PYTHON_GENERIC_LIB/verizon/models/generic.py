# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class Generic(object):

    """Implementation of the 'Generic' model.

    Custom message which is defined by the user and can support "any" message
    type or format.
    **Note:** ETX prefers the j2735 or the j2735_gr encoding and only vendor
    specific message types are allowed to be published in different message
    formats.

    Attributes:
        message_type (str): The type of message. This can be any of the
            standard V2X messages specified in the SAE J2735 standard (e.g.
            BSM, PSM, RSA, TIM, MAP, SPAT, etc.), or it can be a vendor
            specific message type that is not defined by the standard.
        message_format (str): The encoding of the message (e.g. j2735,
            protobuf, json, Avro, etc.). If the message is encapsulated within
            a GeoRoutedMsg protocol buffer wrapper, append _gr to the message
            format (e.g. j2735 => j2735_gr).  **Note:** ETX prefers the j2735
            or the j2735_gr encoding and only vendor specific message types
            are allowed to be published in different message formats.
        payload (str): The base64 encoded message.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "message_type": 'messageType',
        "message_format": 'messageFormat',
        "payload": 'payload'
    }

    def __init__(self,
                 message_type=None,
                 message_format=None,
                 payload=None):
        """Constructor for the Generic class"""

        # Initialize members of the class
        self.message_type = message_type 
        self.message_format = message_format 
        self.payload = payload 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        message_type = dictionary.get("messageType") if dictionary.get("messageType") else None
        message_format = dictionary.get("messageFormat") if dictionary.get("messageFormat") else None
        payload = dictionary.get("payload") if dictionary.get("payload") else None
        # Return an object of this model
        return cls(message_type,
                   message_format,
                   payload)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.message_type,
                                           type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.message_format,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.payload,
                                            type_callable=lambda value: isinstance(value, str))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('messageType'),
                                       type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('messageFormat'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('payload'),
                                        type_callable=lambda value: isinstance(value, str))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'message_type={self.message_type!r}, '
                f'message_format={self.message_format!r}, '
                f'payload={self.payload!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'message_type={self.message_type!s}, '
                f'message_format={self.message_format!s}, '
                f'payload={self.payload!s})')
