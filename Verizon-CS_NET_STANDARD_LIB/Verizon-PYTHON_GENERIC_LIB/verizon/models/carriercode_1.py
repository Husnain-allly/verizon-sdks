# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.allowance_threshold import AllowanceThreshold


class Carriercode1(object):

    """Implementation of the 'carriercode1' model.

    Attributes:
        carrier_code (str): The model property of type str.
        percentage (AllowanceThreshold): The model property of type
            AllowanceThreshold.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "carrier_code": 'carrierCode',
        "percentage": 'percentage'
    }

    _optionals = [
        'carrier_code',
        'percentage',
    ]

    def __init__(self,
                 carrier_code=APIHelper.SKIP,
                 percentage=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the Carriercode1 class"""

        # Initialize members of the class
        if carrier_code is not APIHelper.SKIP:
            self.carrier_code = carrier_code 
        if percentage is not APIHelper.SKIP:
            self.percentage = percentage 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        carrier_code = dictionary.get("carrierCode") if dictionary.get("carrierCode") else APIHelper.SKIP
        percentage = AllowanceThreshold.from_dictionary(dictionary.get('percentage')) if 'percentage' in dictionary.keys() else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(carrier_code,
                   percentage,
                   additional_properties)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'carrier_code={(self.carrier_code if hasattr(self, "carrier_code") else None)!r}, '
                f'percentage={(self.percentage if hasattr(self, "percentage") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'carrier_code={(self.carrier_code if hasattr(self, "carrier_code") else None)!s}, '
                f'percentage={(self.percentage if hasattr(self, "percentage") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
