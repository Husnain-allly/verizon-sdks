# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.feature_type import FeatureType


class GeoFeature(object):

    """Implementation of the 'GeoFeature' model.

    Attributes:
        mtype (FeatureType): The model property of type FeatureType.
        geometry (LineString | Polygon | MultiLineString | MultiPolygon): The
            model property of type LineString | Polygon | MultiLineString |
            MultiPolygon.
        properties (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'type',
        "geometry": 'geometry',
        "properties": 'properties'
    }

    def __init__(self,
                 mtype=None,
                 geometry=None,
                 properties=None):
        """Constructor for the GeoFeature class"""

        # Initialize members of the class
        self.mtype = mtype 
        self.geometry = geometry 
        self.properties = properties 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from verizon.utilities.union_type_lookup import UnionTypeLookUp

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        mtype = dictionary.get("type") if dictionary.get("type") else None
        geometry = APIHelper.deserialize_union_type(UnionTypeLookUp.get('Geometry'), dictionary.get('geometry'), False) if dictionary.get('geometry') is not None else None
        properties = dictionary.get("properties") if dictionary.get("properties") else None
        # Return an object of this model
        return cls(mtype,
                   geometry,
                   properties)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """
        from verizon.utilities.union_type_lookup import UnionTypeLookUp

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.mtype,
                                           type_callable=lambda value: FeatureType.validate(value)) \
                and UnionTypeLookUp.get('Geometry').validate(dictionary.geometry).is_valid \
                and APIHelper.is_valid_type(value=dictionary.properties,
                                            type_callable=lambda value: isinstance(value, Any))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('type'),
                                       type_callable=lambda value: FeatureType.validate(value)) \
            and UnionTypeLookUp.get('Geometry').validate(dictionary.get('geometry')).is_valid \
            and APIHelper.is_valid_type(value=dictionary.get('properties'),
                                        type_callable=lambda value: isinstance(value, Any))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!r}, '
                f'geometry={self.geometry!r}, '
                f'properties={self.properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!s}, '
                f'geometry={self.geometry!s}, '
                f'properties={self.properties!s})')
