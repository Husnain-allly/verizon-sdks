# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.account_identifier import AccountIdentifier
from verizon.models.resource_identifier import ResourceIdentifier


class QuerySubscriptionRequest(object):

    """Implementation of the 'QuerySubscriptionRequest' model.

    Fields and values to match.

    Attributes:
        accountidentifier (AccountIdentifier): The ID of the authenticating
            billing account, in the format
            `{"billingaccountid":"1234567890-12345"}`.
        m_selection (Dict[str, str]): A comma-separated list of properties and
            comparator values to match against subscriptions in the ThingSpace
            account. See Working with Query Filters for more information. If
            the request does not include `$selection`, the response will
            include all subscriptions to which the requesting user has access.
        resourceidentifier (ResourceIdentifier): The ID of the target to
            delete, in the format {"id":
            "dd1682d3-2d80-cefc-f3ee-25154800beff"}.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "accountidentifier": 'accountidentifier',
        "m_selection": '$selection',
        "resourceidentifier": 'resourceidentifier'
    }

    _optionals = [
        'accountidentifier',
        'm_selection',
        'resourceidentifier',
    ]

    def __init__(self,
                 accountidentifier=APIHelper.SKIP,
                 m_selection=APIHelper.SKIP,
                 resourceidentifier=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the QuerySubscriptionRequest class"""

        # Initialize members of the class
        if accountidentifier is not APIHelper.SKIP:
            self.accountidentifier = accountidentifier 
        if m_selection is not APIHelper.SKIP:
            self.m_selection = m_selection 
        if resourceidentifier is not APIHelper.SKIP:
            self.resourceidentifier = resourceidentifier 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        accountidentifier = AccountIdentifier.from_dictionary(dictionary.get('accountidentifier')) if 'accountidentifier' in dictionary.keys() else APIHelper.SKIP
        m_selection = dictionary.get("$selection") if dictionary.get("$selection") else APIHelper.SKIP
        resourceidentifier = ResourceIdentifier.from_dictionary(dictionary.get('resourceidentifier')) if 'resourceidentifier' in dictionary.keys() else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(accountidentifier,
                   m_selection,
                   resourceidentifier,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'accountidentifier={(self.accountidentifier if hasattr(self, "accountidentifier") else None)!r}, '
                f'm_selection={(self.m_selection if hasattr(self, "m_selection") else None)!r}, '
                f'resourceidentifier={(self.resourceidentifier if hasattr(self, "resourceidentifier") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'accountidentifier={(self.accountidentifier if hasattr(self, "accountidentifier") else None)!s}, '
                f'm_selection={(self.m_selection if hasattr(self, "m_selection") else None)!s}, '
                f'resourceidentifier={(self.resourceidentifier if hasattr(self, "resourceidentifier") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
