/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  compositeAuthenticationProvider,
  customHeaderAuthenticationProvider,
  OAuthConfiguration,
  requestAuthenticationProvider,
} from './authentication';
import { Configuration } from './configuration';
import { OauthToken } from './models/oauthToken';
import { ThingspaceOauth1Manager } from './thingspaceOauth1Manager';
import { ThingspaceOauthManager } from './thingspaceOauthManager';

export function createAuthProviderFromConfig(
  config: Partial<Configuration>,
  thingspaceOauth: () => ThingspaceOauthManager | undefined,
  thingspaceOauth1: () => ThingspaceOauth1Manager | undefined
) {
  const authConfig = {
    thingspaceOauth:
      config.thingspaceOauthCredentials &&
      requestAuthenticationProvider(
        config.thingspaceOauthCredentials.oauthToken,
        thingspaceOauthTokenProvider(
          thingspaceOauth,
          config.thingspaceOauthCredentials.oauthTokenProvider
        ),
        config.thingspaceOauthCredentials.oauthOnTokenUpdate,
        {
          clockSkew: config.thingspaceOauthCredentials.oauthClockSkew,
        } as OAuthConfiguration
      ),
    vzM2MToken:
      config.vzM2MTokenCredentials &&
      customHeaderAuthenticationProvider(config.vzM2MTokenCredentials),
    thingspaceOauth1:
      config.thingspaceOauth1Credentials &&
      requestAuthenticationProvider(
        config.thingspaceOauth1Credentials.oauthToken,
        thingspaceOauth1TokenProvider(
          thingspaceOauth1,
          config.thingspaceOauth1Credentials.oauthTokenProvider
        ),
        config.thingspaceOauth1Credentials.oauthOnTokenUpdate,
        {
          clockSkew: config.thingspaceOauth1Credentials.oauthClockSkew,
        } as OAuthConfiguration
      ),
    sessionToken:
      config.sessionTokenCredentials &&
      customHeaderAuthenticationProvider(config.sessionTokenCredentials),
  };

  return compositeAuthenticationProvider<
    keyof typeof authConfig,
    typeof authConfig
  >(authConfig);
}

function thingspaceOauthTokenProvider(
  thingspaceOauth: () => ThingspaceOauthManager | undefined,
  defaultProvider:
    | ((
        lastOAuthToken: OauthToken | undefined,
        authManager: ThingspaceOauthManager
      ) => Promise<OauthToken>)
    | undefined
): ((token: OauthToken | undefined) => Promise<OauthToken>) | undefined {
  return (token: OauthToken | undefined) => {
    const manager = thingspaceOauth();
    if (manager === undefined) {
      throw Error('Unable to find the OAuthManager instance');
    }
    if (defaultProvider === undefined) {
      return manager.updateToken(token);
    }
    return defaultProvider(token, manager);
  };
}

function thingspaceOauth1TokenProvider(
  thingspaceOauth1: () => ThingspaceOauth1Manager | undefined,
  defaultProvider:
    | ((
        lastOAuthToken: OauthToken | undefined,
        authManager: ThingspaceOauth1Manager
      ) => Promise<OauthToken>)
    | undefined
): ((token: OauthToken | undefined) => Promise<OauthToken>) | undefined {
  return (token: OauthToken | undefined) => {
    const manager = thingspaceOauth1();
    if (manager === undefined) {
      throw Error('Unable to find the OAuthManager instance');
    }
    if (defaultProvider === undefined) {
      return manager.updateToken(token);
    }
    return defaultProvider(token, manager);
  };
}
