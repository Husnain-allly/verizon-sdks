/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { isExpired, isValid } from './authentication';
import { OauthToken } from './models/oauthToken';
import { ClientInterface } from './clientInterface';
import { OauthAuthorizationController } from './controllers/oauthAuthorizationController';

export class ThingspaceOauth1Manager {
  private _oauthClientId: string;
  private _oauthClientSecret: string;
  private _oauthClockSkew?: number;
  private _oAuthController: OauthAuthorizationApi;

  constructor(
    {
      oauthClientId,
      oauthClientSecret,
      oauthClockSkew,
    }: {
      oauthClientId: string;
      oauthClientSecret: string;
      oauthClockSkew?: number;
    },
    client: ClientInterface
  ) {
    this._oauthClientId = oauthClientId;
    this._oauthClientSecret = oauthClientSecret;
    this._oauthClockSkew = oauthClockSkew;
    this._oAuthController = new OauthAuthorizationApi(client);
  }

  public async updateToken(oAuthToken?: OauthToken): Promise<OauthToken> {
    if (!this.isValid(oAuthToken) || this.isExpired(oAuthToken)) {
      oAuthToken = await this.fetchToken();
    }
    return oAuthToken;
  }

  public isValid(oAuthToken: OauthToken | undefined): oAuthToken is OauthToken {
    return isValid(oAuthToken);
  }

  public isExpired(oAuthToken: OauthToken) {
    return isExpired(oAuthToken, this._oauthClockSkew);
  }

  public async fetchToken(
    additionalParams?: Record<string, unknown>
  ): Promise<OauthToken> {
    const authorization = this.getClientBasicAuth(
      this._oauthClientId,
      this._oauthClientSecret
    );
    const { result } = await this._oAuthController.requestTokenThingspaceOauth1(
      authorization,
      undefined,
      additionalParams
    );
    return this.setExpiry(result);
  }

  private getClientBasicAuth(clientId: string, clientSecret: string): string {
    return `Basic ${Buffer.from(clientId + ':' + clientSecret).toString(
      'base64'
    )}`;
  }

  private async setExpiry(token: OauthToken) {
    const newToken = token;
    if (newToken.expiresIn) {
      newToken.expiry =
        BigInt(Math.round(Date.now() / 1000)) + newToken.expiresIn;
    }
    return newToken;
  }
}
