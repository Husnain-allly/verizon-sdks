/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  DtoConfigurationProfile,
  dtoConfigurationProfileSchema,
} from '../models/dtoConfigurationProfile';
import {
  DtoConfigurationProfileDelete,
  dtoConfigurationProfileDeleteSchema,
} from '../models/dtoConfigurationProfileDelete';
import {
  DtoConfigurationProfilePath,
  dtoConfigurationProfilePathSchema,
} from '../models/dtoConfigurationProfilePath';
import {
  DtoProfileResponse,
  dtoProfileResponseSchema,
} from '../models/dtoProfileResponse';
import {
  ResourceResourceQuery,
  resourceResourceQuerySchema,
} from '../models/resourceResourceQuery';
import { array } from '../schema';
import { BaseApi } from './baseApi';
import { M400ManagementError } from '../errors/m400ManagementError';
import { M403ManagementError } from '../errors/m403ManagementError';
import { M500ManagementError } from '../errors/m500ManagementError';
import { ManagementError } from '../errors/managementError';

export class SensorInsightsDeviceProfileApi extends BaseApi {
  /**
   * Create a device profile
   *
   * @param body
   * @return Response from the API call
   */
  async createAProfile(
    body: DtoConfigurationProfile,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DtoProfileResponse[]>> {
    const req = this.createRequest(
      'POST',
      '/dm/v1/deviceConfigurationProfiles'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, dtoConfigurationProfileSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, M400ManagementError, 'Bad Request');
    req.throwOn(401, ManagementError, 'UnAuthorized');
    req.throwOn(403, M403ManagementError, 'Forbidden');
    req.throwOn(500, M500ManagementError, 'Internal server error.');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(array(dtoProfileResponseSchema), requestOptions);
  }

  /**
   * Delete a device profile
   *
   * @param deleterequest payload for the delete request
   * @return Response from the API call
   */
  async deleteAProfile(
    deleterequest: DtoConfigurationProfileDelete,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DtoProfileResponse[]>> {
    const req = this.createRequest(
      'DELETE',
      '/dm/v1/deviceConfigurationProfiles'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      deleterequest: [deleterequest, dtoConfigurationProfileDeleteSchema],
    });
    req.header('deleterequest', mapped.deleterequest);
    req.throwOn(400, M400ManagementError, 'Bad Request');
    req.throwOn(401, ManagementError, 'UnAuthorized');
    req.throwOn(403, M403ManagementError, 'Forbidden');
    req.throwOn(500, M500ManagementError, 'Internal server error.');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(array(dtoProfileResponseSchema), requestOptions);
  }

  /**
   * Partially update a device profile
   *
   * @param body
   * @return Response from the API call
   */
  async updateAProfile(
    body: DtoConfigurationProfilePath,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DtoProfileResponse[]>> {
    const req = this.createRequest(
      'PATCH',
      '/dm/v1/deviceConfigurationProfiles'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, dtoConfigurationProfilePathSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, M400ManagementError, 'Bad Request');
    req.throwOn(401, ManagementError, 'UnAuthorized');
    req.throwOn(403, M403ManagementError, 'Forbidden');
    req.throwOn(500, M500ManagementError, 'Internal server error.');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(array(dtoProfileResponseSchema), requestOptions);
  }

  /**
   * Query a device profile for an individual device
   *
   * @param body         body
   * @return Response from the API call
   */
  async queryAProfile(
    body: ResourceResourceQuery,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DtoProfileResponse[]>> {
    const req = this.createRequest(
      'POST',
      '/dm/v1/deviceConfigurationProfiles/actions/query'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, resourceResourceQuerySchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, M400ManagementError, 'Bad Request');
    req.throwOn(401, ManagementError, 'UnAuthorized');
    req.throwOn(403, M403ManagementError, 'Forbidden');
    req.throwOn(500, M500ManagementError, 'Internal server error.');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(array(dtoProfileResponseSchema), requestOptions);
  }
}
