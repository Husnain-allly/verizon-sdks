/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  DtoAddUsersToNotificationGroupRequest,
  dtoAddUsersToNotificationGroupRequestSchema,
} from '../models/dtoAddUsersToNotificationGroupRequest';
import {
  DtoCreateNotificationGroupRequest,
  dtoCreateNotificationGroupRequestSchema,
} from '../models/dtoCreateNotificationGroupRequest';
import {
  DtoDeleteNotificationGroupRequest,
  dtoDeleteNotificationGroupRequestSchema,
} from '../models/dtoDeleteNotificationGroupRequest';
import {
  DtoListNotificationGroupRequest,
  dtoListNotificationGroupRequestSchema,
} from '../models/dtoListNotificationGroupRequest';
import {
  DtoNotificationGroupResponseEntity,
  dtoNotificationGroupResponseEntitySchema,
} from '../models/dtoNotificationGroupResponseEntity';
import {
  DtoRemoveUsersFromNotificationGroupRequest,
  dtoRemoveUsersFromNotificationGroupRequestSchema,
} from '../models/dtoRemoveUsersFromNotificationGroupRequest';
import {
  DtoUpdateNotificationGroupRequest,
  dtoUpdateNotificationGroupRequestSchema,
} from '../models/dtoUpdateNotificationGroupRequest';
import { array } from '../schema';
import { BaseApi } from './baseApi';
import { M400ManagementError } from '../errors/m400ManagementError';
import { M403ManagementError } from '../errors/m403ManagementError';
import { M404ManagementError } from '../errors/m404ManagementError';
import { M500ManagementError } from '../errors/m500ManagementError';
import { ManagementError } from '../errors/managementError';

export class SensorInsightsNotificationGroupsApi extends BaseApi {
  /**
   * @param body         Retrieve a notification group
   * @return Response from the API call
   */
  async sensorInsightsListNotificationGroupRequest(
    body: DtoListNotificationGroupRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DtoNotificationGroupResponseEntity[]>> {
    const req = this.createRequest(
      'POST',
      '/dm/v1/notificationGroups/actions/query'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, dtoListNotificationGroupRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, M400ManagementError, 'Bad Request');
    req.throwOn(401, ManagementError, 'UnAuthorized');
    req.throwOn(403, M403ManagementError, 'Forbidden');
    req.throwOn(404, M404ManagementError, 'Not Found');
    req.throwOn(406, ManagementError, 'Not Acceptable');
    req.throwOn(415, ManagementError, 'Unsupported media type');
    req.throwOn(429, ManagementError, 'Too many requests');
    req.throwOn(500, M500ManagementError, 'Internal server error.');
    req.defaultToError(ManagementError, 'Unexpected error');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(
      array(dtoNotificationGroupResponseEntitySchema),
      requestOptions
    );
  }

  /**
   * @param body         Partially update a notification group
   * @return Response from the API call
   */
  async sensorInsightsUpdateNotificationGroupRequest(
    body: DtoUpdateNotificationGroupRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DtoNotificationGroupResponseEntity>> {
    const req = this.createRequest('PATCH', '/dm/v1/notificationGroups');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, dtoUpdateNotificationGroupRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, M400ManagementError, 'Bad Request');
    req.throwOn(401, ManagementError, 'UnAuthorized');
    req.throwOn(403, M403ManagementError, 'Forbidden');
    req.throwOn(404, M404ManagementError, 'Not Found');
    req.throwOn(406, ManagementError, 'Not Acceptable');
    req.throwOn(415, ManagementError, 'Unsupported media type');
    req.throwOn(429, ManagementError, 'Too many requests');
    req.throwOn(500, M500ManagementError, 'Internal server error.');
    req.defaultToError(ManagementError, 'Unexpected error');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(
      dtoNotificationGroupResponseEntitySchema,
      requestOptions
    );
  }

  /**
   * @param body         Create a notification group
   * @return Response from the API call
   */
  async sensorInsightsCreateNotificationGroupRequest(
    body: DtoCreateNotificationGroupRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DtoNotificationGroupResponseEntity>> {
    const req = this.createRequest('POST', '/dm/v1/notificationGroups');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, dtoCreateNotificationGroupRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, M400ManagementError, 'Bad Request');
    req.throwOn(401, ManagementError, 'UnAuthorized');
    req.throwOn(403, M403ManagementError, 'Forbidden');
    req.throwOn(406, ManagementError, 'Not Acceptable');
    req.throwOn(415, ManagementError, 'Unsupported media type');
    req.throwOn(429, ManagementError, 'Too many requests');
    req.throwOn(500, M500ManagementError, 'Internal server error.');
    req.defaultToError(ManagementError, 'Unexpected error');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(
      dtoNotificationGroupResponseEntitySchema,
      requestOptions
    );
  }

  /**
   * @param payload Payload for the delete request.
   * @return Response from the API call
   */
  async sensorInsightsDeleteNotificationGroup(
    payload: DtoDeleteNotificationGroupRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE', '/dm/v1/notificationGroups');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      payload: [payload, dtoDeleteNotificationGroupRequestSchema],
    });
    req.query('payload', mapped.payload);
    req.throwOn(400, M400ManagementError, 'Bad Request');
    req.throwOn(401, ManagementError, 'UnAuthorized');
    req.throwOn(403, M403ManagementError, 'Forbidden');
    req.throwOn(404, M404ManagementError, 'Not Found');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.call(requestOptions);
  }

  /**
   * @param body         Add users to a notification group
   * @return Response from the API call
   */
  async sensorInsightsAddUsersToNotificationGroupRequest(
    body: DtoAddUsersToNotificationGroupRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'POST',
      '/dm/v1/notificationGroups/actions/add-users'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, dtoAddUsersToNotificationGroupRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, M400ManagementError, 'Bad Request');
    req.throwOn(401, ManagementError, 'UnAuthorized');
    req.throwOn(403, M403ManagementError, 'Forbidden');
    req.throwOn(404, M404ManagementError, 'Not Found');
    req.throwOn(406, ManagementError, 'Not Acceptable');
    req.throwOn(415, ManagementError, 'Unsupported media type');
    req.throwOn(429, ManagementError, 'Too many requests');
    req.throwOn(500, M500ManagementError, 'Internal server error.');
    req.defaultToError(ManagementError, 'Unexpected error');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.call(requestOptions);
  }

  /**
   * @param body         Remove users from a notification group
   * @return Response from the API call
   */
  async sensorInsightsRemoveUsersFromNotificationGroupRequest(
    body: DtoRemoveUsersFromNotificationGroupRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'POST',
      '/dm/v1/notificationGroups/actions/remove-users'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, dtoRemoveUsersFromNotificationGroupRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, M400ManagementError, 'Bad Request');
    req.throwOn(401, ManagementError, 'UnAuthorized');
    req.throwOn(403, M403ManagementError, 'Forbidden');
    req.throwOn(404, M404ManagementError, 'Not Found');
    req.throwOn(406, ManagementError, 'Not Acceptable');
    req.throwOn(415, ManagementError, 'Unsupported media type');
    req.throwOn(429, ManagementError, 'Too many requests');
    req.throwOn(500, M500ManagementError, 'Internal server error.');
    req.defaultToError(ManagementError, 'Unexpected error');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.call(requestOptions);
  }
}
