/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { Geofence, geofenceSchema } from '../models/geofence';
import { string } from '../schema';
import { BaseApi } from './baseApi';
import { MapDataResponseError } from '../errors/mapDataResponseError';

export class MapDataManagerApi extends BaseApi {
  /**
   * This endpoint allows the user to upload map messages in SAE J2735 MAP messages in ASN.1 UPER or JER
   * (JSON) formats. The MAP data message can have more than one intersections in it.
   * Note: The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and
   * Session/M2M tokens in order to call this API.
   *
   * @param vendorId     The VendorID set during the Vendor registration call.
   * @param body
   * @return Response from the API call
   */
  async uploadMapDataMessage(
    vendorId: string,
    body: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string>> {
    const req = this.createRequest('POST', '/api/v2/mapdata');
    req.baseUrl('IMP Server');
    const mapped = req.prepareArgs({
      vendorId: [vendorId, string()],
      body: [body, string()],
    });
    req.header('VendorID', mapped.vendorId);
    req.header('Content-Type', 'application/json');
    req.text(mapped.body);
    req.throwOn(400, MapDataResponseError, 'Invalid request');
    req.throwOn(401, MapDataResponseError, 'Unauthorized');
    req.throwOn(403, MapDataResponseError, 'Forbidden Request');
    req.throwOn(429, MapDataResponseError, 'Too Many Requests');
    req.throwOn(503, MapDataResponseError, 'Internal server Error');
    req.defaultToError(MapDataResponseError, 'Unexpected Error');
    req.authenticate([{ thingspaceOauth: true, sessionToken: true }]);
    return req.callAsText(requestOptions);
  }

  /**
   * This endpoint allows user to download SAE J2735 MAP messages in ASN.1 UPER format. The area for the
   * MAP messages is needed to be defined in the query.
   *
   * @param vendorId The VendorID set during the Vendor registration call.
   * @param geofence The area where the user wants to receive MAP data from.
   * @return Response from the API call
   */
  async downloadMapDataMessage(
    vendorId: string,
    geofence: Geofence,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string>> {
    const req = this.createRequest('GET', '/api/v2/mapdata');
    req.baseUrl('IMP Server');
    const mapped = req.prepareArgs({
      vendorId: [vendorId, string()],
      geofence: [geofence, geofenceSchema],
    });
    req.header('VendorID', mapped.vendorId);
    req.query('Geofence', mapped.geofence);
    req.throwOn(400, MapDataResponseError, 'Invalid request');
    req.throwOn(401, MapDataResponseError, 'Unauthorized');
    req.throwOn(403, MapDataResponseError, 'Forbidden Request');
    req.throwOn(429, MapDataResponseError, 'Too Many Requests');
    req.throwOn(503, MapDataResponseError, 'Internal server Error');
    req.defaultToError(MapDataResponseError, 'Unexpected Error');
    req.authenticate([{ thingspaceOauth: true, sessionToken: true }]);
    return req.callAsText(requestOptions);
  }
}
