/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { DtoBulkUpdate, dtoBulkUpdateSchema } from '../models/dtoBulkUpdate';
import {
  DtoListSmartAlertsRequest,
  dtoListSmartAlertsRequestSchema,
} from '../models/dtoListSmartAlertsRequest';
import {
  DtoPatchSmartAlertRequest,
  dtoPatchSmartAlertRequestSchema,
} from '../models/dtoPatchSmartAlertRequest';
import { UserSmartAlert, userSmartAlertSchema } from '../models/userSmartAlert';
import { array } from '../schema';
import { BaseApi } from './baseApi';
import { M400ManagementError } from '../errors/m400ManagementError';
import { M403ManagementError } from '../errors/m403ManagementError';
import { M404ManagementError } from '../errors/m404ManagementError';
import { M500ManagementError } from '../errors/m500ManagementError';
import { ManagementError } from '../errors/managementError';

export class SensorInsightsSmartAlertsApi extends BaseApi {
  /**
   * @param body         Retrieve a smart alert
   * @return Response from the API call
   */
  async sensorInsightsListSmartAlertsRequest(
    body: DtoListSmartAlertsRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UserSmartAlert[]>> {
    const req = this.createRequest('POST', '/dm/v1/smartAlerts/actions/query');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, dtoListSmartAlertsRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, M400ManagementError, 'Bad Request');
    req.throwOn(401, ManagementError, 'UnAuthorized');
    req.throwOn(403, M403ManagementError, 'Forbidden');
    req.throwOn(404, M404ManagementError, 'Not Found');
    req.throwOn(406, ManagementError, 'Not Acceptable');
    req.throwOn(415, ManagementError, 'Unsupported media type');
    req.throwOn(429, ManagementError, 'Too many requests');
    req.throwOn(500, M500ManagementError, 'Internal server error.');
    req.defaultToError(ManagementError, 'Unexpected error');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(array(userSmartAlertSchema), requestOptions);
  }

  /**
   * @param body         Partially update a smart alert
   * @return Response from the API call
   */
  async sensorInsightsPatchSmartAlertRequest(
    body: DtoPatchSmartAlertRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UserSmartAlert>> {
    const req = this.createRequest('PATCH', '/dm/v1/smartAlerts');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, dtoPatchSmartAlertRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, M400ManagementError, 'Bad Request');
    req.throwOn(401, ManagementError, 'UnAuthorized');
    req.throwOn(403, M403ManagementError, 'Forbidden');
    req.throwOn(404, M404ManagementError, 'Not Found');
    req.throwOn(406, ManagementError, 'Not Acceptable');
    req.throwOn(415, ManagementError, 'Unsupported media type');
    req.throwOn(429, ManagementError, 'Too many requests');
    req.throwOn(500, M500ManagementError, 'Internal server error.');
    req.defaultToError(ManagementError, 'Unexpected error');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(userSmartAlertSchema, requestOptions);
  }

  /**
   * @param body         Bulk update smart alerts
   * @return Response from the API call
   */
  async sensorInsightsBulkUpdate(
    body: DtoBulkUpdate,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UserSmartAlert>> {
    const req = this.createRequest(
      'POST',
      '/dm/v1/smartAlerts/actions/bulkupdate'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({ body: [body, dtoBulkUpdateSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, M400ManagementError, 'Bad Request');
    req.throwOn(401, ManagementError, 'UnAuthorized');
    req.throwOn(403, M403ManagementError, 'Forbidden');
    req.throwOn(404, M404ManagementError, 'Not Found');
    req.throwOn(406, ManagementError, 'Not Acceptable');
    req.throwOn(415, ManagementError, 'Unsupported media type');
    req.throwOn(429, ManagementError, 'Too many requests');
    req.throwOn(500, M500ManagementError, 'Internal server error.');
    req.defaultToError(ManagementError, 'Unexpected error');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(userSmartAlertSchema, requestOptions);
  }
}
