/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  SensorInsightsDeviceActionSetRequestBody,
  sensorInsightsDeviceActionSetRequestBodySchema,
} from '../models/containers/sensorInsightsDeviceActionSetRequestBody';
import {
  DtoDeviceActionSetResponse,
  dtoDeviceActionSetResponseSchema,
} from '../models/dtoDeviceActionSetResponse';
import {
  DtoExpandedDeviceResponse,
  dtoExpandedDeviceResponseSchema,
} from '../models/dtoExpandedDeviceResponse';
import {
  DtoLastReportedTimeRequest,
  dtoLastReportedTimeRequestSchema,
} from '../models/dtoLastReportedTimeRequest';
import {
  DtoLastReportedTimeResponse,
  dtoLastReportedTimeResponseSchema,
} from '../models/dtoLastReportedTimeResponse';
import {
  DtoListDeviceExperienceHistoryRequest,
  dtoListDeviceExperienceHistoryRequestSchema,
} from '../models/dtoListDeviceExperienceHistoryRequest';
import {
  DtoListDevicesRequest,
  dtoListDevicesRequestSchema,
} from '../models/dtoListDevicesRequest';
import {
  DtoListNetworkExperienceHistoryRequest,
  dtoListNetworkExperienceHistoryRequestSchema,
} from '../models/dtoListNetworkExperienceHistoryRequest';
import {
  DtoPatchDeviceRequest,
  dtoPatchDeviceRequestSchema,
} from '../models/dtoPatchDeviceRequest';
import { ResourceDevice, resourceDeviceSchema } from '../models/resourceDevice';
import {
  UserDeviceExperienceHistory,
  userDeviceExperienceHistorySchema,
} from '../models/userDeviceExperienceHistory';
import {
  UserNetworkExperienceHistory,
  userNetworkExperienceHistorySchema,
} from '../models/userNetworkExperienceHistory';
import { array } from '../schema';
import { BaseApi } from './baseApi';
import { M400ManagementError } from '../errors/m400ManagementError';
import { M403ManagementError } from '../errors/m403ManagementError';
import { M404ManagementError } from '../errors/m404ManagementError';
import { M500ManagementError } from '../errors/m500ManagementError';
import { ManagementError } from '../errors/managementError';

export class SensorInsightsDevicesApi extends BaseApi {
  /**
   * @param body         List all device details on an account
   * @return Response from the API call
   */
  async sensorInsightsListDevicesRequest(
    body: DtoListDevicesRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DtoExpandedDeviceResponse[]>> {
    const req = this.createRequest('POST', '/dm/v1/devices/actions/query');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, dtoListDevicesRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ManagementError, 'Bad Request');
    req.throwOn(401, ManagementError, 'UnAuthorized');
    req.throwOn(403, ManagementError, 'Forbidden');
    req.throwOn(404, ManagementError, 'Not Found');
    req.throwOn(406, ManagementError, 'Not Acceptable');
    req.throwOn(415, ManagementError, 'Unsupported media type');
    req.throwOn(429, ManagementError, 'Too many requests');
    req.throwOn(500, ManagementError, 'Internal server error.');
    req.defaultToError(ManagementError, 'Unexpected error');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(
      array(dtoExpandedDeviceResponseSchema),
      requestOptions
    );
  }

  /**
   * @param body         Partially update a device's details
   * @return Response from the API call
   */
  async sensorInsightsPatchDeviceRequest(
    body: DtoPatchDeviceRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResourceDevice>> {
    const req = this.createRequest('PATCH', '/dm/v1/devices');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, dtoPatchDeviceRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, M400ManagementError, 'Bad Request');
    req.throwOn(401, ManagementError, 'UnAuthorized');
    req.throwOn(403, M403ManagementError, 'Forbidden');
    req.throwOn(404, M404ManagementError, 'Not Found');
    req.throwOn(406, ManagementError, 'Not Acceptable');
    req.throwOn(415, ManagementError, 'Unsupported media type');
    req.throwOn(429, ManagementError, 'Too many requests');
    req.throwOn(500, M500ManagementError, 'Internal server error.');
    req.defaultToError(ManagementError, 'Unexpected error');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(resourceDeviceSchema, requestOptions);
  }

  /**
   * @param body         Get the last reported information for a device
   * @return Response from the API call
   */
  async sensorInsightsLastReportedTimeRequest(
    body: DtoLastReportedTimeRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DtoLastReportedTimeResponse>> {
    const req = this.createRequest('POST', '/dm/v1/devices/lastreported');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, dtoLastReportedTimeRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, M400ManagementError, 'Bad Request');
    req.throwOn(403, M403ManagementError, 'Forbidden');
    req.throwOn(404, M404ManagementError, 'Not Found');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(dtoLastReportedTimeResponseSchema, requestOptions);
  }

  /**
   * @param body         Set device configuration
   * @return Response from the API call
   */
  async sensorInsightsDeviceActionSetRequest(
    body: SensorInsightsDeviceActionSetRequestBody,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DtoDeviceActionSetResponse>> {
    const req = this.createRequest('POST', '/dm/v1/devices/actions/set');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, sensorInsightsDeviceActionSetRequestBodySchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, M400ManagementError, 'Bad Request');
    req.throwOn(403, M403ManagementError, 'Forbidden');
    req.throwOn(404, M404ManagementError, 'Not Found');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(dtoDeviceActionSetResponseSchema, requestOptions);
  }

  /**
   * @param body         List the device experience
   * @return Response from the API call
   */
  async sensorInsightsListDeviceExperienceHistoryRequest(
    body: DtoListDeviceExperienceHistoryRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UserDeviceExperienceHistory[]>> {
    const req = this.createRequest(
      'POST',
      '/dm/v1/devices/experience/actions/query'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, dtoListDeviceExperienceHistoryRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, M400ManagementError, 'Bad Request');
    req.throwOn(401, ManagementError, 'UnAuthorized');
    req.throwOn(403, M403ManagementError, 'Forbidden');
    req.throwOn(404, M404ManagementError, 'Not Found');
    req.throwOn(406, ManagementError, 'Not Acceptable');
    req.throwOn(415, ManagementError, 'Unsupported media type');
    req.throwOn(429, ManagementError, 'Too many requests');
    req.throwOn(500, M500ManagementError, 'Internal server error.');
    req.defaultToError(ManagementError, 'Unexpected error');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(
      array(userDeviceExperienceHistorySchema),
      requestOptions
    );
  }

  /**
   * @param body         List the network experience
   * @return Response from the API call
   */
  async sensorInsightsListNetworkExperienceHistoryRequest(
    body: DtoListNetworkExperienceHistoryRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UserNetworkExperienceHistory[]>> {
    const req = this.createRequest(
      'POST',
      '/dm/v1/devices/networkexperience/actions/query'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, dtoListNetworkExperienceHistoryRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, M400ManagementError, 'Bad Request');
    req.throwOn(401, ManagementError, 'UnAuthorized');
    req.throwOn(403, M403ManagementError, 'Forbidden');
    req.throwOn(404, M404ManagementError, 'Not Found');
    req.throwOn(406, ManagementError, 'Not Acceptable');
    req.throwOn(415, ManagementError, 'Unsupported media type');
    req.throwOn(429, ManagementError, 'Too many requests');
    req.throwOn(500, M500ManagementError, 'Internal server error.');
    req.defaultToError(ManagementError, 'Unexpected error');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(
      array(userNetworkExperienceHistorySchema),
      requestOptions
    );
  }
}
