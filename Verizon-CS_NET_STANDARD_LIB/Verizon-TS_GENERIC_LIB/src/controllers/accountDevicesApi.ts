/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { DeviceImei, deviceImeiSchema } from '../models/deviceImei';
import {
  DeviceListResult,
  deviceListResultSchema,
} from '../models/deviceListResult';
import {
  DevicesProtocol,
  devicesProtocolSchema,
} from '../models/devicesProtocol';
import {
  V3AccountDeviceList,
  v3AccountDeviceListSchema,
} from '../models/v3AccountDeviceList';
import { optional, string } from '../schema';
import { BaseApi } from './baseApi';
import { FotaV3ResultError } from '../errors/fotaV3ResultError';

export class AccountDevicesApi extends BaseApi {
  /**
   * Retrieve account device information such as reported firmware on the devices.
   *
   * @param acc              Account identifier.
   * @param lastSeenDeviceId Last seen device identifier.
   * @param protocol         Filter to retrieve a specific protocol type used.
   * @return Response from the API call
   */
  async getAccountDeviceInformation(
    acc: string,
    lastSeenDeviceId?: string,
    protocol?: DevicesProtocol,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3AccountDeviceList>> {
    const req = this.createRequest('GET');
    req.baseUrl('Software Management V3');
    const mapped = req.prepareArgs({
      acc: [acc, string()],
      lastSeenDeviceId: [lastSeenDeviceId, optional(string())],
      protocol: [protocol, optional(devicesProtocolSchema)],
    });
    req.query('lastSeenDeviceId', mapped.lastSeenDeviceId);
    req.query('protocol', mapped.protocol);
    req.appendTemplatePath`/devices/${mapped.acc}`;
    req.throwOn(400, FotaV3ResultError, 'Unexpected error.');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(v3AccountDeviceListSchema, requestOptions);
  }

  /**
   * Retrieve device information for a list of devices on an account.
   *
   * @param acc          Account identifier.
   * @param body         Request device list information.
   * @return Response from the API call
   */
  async listAccountDevicesInformation(
    acc: string,
    body: DeviceImei,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DeviceListResult>> {
    const req = this.createRequest('POST');
    req.baseUrl('Software Management V3');
    const mapped = req.prepareArgs({
      acc: [acc, string()],
      body: [body, deviceImeiSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/devices/${mapped.acc}`;
    req.throwOn(400, FotaV3ResultError, 'Unexpected error.');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(deviceListResultSchema, requestOptions);
  }
}
