/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  DtoQueryMetrics,
  dtoQueryMetricsSchema,
} from '../models/dtoQueryMetrics';
import {
  DtoQueryMetricsResponse,
  dtoQueryMetricsResponseSchema,
} from '../models/dtoQueryMetricsResponse';
import { BaseApi } from './baseApi';
import { M400ManagementError } from '../errors/m400ManagementError';
import { M403ManagementError } from '../errors/m403ManagementError';
import { M500ManagementError } from '../errors/m500ManagementError';
import { ManagementError } from '../errors/managementError';

export class SensorInsightsSmartAlertMetricsApi extends BaseApi {
  /**
   * Get Device Alerts for the most recent daily period, up to 30 days.
   *
   * @param body         Daily period requested, up to 30 days.
   * @return Response from the API call
   */
  async sensorinsightsmetricsquery(
    body: DtoQueryMetrics,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DtoQueryMetricsResponse>> {
    const req = this.createRequest(
      'POST',
      '/dm/v1/smartAlerts/actions/metrics'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({ body: [body, dtoQueryMetricsSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, M400ManagementError, 'Bad Request');
    req.throwOn(401, ManagementError, 'UnAuthorized');
    req.throwOn(403, M403ManagementError, 'Forbidden');
    req.throwOn(500, M500ManagementError, 'Internal server error.');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(dtoQueryMetricsResponseSchema, requestOptions);
  }
}
