/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  EsimProfileRequest,
  esimProfileRequestSchema,
} from '../models/esimProfileRequest';
import {
  EsimProfileRequest2,
  esimProfileRequest2Schema,
} from '../models/esimProfileRequest2';
import {
  EsimRequestResponse,
  esimRequestResponseSchema,
} from '../models/esimRequestResponse';
import {
  ProfileRequest2,
  profileRequest2Schema,
} from '../models/profileRequest2';
import { BaseApi } from './baseApi';
import { EsimRestErrorResponseError } from '../errors/esimRestErrorResponseError';

export class SimActionsApi extends BaseApi {
  /**
   * System assign a new activation code to reactivate a deactivated device. **Note:** the previously
   * assigned ICCID must be used to request a new activation code.
   *
   * @param body         Device Profile Query
   * @return Response from the API call
   */
  async newactivatecode(
    body: EsimProfileRequest2,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<EsimRequestResponse>> {
    const req = this.createRequest(
      'POST',
      '/m2m/v1/devices/profile/actions/renew_activation_code'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({ body: [body, esimProfileRequest2Schema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, EsimRestErrorResponseError, 'Bad request');
    req.throwOn(401, EsimRestErrorResponseError, 'Unauthorized');
    req.throwOn(403, EsimRestErrorResponseError, 'Forbidden');
    req.throwOn(404, EsimRestErrorResponseError, 'Not Found / Does not exist');
    req.throwOn(
      406,
      EsimRestErrorResponseError,
      'Format / Request Unacceptable'
    );
    req.throwOn(429, EsimRestErrorResponseError, 'Too many requests');
    req.defaultToError(EsimRestErrorResponseError, 'Error response');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(esimRequestResponseSchema, requestOptions);
  }

  /**
   * Uses the profile to activate the SIM.
   *
   * @param body         Device Profile Query
   * @return Response from the API call
   */
  async setactivateUsingPost(
    body: EsimProfileRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<EsimRequestResponse>> {
    const req = this.createRequest(
      'POST',
      '/m2m/v1/devices/profile/actions/activate'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({ body: [body, esimProfileRequestSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, EsimRestErrorResponseError, 'Bad request');
    req.throwOn(401, EsimRestErrorResponseError, 'Unauthorized');
    req.throwOn(403, EsimRestErrorResponseError, 'Forbidden');
    req.throwOn(404, EsimRestErrorResponseError, 'Not Found / Does not exist');
    req.throwOn(
      406,
      EsimRestErrorResponseError,
      'Format / Request Unacceptable'
    );
    req.throwOn(429, EsimRestErrorResponseError, 'Too many requests');
    req.defaultToError(EsimRestErrorResponseError, 'Error response');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(esimRequestResponseSchema, requestOptions);
  }

  /**
   * Uses the profile to deactivate the SIM.
   *
   * @param body         Device Profile Query
   * @return Response from the API call
   */
  async setdeactivateUsingPost(
    body: ProfileRequest2,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<EsimRequestResponse>> {
    const req = this.createRequest(
      'POST',
      '/m2m/v1/devices/profile/actions/deactivate'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({ body: [body, profileRequest2Schema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, EsimRestErrorResponseError, 'Bad request');
    req.throwOn(401, EsimRestErrorResponseError, 'Unauthorized');
    req.throwOn(403, EsimRestErrorResponseError, 'Forbidden');
    req.throwOn(404, EsimRestErrorResponseError, 'Not Found / Does not exist');
    req.throwOn(
      406,
      EsimRestErrorResponseError,
      'Format / Request Unacceptable'
    );
    req.throwOn(429, EsimRestErrorResponseError, 'Too many requests');
    req.defaultToError(EsimRestErrorResponseError, 'Error response');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(esimRequestResponseSchema, requestOptions);
  }
}
