/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  ConnectivityManagementSuccessResult,
  connectivityManagementSuccessResultSchema,
} from '../models/connectivityManagementSuccessResult';
import {
  DeviceManagementResult,
  deviceManagementResultSchema,
} from '../models/deviceManagementResult';
import {
  SmsMessagesQueryResult,
  smsMessagesQueryResultSchema,
} from '../models/smsMessagesQueryResult';
import { SmsSendRequest, smsSendRequestSchema } from '../models/smsSendRequest';
import { bigint, optional, string } from '../schema';
import { BaseApi } from './baseApi';
import { ConnectivityManagementResultError } from '../errors/connectivityManagementResultError';

export class SmsApi extends BaseApi {
  /**
   * The messages are queued on the ThingSpace Platform and sent as soon as possible, but they may be
   * delayed due to traffic and routing considerations.
   *
   * @param body         Request to send SMS.
   * @return Response from the API call
   */
  async sendSmsToDevice(
    body: SmsSendRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DeviceManagementResult>> {
    const req = this.createRequest('POST', '/m2m/v1/sms');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({ body: [body, smsSendRequestSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ConnectivityManagementResultError, 'Error response.');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(deviceManagementResultSchema, requestOptions);
  }

  /**
   * When HTTP status is 202, a URL will be returned in the Location header of the form
   * /sms/{aname}/history?next={token}. This URL can be used to request the next set of messages.
   *
   * @param aname Account name.
   * @param next  Continue the previous query from the URL in Location Header.
   * @return Response from the API call
   */
  async listDevicesSmsMessages(
    aname: string,
    next?: bigint,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SmsMessagesQueryResult>> {
    const req = this.createRequest('GET');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      aname: [aname, string()],
      next: [next, optional(bigint())],
    });
    req.query('next', mapped.next);
    req.appendTemplatePath`/m2m/v1/sms/${mapped.aname}/history`;
    req.throwOn(400, ConnectivityManagementResultError, 'Error response.');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(smsMessagesQueryResultSchema, requestOptions);
  }

  /**
   * Tells the ThingSpace Platform to start sending mobile-originated SMS messages through the
   * EnhancedConnectivityService callback service. SMS messages from devices are queued until they are
   * retrieved by your application, either by callback or synchronously with GET
   * /sms/{accountName}/history.
   *
   * @param aname Account name.
   * @return Response from the API call
   */
  async startQueuedSmsDelivery(
    aname: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConnectivityManagementSuccessResult>> {
    const req = this.createRequest('PUT');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({ aname: [aname, string()] });
    req.appendTemplatePath`/m2m/v1/sms/${mapped.aname}/startCallbacks`;
    req.throwOn(400, ConnectivityManagementResultError, 'Error response.');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(
      connectivityManagementSuccessResultSchema,
      requestOptions
    );
  }
}
