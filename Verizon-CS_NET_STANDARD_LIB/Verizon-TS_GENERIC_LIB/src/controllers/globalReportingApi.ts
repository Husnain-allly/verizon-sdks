/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  EsimGlobalDeviceList,
  esimGlobalDeviceListSchema,
} from '../models/esimGlobalDeviceList';
import {
  EsimProvhistoryRequest,
  esimProvhistoryRequestSchema,
} from '../models/esimProvhistoryRequest';
import {
  EsimRequestResponse,
  esimRequestResponseSchema,
} from '../models/esimRequestResponse';
import { BaseApi } from './baseApi';
import { EsimRestErrorResponseError } from '../errors/esimRestErrorResponseError';

export class GlobalReportingApi extends BaseApi {
  /**
   * Retrieve the provisioning history of a specific device or devices.
   *
   * @param body         Device Provisioning History
   * @return Response from the API call
   */
  async deviceprovhistoryUsingPost(
    body: EsimProvhistoryRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<EsimRequestResponse>> {
    const req = this.createRequest(
      'POST',
      '/m2m/v2/devices/history/actions/list'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, esimProvhistoryRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, EsimRestErrorResponseError, 'Bad request');
    req.throwOn(401, EsimRestErrorResponseError, 'Unauthorized');
    req.throwOn(403, EsimRestErrorResponseError, 'Forbidden');
    req.throwOn(404, EsimRestErrorResponseError, 'Not Found / Does not exist');
    req.throwOn(
      406,
      EsimRestErrorResponseError,
      'Format / Request Unacceptable'
    );
    req.throwOn(429, EsimRestErrorResponseError, 'Too many requests');
    req.defaultToError(EsimRestErrorResponseError, 'Error response');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(esimRequestResponseSchema, requestOptions);
  }

  /**
   * Retrieve a list of all devices associated with an account.
   *
   * @param body         Device List
   * @return Response from the API call
   */
  async retrieveGlobalList(
    body: EsimGlobalDeviceList,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<EsimRequestResponse>> {
    const req = this.createRequest('POST', '/m2m/v2/devices/actions/list');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, esimGlobalDeviceListSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, EsimRestErrorResponseError, 'Bad request');
    req.throwOn(401, EsimRestErrorResponseError, 'Unauthorized');
    req.throwOn(403, EsimRestErrorResponseError, 'Forbidden');
    req.throwOn(404, EsimRestErrorResponseError, 'Not Found / Does not exist');
    req.throwOn(
      406,
      EsimRestErrorResponseError,
      'Format / Request Unacceptable'
    );
    req.throwOn(429, EsimRestErrorResponseError, 'Too many requests');
    req.defaultToError(EsimRestErrorResponseError, 'Error response');
    req.authenticate([{ thingspaceOauth: true, vzM2MToken: true }]);
    return req.callAsJson(esimRequestResponseSchema, requestOptions);
  }
}
