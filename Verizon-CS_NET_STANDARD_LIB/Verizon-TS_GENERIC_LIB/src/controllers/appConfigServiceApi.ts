/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  ConfigurationListItem,
  configurationListItemSchema,
} from '../models/configurationListItem';
import {
  GeoFenceConfigurationRequest,
  geoFenceConfigurationRequestSchema,
} from '../models/geoFenceConfigurationRequest';
import {
  GeoFenceConfigurationResponse,
  geoFenceConfigurationResponseSchema,
} from '../models/geoFenceConfigurationResponse';
import {
  GeoFenceConfigurationUpdateRequest,
  geoFenceConfigurationUpdateRequestSchema,
} from '../models/geoFenceConfigurationUpdateRequest';
import { array, string } from '../schema';
import { BaseApi } from './baseApi';
import { AppConfigResponseError } from '../errors/appConfigResponseError';

export class AppConfigServiceApi extends BaseApi {
  /**
   * This endpoint fetches and returns the list of configurations defined by the Vendor. The list
   * contains the configurations' identifier, name, description, and active flag. The vendor ID is
   * provided when the configuration is created through the POST request.
   *
   * Note: The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and
   * Session/M2M tokens in order to call this API.
   *
   *
   * @param vendorId The vendor's identifier
   * @return Response from the API call
   */
  async getConfigurationList(
    vendorId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConfigurationListItem[]>> {
    const req = this.createRequest(
      'GET',
      '/api/v1/application/configurations/geofence/ids'
    );
    req.baseUrl('IMP Server');
    const mapped = req.prepareArgs({ vendorId: [vendorId, string()] });
    req.header('VendorID', mapped.vendorId);
    req.throwOn(403, AppConfigResponseError, 'Forbidden');
    req.throwOn(404, AppConfigResponseError, 'Configuration not found');
    req.throwOn(429, AppConfigResponseError, 'Too many requests');
    req.defaultToError(AppConfigResponseError, 'unexpected error');
    req.authenticate([{ thingspaceOauth: true, sessionToken: true }]);
    return req.callAsJson(array(configurationListItemSchema), requestOptions);
  }

  /**
   * This endpoint fetches and returns a specific configuration's details. The configuration ID parameter,
   * which was provided when the configuration was created through the POST request, is need to retrieve
   * the configuration details.
   *
   * Note: The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and
   * Session/M2M tokens in order to call this API.
   *
   *
   * @param id       The configuration identifier
   * @param vendorId The vendor's identifier
   * @return Response from the API call
   */
  async getConfiguration(
    id: string,
    vendorId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GeoFenceConfigurationResponse>> {
    const req = this.createRequest(
      'GET',
      '/api/v1/application/configurations/geofence'
    );
    req.baseUrl('IMP Server');
    const mapped = req.prepareArgs({
      id: [id, string()],
      vendorId: [vendorId, string()],
    });
    req.header('VendorID', mapped.vendorId);
    req.query('id', mapped.id);
    req.throwOn(403, AppConfigResponseError, 'Forbidden');
    req.throwOn(404, AppConfigResponseError, 'Configuration not found');
    req.throwOn(429, AppConfigResponseError, 'Too many requests');
    req.defaultToError(AppConfigResponseError, 'unexpected error');
    req.authenticate([{ thingspaceOauth: true, sessionToken: true }]);
    return req.callAsJson(geoFenceConfigurationResponseSchema, requestOptions);
  }

  /**
   * This endpoint creates a new configuration in the system. The data for the new configuration should
   * be provided as JSON in the body of the POST request. The system will return with a unique ID for the
   * configuration, which is needed for any further manipulation (update or delete) of the configuration.
   *
   * Note: The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and
   * Session/M2M tokens in order to call this API.
   *
   *
   * @param vendorId     The vendor's identifier
   * @param body
   * @return Response from the API call
   */
  async createConfiguration(
    vendorId: string,
    body: GeoFenceConfigurationRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GeoFenceConfigurationResponse>> {
    const req = this.createRequest(
      'POST',
      '/api/v1/application/configurations/geofence'
    );
    req.baseUrl('IMP Server');
    const mapped = req.prepareArgs({
      vendorId: [vendorId, string()],
      body: [body, geoFenceConfigurationRequestSchema],
    });
    req.header('VendorID', mapped.vendorId);
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, AppConfigResponseError, 'Invalid configuration');
    req.throwOn(403, AppConfigResponseError, 'Forbidden');
    req.throwOn(429, AppConfigResponseError, 'Too many requests');
    req.defaultToError(AppConfigResponseError, 'unexpected error');
    req.authenticate([{ thingspaceOauth: true, sessionToken: true }]);
    return req.callAsJson(geoFenceConfigurationResponseSchema, requestOptions);
  }

  /**
   * This endpoint updates an existing configuration. Similar to POST, the updated data for the
   * configuration should be provided as JSON in the body of the PUT request. The configuration ID
   * parameter, which was provided by the POST (create) operation, is required to do any updates on the
   * configuration.
   *
   * Note: The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and
   * Session/M2M tokens in order to call this API.
   *
   *
   * @param vendorId     The vendor's identifier
   * @param id           The configuration identifier
   * @param body
   * @return Response from the API call
   */
  async updateConfiguration(
    vendorId: string,
    id: string,
    body: GeoFenceConfigurationUpdateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'PUT',
      '/api/v1/application/configurations/geofence'
    );
    req.baseUrl('IMP Server');
    const mapped = req.prepareArgs({
      vendorId: [vendorId, string()],
      id: [id, string()],
      body: [body, geoFenceConfigurationUpdateRequestSchema],
    });
    req.header('VendorID', mapped.vendorId);
    req.header('Content-Type', 'application/json');
    req.query('id', mapped.id);
    req.json(mapped.body);
    req.throwOn(400, AppConfigResponseError, 'Invalid configuration');
    req.throwOn(403, AppConfigResponseError, 'Forbidden');
    req.throwOn(404, AppConfigResponseError, 'Configuration not found');
    req.throwOn(429, AppConfigResponseError, 'Too many requests');
    req.defaultToError(AppConfigResponseError, 'unexpected error');
    req.authenticate([{ thingspaceOauth: true, sessionToken: true }]);
    return req.call(requestOptions);
  }

  /**
   * This endpoint deletes a specific configuration from the system. It requires the configuration ID
   * parameter, which was provided by the POST (create) operation.
   *
   * Note: The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and
   * Session/M2M tokens in order to call this API.
   *
   *
   * @param vendorId The vendor's identifier
   * @param id       The configuration identifier
   * @return Response from the API call
   */
  async deleteConfiguration(
    vendorId: string,
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'DELETE',
      '/api/v1/application/configurations/geofence'
    );
    req.baseUrl('IMP Server');
    const mapped = req.prepareArgs({
      vendorId: [vendorId, string()],
      id: [id, string()],
    });
    req.header('VendorID', mapped.vendorId);
    req.query('id', mapped.id);
    req.throwOn(403, AppConfigResponseError, 'Forbidden');
    req.throwOn(429, AppConfigResponseError, 'Too many requests');
    req.defaultToError(AppConfigResponseError, 'unexpected error');
    req.authenticate([{ thingspaceOauth: true, sessionToken: true }]);
    return req.call(requestOptions);
  }
}
