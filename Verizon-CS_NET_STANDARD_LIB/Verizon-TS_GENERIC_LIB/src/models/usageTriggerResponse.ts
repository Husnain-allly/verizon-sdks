/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  boolean,
  optional,
  Schema,
  string,
  typedExpandoObject,
  unknown,
} from '../schema';
import { ServiceName, serviceNameSchema } from './serviceName';

export interface UsageTriggerResponse {
  /** Unique usage triggerId */
  triggerId: string;
  /** Usage trigger name */
  triggerName: string;
  /** Account name */
  accountName: string;
  /** Service name */
  serviceName: ServiceName;
  /** Percent of subscription at which trigger will send an alert */
  thresholdValue: string;
  /** allowExcess determines whether to restrict usage after exceeds limits */
  allowExcess: boolean;
  /** Send SMS (text) alerts when the thresholdValue is reached. */
  sendSmsNotification: boolean;
  /** comma seperated value of list of Phone numbers for SMS notifications */
  smsPhoneNumbers: string;
  /** Send email alerts when the thresholdValue is reached. */
  sendEmailNotification: boolean;
  /** comma seperated value of list of Email addresses for Email notifications */
  emailAddresses: string;
  /** UTC Date when the usage trigger was created */
  createDate: string;
  /** UTC Date when the usage trigger was last updated */
  updateDate: string;
  additionalProperties?: Record<string, unknown>;
}

export const usageTriggerResponseSchema: Schema<UsageTriggerResponse> = typedExpandoObject(
  {
    triggerId: ['triggerId', string()],
    triggerName: ['triggerName', string()],
    accountName: ['accountName', string()],
    serviceName: ['serviceName', serviceNameSchema],
    thresholdValue: ['thresholdValue', string()],
    allowExcess: ['allowExcess', boolean()],
    sendSmsNotification: ['sendSmsNotification', boolean()],
    smsPhoneNumbers: ['smsPhoneNumbers', string()],
    sendEmailNotification: ['sendEmailNotification', boolean()],
    emailAddresses: ['emailAddresses', string()],
    createDate: ['createDate', string()],
    updateDate: ['updateDate', string()],
  },
  'additionalProperties',
  optional(unknown())
);
