/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { oneOf, Schema, validateAndMap } from '../../schema';
import { Message, messageSchema } from '../message';
import { Message1, message1Schema } from '../message1';
import { Message2, message2Schema } from '../message2';

/** This is a container type for one-of types. */
export type Message3 = Message | Message1 | Message2;

export const message3Schema: Schema<Message3> = oneOf([
  messageSchema,
  message1Schema,
  message2Schema,
]);

export namespace Message3 {
  /**
   * Validation method to narrow down union type to Message type case.
   *
   * This is Message case.
   */
  export function isMessage(value: unknown): value is Message {
    const validationResult = validateAndMap(value, messageSchema);
    return validationResult.errors === false;
  }

  /**
   * Validation method to narrow down union type to Message1 type case.
   *
   * This is Message1 case.
   */
  export function isMessage1(value: unknown): value is Message1 {
    const validationResult = validateAndMap(value, message1Schema);
    return validationResult.errors === false;
  }

  /**
   * Validation method to narrow down union type to Message2 type case.
   *
   * This is Message2 case.
   */
  export function isMessage2(value: unknown): value is Message2 {
    const validationResult = validateAndMap(value, message2Schema);
    return validationResult.errors === false;
  }
}
