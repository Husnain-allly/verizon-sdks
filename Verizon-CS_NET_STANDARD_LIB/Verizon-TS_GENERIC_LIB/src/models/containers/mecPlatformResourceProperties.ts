/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { array, oneOf, Schema, validateAndMap } from '../../schema';
import {
  MecPlatformsAdditionalSupportInfo,
  mecPlatformsAdditionalSupportInfoSchema,
} from '../mecPlatformsAdditionalSupportInfo';

/** This is a container type for one-of types. */
export type MecPlatformResourceProperties =
  | MecPlatformsAdditionalSupportInfo[]
  | MecPlatformsAdditionalSupportInfo;

export const mecPlatformResourcePropertiesSchema: Schema<MecPlatformResourceProperties> = oneOf(
  [
    array(mecPlatformsAdditionalSupportInfoSchema),
    mecPlatformsAdditionalSupportInfoSchema,
  ]
);

export namespace MecPlatformResourceProperties {
  /**
   * Validation method to narrow down union type to MecPlatformsAdditionalSupportInfo[] type case.
   *
   * This is Array of MECPlatformsAdditionalSupportInfo case.
   */
  export function isArrayOfMecPlatformsAdditionalSupportInfo(
    value: unknown
  ): value is MecPlatformsAdditionalSupportInfo[] {
    if (!Array.isArray(value)) {
      return false;
    }
    const validationResult = validateAndMap(
      value,
      array(mecPlatformsAdditionalSupportInfoSchema)
    );
    return validationResult.errors === false;
  }

  /**
   * Validation method to narrow down union type to MecPlatformsAdditionalSupportInfo type case.
   *
   * This is MECPlatformsAdditionalSupportInfo case.
   */
  export function isMecPlatformsAdditionalSupportInfo(
    value: unknown
  ): value is MecPlatformsAdditionalSupportInfo {
    const validationResult = validateAndMap(
      value,
      mecPlatformsAdditionalSupportInfoSchema
    );
    return validationResult.errors === false;
  }
}
