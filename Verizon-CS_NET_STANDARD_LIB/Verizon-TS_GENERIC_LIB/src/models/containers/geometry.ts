/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { oneOf, Schema, validateAndMap } from '../../schema';
import { LineString, lineStringSchema } from '../lineString';
import { MultiLineString, multiLineStringSchema } from '../multiLineString';
import { MultiPolygon, multiPolygonSchema } from '../multiPolygon';
import { Polygon, polygonSchema } from '../polygon';

/** This is a container type for one-of types. */
export type Geometry = LineString | Polygon | MultiLineString | MultiPolygon;

const discriminatorMap = {
  'LineString': lineStringSchema,
  'Polygon': polygonSchema,
  'MultiLineString': multiLineStringSchema,
  'MultiPolygon': multiPolygonSchema,
};

export const geometrySchema: Schema<Geometry> = oneOf(
  [lineStringSchema, polygonSchema, multiLineStringSchema, multiPolygonSchema],
  discriminatorMap,
  'type'
);

export namespace Geometry {
  /**
   * Validation method to narrow down union type to LineString type case.
   *
   * This is LineString case.
   */
  export function isLineString(value: unknown): value is LineString {
    const validationResult = validateAndMap(value, lineStringSchema);
    return validationResult.errors === false;
  }

  /**
   * Validation method to narrow down union type to Polygon type case.
   *
   * This is Polygon case.
   */
  export function isPolygon(value: unknown): value is Polygon {
    const validationResult = validateAndMap(value, polygonSchema);
    return validationResult.errors === false;
  }

  /**
   * Validation method to narrow down union type to MultiLineString type case.
   *
   * This is MultiLineString case.
   */
  export function isMultiLineString(value: unknown): value is MultiLineString {
    const validationResult = validateAndMap(value, multiLineStringSchema);
    return validationResult.errors === false;
  }

  /**
   * Validation method to narrow down union type to MultiPolygon type case.
   *
   * This is MultiPolygon case.
   */
  export function isMultiPolygon(value: unknown): value is MultiPolygon {
    const validationResult = validateAndMap(value, multiPolygonSchema);
    return validationResult.errors === false;
  }
}
