/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { anyOf, Schema, validateAndMap } from '../../schema';
import {
  AccountGroupShareUpdateTriggerRequest,
  accountGroupShareUpdateTriggerRequestSchema,
} from '../accountGroupShareUpdateTriggerRequest';
import {
  AccountLevelUpdateTriggerRequest,
  accountLevelUpdateTriggerRequestSchema,
} from '../accountLevelUpdateTriggerRequest';
import {
  AccountShareUpdateTriggerRequest,
  accountShareUpdateTriggerRequestSchema,
} from '../accountShareUpdateTriggerRequest';
import {
  DeviceLevelUpdateTriggerRequest,
  deviceLevelUpdateTriggerRequestSchema,
} from '../deviceLevelUpdateTriggerRequest';
import {
  PayAsYouGoUpdateTriggerRequest,
  payAsYouGoUpdateTriggerRequestSchema,
} from '../payAsYouGoUpdateTriggerRequest';
import {
  Updatetriggerchunk,
  updatetriggerchunkSchema,
} from '../updatetriggerchunk';

/** This is a container type for any-of types. */
export type UpdateTriggerRulesBody =
  | AccountLevelUpdateTriggerRequest
  | DeviceLevelUpdateTriggerRequest
  | AccountGroupShareUpdateTriggerRequest
  | AccountShareUpdateTriggerRequest
  | PayAsYouGoUpdateTriggerRequest
  | Updatetriggerchunk;

export const updateTriggerRulesBodySchema: Schema<UpdateTriggerRulesBody> = anyOf(
  [
    accountLevelUpdateTriggerRequestSchema,
    deviceLevelUpdateTriggerRequestSchema,
    accountGroupShareUpdateTriggerRequestSchema,
    accountShareUpdateTriggerRequestSchema,
    payAsYouGoUpdateTriggerRequestSchema,
    updatetriggerchunkSchema,
  ]
);

export namespace UpdateTriggerRulesBody {
  /**
   * Validation method to narrow down union type to AccountLevelUpdateTriggerRequest type case.
   *
   * This is accountLevelUpdateTriggerRequest case.
   */
  export function isAccountLevelUpdateTriggerRequest(
    value: unknown
  ): value is AccountLevelUpdateTriggerRequest {
    const validationResult = validateAndMap(
      value,
      accountLevelUpdateTriggerRequestSchema
    );
    return validationResult.errors === false;
  }

  /**
   * Validation method to narrow down union type to DeviceLevelUpdateTriggerRequest type case.
   *
   * This is deviceLevelUpdateTriggerRequest case.
   */
  export function isDeviceLevelUpdateTriggerRequest(
    value: unknown
  ): value is DeviceLevelUpdateTriggerRequest {
    const validationResult = validateAndMap(
      value,
      deviceLevelUpdateTriggerRequestSchema
    );
    return validationResult.errors === false;
  }

  /**
   * Validation method to narrow down union type to AccountGroupShareUpdateTriggerRequest type case.
   *
   * This is accountGroupShareUpdateTriggerRequest case.
   */
  export function isAccountGroupShareUpdateTriggerRequest(
    value: unknown
  ): value is AccountGroupShareUpdateTriggerRequest {
    const validationResult = validateAndMap(
      value,
      accountGroupShareUpdateTriggerRequestSchema
    );
    return validationResult.errors === false;
  }

  /**
   * Validation method to narrow down union type to AccountShareUpdateTriggerRequest type case.
   *
   * This is accountShareUpdateTriggerRequest case.
   */
  export function isAccountShareUpdateTriggerRequest(
    value: unknown
  ): value is AccountShareUpdateTriggerRequest {
    const validationResult = validateAndMap(
      value,
      accountShareUpdateTriggerRequestSchema
    );
    return validationResult.errors === false;
  }

  /**
   * Validation method to narrow down union type to PayAsYouGoUpdateTriggerRequest type case.
   *
   * This is payAsYouGoUpdateTriggerRequest case.
   */
  export function isPayAsYouGoUpdateTriggerRequest(
    value: unknown
  ): value is PayAsYouGoUpdateTriggerRequest {
    const validationResult = validateAndMap(
      value,
      payAsYouGoUpdateTriggerRequestSchema
    );
    return validationResult.errors === false;
  }

  /**
   * Validation method to narrow down union type to Updatetriggerchunk type case.
   *
   * This is updatetriggerchunk case.
   */
  export function isUpdatetriggerchunk(
    value: unknown
  ): value is Updatetriggerchunk {
    const validationResult = validateAndMap(value, updatetriggerchunkSchema);
    return validationResult.errors === false;
  }
}
