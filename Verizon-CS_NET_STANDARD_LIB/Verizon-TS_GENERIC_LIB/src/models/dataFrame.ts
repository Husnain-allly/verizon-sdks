/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { array, lazy, number, object, optional, Schema } from '../schema';
import {
  DataFrameContent,
  dataFrameContentSchema,
} from './containers/dataFrameContent';
import {
  DataFrameMsgId,
  dataFrameMsgIdSchema,
} from './containers/dataFrameMsgId';
import { FrameType, frameTypeSchema } from './frameType';
import { GeographicalPath, geographicalPathSchema } from './geographicalPath';

/** The data frame allows sending various advisory and road sign types of information to equipped devices. */
export interface DataFrame {
  /** Always set to 0 and carries no meaning. Legacy field maintained for backward compatibility. */
  notUsed: number;
  /**
   * The frameType data element provides the type of message to follow in the rest of the message frame structure. The following frame types are supported:
   *  - unknown
   *  - advisory
   *  - roadSignage
   *  - commercialSignage
   */
  frameType: FrameType;
  msgId: DataFrameMsgId;
  /** The V2X year consists of integer values from zero to 4095 representing the year according to the Gregorian calendar date system. The value of zero shall represent an unknown value. */
  startYear?: number;
  /** Start time expresses the number of elapsed minutes of the current year in the time system being used (typically UTC time). The value 527040 shall be used for invalid. */
  startTime: number;
  /** The duration, in units of whole minutes, that a object persists for. A value of 32000 means that the object persists forever. The range 0..32000 provides for about 22.2 days of maximum duration. */
  durationTime: number;
  /** The relative importance of the sign, on a scale from zero (least important) to seven (most important). */
  priority: number;
  /** Always set to 0 and carries no meaning. Legacy field maintained for backward compatibility. */
  notUsed1: number;
  /** The data frame is used to support the cross-cutting need in many V2X messages to describe arbitrary spatial areas (polygons, boundary lines, and other basic shapes) required by various message types in a small message size. This data frame can describe a complex path or region of arbitrary size using either one of the two supported node offset methods (XY offsets or LL offsets) or using simple geometric projections. */
  regions: GeographicalPath[];
  /** Always set to 0 and carries no meaning. Legacy field maintained for backward compatibility. */
  notUsed2: number;
  /** Always set to 0 and carries no meaning. Legacy field maintained for backward compatibility. */
  notUsed3: number;
  content: DataFrameContent;
}

export const dataFrameSchema: Schema<DataFrame> = object({
  notUsed: ['notUsed', number()],
  frameType: ['frameType', frameTypeSchema],
  msgId: ['msgId', dataFrameMsgIdSchema],
  startYear: ['startYear', optional(number())],
  startTime: ['startTime', number()],
  durationTime: ['durationTime', number()],
  priority: ['priority', number()],
  notUsed1: ['notUsed1', number()],
  regions: ['regions', array(lazy(() => geographicalPathSchema))],
  notUsed2: ['notUsed2', number()],
  notUsed3: ['notUsed3', number()],
  content: ['content', dataFrameContentSchema],
});
