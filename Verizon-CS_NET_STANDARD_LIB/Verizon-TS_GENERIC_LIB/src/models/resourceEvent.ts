/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { DtoFields, dtoFieldsSchema } from './dtoFields';

export interface ResourceEvent {
  /** Not used in this release, future functionality */
  accountclientid?: string;
  /** The URL of the callback listener */
  callbackurl?: string;
  /** Timestamp of the record */
  createdon: string;
  /** a short description */
  description?: string;
  /** This is a UUID value of the device created when the device is onboarded */
  deviceid?: string;
  /** Error message */
  errmsg?: string;
  fieldid: string;
  /** Fields to return needed by search */
  fields?: DtoFields;
  fieldvalue?: number[];
  /** UUID of the ECPD account the user belongs to */
  foreignid: string;
  /** UUID of the user record, assigned at creation */
  id?: string;
  /** Timestamp of the record */
  lastupdated: string;
  /** The model ID of the device */
  modelid?: string;
  /** User defined name of the record */
  name?: string;
  /** A flag to indicate if sensor data is to be aggregated (true) or not */
  sensordataaggregation?: boolean;
  /** The current status of the device or transaction and will be `success` or `failed` */
  state: string;
  /** The system-generated UUID of the transaction */
  transactionid?: string;
  /** The resource version */
  version?: string;
  /** The UUID of the resource version */
  versionid: string;
}

export const resourceEventSchema: Schema<ResourceEvent> = object({
  accountclientid: ['accountclientid', optional(string())],
  callbackurl: ['callbackurl', optional(string())],
  createdon: ['createdon', string()],
  description: ['description', optional(string())],
  deviceid: ['deviceid', optional(string())],
  errmsg: ['errmsg', optional(string())],
  fieldid: ['fieldid', string()],
  fields: ['fields', optional(lazy(() => dtoFieldsSchema))],
  fieldvalue: ['fieldvalue', optional(array(number()))],
  foreignid: ['foreignid', string()],
  id: ['id', optional(string())],
  lastupdated: ['lastupdated', string()],
  modelid: ['modelid', optional(string())],
  name: ['name', optional(string())],
  sensordataaggregation: ['sensordataaggregation', optional(boolean())],
  state: ['state', string()],
  transactionid: ['transactionid', optional(string())],
  version: ['version', optional(string())],
  versionid: ['versionid', string()],
});
