/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  lazy,
  number,
  optional,
  Schema,
  typedExpandoObject,
  unknown,
} from '../schema';
import {
  AllowanceThreshold,
  allowanceThresholdSchema,
} from './allowanceThreshold';
import { Comparitor, comparitorSchema } from './comparitor';
import { ConditionType, conditionTypeSchema } from './conditionType';
import { RulesCycleType, rulesCycleTypeSchema } from './rulesCycleType';
import { ThresholdUnit, thresholdUnitSchema } from './thresholdUnit';

export interface ConditionObjectCall {
  /** The condition type being monitored */
  conditionType?: ConditionType;
  /** The boolean of the comparison. `gt` is Greater Than, `lt` is Less Than and `eq` is Equal To */
  comparitor?: Comparitor;
  /** The threshold value the trigger monitors for */
  threshold?: number;
  /** The units of the threshold. This can be KB, Kilobits, MB, Megabits, or GB, Gigabits */
  thresholdUnit?: ThresholdUnit;
  /** The interval to monitor for the threshold. This can be Daily, Weekly or Monthly */
  cycleType?: RulesCycleType;
  allowanceThreshold?: AllowanceThreshold;
  additionalProperties?: Record<string, unknown>;
}

export const conditionObjectCallSchema: Schema<ConditionObjectCall> = typedExpandoObject(
  {
    conditionType: ['conditionType', optional(conditionTypeSchema)],
    comparitor: ['comparitor', optional(comparitorSchema)],
    threshold: ['threshold', optional(number())],
    thresholdUnit: ['thresholdUnit', optional(thresholdUnitSchema)],
    cycleType: ['cycleType', optional(rulesCycleTypeSchema)],
    allowanceThreshold: [
      'allowanceThreshold',
      optional(lazy(() => allowanceThresholdSchema)),
    ],
  },
  'additionalProperties',
  optional(unknown())
);
