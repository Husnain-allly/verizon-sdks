# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # SimActionsApi
  class SimActionsApi < BaseApi
    # System assign a new activation code to reactivate a deactivated device.
    # **Note:** the previously assigned ICCID must be used to request a new
    # activation code.
    # @param [EsimProfileRequest2] body Required parameter: Device Profile
    # Query
    # @return [ApiResponse] Complete http response with raw body and status code.
    def newactivatecode(body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/m2m/v1/devices/profile/actions/renew_activation_code',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(EsimRequestResponse.method(:from_hash))
                    .is_api_response(true)
                    .local_error('400',
                                 'Bad request',
                                 EsimRestErrorResponseException)
                    .local_error('401',
                                 'Unauthorized',
                                 EsimRestErrorResponseException)
                    .local_error('403',
                                 'Forbidden',
                                 EsimRestErrorResponseException)
                    .local_error('404',
                                 'Not Found / Does not exist',
                                 EsimRestErrorResponseException)
                    .local_error('406',
                                 'Format / Request Unacceptable',
                                 EsimRestErrorResponseException)
                    .local_error('429',
                                 'Too many requests',
                                 EsimRestErrorResponseException)
                    .local_error('default',
                                 'Error response',
                                 EsimRestErrorResponseException))
        .execute
    end

    # Uses the profile to activate the SIM.
    # @param [EsimProfileRequest] body Required parameter: Device Profile
    # Query
    # @return [ApiResponse] Complete http response with raw body and status code.
    def setactivate_using_post(body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/m2m/v1/devices/profile/actions/activate',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(EsimRequestResponse.method(:from_hash))
                    .is_api_response(true)
                    .local_error('400',
                                 'Bad request',
                                 EsimRestErrorResponseException)
                    .local_error('401',
                                 'Unauthorized',
                                 EsimRestErrorResponseException)
                    .local_error('403',
                                 'Forbidden',
                                 EsimRestErrorResponseException)
                    .local_error('404',
                                 'Not Found / Does not exist',
                                 EsimRestErrorResponseException)
                    .local_error('406',
                                 'Format / Request Unacceptable',
                                 EsimRestErrorResponseException)
                    .local_error('429',
                                 'Too many requests',
                                 EsimRestErrorResponseException)
                    .local_error('default',
                                 'Error response',
                                 EsimRestErrorResponseException))
        .execute
    end

    # Uses the profile to deactivate the SIM.
    # @param [ProfileRequest2] body Required parameter: Device Profile Query
    # @return [ApiResponse] Complete http response with raw body and status code.
    def setdeactivate_using_post(body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/m2m/v1/devices/profile/actions/deactivate',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(EsimRequestResponse.method(:from_hash))
                    .is_api_response(true)
                    .local_error('400',
                                 'Bad request',
                                 EsimRestErrorResponseException)
                    .local_error('401',
                                 'Unauthorized',
                                 EsimRestErrorResponseException)
                    .local_error('403',
                                 'Forbidden',
                                 EsimRestErrorResponseException)
                    .local_error('404',
                                 'Not Found / Does not exist',
                                 EsimRestErrorResponseException)
                    .local_error('406',
                                 'Format / Request Unacceptable',
                                 EsimRestErrorResponseException)
                    .local_error('429',
                                 'Too many requests',
                                 EsimRestErrorResponseException)
                    .local_error('default',
                                 'Error response',
                                 EsimRestErrorResponseException))
        .execute
    end
  end
end
