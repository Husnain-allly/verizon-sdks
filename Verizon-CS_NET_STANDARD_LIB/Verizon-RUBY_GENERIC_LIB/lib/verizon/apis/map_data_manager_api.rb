# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # MapDataManagerApi
  class MapDataManagerApi < BaseApi
    # This endpoint allows the user to upload map messages in SAE J2735 MAP
    # messages in ASN.1 UPER or JER (JSON) formats. The MAP data message can
    # have more than one intersections in it.
    # Note: The user needs to authenticate with their ThingSpace credentials
    # using the Access/Bearer and Session/M2M tokens in order to call this API.
    # @param [String] vendor_id Required parameter: The VendorID set during the
    # Vendor registration call.
    # @param [String] body Required parameter: TODO: type description here
    # @return [ApiResponse] Complete http response with raw body and status code.
    def upload_map_data_message(vendor_id,
                                body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/api/v2/mapdata',
                                     Server::IMP_SERVER)
                   .header_param(new_parameter(vendor_id, key: 'VendorID')
                                  .is_required(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .auth(And.new('thingspace_oauth', 'SessionToken')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:deserialize_primitive_types))
                    .deserialize_into(proc do |response| response.to_s end)
                    .is_api_response(true)
                    .is_primitive_response(true)
                    .local_error('400',
                                 'Invalid request',
                                 MapDataResponseErrorException)
                    .local_error('401',
                                 'Unauthorized',
                                 MapDataResponseErrorException)
                    .local_error('403',
                                 'Forbidden Request',
                                 MapDataResponseErrorException)
                    .local_error('429',
                                 'Too Many Requests',
                                 MapDataResponseErrorException)
                    .local_error('503',
                                 'Internal server Error',
                                 MapDataResponseErrorException)
                    .local_error('default',
                                 'Unexpected Error',
                                 MapDataResponseErrorException))
        .execute
    end

    # This endpoint allows user to download SAE J2735 MAP messages in ASN.1 UPER
    # format. The area for the MAP messages is needed to be defined in the
    # query.
    # @param [String] vendor_id Required parameter: The VendorID set during the
    # Vendor registration call.
    # @param [Geofence] geofence Required parameter: The area where the user
    # wants to receive MAP data from.
    # @return [ApiResponse] Complete http response with raw body and status code.
    def download_map_data_message(vendor_id,
                                  geofence)
      @api_call
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/api/v2/mapdata',
                                     Server::IMP_SERVER)
                   .header_param(new_parameter(vendor_id, key: 'VendorID')
                                  .is_required(true))
                   .query_param(new_parameter(geofence, key: 'Geofence')
                                 .is_required(true))
                   .auth(And.new('thingspace_oauth', 'SessionToken')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:deserialize_primitive_types))
                    .deserialize_into(proc do |response| response.to_s end)
                    .is_api_response(true)
                    .is_primitive_response(true)
                    .local_error('400',
                                 'Invalid request',
                                 MapDataResponseErrorException)
                    .local_error('401',
                                 'Unauthorized',
                                 MapDataResponseErrorException)
                    .local_error('403',
                                 'Forbidden Request',
                                 MapDataResponseErrorException)
                    .local_error('429',
                                 'Too Many Requests',
                                 MapDataResponseErrorException)
                    .local_error('503',
                                 'Internal server Error',
                                 MapDataResponseErrorException)
                    .local_error('default',
                                 'Unexpected Error',
                                 MapDataResponseErrorException))
        .execute
    end
  end
end
