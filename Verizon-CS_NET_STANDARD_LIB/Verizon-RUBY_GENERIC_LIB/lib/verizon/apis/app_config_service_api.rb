# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # AppConfigServiceApi
  class AppConfigServiceApi < BaseApi
    # This endpoint fetches and returns the list of configurations defined by
    # the Vendor. The list contains the configurations' identifier, name,
    # description, and active flag. The vendor ID is provided when the
    # configuration is created through the POST request.
    # Note: The user needs to authenticate with their ThingSpace credentials
    # using the Access/Bearer and Session/M2M tokens in order to call this API.
    # @param [String] vendor_id Required parameter: The vendor's identifier
    # @return [ApiResponse] Complete http response with raw body and status code.
    def get_configuration_list(vendor_id)
      @api_call
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/api/v1/application/configurations/geofence/ids',
                                     Server::IMP_SERVER)
                   .header_param(new_parameter(vendor_id, key: 'VendorID')
                                  .is_required(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(And.new('thingspace_oauth', 'SessionToken')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(ConfigurationListItem.method(:from_hash))
                    .is_api_response(true)
                    .is_response_array(true)
                    .local_error('403',
                                 'Forbidden',
                                 AppConfigResponseErrorException)
                    .local_error('404',
                                 'Configuration not found',
                                 AppConfigResponseErrorException)
                    .local_error('429',
                                 'Too many requests',
                                 AppConfigResponseErrorException)
                    .local_error('default',
                                 'unexpected error',
                                 AppConfigResponseErrorException))
        .execute
    end

    # This endpoint fetches and returns a specific configuration's details. The
    # configuration ID parameter, which was provided when the configuration was
    # created through the POST request, is need to retrieve the configuration
    # details.
    # Note: The user needs to authenticate with their ThingSpace credentials
    # using the Access/Bearer and Session/M2M tokens in order to call this API.
    # @param [String] id Required parameter: The configuration identifier
    # @param [String] vendor_id Required parameter: The vendor's identifier
    # @return [ApiResponse] Complete http response with raw body and status code.
    def get_configuration(id,
                          vendor_id)
      @api_call
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/api/v1/application/configurations/geofence',
                                     Server::IMP_SERVER)
                   .query_param(new_parameter(id, key: 'id')
                                 .is_required(true))
                   .header_param(new_parameter(vendor_id, key: 'VendorID')
                                  .is_required(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(And.new('thingspace_oauth', 'SessionToken')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(GeoFenceConfigurationResponse.method(:from_hash))
                    .is_api_response(true)
                    .local_error('403',
                                 'Forbidden',
                                 AppConfigResponseErrorException)
                    .local_error('404',
                                 'Configuration not found',
                                 AppConfigResponseErrorException)
                    .local_error('429',
                                 'Too many requests',
                                 AppConfigResponseErrorException)
                    .local_error('default',
                                 'unexpected error',
                                 AppConfigResponseErrorException))
        .execute
    end

    # This endpoint creates a new configuration in the system. The data for the
    # new configuration should be provided as JSON in the body of the POST
    # request. The system will return with a unique ID for the configuration,
    # which is needed for any further manipulation (update or delete) of the
    # configuration.
    # Note: The user needs to authenticate with their ThingSpace credentials
    # using the Access/Bearer and Session/M2M tokens in order to call this API.
    # @param [String] vendor_id Required parameter: The vendor's identifier
    # @param [GeoFenceConfigurationRequest] body Required parameter: TODO: type
    # description here
    # @return [ApiResponse] Complete http response with raw body and status code.
    def create_configuration(vendor_id,
                             body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/api/v1/application/configurations/geofence',
                                     Server::IMP_SERVER)
                   .header_param(new_parameter(vendor_id, key: 'VendorID')
                                  .is_required(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'SessionToken')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(GeoFenceConfigurationResponse.method(:from_hash))
                    .is_api_response(true)
                    .local_error('400',
                                 'Invalid configuration',
                                 AppConfigResponseErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 AppConfigResponseErrorException)
                    .local_error('429',
                                 'Too many requests',
                                 AppConfigResponseErrorException)
                    .local_error('default',
                                 'unexpected error',
                                 AppConfigResponseErrorException))
        .execute
    end

    # This endpoint updates an existing configuration. Similar to POST, the
    # updated data for the configuration should be provided as JSON in the body
    # of the PUT request. The configuration ID parameter, which was provided by
    # the POST (create) operation, is required to do any updates on the
    # configuration.
    # Note: The user needs to authenticate with their ThingSpace credentials
    # using the Access/Bearer and Session/M2M tokens in order to call this API.
    # @param [String] vendor_id Required parameter: The vendor's identifier
    # @param [String] id Required parameter: The configuration identifier
    # @param [GeoFenceConfigurationUpdateRequest] body Required parameter: TODO:
    # type description here
    # @return [ApiResponse] Complete http response with raw body and status code.
    def update_configuration(vendor_id,
                             id,
                             body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/api/v1/application/configurations/geofence',
                                     Server::IMP_SERVER)
                   .header_param(new_parameter(vendor_id, key: 'VendorID')
                                  .is_required(true))
                   .query_param(new_parameter(id, key: 'id')
                                 .is_required(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'SessionToken')))
        .response(new_response_handler
                    .is_response_void(true)
                    .is_api_response(true)
                    .local_error('400',
                                 'Invalid configuration',
                                 AppConfigResponseErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 AppConfigResponseErrorException)
                    .local_error('404',
                                 'Configuration not found',
                                 AppConfigResponseErrorException)
                    .local_error('429',
                                 'Too many requests',
                                 AppConfigResponseErrorException)
                    .local_error('default',
                                 'unexpected error',
                                 AppConfigResponseErrorException))
        .execute
    end

    # This endpoint deletes a specific configuration from the system. It
    # requires the configuration ID parameter, which was provided by the POST
    # (create) operation.
    # Note: The user needs to authenticate with their ThingSpace credentials
    # using the Access/Bearer and Session/M2M tokens in order to call this API.
    # @param [String] vendor_id Required parameter: The vendor's identifier
    # @param [String] id Required parameter: The configuration identifier
    # @return [ApiResponse] Complete http response with raw body and status code.
    def delete_configuration(vendor_id,
                             id)
      @api_call
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/api/v1/application/configurations/geofence',
                                     Server::IMP_SERVER)
                   .header_param(new_parameter(vendor_id, key: 'VendorID')
                                  .is_required(true))
                   .query_param(new_parameter(id, key: 'id')
                                 .is_required(true))
                   .auth(And.new('thingspace_oauth', 'SessionToken')))
        .response(new_response_handler
                    .is_response_void(true)
                    .is_api_response(true)
                    .local_error('403',
                                 'Forbidden',
                                 AppConfigResponseErrorException)
                    .local_error('429',
                                 'Too many requests',
                                 AppConfigResponseErrorException)
                    .local_error('default',
                                 'unexpected error',
                                 AppConfigResponseErrorException))
        .execute
    end
  end
end
