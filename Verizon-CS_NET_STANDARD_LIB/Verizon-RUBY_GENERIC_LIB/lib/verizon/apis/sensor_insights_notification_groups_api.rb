# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # SensorInsightsNotificationGroupsApi
  class SensorInsightsNotificationGroupsApi < BaseApi
    # TODO: type endpoint description here
    # @param [DtoListNotificationGroupRequest] body Required parameter: Retrieve
    # a notification group
    # @return [ApiResponse] Complete http response with raw body and status code.
    def sensor_insights_list_notification_group_request(body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/dm/v1/notificationGroups/actions/query',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(DtoNotificationGroupResponseEntity.method(:from_hash))
                    .is_api_response(true)
                    .is_response_array(true)
                    .local_error('400',
                                 'Bad Request',
                                 M400ManagementErrorException)
                    .local_error('401',
                                 'UnAuthorized',
                                 ManagementErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 M403ManagementErrorException)
                    .local_error('404',
                                 'Not Found',
                                 M404ManagementErrorException)
                    .local_error('406',
                                 'Not Acceptable',
                                 ManagementErrorException)
                    .local_error('415',
                                 'Unsupported media type',
                                 ManagementErrorException)
                    .local_error('429',
                                 'Too many requests',
                                 ManagementErrorException)
                    .local_error('500',
                                 'Internal server error.',
                                 M500ManagementErrorException)
                    .local_error('default',
                                 'Unexpected error',
                                 ManagementErrorException))
        .execute
    end

    # TODO: type endpoint description here
    # @param [DtoUpdateNotificationGroupRequest] body Required parameter:
    # Partially update a notification group
    # @return [ApiResponse] Complete http response with raw body and status code.
    def sensor_insights_update_notification_group_request(body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::PATCH,
                                     '/dm/v1/notificationGroups',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(DtoNotificationGroupResponseEntity.method(:from_hash))
                    .is_api_response(true)
                    .local_error('400',
                                 'Bad Request',
                                 M400ManagementErrorException)
                    .local_error('401',
                                 'UnAuthorized',
                                 ManagementErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 M403ManagementErrorException)
                    .local_error('404',
                                 'Not Found',
                                 M404ManagementErrorException)
                    .local_error('406',
                                 'Not Acceptable',
                                 ManagementErrorException)
                    .local_error('415',
                                 'Unsupported media type',
                                 ManagementErrorException)
                    .local_error('429',
                                 'Too many requests',
                                 ManagementErrorException)
                    .local_error('500',
                                 'Internal server error.',
                                 M500ManagementErrorException)
                    .local_error('default',
                                 'Unexpected error',
                                 ManagementErrorException))
        .execute
    end

    # TODO: type endpoint description here
    # @param [DtoCreateNotificationGroupRequest] body Required parameter: Create
    # a notification group
    # @return [ApiResponse] Complete http response with raw body and status code.
    def sensor_insights_create_notification_group_request(body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/dm/v1/notificationGroups',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(DtoNotificationGroupResponseEntity.method(:from_hash))
                    .is_api_response(true)
                    .local_error('400',
                                 'Bad Request',
                                 M400ManagementErrorException)
                    .local_error('401',
                                 'UnAuthorized',
                                 ManagementErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 M403ManagementErrorException)
                    .local_error('406',
                                 'Not Acceptable',
                                 ManagementErrorException)
                    .local_error('415',
                                 'Unsupported media type',
                                 ManagementErrorException)
                    .local_error('429',
                                 'Too many requests',
                                 ManagementErrorException)
                    .local_error('500',
                                 'Internal server error.',
                                 M500ManagementErrorException)
                    .local_error('default',
                                 'Unexpected error',
                                 ManagementErrorException))
        .execute
    end

    # TODO: type endpoint description here
    # @param [DtoDeleteNotificationGroupRequest] payload Required parameter:
    # Payload for the delete request.
    # @return [ApiResponse] Complete http response with raw body and status code.
    def sensor_insights_delete_notification_group(payload)
      @api_call
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/dm/v1/notificationGroups',
                                     Server::THINGSPACE)
                   .query_param(new_parameter(payload, key: 'payload')
                                 .is_required(true))
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .is_response_void(true)
                    .is_api_response(true)
                    .local_error('400',
                                 'Bad Request',
                                 M400ManagementErrorException)
                    .local_error('401',
                                 'UnAuthorized',
                                 ManagementErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 M403ManagementErrorException)
                    .local_error('404',
                                 'Not Found',
                                 M404ManagementErrorException))
        .execute
    end

    # TODO: type endpoint description here
    # @param [DtoAddUsersToNotificationGroupRequest] body Required parameter:
    # Add users to a notification group
    # @return [ApiResponse] Complete http response with raw body and status code.
    def sensor_insights_add_users_to_notification_group_request(body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/dm/v1/notificationGroups/actions/add-users',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .is_response_void(true)
                    .is_api_response(true)
                    .local_error('400',
                                 'Bad Request',
                                 M400ManagementErrorException)
                    .local_error('401',
                                 'UnAuthorized',
                                 ManagementErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 M403ManagementErrorException)
                    .local_error('404',
                                 'Not Found',
                                 M404ManagementErrorException)
                    .local_error('406',
                                 'Not Acceptable',
                                 ManagementErrorException)
                    .local_error('415',
                                 'Unsupported media type',
                                 ManagementErrorException)
                    .local_error('429',
                                 'Too many requests',
                                 ManagementErrorException)
                    .local_error('500',
                                 'Internal server error.',
                                 M500ManagementErrorException)
                    .local_error('default',
                                 'Unexpected error',
                                 ManagementErrorException))
        .execute
    end

    # TODO: type endpoint description here
    # @param [DtoRemoveUsersFromNotificationGroupRequest] body Required
    # parameter: Remove users from a notification group
    # @return [ApiResponse] Complete http response with raw body and status code.
    def sensor_insights_remove_users_from_notification_group_request(body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/dm/v1/notificationGroups/actions/remove-users',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .is_response_void(true)
                    .is_api_response(true)
                    .local_error('400',
                                 'Bad Request',
                                 M400ManagementErrorException)
                    .local_error('401',
                                 'UnAuthorized',
                                 ManagementErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 M403ManagementErrorException)
                    .local_error('404',
                                 'Not Found',
                                 M404ManagementErrorException)
                    .local_error('406',
                                 'Not Acceptable',
                                 ManagementErrorException)
                    .local_error('415',
                                 'Unsupported media type',
                                 ManagementErrorException)
                    .local_error('429',
                                 'Too many requests',
                                 ManagementErrorException)
                    .local_error('500',
                                 'Internal server error.',
                                 M500ManagementErrorException)
                    .local_error('default',
                                 'Unexpected error',
                                 ManagementErrorException))
        .execute
    end
  end
end
