# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # SensorInsightsUsersApi
  class SensorInsightsUsersApi < BaseApi
    # TODO: type endpoint description here
    # @param [DtoCreateUserRequest] body Required parameter: Create a user
    # profile
    # @return [ApiResponse] Complete http response with raw body and status code.
    def sensor_insights_create_user_request(body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/dm/v1/users',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(ResourceUser.method(:from_hash))
                    .is_api_response(true)
                    .local_error('400',
                                 'Bad Request',
                                 M400ManagementErrorException)
                    .local_error('401',
                                 'UnAuthorized',
                                 ManagementErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 M403ManagementErrorException)
                    .local_error('406',
                                 'Not Acceptable',
                                 ManagementErrorException)
                    .local_error('415',
                                 'Unsupported media type',
                                 ManagementErrorException)
                    .local_error('429',
                                 'Too many requests',
                                 ManagementErrorException)
                    .local_error('500',
                                 'Internal server error.',
                                 M500ManagementErrorException)
                    .local_error('default',
                                 'Unexpected error',
                                 ManagementErrorException))
        .execute
    end

    # TODO: type endpoint description here
    # @param [DtoDeleteUserRequest] deleterequestpayload Required parameter:
    # Payload for the delete user request.
    # @return [ApiResponse] Complete http response with raw body and status code.
    def sensor_insights_delete_user(deleterequestpayload)
      @api_call
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/dm/v1/users',
                                     Server::THINGSPACE)
                   .query_param(new_parameter(deleterequestpayload, key: 'deleterequestpayload')
                                 .is_required(true))
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .is_response_void(true)
                    .is_api_response(true)
                    .local_error('400',
                                 'Bad Request',
                                 M400ManagementErrorException)
                    .local_error('401',
                                 'UnAuthorized',
                                 ManagementErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 M403ManagementErrorException)
                    .local_error('404',
                                 'Not Found',
                                 M404ManagementErrorException))
        .execute
    end

    # TODO: type endpoint description here
    # @param [DtoUpdateUserRequest] body Required parameter: Partially update a
    # user profile
    # @return [ApiResponse] Complete http response with raw body and status code.
    def sensor_insights_update_user_request(body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::PATCH,
                                     '/dm/v1/users',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(ResourceUser.method(:from_hash))
                    .is_api_response(true)
                    .local_error('400',
                                 'Bad Request',
                                 M400ManagementErrorException)
                    .local_error('401',
                                 'UnAuthorized',
                                 ManagementErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 M403ManagementErrorException)
                    .local_error('404',
                                 'Not Found',
                                 M404ManagementErrorException)
                    .local_error('406',
                                 'Not Acceptable',
                                 ManagementErrorException)
                    .local_error('415',
                                 'Unsupported media type',
                                 ManagementErrorException)
                    .local_error('429',
                                 'Too many requests',
                                 ManagementErrorException)
                    .local_error('500',
                                 'Internal server error.',
                                 M500ManagementErrorException)
                    .local_error('default',
                                 'Unexpected error',
                                 ManagementErrorException))
        .execute
    end

    # TODO: type endpoint description here
    # @param [DtoListUserRequest] body Required parameter: A summary of user
    # profile records on an account
    # @return [ApiResponse] Complete http response with raw body and status code.
    def sensor_insights_list_user_request(body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/dm/v1/users/actions/query',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(ResourceUser.method(:from_hash))
                    .is_api_response(true)
                    .is_response_array(true)
                    .local_error('400',
                                 'Bad Request',
                                 M400ManagementErrorException)
                    .local_error('401',
                                 'UnAuthorized',
                                 ManagementErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 M403ManagementErrorException)
                    .local_error('404',
                                 'Not Found',
                                 M404ManagementErrorException)
                    .local_error('406',
                                 'Not Acceptable',
                                 ManagementErrorException)
                    .local_error('415',
                                 'Unsupported media type',
                                 ManagementErrorException)
                    .local_error('429',
                                 'Too many requests',
                                 ManagementErrorException)
                    .local_error('500',
                                 'Internal server error.',
                                 M500ManagementErrorException)
                    .local_error('default',
                                 'Unexpected error',
                                 ManagementErrorException))
        .execute
    end
  end
end
