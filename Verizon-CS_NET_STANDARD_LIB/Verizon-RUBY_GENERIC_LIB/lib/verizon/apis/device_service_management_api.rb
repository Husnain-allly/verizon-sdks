# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # DeviceServiceManagementApi
  class DeviceServiceManagementApi < BaseApi
    # Gets the list of a status for hyper-precise location devices.
    # @param [String] imei Required parameter: A unique identifier for a
    # device.
    # @param [String] account_number Required parameter: A unique identifier for
    # an account.
    # @return [ApiResponse] Complete http response with raw body and status code.
    def get_device_hyper_precise_status(imei,
                                        account_number)
      @api_call
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/devices/services',
                                     Server::HYPER_PRECISE_LOCATION)
                   .query_param(new_parameter(imei, key: 'imei')
                                 .is_required(true))
                   .query_param(new_parameter(account_number, key: 'accountNumber')
                                 .is_required(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(BullseyeServiceResult.method(:from_hash))
                    .is_api_response(true)
                    .local_error('400',
                                 'Bad request.',
                                 HyperPreciseLocationResultException)
                    .local_error('401',
                                 'Unauthorized request. Access token is missing or invalid.',
                                 HyperPreciseLocationResultException)
                    .local_error('403',
                                 'Forbidden request.',
                                 HyperPreciseLocationResultException)
                    .local_error('404',
                                 'Bad request. Not found.',
                                 HyperPreciseLocationResultException)
                    .local_error('409',
                                 'Bad request. Conflict state.',
                                 HyperPreciseLocationResultException)
                    .local_error('500',
                                 'Internal Server Error.',
                                 HyperPreciseLocationResultException))
        .execute
    end

    # Enable/disable hyper-precise service for a device.
    # @param [BullseyeServiceRequest] body Required parameter: List of devices
    # and hyper-precise required statuses.
    # @return [ApiResponse] Complete http response with raw body and status code.
    def update_device_hyper_precise_status(body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/devices/services',
                                     Server::HYPER_PRECISE_LOCATION)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(BullseyeServiceResult.method(:from_hash))
                    .is_api_response(true)
                    .local_error('400',
                                 'Bad request.',
                                 HyperPreciseLocationResultException)
                    .local_error('401',
                                 'Unauthorized request. Access token is missing or invalid.',
                                 HyperPreciseLocationResultException)
                    .local_error('403',
                                 'Forbidden request.',
                                 HyperPreciseLocationResultException)
                    .local_error('404',
                                 'Bad request. Not found.',
                                 HyperPreciseLocationResultException)
                    .local_error('409',
                                 'Bad request. Conflict state.',
                                 HyperPreciseLocationResultException)
                    .local_error('500',
                                 'Internal Server Error.',
                                 HyperPreciseLocationResultException))
        .execute
    end
  end
end
