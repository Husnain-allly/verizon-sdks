# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # SensorInsightsSensorsApi
  class SensorInsightsSensorsApi < BaseApi
    # TODO: type endpoint description here
    # @param [DtoListSensorDevicesRequest] body Required parameter: List details
    # of the sensors
    # @return [ApiResponse] Complete http response with raw body and status code.
    def sensor_insights_list_sensor_devices_request(body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/dm/v1/devices/sensors/actions/query',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(ResourceDevice.method(:from_hash))
                    .is_api_response(true)
                    .is_response_array(true)
                    .local_error('400',
                                 'Bad Request',
                                 M400ManagementErrorException)
                    .local_error('401',
                                 'UnAuthorized',
                                 ManagementErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 M403ManagementErrorException)
                    .local_error('404',
                                 'Not Found',
                                 M404ManagementErrorException)
                    .local_error('406',
                                 'Not Acceptable',
                                 ManagementErrorException)
                    .local_error('415',
                                 'Unsupported media type',
                                 ManagementErrorException)
                    .local_error('429',
                                 'Too many requests',
                                 ManagementErrorException)
                    .local_error('500',
                                 'Internal server error.',
                                 M500ManagementErrorException)
                    .local_error('default',
                                 'Unexpected error',
                                 ManagementErrorException))
        .execute
    end

    # TODO: type endpoint description here
    # @param [DtoOnBoardSensorRequest] body Required parameter: Onboarding a
    # sensor
    # @return [ApiResponse] Complete http response with raw body and status code.
    def sensor_insights_on_board_sensor_request(body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/dm/v1/devices/sensors/onboard',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .is_response_void(true)
                    .is_api_response(true)
                    .local_error('400',
                                 'Bad Request',
                                 M400ManagementErrorException)
                    .local_error('401',
                                 'UnAuthorized',
                                 ManagementErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 M403ManagementErrorException)
                    .local_error('406',
                                 'Not Acceptable',
                                 ManagementErrorException)
                    .local_error('415',
                                 'Unsupported media type',
                                 ManagementErrorException)
                    .local_error('429',
                                 'Too many requests',
                                 ManagementErrorException)
                    .local_error('500',
                                 'Internal server error.',
                                 M500ManagementErrorException)
                    .local_error('default',
                                 'Unexpected error',
                                 ManagementErrorException))
        .execute
    end

    # TODO: type endpoint description here
    # @param [DtoSensorOnBoardStatusRequest] body Required parameter: Get the
    # sensor's onboarding status
    # @return [ApiResponse] Complete http response with raw body and status code.
    def sensor_insights_sensor_on_board_status_request(body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/dm/v1/devices/sensors/onboard/status/actions/query',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(DtoSensorOnBoardingStatusResponse.method(:from_hash))
                    .is_api_response(true)
                    .local_error('400',
                                 'Bad Request',
                                 M400ManagementErrorException)
                    .local_error('401',
                                 'UnAuthorized',
                                 ManagementErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 M403ManagementErrorException)
                    .local_error('404',
                                 'Not Found',
                                 M404ManagementErrorException)
                    .local_error('406',
                                 'Not Acceptable',
                                 ManagementErrorException)
                    .local_error('415',
                                 'Unsupported media type',
                                 ManagementErrorException)
                    .local_error('429',
                                 'Too many requests',
                                 ManagementErrorException)
                    .local_error('500',
                                 'Internal server error.',
                                 M500ManagementErrorException)
                    .local_error('default',
                                 'Unexpected error',
                                 ManagementErrorException))
        .execute
    end

    # TODO: type endpoint description here
    # @param [DtoOffBoardSensorRequest] body Required parameter: Offboard a
    # sensor
    # @return [ApiResponse] Complete http response with raw body and status code.
    def sensor_insights_off_board_sensor_request(body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/dm/v1/devices/sensors/offboard',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .is_response_void(true)
                    .is_api_response(true)
                    .local_error('400',
                                 'Bad Request',
                                 M400ManagementErrorException)
                    .local_error('401',
                                 'UnAuthorized',
                                 ManagementErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 M403ManagementErrorException))
        .execute
    end

    # TODO: type endpoint description here
    # @param [DtoSensorOffBoardStatusRequest] body Required parameter: Get a
    # sensor's offboarding status
    # @return [ApiResponse] Complete http response with raw body and status code.
    def sensor_insights_sensor_off_boarding_status_request(body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/dm/v1/devices/sensors/offboard/status/actions/query',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(DtoSensorOffBoardingStatusResponse.method(:from_hash))
                    .is_api_response(true)
                    .local_error('400',
                                 'Bad Request',
                                 M400ManagementErrorException)
                    .local_error('401',
                                 'UnAuthorized',
                                 ManagementErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 M403ManagementErrorException)
                    .local_error('404',
                                 'Not Found',
                                 M404ManagementErrorException)
                    .local_error('406',
                                 'Not Acceptable',
                                 ManagementErrorException)
                    .local_error('415',
                                 'Unsupported media type',
                                 ManagementErrorException)
                    .local_error('429',
                                 'Too many requests',
                                 ManagementErrorException)
                    .local_error('500',
                                 'Internal server error.',
                                 M500ManagementErrorException)
                    .local_error('default',
                                 'Unexpected error',
                                 ManagementErrorException))
        .execute
    end
  end
end
