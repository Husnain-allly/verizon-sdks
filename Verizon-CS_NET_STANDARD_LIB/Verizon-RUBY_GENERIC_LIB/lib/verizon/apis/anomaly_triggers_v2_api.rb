# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # AnomalyTriggersV2Api
  class AnomalyTriggersV2Api < BaseApi
    # Creates the trigger to identify an anomaly.
    # @param [Array[TriggerType1 | ActiveAnomalyIndicator |
    # ActiveTriggerIndicator]] body Required parameter: Request to create an
    # anomaly trigger.
    # @return [ApiResponse] Complete http response with raw body and status code.
    def create_anomaly_detection_trigger_v2(body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/m2m/v2/triggers',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true)
                                .validator(proc do |value|
                                  UnionTypeLookUp.get(:CreateTriggerRequestOptions)
                                                 .validate(value)
                                end))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(AnomalyDetectionTrigger.method(:from_hash))
                    .is_api_response(true)
                    .local_error('default',
                                 'An error occurred.',
                                 IntelligenceResultException))
        .execute
    end

    # Updates an existing trigger using the account name.
    # @param [Array[TriggerType3 | ActiveAnomalyIndicator]] body Required
    # parameter: Request to update existing trigger.
    # @return [ApiResponse] Complete http response with raw body and status code.
    def update_anomaly_detection_trigger_v2(body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/m2m/v2/triggers',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true)
                                .validator(proc do |value|
                                  UnionTypeLookUp.get(:UpdateTriggerRequestOptions)
                                                 .validate(value)
                                end))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(IntelligenceSuccessResult.method(:from_hash))
                    .is_api_response(true)
                    .local_error('default',
                                 'An error occurred.',
                                 IntelligenceResultException))
        .execute
    end

    # Retrieves the values for a specific trigger ID.
    # @param [String] trigger_id Required parameter: The trigger ID of a
    # specific trigger.
    # @return [ApiResponse] Complete http response with raw body and status code.
    def list_anomaly_detection_trigger_settings_v2(trigger_id)
      @api_call
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/m2m/v2/triggers/{triggerId}',
                                     Server::THINGSPACE)
                   .template_param(new_parameter(trigger_id, key: 'triggerId')
                                    .is_required(true)
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(AnomalyTriggerResult.method(:from_hash))
                    .is_api_response(true)
                    .local_error('default',
                                 'An error occurred.',
                                 IntelligenceResultException))
        .execute
    end
  end
end
