# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # AnomalySettingsApi
  class AnomalySettingsApi < BaseApi
    # Uses the subscribed account ID to activate anomaly detection and set
    # threshold values.
    # @param [AnomalyDetectionRequest] body Required parameter: Request to
    # activate anomaly detection.
    # @return [ApiResponse] Complete http response with raw body and status code.
    def activate_anomaly_detection(body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/m2m/v1/intelligence/anomaly/settings',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(IntelligenceSuccessResult.method(:from_hash))
                    .is_api_response(true)
                    .local_error('default',
                                 'An error occurred.',
                                 IntelligenceResultException))
        .execute
    end

    # Retrieves the current anomaly detection settings for an account.
    # @param [String] account_name Required parameter: The name of the
    # subscribed account.
    # @return [ApiResponse] Complete http response with raw body and status code.
    def list_anomaly_detection_settings(account_name)
      @api_call
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/m2m/v1/intelligence/{accountName}/anomaly/settings',
                                     Server::THINGSPACE)
                   .template_param(new_parameter(account_name, key: 'accountName')
                                    .is_required(true)
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(AnomalyDetectionSettings.method(:from_hash))
                    .is_api_response(true)
                    .local_error('default',
                                 'An error occurred.',
                                 IntelligenceResultException))
        .execute
    end

    # Resets the thresholds to zero.
    # @param [String] account_name Required parameter: The name of the
    # subscribed account.
    # @return [ApiResponse] Complete http response with raw body and status code.
    def reset_anomaly_detection_parameters(account_name)
      @api_call
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/m2m/v1/intelligence/{accountName}/anomaly/settings/reset',
                                     Server::THINGSPACE)
                   .template_param(new_parameter(account_name, key: 'accountName')
                                    .is_required(true)
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(IntelligenceSuccessResult.method(:from_hash))
                    .is_api_response(true)
                    .local_error('default',
                                 'An error occurred.',
                                 IntelligenceResultException))
        .execute
    end
  end
end
