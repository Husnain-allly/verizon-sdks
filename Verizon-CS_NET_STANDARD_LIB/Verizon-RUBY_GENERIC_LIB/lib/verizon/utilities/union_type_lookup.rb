# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # The `UnionTypeLookUp` class serves as a utility class for
  # storing and managing type combinator templates. It acts as a container for the templates
  # used in handling various oneof/anyof instances within the sdk.
  class UnionTypeLookUp
    include CoreLibrary
    # rubocop:disable Lint/RedundantCopDisableDirective, Style/HashSyntax, Layout/FirstArgumentIndentation
    def self.union_types
      {
        :CreateTriggerRequestOptions => AnyOf.new(
          [
            LeafType.new(TriggerType1),
            LeafType.new(ActiveAnomalyIndicator),
            LeafType.new(ActiveTriggerIndicator)
          ],
          UnionTypeContext.new(
            is_array: true
          )
        ),

        :UpdateTriggerRequestOptions => AnyOf.new(
          [
            LeafType.new(TriggerType3),
            LeafType.new(ActiveAnomalyIndicator)
          ],
          UnionTypeContext.new(
            is_array: true
          )
        ),

        :Domestic4GAnd5GNationwideNetworkCoverageBody => AnyOf.new(
          [
            LeafType.new(GetWirelessCoverageRequest),
            LeafType.new(GetWirelessCoverageRequestFwa)
          ]
        ),

        :CreateTriggerRulesBody => AnyOf.new(
          [
            LeafType.new(AccountLevelCreateTriggerRequest),
            LeafType.new(AccountLevelObject),
            LeafType.new(DeviceLevelCreateTriggerRequest),
            LeafType.new(AccountGroupShareCreateTriggerRequest),
            LeafType.new(AccountShareCreateTriggerRequest),
            LeafType.new(PayAsYouGoCreateTriggerRequest),
            LeafType.new(Createtriggerchunk)
          ]
        ),

        :UpdateTriggerRulesBody => AnyOf.new(
          [
            LeafType.new(AccountLevelUpdateTriggerRequest),
            LeafType.new(DeviceLevelUpdateTriggerRequest),
            LeafType.new(AccountGroupShareUpdateTriggerRequest),
            LeafType.new(AccountShareUpdateTriggerRequest),
            LeafType.new(PayAsYouGoUpdateTriggerRequest),
            LeafType.new(Updatetriggerchunk)
          ]
        ),

        :SensorInsightsDeviceActionSetRequestBody => AnyOf.new(
          [
            LeafType.new(DtoDeviceActionSetRequest),
            LeafType.new(DtoDeviceCommand)
          ]
        ),

        :MecPlatformResourceProperties => OneOf.new(
          [
            LeafType.new(MecPlatformsAdditionalSupportInfo, UnionTypeContext.new(
              is_array: true
            )),
            LeafType.new(MecPlatformsAdditionalSupportInfo)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :DeleteDevicesResultDeviceIds => OneOf.new(
          [
            LeafType.new(DeviceId, UnionTypeContext.new(
              is_array: true
            )),
            LeafType.new(DeviceId)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :ProfileRequestPrimaryPlaceOfUse => AnyOf.new(
          [
            LeafType.new(Customernamequery),
            LeafType.new(Addressquery)
          ],
          UnionTypeContext.new(
            is_array: true,
            is_optional: true
          )
        ),

        :DeactivateDeviceListIds => AnyOf.new(
          [
            LeafType.new(DeviceId),
            LeafType.new(PropertyDeviceId)
          ],
          UnionTypeContext.new(
            is_array: true,
            is_optional: true
          )
        ),

        :TriggersListOptions => AnyOf.new(
          [
            LeafType.new(AnomalyTriggerValue),
            LeafType.new(TriggerType2)
          ],
          UnionTypeContext.new(
            is_array: true,
            is_optional: true
          )
        ),

        :TriggerAttributesOptions => AnyOf.new(
          [
            LeafType.new(NotificationGroupNameTriggerAttribute),
            LeafType.new(ServicePlanTriggerAttribute),
            LeafType.new(DataPercentage50TriggerAttribute),
            LeafType.new(DataPercentage75TriggerAttribute),
            LeafType.new(DataPercentage90TriggerAttribute),
            LeafType.new(DataPercentage100TriggerAttribute)
          ],
          UnionTypeContext.new(
            is_array: true,
            is_optional: true
          )
        ),

        :KeysChunk => AnyOf.new(
          [
            LeafType.new(KeyServicePlan),
            LeafType.new(KeyDataPercentage50),
            LeafType.new(KeysmsPercentage50),
            LeafType.new(NoOfDaysB4PromoExp),
            LeafType.new(EnablePromoExp)
          ],
          UnionTypeContext.new(
            is_array: true,
            is_optional: true
          )
        ),

        :DeviceList2Ids => AnyOf.new(
          [
            LeafType.new(EsimDeviceId),
            LeafType.new(DeviceId2)
          ],
          UnionTypeContext.new(
            is_array: true,
            is_optional: true
          )
        ),

        :EsimGlobalDeviceListDeviceFilter => AnyOf.new(
          [
            LeafType.new(EsimDeviceId),
            LeafType.new(DeviceId2)
          ],
          UnionTypeContext.new(
            is_array: true,
            is_optional: true
          )
        ),

        :EsimDeviceListDeviceIds => AnyOf.new(
          [
            LeafType.new(EsimDeviceId),
            LeafType.new(DeviceId2)
          ],
          UnionTypeContext.new(
            is_array: true,
            is_optional: true
          )
        ),

        :AccountLevelCreateTriggerRequestSmsNumbers => AnyOf.new(
          [
            LeafType.new(Cellphonenumber)
          ],
          UnionTypeContext.new(
            is_array: true,
            is_optional: true
          )
        ),

        :AccountLevelUpdateTriggerRequestSmsNumbers => AnyOf.new(
          [
            LeafType.new(Cellphonenumber)
          ],
          UnionTypeContext.new(
            is_array: true,
            is_optional: true
          )
        ),

        :AccountLevelObjectCondition => AnyOf.new(
          [
            LeafType.new(ConditionType),
            LeafType.new(ConditionObjectCall)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :AccountSharePricePlanTriggerCondition => AnyOf.new(
          [
            LeafType.new(ConditionType),
            LeafType.new(ConditionObjectCall)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :PayAsYouGoPricePlanTriggerCondition => AnyOf.new(
          [
            LeafType.new(ConditionType),
            LeafType.new(ConditionObjectCall)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :RateplanRatePlanGroup => AnyOf.new(
          [
            LeafType.new(RateplantypeObject),
            LeafType.new(Rateplantype2)
          ],
          UnionTypeContext.new(
            is_array: true,
            is_optional: true
          )
        ),

        :NotificationarraySmsNumbers => AnyOf.new(
          [
            LeafType.new(Cellphonenumber)
          ],
          UnionTypeContext.new(
            is_array: true,
            is_optional: true
          )
        ),

        :PricePlanTriggerCondition => AnyOf.new(
          [
            LeafType.new(ConditionType),
            LeafType.new(ConditionObjectCall)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :DataTrigger1Condition => AnyOf.new(
          [
            LeafType.new(ConditionType),
            LeafType.new(ConditionObjectCall)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :NotifyThreshold => AnyOf.new(
          [
            LeafType.new(Carriercode1)
          ],
          UnionTypeContext.new(
            is_array: true,
            is_optional: true
          )
        ),

        :M5GBichangeRequestDeviceListWithServiceAddress => AnyOf.new(
          [
            LeafType.new(M5GBideviceIdarray2),
            LeafType.new(M5GBiaddressAndcustomerinfo2)
          ],
          UnionTypeContext.new(
            is_array: true,
            is_optional: true
          )
        ),

        :M5GBiactivateRequestDeviceListWithServiceAddress => AnyOf.new(
          [
            LeafType.new(M5GBideviceIdarray),
            LeafType.new(M5GBiaddressAndcustomerinfo)
          ],
          UnionTypeContext.new(
            is_array: true,
            is_optional: true
          )
        ),

        :M5GBiaccountNameobjectCustomFields => AnyOf.new(
          [
            LeafType.new(M5GBikeyValue1)
          ],
          UnionTypeContext.new(
            is_array: true,
            is_optional: true
          )
        ),

        :M5GBiaccountNameobjectDeviceIds => AnyOf.new(
          [
            LeafType.new(M5GBideviceId1)
          ],
          UnionTypeContext.new(
            is_array: true,
            is_optional: true
          )
        ),

        :M5GBiaccountNameobjectExtendedAttributes => AnyOf.new(
          [
            LeafType.new(M5GBiattribute1),
            LeafType.new(M5GBiattribute2)
          ],
          UnionTypeContext.new(
            is_array: true,
            is_optional: true
          )
        ),

        :M5GBideviceIdarrayDeviceId => AnyOf.new(
          [
            LeafType.new(M5GBideviceId1)
          ],
          UnionTypeContext.new(
            is_array: true,
            is_optional: true
          )
        ),

        :Message3 => OneOf.new(
          [
            LeafType.new(Message),
            LeafType.new(Message1),
            LeafType.new(Message2)
          ],
          UnionTypeContext.new(
            is_array: true
          )
        ),

        :Message32 => OneOf.new(
          [
            LeafType.new(Message),
            LeafType.new(Message1),
            LeafType.new(Message2)
          ],
          UnionTypeContext.new(
            is_array: true,
            is_optional: true
          )
        ),

        :Geometry => OneOf.new(
          [
            LeafType.new(LineString, UnionTypeContext.new(
              discriminator_value: 'LineString',
              discriminator: 'type'
            )),
            LeafType.new(Polygon, UnionTypeContext.new(
              discriminator_value: 'Polygon',
              discriminator: 'type'
            )),
            LeafType.new(MultiLineString, UnionTypeContext.new(
              discriminator_value: 'MultiLineString',
              discriminator: 'type'
            )),
            LeafType.new(MultiPolygon, UnionTypeContext.new(
              discriminator_value: 'MultiPolygon',
              discriminator: 'type'
            ))
          ]
        ),

        :Limits => OneOf.new(
          [
            LeafType.new(SpeedItem),
            LeafType.new(HeadingItem)
          ],
          UnionTypeContext.new(
            is_array: true,
            is_optional: true
          )
        ),

        :DataFrameMsgId => OneOf.new(
          [
            LeafType.new(MsgId),
            LeafType.new(MsgId1)
          ]
        ),

        :DataFrameContent => OneOf.new(
          [
            LeafType.new(Content),
            LeafType.new(Content1),
            LeafType.new(Content2),
            LeafType.new(Content3),
            LeafType.new(Content4)
          ]
        ),

        :AdvisoryItem2 => OneOf.new(
          [
            LeafType.new(AdvisoryItem),
            LeafType.new(AdvisoryItem1)
          ],
          UnionTypeContext.new(
            is_array: true
          )
        ),

        :TextPhraseOrItis2 => OneOf.new(
          [
            LeafType.new(TextPhraseOrItis),
            LeafType.new(TextPhraseOrItis1)
          ],
          UnionTypeContext.new(
            is_array: true
          )
        )
      }
    end
    # rubocop:enable Lint/RedundantCopDisableDirective, Style/HashSyntax, Layout/FirstArgumentIndentation

    def self.get(name)
      UnionTypeLookUp.union_types[name]
    end
  end
end
