# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # UsageTriggerResponse Model.
  class UsageTriggerResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Unique usage triggerId
    # @return [String]
    attr_accessor :trigger_id

    # Usage trigger name
    # @return [String]
    attr_accessor :trigger_name

    # Account name
    # @return [String]
    attr_accessor :account_name

    # Service name
    # @return [ServiceName]
    attr_accessor :service_name

    # Percent of subscription at which trigger will send an alert
    # @return [String]
    attr_accessor :threshold_value

    # allowExcess determines whether to restrict usage after exceeds limits
    # @return [TrueClass | FalseClass]
    attr_accessor :allow_excess

    # Send SMS (text) alerts when the thresholdValue is reached.
    # @return [TrueClass | FalseClass]
    attr_accessor :send_sms_notification

    # comma seperated value of list of Phone numbers for SMS notifications
    # @return [String]
    attr_accessor :sms_phone_numbers

    # Send email alerts when the thresholdValue is reached.
    # @return [TrueClass | FalseClass]
    attr_accessor :send_email_notification

    # comma seperated value of list of Email addresses for Email notifications
    # @return [String]
    attr_accessor :email_addresses

    # UTC Date when the usage trigger was created
    # @return [String]
    attr_accessor :create_date

    # UTC Date when the usage trigger was last updated
    # @return [String]
    attr_accessor :update_date

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['trigger_id'] = 'triggerId'
      @_hash['trigger_name'] = 'triggerName'
      @_hash['account_name'] = 'accountName'
      @_hash['service_name'] = 'serviceName'
      @_hash['threshold_value'] = 'thresholdValue'
      @_hash['allow_excess'] = 'allowExcess'
      @_hash['send_sms_notification'] = 'sendSmsNotification'
      @_hash['sms_phone_numbers'] = 'smsPhoneNumbers'
      @_hash['send_email_notification'] = 'sendEmailNotification'
      @_hash['email_addresses'] = 'emailAddresses'
      @_hash['create_date'] = 'createDate'
      @_hash['update_date'] = 'updateDate'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(trigger_id:, trigger_name:, account_name:,
                   service_name: ServiceName::LOCATION, threshold_value:,
                   allow_excess:, send_sms_notification:, sms_phone_numbers:,
                   send_email_notification:, email_addresses:, create_date:,
                   update_date:, additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @trigger_id = trigger_id
      @trigger_name = trigger_name
      @account_name = account_name
      @service_name = service_name
      @threshold_value = threshold_value
      @allow_excess = allow_excess
      @send_sms_notification = send_sms_notification
      @sms_phone_numbers = sms_phone_numbers
      @send_email_notification = send_email_notification
      @email_addresses = email_addresses
      @create_date = create_date
      @update_date = update_date
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      trigger_id = hash.key?('triggerId') ? hash['triggerId'] : nil
      trigger_name = hash.key?('triggerName') ? hash['triggerName'] : nil
      account_name = hash.key?('accountName') ? hash['accountName'] : nil
      service_name = hash['serviceName'] ||= ServiceName::LOCATION
      threshold_value =
        hash.key?('thresholdValue') ? hash['thresholdValue'] : nil
      allow_excess = hash.key?('allowExcess') ? hash['allowExcess'] : nil
      send_sms_notification =
        hash.key?('sendSmsNotification') ? hash['sendSmsNotification'] : nil
      sms_phone_numbers =
        hash.key?('smsPhoneNumbers') ? hash['smsPhoneNumbers'] : nil
      send_email_notification =
        hash.key?('sendEmailNotification') ? hash['sendEmailNotification'] : nil
      email_addresses =
        hash.key?('emailAddresses') ? hash['emailAddresses'] : nil
      create_date = hash.key?('createDate') ? hash['createDate'] : nil
      update_date = hash.key?('updateDate') ? hash['updateDate'] : nil

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      UsageTriggerResponse.new(trigger_id: trigger_id,
                               trigger_name: trigger_name,
                               account_name: account_name,
                               service_name: service_name,
                               threshold_value: threshold_value,
                               allow_excess: allow_excess,
                               send_sms_notification: send_sms_notification,
                               sms_phone_numbers: sms_phone_numbers,
                               send_email_notification: send_email_notification,
                               email_addresses: email_addresses,
                               create_date: create_date,
                               update_date: update_date,
                               additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} trigger_id: #{@trigger_id}, trigger_name: #{@trigger_name}, account_name:"\
      " #{@account_name}, service_name: #{@service_name}, threshold_value: #{@threshold_value},"\
      " allow_excess: #{@allow_excess}, send_sms_notification: #{@send_sms_notification},"\
      " sms_phone_numbers: #{@sms_phone_numbers}, send_email_notification:"\
      " #{@send_email_notification}, email_addresses: #{@email_addresses}, create_date:"\
      " #{@create_date}, update_date: #{@update_date}, additional_properties:"\
      " #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} trigger_id: #{@trigger_id.inspect}, trigger_name: #{@trigger_name.inspect},"\
      " account_name: #{@account_name.inspect}, service_name: #{@service_name.inspect},"\
      " threshold_value: #{@threshold_value.inspect}, allow_excess: #{@allow_excess.inspect},"\
      " send_sms_notification: #{@send_sms_notification.inspect}, sms_phone_numbers:"\
      " #{@sms_phone_numbers.inspect}, send_email_notification:"\
      " #{@send_email_notification.inspect}, email_addresses: #{@email_addresses.inspect},"\
      " create_date: #{@create_date.inspect}, update_date: #{@update_date.inspect},"\
      " additional_properties: #{@additional_properties}>"
    end
  end
end
