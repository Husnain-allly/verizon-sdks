# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # The customer name to be used for line usage taxation.
  class CustomerName < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # An optional title for the customer, such as “Mr.” or “Dr.”
    # @return [String]
    attr_accessor :title

    # The customer's first name.
    # @return [String]
    attr_accessor :first_name

    # The customer's middle name.
    # @return [String]
    attr_accessor :middle_name

    # The customer's last name.
    # @return [String]
    attr_accessor :last_name

    # An optional suffix for the customer name, such as “Jr.” or “III.”
    # @return [String]
    attr_accessor :suffix

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['title'] = 'title'
      @_hash['first_name'] = 'firstName'
      @_hash['middle_name'] = 'middleName'
      @_hash['last_name'] = 'lastName'
      @_hash['suffix'] = 'suffix'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        title
        middle_name
        suffix
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(first_name:, last_name:, title: SKIP, middle_name: SKIP,
                   suffix: SKIP, additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @title = title unless title == SKIP
      @first_name = first_name
      @middle_name = middle_name unless middle_name == SKIP
      @last_name = last_name
      @suffix = suffix unless suffix == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      first_name = hash.key?('firstName') ? hash['firstName'] : nil
      last_name = hash.key?('lastName') ? hash['lastName'] : nil
      title = hash.key?('title') ? hash['title'] : SKIP
      middle_name = hash.key?('middleName') ? hash['middleName'] : SKIP
      suffix = hash.key?('suffix') ? hash['suffix'] : SKIP

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      CustomerName.new(first_name: first_name,
                       last_name: last_name,
                       title: title,
                       middle_name: middle_name,
                       suffix: suffix,
                       additional_properties: additional_properties)
    end

    # Validates an instance of the object from a given value.
    # @param [CustomerName | Hash] The value against the validation is performed.
    def self.validate(value)
      if value.instance_of? self
        return (
          APIHelper.valid_type?(value.first_name,
                                ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.last_name,
                                  ->(val) { val.instance_of? String })
        )
      end

      return false unless value.instance_of? Hash

      (
        APIHelper.valid_type?(value['firstName'],
                              ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['lastName'],
                                ->(val) { val.instance_of? String })
      )
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} title: #{@title}, first_name: #{@first_name}, middle_name: #{@middle_name},"\
      " last_name: #{@last_name}, suffix: #{@suffix}, additional_properties:"\
      " #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} title: #{@title.inspect}, first_name: #{@first_name.inspect}, middle_name:"\
      " #{@middle_name.inspect}, last_name: #{@last_name.inspect}, suffix: #{@suffix.inspect},"\
      " additional_properties: #{@additional_properties}>"
    end
  end
end
