# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # DtoQueryMetricsResponse Model.
  class DtoQueryMetricsResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The number of critical alerts in the queried time period
    # @return [Integer]
    attr_accessor :critical

    # The number of major alerts in the queried time period
    # @return [Integer]
    attr_accessor :major

    # The number of minor alerts in the queried time period
    # @return [Integer]
    attr_accessor :minor

    # The number of sensor reports containing no  alerts in the queried time
    # period
    # @return [Integer]
    attr_accessor :noalert

    # The total number of alerts in the queried time period
    # @return [Integer]
    attr_accessor :total

    # The change in the number of critical alerts in the queried time period
    # @return [Integer]
    attr_accessor :deltacritical

    # The change in the number of major alerts in the queried time period
    # @return [Integer]
    attr_accessor :deltamajor

    # The change in the number of minor alerts in the queried time period
    # @return [Integer]
    attr_accessor :deltaminor

    # The change in the number of sensor reports containing no alerts in the
    # queried time period
    # @return [Integer]
    attr_accessor :deltanoalert

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['critical'] = 'critical'
      @_hash['major'] = 'major'
      @_hash['minor'] = 'minor'
      @_hash['noalert'] = 'noalert'
      @_hash['total'] = 'total'
      @_hash['deltacritical'] = 'deltacritical'
      @_hash['deltamajor'] = 'deltamajor'
      @_hash['deltaminor'] = 'deltaminor'
      @_hash['deltanoalert'] = 'deltanoalert'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        critical
        major
        minor
        noalert
        total
        deltacritical
        deltamajor
        deltaminor
        deltanoalert
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(critical: SKIP, major: SKIP, minor: SKIP, noalert: SKIP,
                   total: SKIP, deltacritical: SKIP, deltamajor: SKIP,
                   deltaminor: SKIP, deltanoalert: SKIP)
      @critical = critical unless critical == SKIP
      @major = major unless major == SKIP
      @minor = minor unless minor == SKIP
      @noalert = noalert unless noalert == SKIP
      @total = total unless total == SKIP
      @deltacritical = deltacritical unless deltacritical == SKIP
      @deltamajor = deltamajor unless deltamajor == SKIP
      @deltaminor = deltaminor unless deltaminor == SKIP
      @deltanoalert = deltanoalert unless deltanoalert == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      critical = hash.key?('critical') ? hash['critical'] : SKIP
      major = hash.key?('major') ? hash['major'] : SKIP
      minor = hash.key?('minor') ? hash['minor'] : SKIP
      noalert = hash.key?('noalert') ? hash['noalert'] : SKIP
      total = hash.key?('total') ? hash['total'] : SKIP
      deltacritical = hash.key?('deltacritical') ? hash['deltacritical'] : SKIP
      deltamajor = hash.key?('deltamajor') ? hash['deltamajor'] : SKIP
      deltaminor = hash.key?('deltaminor') ? hash['deltaminor'] : SKIP
      deltanoalert = hash.key?('deltanoalert') ? hash['deltanoalert'] : SKIP

      # Create object from extracted values.
      DtoQueryMetricsResponse.new(critical: critical,
                                  major: major,
                                  minor: minor,
                                  noalert: noalert,
                                  total: total,
                                  deltacritical: deltacritical,
                                  deltamajor: deltamajor,
                                  deltaminor: deltaminor,
                                  deltanoalert: deltanoalert)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} critical: #{@critical}, major: #{@major}, minor: #{@minor}, noalert:"\
      " #{@noalert}, total: #{@total}, deltacritical: #{@deltacritical}, deltamajor:"\
      " #{@deltamajor}, deltaminor: #{@deltaminor}, deltanoalert: #{@deltanoalert}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} critical: #{@critical.inspect}, major: #{@major.inspect}, minor:"\
      " #{@minor.inspect}, noalert: #{@noalert.inspect}, total: #{@total.inspect}, deltacritical:"\
      " #{@deltacritical.inspect}, deltamajor: #{@deltamajor.inspect}, deltaminor:"\
      " #{@deltaminor.inspect}, deltanoalert: #{@deltanoalert.inspect}>"
    end
  end
end
