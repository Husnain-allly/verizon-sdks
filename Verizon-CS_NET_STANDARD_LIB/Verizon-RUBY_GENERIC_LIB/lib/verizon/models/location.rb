# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Device location information.
  class Location < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # MDN.
    # @return [String]
    attr_accessor :msid

    # Position data.
    # @return [PositionData]
    attr_accessor :pd

    # Position error.
    # @return [PositionError]
    attr_accessor :error

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['msid'] = 'msid'
      @_hash['pd'] = 'pd'
      @_hash['error'] = 'error'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        msid
        pd
        error
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(msid: SKIP, pd: SKIP, error: SKIP,
                   additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @msid = msid unless msid == SKIP
      @pd = pd unless pd == SKIP
      @error = error unless error == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      msid = hash.key?('msid') ? hash['msid'] : SKIP
      pd = PositionData.from_hash(hash['pd']) if hash['pd']
      error = PositionError.from_hash(hash['error']) if hash['error']

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      Location.new(msid: msid,
                   pd: pd,
                   error: error,
                   additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} msid: #{@msid}, pd: #{@pd}, error: #{@error}, additional_properties:"\
      " #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} msid: #{@msid.inspect}, pd: #{@pd.inspect}, error: #{@error.inspect},"\
      " additional_properties: #{@additional_properties}>"
    end
  end
end
