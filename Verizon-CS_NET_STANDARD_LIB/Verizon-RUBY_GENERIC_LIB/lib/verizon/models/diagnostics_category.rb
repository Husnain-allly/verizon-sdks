# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Various types of information about the device, grouped into categories. Each
  # category object contains the category name and a list of Extended Attribute
  # objects as key-value pairs.
  class DiagnosticsCategory < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The name of the category.
    # @return [String]
    attr_accessor :category_name

    # A list of Extended Attribute objects as key-value pairs.
    # @return [Array[CustomFields]]
    attr_accessor :extended_attributes

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['category_name'] = 'categoryName'
      @_hash['extended_attributes'] = 'extendedAttributes'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        category_name
        extended_attributes
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(category_name: SKIP, extended_attributes: SKIP,
                   additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @category_name = category_name unless category_name == SKIP
      @extended_attributes = extended_attributes unless extended_attributes == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      category_name = hash.key?('categoryName') ? hash['categoryName'] : SKIP
      # Parameter is an array, so we need to iterate through it
      extended_attributes = nil
      unless hash['extendedAttributes'].nil?
        extended_attributes = []
        hash['extendedAttributes'].each do |structure|
          extended_attributes << (CustomFields.from_hash(structure) if structure)
        end
      end

      extended_attributes = SKIP unless hash.key?('extendedAttributes')

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      DiagnosticsCategory.new(category_name: category_name,
                              extended_attributes: extended_attributes,
                              additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} category_name: #{@category_name}, extended_attributes:"\
      " #{@extended_attributes}, additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} category_name: #{@category_name.inspect}, extended_attributes:"\
      " #{@extended_attributes.inspect}, additional_properties: #{@additional_properties}>"
    end
  end
end
