# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # DeviceGroupFilter Model.
  class DeviceGroupFilter < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :device_group_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :individual_or_combined

    # The numeric name of the account and must include leading zeroes
    # @return [String]
    attr_accessor :account_name

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['device_group_name'] = 'deviceGroupName'
      @_hash['individual_or_combined'] = 'IndividualOrCombined'
      @_hash['account_name'] = 'accountName'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        device_group_name
        individual_or_combined
        account_name
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(device_group_name: SKIP, individual_or_combined: SKIP,
                   account_name: SKIP, additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @device_group_name = device_group_name unless device_group_name == SKIP
      @individual_or_combined = individual_or_combined unless individual_or_combined == SKIP
      @account_name = account_name unless account_name == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      device_group_name =
        hash.key?('deviceGroupName') ? hash['deviceGroupName'] : SKIP
      individual_or_combined =
        hash.key?('IndividualOrCombined') ? hash['IndividualOrCombined'] : SKIP
      account_name = hash.key?('accountName') ? hash['accountName'] : SKIP

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      DeviceGroupFilter.new(device_group_name: device_group_name,
                            individual_or_combined: individual_or_combined,
                            account_name: account_name,
                            additional_properties: additional_properties)
    end

    # Validates an instance of the object from a given value.
    # @param [DeviceGroupFilter | Hash] The value against the validation is performed.
    def self.validate(value)
      return true if value.instance_of? self

      return false unless value.instance_of? Hash

      true
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} device_group_name: #{@device_group_name}, individual_or_combined:"\
      " #{@individual_or_combined}, account_name: #{@account_name}, additional_properties:"\
      " #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} device_group_name: #{@device_group_name.inspect}, individual_or_combined:"\
      " #{@individual_or_combined.inspect}, account_name: #{@account_name.inspect},"\
      " additional_properties: #{@additional_properties}>"
    end
  end
end
