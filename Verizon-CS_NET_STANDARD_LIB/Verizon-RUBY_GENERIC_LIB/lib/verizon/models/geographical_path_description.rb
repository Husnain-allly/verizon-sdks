# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # This data frame can describe a complex path of arbitrary size using node
  # offset method (LL offsets).
  class GeographicalPathDescription < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The OffsetSystem data frame selects a sequence of node offsets described
    # in the Lat-Long offset method.
    # @return [OffsetSystem]
    attr_accessor :path

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['path'] = 'path'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(path:)
      @path = path
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      path = OffsetSystem.from_hash(hash['path']) if hash['path']

      # Create object from extracted values.
      GeographicalPathDescription.new(path: path)
    end

    # Validates an instance of the object from a given value.
    # @param [GeographicalPathDescription | Hash] The value against the validation is performed.
    def self.validate(value)
      if value.instance_of? self
        return APIHelper.valid_type?(value.path,
                                     ->(val) { OffsetSystem.validate(val) },
                                     is_model_hash: true)
      end

      return false unless value.instance_of? Hash

      APIHelper.valid_type?(value['path'],
                            ->(val) { OffsetSystem.validate(val) },
                            is_model_hash: true)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} path: #{@path}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} path: #{@path.inspect}>"
    end
  end
end
