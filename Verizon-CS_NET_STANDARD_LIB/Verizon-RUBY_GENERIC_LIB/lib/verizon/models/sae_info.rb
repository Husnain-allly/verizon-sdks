# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # SaeInfo Model.
  class SaeInfo < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # List of data frames.
    # @return [Array[DataFrame]]
    attr_accessor :data_frames

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['data_frames'] = 'dataFrames'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(data_frames:)
      @data_frames = data_frames
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      data_frames = nil
      unless hash['dataFrames'].nil?
        data_frames = []
        hash['dataFrames'].each do |structure|
          data_frames << (DataFrame.from_hash(structure) if structure)
        end
      end

      data_frames = nil unless hash.key?('dataFrames')

      # Create object from extracted values.
      SaeInfo.new(data_frames: data_frames)
    end

    # Validates an instance of the object from a given value.
    # @param [SaeInfo | Hash] The value against the validation is performed.
    def self.validate(value)
      if value.instance_of? self
        return APIHelper.valid_type?(value.data_frames,
                                     ->(val) { DataFrame.validate(val) },
                                     is_model_hash: true,
                                     is_inner_model_hash: true)
      end

      return false unless value.instance_of? Hash

      APIHelper.valid_type?(value['dataFrames'],
                            ->(val) { DataFrame.validate(val) },
                            is_model_hash: true,
                            is_inner_model_hash: true)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} data_frames: #{@data_frames}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} data_frames: #{@data_frames.inspect}>"
    end
  end
end
