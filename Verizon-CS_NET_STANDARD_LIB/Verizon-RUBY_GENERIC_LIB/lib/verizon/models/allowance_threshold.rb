# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # AllowanceThreshold Model.
  class AllowanceThreshold < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [TrueClass | FalseClass]
    attr_accessor :percentage50

    # TODO: Write general description for this method
    # @return [TrueClass | FalseClass]
    attr_accessor :percentage75

    # TODO: Write general description for this method
    # @return [TrueClass | FalseClass]
    attr_accessor :percentage90

    # TODO: Write general description for this method
    # @return [TrueClass | FalseClass]
    attr_accessor :percentage100

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['percentage50'] = 'percentage50'
      @_hash['percentage75'] = 'percentage75'
      @_hash['percentage90'] = 'percentage90'
      @_hash['percentage100'] = 'percentage100'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        percentage50
        percentage75
        percentage90
        percentage100
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(percentage50: SKIP, percentage75: SKIP, percentage90: SKIP,
                   percentage100: SKIP, additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @percentage50 = percentage50 unless percentage50 == SKIP
      @percentage75 = percentage75 unless percentage75 == SKIP
      @percentage90 = percentage90 unless percentage90 == SKIP
      @percentage100 = percentage100 unless percentage100 == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      percentage50 = hash.key?('percentage50') ? hash['percentage50'] : SKIP
      percentage75 = hash.key?('percentage75') ? hash['percentage75'] : SKIP
      percentage90 = hash.key?('percentage90') ? hash['percentage90'] : SKIP
      percentage100 = hash.key?('percentage100') ? hash['percentage100'] : SKIP

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      AllowanceThreshold.new(percentage50: percentage50,
                             percentage75: percentage75,
                             percentage90: percentage90,
                             percentage100: percentage100,
                             additional_properties: additional_properties)
    end

    # Validates an instance of the object from a given value.
    # @param [AllowanceThreshold | Hash] The value against the validation is performed.
    def self.validate(value)
      return true if value.instance_of? self

      return false unless value.instance_of? Hash

      true
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} percentage50: #{@percentage50}, percentage75: #{@percentage75},"\
      " percentage90: #{@percentage90}, percentage100: #{@percentage100}, additional_properties:"\
      " #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} percentage50: #{@percentage50.inspect}, percentage75:"\
      " #{@percentage75.inspect}, percentage90: #{@percentage90.inspect}, percentage100:"\
      " #{@percentage100.inspect}, additional_properties: #{@additional_properties}>"
    end
  end
end
