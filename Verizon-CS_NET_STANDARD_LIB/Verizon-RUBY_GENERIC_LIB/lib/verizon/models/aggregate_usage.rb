# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # AggregateUsage Model.
  class AggregateUsage < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [GioDeviceId]
    attr_accessor :device_id

    # The numeric name of the account, in the format "0000123456-00001". Leading
    # zeros must be included.
    # @return [String]
    attr_accessor :account_name

    # The start date of the time period queried as "$datetime"
    # @return [String]
    attr_accessor :start_time

    # The end date of the time period being queried as "$datetime"
    # @return [String]
    attr_accessor :end_time

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['device_id'] = 'deviceId'
      @_hash['account_name'] = 'accountName'
      @_hash['start_time'] = 'startTime'
      @_hash['end_time'] = 'endTime'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        device_id
        account_name
        start_time
        end_time
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(device_id: SKIP, account_name: SKIP, start_time: SKIP,
                   end_time: SKIP, additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @device_id = device_id unless device_id == SKIP
      @account_name = account_name unless account_name == SKIP
      @start_time = start_time unless start_time == SKIP
      @end_time = end_time unless end_time == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      device_id = GioDeviceId.from_hash(hash['deviceId']) if hash['deviceId']
      account_name = hash.key?('accountName') ? hash['accountName'] : SKIP
      start_time = hash.key?('startTime') ? hash['startTime'] : SKIP
      end_time = hash.key?('endTime') ? hash['endTime'] : SKIP

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      AggregateUsage.new(device_id: device_id,
                         account_name: account_name,
                         start_time: start_time,
                         end_time: end_time,
                         additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} device_id: #{@device_id}, account_name: #{@account_name}, start_time:"\
      " #{@start_time}, end_time: #{@end_time}, additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} device_id: #{@device_id.inspect}, account_name: #{@account_name.inspect},"\
      " start_time: #{@start_time.inspect}, end_time: #{@end_time.inspect}, additional_properties:"\
      " #{@additional_properties}>"
    end
  end
end
