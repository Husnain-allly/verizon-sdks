# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # SaeAlert Model.
  class SaeAlert < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The ITIS Code that describes the alert/danger/hazard. All ITS standards
    # use the same types here to explain the type of the alert/danger/hazard
    # involved.
    # The complete set of ITIS codes can be found in Volume Two of the SAE J2540
    # standard. This is a set of over 1000 items which are used to encode common
    # events and list items in ITS.
    # @return [Integer]
    attr_accessor :type_event

    # ITIS code set entries to further describe the event, give advice, or any
    # other ITIS codes related to the event/danger/hazard.
    # @return [Array[Integer]]
    attr_accessor :description

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['type_event'] = 'typeEvent'
      @_hash['description'] = 'description'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        description
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(type_event:, description: SKIP)
      @type_event = type_event
      @description = description unless description == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      type_event = hash.key?('typeEvent') ? hash['typeEvent'] : nil
      description = hash.key?('description') ? hash['description'] : SKIP

      # Create object from extracted values.
      SaeAlert.new(type_event: type_event,
                   description: description)
    end

    # Validates an instance of the object from a given value.
    # @param [SaeAlert | Hash] The value against the validation is performed.
    def self.validate(value)
      if value.instance_of? self
        return APIHelper.valid_type?(value.type_event,
                                     ->(val) { val.instance_of? Integer })
      end

      return false unless value.instance_of? Hash

      APIHelper.valid_type?(value['typeEvent'],
                            ->(val) { val.instance_of? Integer })
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} type_event: #{@type_event}, description: #{@description}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} type_event: #{@type_event.inspect}, description: #{@description.inspect}>"
    end
  end
end
