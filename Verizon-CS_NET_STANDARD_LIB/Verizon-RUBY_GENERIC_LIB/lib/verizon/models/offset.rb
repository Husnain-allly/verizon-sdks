# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # The sequence of node offsets then describes a path or polygon in the
  # Lat-Long system.
  class Offset < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The NodeListLL data structure provides the sequence of signed offset node
    # point values for determining the latitude and longitude. Each LL point is
    # referred to as a node point.
    # @return [NodeListLl]
    attr_accessor :ll

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['ll'] = 'll'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(ll:)
      @ll = ll
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      ll = NodeListLl.from_hash(hash['ll']) if hash['ll']

      # Create object from extracted values.
      Offset.new(ll: ll)
    end

    # Validates an instance of the object from a given value.
    # @param [Offset | Hash] The value against the validation is performed.
    def self.validate(value)
      if value.instance_of? self
        return APIHelper.valid_type?(value.ll,
                                     ->(val) { NodeListLl.validate(val) },
                                     is_model_hash: true)
      end

      return false unless value.instance_of? Hash

      APIHelper.valid_type?(value['ll'],
                            ->(val) { NodeListLl.validate(val) },
                            is_model_hash: true)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} ll: #{@ll}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} ll: #{@ll.inspect}>"
    end
  end
end
