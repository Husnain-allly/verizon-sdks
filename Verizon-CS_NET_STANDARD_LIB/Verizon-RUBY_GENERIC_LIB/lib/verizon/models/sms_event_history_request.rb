# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Verizon
  # SmsEventHistoryRequest Model.
  class SmsEventHistoryRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [GioDeviceId]
    attr_accessor :device_id

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :earliest

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :latest

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['device_id'] = 'deviceId'
      @_hash['earliest'] = 'earliest'
      @_hash['latest'] = 'latest'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        earliest
        latest
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(device_id:, earliest: SKIP, latest: SKIP)
      @device_id = device_id
      @earliest = earliest unless earliest == SKIP
      @latest = latest unless latest == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      device_id = GioDeviceId.from_hash(hash['deviceId']) if hash['deviceId']
      earliest = if hash.key?('earliest')
                   (DateTimeHelper.from_rfc3339(hash['earliest']) if hash['earliest'])
                 else
                   SKIP
                 end
      latest = if hash.key?('latest')
                 (DateTimeHelper.from_rfc3339(hash['latest']) if hash['latest'])
               else
                 SKIP
               end

      # Create object from extracted values.
      SmsEventHistoryRequest.new(device_id: device_id,
                                 earliest: earliest,
                                 latest: latest)
    end

    def to_custom_earliest
      DateTimeHelper.to_rfc3339(earliest)
    end

    def to_custom_latest
      DateTimeHelper.to_rfc3339(latest)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} device_id: #{@device_id}, earliest: #{@earliest}, latest: #{@latest}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} device_id: #{@device_id.inspect}, earliest: #{@earliest.inspect}, latest:"\
      " #{@latest.inspect}>"
    end
  end
end
