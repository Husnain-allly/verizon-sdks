# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Verizon
  # Firmware information.
  class Firmware < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The name of the firmware image, provided by the device manufacturer.
    # @return [String]
    attr_accessor :firmware_name

    # Internal reference; can be ignored.
    # @return [String]
    attr_accessor :participant_name

    # The release date of the firmware image.
    # @return [DateTime]
    attr_accessor :launch_date

    # Additional information about the release.
    # @return [String]
    attr_accessor :release_note

    # The device model that the firmware applies to.
    # @return [String]
    attr_accessor :model

    # The device make that the firmware applies to.
    # @return [String]
    attr_accessor :make

    # The firmware version that must currently be on the device to upgrade.
    # @return [String]
    attr_accessor :from_version

    # The firmware version that will be on the device after an upgrade.
    # @return [String]
    attr_accessor :to_version

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['firmware_name'] = 'firmwareName'
      @_hash['participant_name'] = 'participantName'
      @_hash['launch_date'] = 'launchDate'
      @_hash['release_note'] = 'releaseNote'
      @_hash['model'] = 'model'
      @_hash['make'] = 'make'
      @_hash['from_version'] = 'fromVersion'
      @_hash['to_version'] = 'toVersion'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        firmware_name
        participant_name
        launch_date
        release_note
        model
        make
        from_version
        to_version
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(firmware_name: SKIP, participant_name: SKIP,
                   launch_date: SKIP, release_note: SKIP, model: SKIP,
                   make: SKIP, from_version: SKIP, to_version: SKIP,
                   additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @firmware_name = firmware_name unless firmware_name == SKIP
      @participant_name = participant_name unless participant_name == SKIP
      @launch_date = launch_date unless launch_date == SKIP
      @release_note = release_note unless release_note == SKIP
      @model = model unless model == SKIP
      @make = make unless make == SKIP
      @from_version = from_version unless from_version == SKIP
      @to_version = to_version unless to_version == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      firmware_name = hash.key?('firmwareName') ? hash['firmwareName'] : SKIP
      participant_name =
        hash.key?('participantName') ? hash['participantName'] : SKIP
      launch_date = if hash.key?('launchDate')
                      (DateTimeHelper.from_rfc3339(hash['launchDate']) if hash['launchDate'])
                    else
                      SKIP
                    end
      release_note = hash.key?('releaseNote') ? hash['releaseNote'] : SKIP
      model = hash.key?('model') ? hash['model'] : SKIP
      make = hash.key?('make') ? hash['make'] : SKIP
      from_version = hash.key?('fromVersion') ? hash['fromVersion'] : SKIP
      to_version = hash.key?('toVersion') ? hash['toVersion'] : SKIP

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      Firmware.new(firmware_name: firmware_name,
                   participant_name: participant_name,
                   launch_date: launch_date,
                   release_note: release_note,
                   model: model,
                   make: make,
                   from_version: from_version,
                   to_version: to_version,
                   additional_properties: additional_properties)
    end

    def to_custom_launch_date
      DateTimeHelper.to_rfc3339(launch_date)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} firmware_name: #{@firmware_name}, participant_name: #{@participant_name},"\
      " launch_date: #{@launch_date}, release_note: #{@release_note}, model: #{@model}, make:"\
      " #{@make}, from_version: #{@from_version}, to_version: #{@to_version},"\
      " additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} firmware_name: #{@firmware_name.inspect}, participant_name:"\
      " #{@participant_name.inspect}, launch_date: #{@launch_date.inspect}, release_note:"\
      " #{@release_note.inspect}, model: #{@model.inspect}, make: #{@make.inspect}, from_version:"\
      " #{@from_version.inspect}, to_version: #{@to_version.inspect}, additional_properties:"\
      " #{@additional_properties}>"
    end
  end
end
