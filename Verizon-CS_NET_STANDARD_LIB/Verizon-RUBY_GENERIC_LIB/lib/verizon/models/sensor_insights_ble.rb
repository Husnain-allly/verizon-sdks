# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Property objects for Bluetooth Low-Energy (BLE) devices
  class SensorInsightsBle < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The data mode the sensor is using
    # @return [Integer]
    attr_accessor :data_mode

    # The numeric manufacturer ID
    # @return [Integer]
    attr_accessor :manufacturer_id

    # How frequently the device can be scanned
    # @return [Integer]
    attr_accessor :max_num_scan

    # The minimum signal strength needed for the sensor to transmit (in Decibels
    # or dB)
    # @return [Integer]
    attr_accessor :min_sig_str

    # The ammount of time to monitor the sensor and varies by device
    # @return [Integer]
    attr_accessor :monitor_period

    # Values for the manufacturer and these vary by device
    # @return [Array[Object]]
    attr_accessor :more_manuf_id

    # The operation mode
    # @return [Integer]
    attr_accessor :op_mode

    # The ammount of time between sensor readings and reports
    # @return [Integer]
    attr_accessor :report_offset

    # The ammount of time between reports
    # @return [Integer]
    attr_accessor :report_period

    # The report type
    # @return [Integer]
    attr_accessor :report_type

    # The ammount of time the sensor is queried for data
    # @return [Integer]
    attr_accessor :scan_duration

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['data_mode'] = 'dataMode'
      @_hash['manufacturer_id'] = 'manufacturerId'
      @_hash['max_num_scan'] = 'maxNumScan'
      @_hash['min_sig_str'] = 'minSigStr'
      @_hash['monitor_period'] = 'monitorPeriod'
      @_hash['more_manuf_id'] = 'moreManufId'
      @_hash['op_mode'] = 'opMode'
      @_hash['report_offset'] = 'reportOffset'
      @_hash['report_period'] = 'reportPeriod'
      @_hash['report_type'] = 'reportType'
      @_hash['scan_duration'] = 'scanDuration'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        data_mode
        manufacturer_id
        max_num_scan
        min_sig_str
        monitor_period
        more_manuf_id
        op_mode
        report_offset
        report_period
        report_type
        scan_duration
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(data_mode: SKIP, manufacturer_id: SKIP, max_num_scan: SKIP,
                   min_sig_str: SKIP, monitor_period: SKIP, more_manuf_id: SKIP,
                   op_mode: SKIP, report_offset: SKIP, report_period: SKIP,
                   report_type: SKIP, scan_duration: SKIP,
                   additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @data_mode = data_mode unless data_mode == SKIP
      @manufacturer_id = manufacturer_id unless manufacturer_id == SKIP
      @max_num_scan = max_num_scan unless max_num_scan == SKIP
      @min_sig_str = min_sig_str unless min_sig_str == SKIP
      @monitor_period = monitor_period unless monitor_period == SKIP
      @more_manuf_id = more_manuf_id unless more_manuf_id == SKIP
      @op_mode = op_mode unless op_mode == SKIP
      @report_offset = report_offset unless report_offset == SKIP
      @report_period = report_period unless report_period == SKIP
      @report_type = report_type unless report_type == SKIP
      @scan_duration = scan_duration unless scan_duration == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      data_mode = hash.key?('dataMode') ? hash['dataMode'] : SKIP
      manufacturer_id =
        hash.key?('manufacturerId') ? hash['manufacturerId'] : SKIP
      max_num_scan = hash.key?('maxNumScan') ? hash['maxNumScan'] : SKIP
      min_sig_str = hash.key?('minSigStr') ? hash['minSigStr'] : SKIP
      monitor_period = hash.key?('monitorPeriod') ? hash['monitorPeriod'] : SKIP
      more_manuf_id = hash.key?('moreManufId') ? hash['moreManufId'] : SKIP
      op_mode = hash.key?('opMode') ? hash['opMode'] : SKIP
      report_offset = hash.key?('reportOffset') ? hash['reportOffset'] : SKIP
      report_period = hash.key?('reportPeriod') ? hash['reportPeriod'] : SKIP
      report_type = hash.key?('reportType') ? hash['reportType'] : SKIP
      scan_duration = hash.key?('scanDuration') ? hash['scanDuration'] : SKIP

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      SensorInsightsBle.new(data_mode: data_mode,
                            manufacturer_id: manufacturer_id,
                            max_num_scan: max_num_scan,
                            min_sig_str: min_sig_str,
                            monitor_period: monitor_period,
                            more_manuf_id: more_manuf_id,
                            op_mode: op_mode,
                            report_offset: report_offset,
                            report_period: report_period,
                            report_type: report_type,
                            scan_duration: scan_duration,
                            additional_properties: additional_properties)
    end

    # Validates an instance of the object from a given value.
    # @param [SensorInsightsBle | Hash] The value against the validation is performed.
    def self.validate(value)
      return true if value.instance_of? self

      return false unless value.instance_of? Hash

      true
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} data_mode: #{@data_mode}, manufacturer_id: #{@manufacturer_id},"\
      " max_num_scan: #{@max_num_scan}, min_sig_str: #{@min_sig_str}, monitor_period:"\
      " #{@monitor_period}, more_manuf_id: #{@more_manuf_id}, op_mode: #{@op_mode}, report_offset:"\
      " #{@report_offset}, report_period: #{@report_period}, report_type: #{@report_type},"\
      " scan_duration: #{@scan_duration}, additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} data_mode: #{@data_mode.inspect}, manufacturer_id:"\
      " #{@manufacturer_id.inspect}, max_num_scan: #{@max_num_scan.inspect}, min_sig_str:"\
      " #{@min_sig_str.inspect}, monitor_period: #{@monitor_period.inspect}, more_manuf_id:"\
      " #{@more_manuf_id.inspect}, op_mode: #{@op_mode.inspect}, report_offset:"\
      " #{@report_offset.inspect}, report_period: #{@report_period.inspect}, report_type:"\
      " #{@report_type.inspect}, scan_duration: #{@scan_duration.inspect}, additional_properties:"\
      " #{@additional_properties}>"
    end
  end
end
