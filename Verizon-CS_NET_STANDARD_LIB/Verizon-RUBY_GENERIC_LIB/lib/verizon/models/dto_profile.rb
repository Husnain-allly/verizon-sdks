# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # DtoProfile Model.
  class DtoProfile < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # profile kind
    # @return [String]
    attr_accessor :kind

    # The resource version
    # @return [String]
    attr_accessor :version

    # device model id
    # @return [String]
    attr_accessor :modelid

    # profile name
    # @return [String]
    attr_accessor :name

    # profile name
    # @return [Object]
    attr_accessor :configuration

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['kind'] = 'kind'
      @_hash['version'] = 'version'
      @_hash['modelid'] = 'modelid'
      @_hash['name'] = 'name'
      @_hash['configuration'] = 'configuration'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        kind
        version
        modelid
        name
        configuration
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(kind: SKIP, version: SKIP, modelid: SKIP, name: SKIP,
                   configuration: SKIP, additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @kind = kind unless kind == SKIP
      @version = version unless version == SKIP
      @modelid = modelid unless modelid == SKIP
      @name = name unless name == SKIP
      @configuration = configuration unless configuration == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      kind = hash.key?('kind') ? hash['kind'] : SKIP
      version = hash.key?('version') ? hash['version'] : SKIP
      modelid = hash.key?('modelid') ? hash['modelid'] : SKIP
      name = hash.key?('name') ? hash['name'] : SKIP
      configuration = hash.key?('configuration') ? hash['configuration'] : SKIP

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      DtoProfile.new(kind: kind,
                     version: version,
                     modelid: modelid,
                     name: name,
                     configuration: configuration,
                     additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} kind: #{@kind}, version: #{@version}, modelid: #{@modelid}, name: #{@name},"\
      " configuration: #{@configuration}, additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} kind: #{@kind.inspect}, version: #{@version.inspect}, modelid:"\
      " #{@modelid.inspect}, name: #{@name.inspect}, configuration: #{@configuration.inspect},"\
      " additional_properties: #{@additional_properties}>"
    end
  end
end
