# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Verizon
  # ActionResultwithDeviceConfig Model.
  class ActionResultwithDeviceConfig < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Timestamp of the record
    # @return [DateTime]
    attr_accessor :createdon

    # Timestamp of the record
    # @return [String]
    attr_accessor :description

    # This is a UUID value of the device created when the device is onboarded
    # @return [String]
    attr_accessor :deviceid

    # Error message
    # @return [String]
    attr_accessor :errmsg

    # Error message
    # @return [DtoDeviceActionSetConfiguration]
    attr_accessor :fields

    # UUID of the ECPD account the user belongs to
    # @return [String]
    attr_accessor :foreignid

    # UUID of the user record, assigned at creation
    # @return [String]
    attr_accessor :id

    # Timestamp of the record
    # @return [DateTime]
    attr_accessor :lastupdated

    # The current status of the device or transaction and will be `success` or
    # `failed`
    # @return [String]
    attr_accessor :state

    # The system-generated UUID of the transaction
    # @return [String]
    attr_accessor :transactionid

    # The resource version
    # @return [String]
    attr_accessor :version

    # The UUID of the resource version
    # @return [String]
    attr_accessor :versionid

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['createdon'] = 'createdon'
      @_hash['description'] = 'description'
      @_hash['deviceid'] = 'deviceid'
      @_hash['errmsg'] = 'errmsg'
      @_hash['fields'] = 'fields'
      @_hash['foreignid'] = 'foreignid'
      @_hash['id'] = 'id'
      @_hash['lastupdated'] = 'lastupdated'
      @_hash['state'] = 'state'
      @_hash['transactionid'] = 'transactionid'
      @_hash['version'] = 'version'
      @_hash['versionid'] = 'versionid'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        createdon
        description
        deviceid
        errmsg
        fields
        foreignid
        id
        lastupdated
        state
        transactionid
        version
        versionid
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(createdon: SKIP, description: SKIP, deviceid: SKIP,
                   errmsg: SKIP, fields: SKIP, foreignid: SKIP, id: SKIP,
                   lastupdated: SKIP, state: SKIP, transactionid: SKIP,
                   version: SKIP, versionid: SKIP, additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @createdon = createdon unless createdon == SKIP
      @description = description unless description == SKIP
      @deviceid = deviceid unless deviceid == SKIP
      @errmsg = errmsg unless errmsg == SKIP
      @fields = fields unless fields == SKIP
      @foreignid = foreignid unless foreignid == SKIP
      @id = id unless id == SKIP
      @lastupdated = lastupdated unless lastupdated == SKIP
      @state = state unless state == SKIP
      @transactionid = transactionid unless transactionid == SKIP
      @version = version unless version == SKIP
      @versionid = versionid unless versionid == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      createdon = if hash.key?('createdon')
                    (DateTimeHelper.from_rfc3339(hash['createdon']) if hash['createdon'])
                  else
                    SKIP
                  end
      description = hash.key?('description') ? hash['description'] : SKIP
      deviceid = hash.key?('deviceid') ? hash['deviceid'] : SKIP
      errmsg = hash.key?('errmsg') ? hash['errmsg'] : SKIP
      fields = DtoDeviceActionSetConfiguration.from_hash(hash['fields']) if hash['fields']
      foreignid = hash.key?('foreignid') ? hash['foreignid'] : SKIP
      id = hash.key?('id') ? hash['id'] : SKIP
      lastupdated = if hash.key?('lastupdated')
                      (DateTimeHelper.from_rfc3339(hash['lastupdated']) if hash['lastupdated'])
                    else
                      SKIP
                    end
      state = hash.key?('state') ? hash['state'] : SKIP
      transactionid = hash.key?('transactionid') ? hash['transactionid'] : SKIP
      version = hash.key?('version') ? hash['version'] : SKIP
      versionid = hash.key?('versionid') ? hash['versionid'] : SKIP

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      ActionResultwithDeviceConfig.new(createdon: createdon,
                                       description: description,
                                       deviceid: deviceid,
                                       errmsg: errmsg,
                                       fields: fields,
                                       foreignid: foreignid,
                                       id: id,
                                       lastupdated: lastupdated,
                                       state: state,
                                       transactionid: transactionid,
                                       version: version,
                                       versionid: versionid,
                                       additional_properties: additional_properties)
    end

    def to_custom_createdon
      DateTimeHelper.to_rfc3339(createdon)
    end

    def to_custom_lastupdated
      DateTimeHelper.to_rfc3339(lastupdated)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} createdon: #{@createdon}, description: #{@description}, deviceid:"\
      " #{@deviceid}, errmsg: #{@errmsg}, fields: #{@fields}, foreignid: #{@foreignid}, id:"\
      " #{@id}, lastupdated: #{@lastupdated}, state: #{@state}, transactionid: #{@transactionid},"\
      " version: #{@version}, versionid: #{@versionid}, additional_properties:"\
      " #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} createdon: #{@createdon.inspect}, description: #{@description.inspect},"\
      " deviceid: #{@deviceid.inspect}, errmsg: #{@errmsg.inspect}, fields: #{@fields.inspect},"\
      " foreignid: #{@foreignid.inspect}, id: #{@id.inspect}, lastupdated:"\
      " #{@lastupdated.inspect}, state: #{@state.inspect}, transactionid:"\
      " #{@transactionid.inspect}, version: #{@version.inspect}, versionid: #{@versionid.inspect},"\
      " additional_properties: #{@additional_properties}>"
    end
  end
end
