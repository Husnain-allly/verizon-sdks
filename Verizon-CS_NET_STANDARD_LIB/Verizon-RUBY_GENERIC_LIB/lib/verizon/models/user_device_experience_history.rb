# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Verizon
  # UserDeviceExperienceHistory Model.
  class UserDeviceExperienceHistory < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The billing account ID. This is the same value as the Account ID
    # @return [String]
    attr_accessor :billingaccountid

    # Timestamp of the record
    # @return [DateTime]
    attr_accessor :createdon

    # Timestamp of the record
    # @return [DateTime]
    attr_accessor :date

    # This is a score based on combination of network coverage and network
    # outage affecting the device's ability to connect to the network. This is a
    # count of devices that have failed
    # @return [Integer]
    attr_accessor :devicesbad

    # This is a score based on combination of network coverage and network
    # outage affecting the device's ability to connect to the network. This is a
    # count of devices that are impaired
    # @return [Integer]
    attr_accessor :devicesfair

    # This is a score based on combination of network coverage and network
    # outage affecting the device's ability to connect to the network. This is a
    # count of devices that have no issues
    # @return [Integer]
    attr_accessor :devicesgood

    # A count of all devices
    # @return [Integer]
    attr_accessor :devicestotal

    # UUID of the ECPD account the user belongs to
    # @return [String]
    attr_accessor :foreignid

    # UUID of the user record, assigned at creation
    # @return [String]
    attr_accessor :id

    # Timestamp of the record
    # @return [DateTime]
    attr_accessor :lastupdated

    # The resource version
    # @return [String]
    attr_accessor :version

    # The UUID of the resource version
    # @return [String]
    attr_accessor :versionid

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['billingaccountid'] = 'billingaccountid'
      @_hash['createdon'] = 'createdon'
      @_hash['date'] = 'date'
      @_hash['devicesbad'] = 'devicesbad'
      @_hash['devicesfair'] = 'devicesfair'
      @_hash['devicesgood'] = 'devicesgood'
      @_hash['devicestotal'] = 'devicestotal'
      @_hash['foreignid'] = 'foreignid'
      @_hash['id'] = 'id'
      @_hash['lastupdated'] = 'lastupdated'
      @_hash['version'] = 'version'
      @_hash['versionid'] = 'versionid'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        billingaccountid
        createdon
        date
        devicesbad
        devicesfair
        devicesgood
        devicestotal
        foreignid
        id
        lastupdated
        version
        versionid
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(billingaccountid: SKIP, createdon: SKIP, date: SKIP,
                   devicesbad: SKIP, devicesfair: SKIP, devicesgood: SKIP,
                   devicestotal: SKIP, foreignid: SKIP, id: SKIP,
                   lastupdated: SKIP, version: SKIP, versionid: SKIP)
      @billingaccountid = billingaccountid unless billingaccountid == SKIP
      @createdon = createdon unless createdon == SKIP
      @date = date unless date == SKIP
      @devicesbad = devicesbad unless devicesbad == SKIP
      @devicesfair = devicesfair unless devicesfair == SKIP
      @devicesgood = devicesgood unless devicesgood == SKIP
      @devicestotal = devicestotal unless devicestotal == SKIP
      @foreignid = foreignid unless foreignid == SKIP
      @id = id unless id == SKIP
      @lastupdated = lastupdated unless lastupdated == SKIP
      @version = version unless version == SKIP
      @versionid = versionid unless versionid == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      billingaccountid =
        hash.key?('billingaccountid') ? hash['billingaccountid'] : SKIP
      createdon = if hash.key?('createdon')
                    (DateTimeHelper.from_rfc3339(hash['createdon']) if hash['createdon'])
                  else
                    SKIP
                  end
      date = if hash.key?('date')
               (DateTimeHelper.from_rfc3339(hash['date']) if hash['date'])
             else
               SKIP
             end
      devicesbad = hash.key?('devicesbad') ? hash['devicesbad'] : SKIP
      devicesfair = hash.key?('devicesfair') ? hash['devicesfair'] : SKIP
      devicesgood = hash.key?('devicesgood') ? hash['devicesgood'] : SKIP
      devicestotal = hash.key?('devicestotal') ? hash['devicestotal'] : SKIP
      foreignid = hash.key?('foreignid') ? hash['foreignid'] : SKIP
      id = hash.key?('id') ? hash['id'] : SKIP
      lastupdated = if hash.key?('lastupdated')
                      (DateTimeHelper.from_rfc3339(hash['lastupdated']) if hash['lastupdated'])
                    else
                      SKIP
                    end
      version = hash.key?('version') ? hash['version'] : SKIP
      versionid = hash.key?('versionid') ? hash['versionid'] : SKIP

      # Create object from extracted values.
      UserDeviceExperienceHistory.new(billingaccountid: billingaccountid,
                                      createdon: createdon,
                                      date: date,
                                      devicesbad: devicesbad,
                                      devicesfair: devicesfair,
                                      devicesgood: devicesgood,
                                      devicestotal: devicestotal,
                                      foreignid: foreignid,
                                      id: id,
                                      lastupdated: lastupdated,
                                      version: version,
                                      versionid: versionid)
    end

    def to_custom_createdon
      DateTimeHelper.to_rfc3339(createdon)
    end

    def to_custom_date
      DateTimeHelper.to_rfc3339(date)
    end

    def to_custom_lastupdated
      DateTimeHelper.to_rfc3339(lastupdated)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} billingaccountid: #{@billingaccountid}, createdon: #{@createdon}, date:"\
      " #{@date}, devicesbad: #{@devicesbad}, devicesfair: #{@devicesfair}, devicesgood:"\
      " #{@devicesgood}, devicestotal: #{@devicestotal}, foreignid: #{@foreignid}, id: #{@id},"\
      " lastupdated: #{@lastupdated}, version: #{@version}, versionid: #{@versionid}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} billingaccountid: #{@billingaccountid.inspect}, createdon:"\
      " #{@createdon.inspect}, date: #{@date.inspect}, devicesbad: #{@devicesbad.inspect},"\
      " devicesfair: #{@devicesfair.inspect}, devicesgood: #{@devicesgood.inspect}, devicestotal:"\
      " #{@devicestotal.inspect}, foreignid: #{@foreignid.inspect}, id: #{@id.inspect},"\
      " lastupdated: #{@lastupdated.inspect}, version: #{@version.inspect}, versionid:"\
      " #{@versionid.inspect}>"
    end
  end
end
