# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Verizon
  # UserSmartAlert Model.
  class UserSmartAlert < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Not used in this release, future functionality
    # @return [String]
    attr_accessor :accountclientid

    # The billing account ID. This is the same value as the Account ID
    # @return [String]
    attr_accessor :billingaccountid

    # The type of alert and will be either `telemetry` or `infrastructure`
    # @return [String]
    attr_accessor :category

    # The condition or threshold for an alert
    # @return [Integer]
    attr_accessor :condition

    # Timestamp of the record
    # @return [DateTime]
    attr_accessor :createdon

    # a short description
    # @return [String]
    attr_accessor :description

    # This is a UUID value of the device created when the device is onboarded
    # @return [String]
    attr_accessor :deviceid

    # UUID of the ECPD account the user belongs to
    # @return [String]
    attr_accessor :foreignid

    # UUID of the user record, assigned at creation
    # @return [String]
    attr_accessor :id

    # A flag that indicates if the alarm has been acknowledged
    # @return [TrueClass | FalseClass]
    attr_accessor :isacknowledged

    # A flag that indicates if the alarm has been cleared
    # @return [TrueClass | FalseClass]
    attr_accessor :iscleared

    # A flag that indicates if the alarm has been disabled
    # @return [TrueClass | FalseClass]
    attr_accessor :isdisabled

    # Timestamp of the record
    # @return [DateTime]
    attr_accessor :lastupdated

    # User defined name of the record
    # @return [String]
    attr_accessor :name

    # The UUID of a rule for alerts
    # @return [String]
    attr_accessor :ruleid

    # The threshold value to trigger an alert and will be Critical, Major or
    # Minor
    # @return [String]
    attr_accessor :severity

    # The current status of the device or transaction and will be `success` or
    # `failed`
    # @return [String]
    attr_accessor :state

    # template of the rule which triggered a given alert
    # @return [String]
    attr_accessor :template

    # The resource version
    # @return [String]
    attr_accessor :version

    # The UUID of the resource version
    # @return [String]
    attr_accessor :versionid

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['accountclientid'] = 'accountclientid'
      @_hash['billingaccountid'] = 'billingaccountid'
      @_hash['category'] = 'category'
      @_hash['condition'] = 'condition'
      @_hash['createdon'] = 'createdon'
      @_hash['description'] = 'description'
      @_hash['deviceid'] = 'deviceid'
      @_hash['foreignid'] = 'foreignid'
      @_hash['id'] = 'id'
      @_hash['isacknowledged'] = 'isacknowledged'
      @_hash['iscleared'] = 'iscleared'
      @_hash['isdisabled'] = 'isdisabled'
      @_hash['lastupdated'] = 'lastupdated'
      @_hash['name'] = 'name'
      @_hash['ruleid'] = 'ruleid'
      @_hash['severity'] = 'severity'
      @_hash['state'] = 'state'
      @_hash['template'] = 'template'
      @_hash['version'] = 'version'
      @_hash['versionid'] = 'versionid'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        accountclientid
        billingaccountid
        category
        condition
        description
        deviceid
        foreignid
        id
        isacknowledged
        iscleared
        isdisabled
        name
        ruleid
        severity
        state
        template
        version
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(createdon:, lastupdated:, versionid:, accountclientid: SKIP,
                   billingaccountid: SKIP, category: SKIP, condition: SKIP,
                   description: SKIP, deviceid: SKIP, foreignid: SKIP, id: SKIP,
                   isacknowledged: SKIP, iscleared: SKIP, isdisabled: SKIP,
                   name: SKIP, ruleid: SKIP, severity: SKIP, state: SKIP,
                   template: SKIP, version: SKIP)
      @accountclientid = accountclientid unless accountclientid == SKIP
      @billingaccountid = billingaccountid unless billingaccountid == SKIP
      @category = category unless category == SKIP
      @condition = condition unless condition == SKIP
      @createdon = createdon
      @description = description unless description == SKIP
      @deviceid = deviceid unless deviceid == SKIP
      @foreignid = foreignid unless foreignid == SKIP
      @id = id unless id == SKIP
      @isacknowledged = isacknowledged unless isacknowledged == SKIP
      @iscleared = iscleared unless iscleared == SKIP
      @isdisabled = isdisabled unless isdisabled == SKIP
      @lastupdated = lastupdated
      @name = name unless name == SKIP
      @ruleid = ruleid unless ruleid == SKIP
      @severity = severity unless severity == SKIP
      @state = state unless state == SKIP
      @template = template unless template == SKIP
      @version = version unless version == SKIP
      @versionid = versionid
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      createdon = if hash.key?('createdon')
                    (DateTimeHelper.from_rfc3339(hash['createdon']) if hash['createdon'])
                  end
      lastupdated = if hash.key?('lastupdated')
                      (DateTimeHelper.from_rfc3339(hash['lastupdated']) if hash['lastupdated'])
                    end
      versionid = hash.key?('versionid') ? hash['versionid'] : nil
      accountclientid =
        hash.key?('accountclientid') ? hash['accountclientid'] : SKIP
      billingaccountid =
        hash.key?('billingaccountid') ? hash['billingaccountid'] : SKIP
      category = hash.key?('category') ? hash['category'] : SKIP
      condition = hash.key?('condition') ? hash['condition'] : SKIP
      description = hash.key?('description') ? hash['description'] : SKIP
      deviceid = hash.key?('deviceid') ? hash['deviceid'] : SKIP
      foreignid = hash.key?('foreignid') ? hash['foreignid'] : SKIP
      id = hash.key?('id') ? hash['id'] : SKIP
      isacknowledged =
        hash.key?('isacknowledged') ? hash['isacknowledged'] : SKIP
      iscleared = hash.key?('iscleared') ? hash['iscleared'] : SKIP
      isdisabled = hash.key?('isdisabled') ? hash['isdisabled'] : SKIP
      name = hash.key?('name') ? hash['name'] : SKIP
      ruleid = hash.key?('ruleid') ? hash['ruleid'] : SKIP
      severity = hash.key?('severity') ? hash['severity'] : SKIP
      state = hash.key?('state') ? hash['state'] : SKIP
      template = hash.key?('template') ? hash['template'] : SKIP
      version = hash.key?('version') ? hash['version'] : SKIP

      # Create object from extracted values.
      UserSmartAlert.new(createdon: createdon,
                         lastupdated: lastupdated,
                         versionid: versionid,
                         accountclientid: accountclientid,
                         billingaccountid: billingaccountid,
                         category: category,
                         condition: condition,
                         description: description,
                         deviceid: deviceid,
                         foreignid: foreignid,
                         id: id,
                         isacknowledged: isacknowledged,
                         iscleared: iscleared,
                         isdisabled: isdisabled,
                         name: name,
                         ruleid: ruleid,
                         severity: severity,
                         state: state,
                         template: template,
                         version: version)
    end

    def to_custom_createdon
      DateTimeHelper.to_rfc3339(createdon)
    end

    def to_custom_lastupdated
      DateTimeHelper.to_rfc3339(lastupdated)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} accountclientid: #{@accountclientid}, billingaccountid:"\
      " #{@billingaccountid}, category: #{@category}, condition: #{@condition}, createdon:"\
      " #{@createdon}, description: #{@description}, deviceid: #{@deviceid}, foreignid:"\
      " #{@foreignid}, id: #{@id}, isacknowledged: #{@isacknowledged}, iscleared: #{@iscleared},"\
      " isdisabled: #{@isdisabled}, lastupdated: #{@lastupdated}, name: #{@name}, ruleid:"\
      " #{@ruleid}, severity: #{@severity}, state: #{@state}, template: #{@template}, version:"\
      " #{@version}, versionid: #{@versionid}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} accountclientid: #{@accountclientid.inspect}, billingaccountid:"\
      " #{@billingaccountid.inspect}, category: #{@category.inspect}, condition:"\
      " #{@condition.inspect}, createdon: #{@createdon.inspect}, description:"\
      " #{@description.inspect}, deviceid: #{@deviceid.inspect}, foreignid: #{@foreignid.inspect},"\
      " id: #{@id.inspect}, isacknowledged: #{@isacknowledged.inspect}, iscleared:"\
      " #{@iscleared.inspect}, isdisabled: #{@isdisabled.inspect}, lastupdated:"\
      " #{@lastupdated.inspect}, name: #{@name.inspect}, ruleid: #{@ruleid.inspect}, severity:"\
      " #{@severity.inspect}, state: #{@state.inspect}, template: #{@template.inspect}, version:"\
      " #{@version.inspect}, versionid: #{@versionid.inspect}>"
    end
  end
end
