# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Additional service support information for the MEC platform.
  class MecPlatformsAdditionalSupportInfo < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Type of additional service support information for the MEC platform.
    # @return [String]
    attr_accessor :type

    # Data about additional service support information for the MEC platform.
    # @return [MecPlatformsAdditionalSupportInfoData]
    attr_accessor :data

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['type'] = 'type'
      @_hash['data'] = 'data'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        type
        data
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(type: SKIP, data: SKIP)
      @type = type unless type == SKIP
      @data = data unless data == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      type = hash.key?('type') ? hash['type'] : SKIP
      data = MecPlatformsAdditionalSupportInfoData.from_hash(hash['data']) if hash['data']

      # Create object from extracted values.
      MecPlatformsAdditionalSupportInfo.new(type: type,
                                            data: data)
    end

    # Validates an instance of the object from a given value.
    # @param [MecPlatformsAdditionalSupportInfo | Hash] The value against the validation is performed.
    def self.validate(value)
      return true if value.instance_of? self

      return false unless value.instance_of? Hash

      true
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} type: #{@type}, data: #{@data}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} type: #{@type.inspect}, data: #{@data.inspect}>"
    end
  end
end
