# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Used to filter data by time period or number of devices.
  class HistorySearchRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The selected device and attributes for which a request should retrieve
    # data.
    # @return [HistorySearchFilter]
    attr_accessor :m_filter

    # The maximum number of historical attributes to include in the response. If
    # the request matches more than this number of attributes, the response will
    # contain an X-Next value in the header that can be used as the page value
    # in the next request to retrieve the next page of events.
    # @return [Integer]
    attr_accessor :m_limit_number

    # The time period for which a request should retrieve data, beginning with
    # the limitTime.startOn and proceeding with the limitTime.duration.
    # @return [HistorySearchLimitTime]
    attr_accessor :m_limit_time

    # Page number for pagination purposes.
    # @return [String]
    attr_accessor :m_page

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['m_filter'] = '$filter'
      @_hash['m_limit_number'] = '$limitNumber'
      @_hash['m_limit_time'] = '$limitTime'
      @_hash['m_page'] = '$page'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        m_limit_number
        m_limit_time
        m_page
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(m_filter:, m_limit_number: SKIP, m_limit_time: SKIP,
                   m_page: SKIP, additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @m_filter = m_filter
      @m_limit_number = m_limit_number unless m_limit_number == SKIP
      @m_limit_time = m_limit_time unless m_limit_time == SKIP
      @m_page = m_page unless m_page == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      m_filter = HistorySearchFilter.from_hash(hash['$filter']) if hash['$filter']
      m_limit_number = hash.key?('$limitNumber') ? hash['$limitNumber'] : SKIP
      m_limit_time = HistorySearchLimitTime.from_hash(hash['$limitTime']) if hash['$limitTime']
      m_page = hash.key?('$page') ? hash['$page'] : SKIP

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      HistorySearchRequest.new(m_filter: m_filter,
                               m_limit_number: m_limit_number,
                               m_limit_time: m_limit_time,
                               m_page: m_page,
                               additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} m_filter: #{@m_filter}, m_limit_number: #{@m_limit_number}, m_limit_time:"\
      " #{@m_limit_time}, m_page: #{@m_page}, additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} m_filter: #{@m_filter.inspect}, m_limit_number: #{@m_limit_number.inspect},"\
      " m_limit_time: #{@m_limit_time.inspect}, m_page: #{@m_page.inspect}, additional_properties:"\
      " #{@additional_properties}>"
    end
  end
end
