# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # EsimGlobalDeviceList Model.
  class EsimGlobalDeviceList < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The numeric name of the account.
    # @return [String]
    attr_accessor :account_name

    # The last status of the device as a list filter.
    # @return [ProvisioningStatusFilter]
    attr_accessor :provisioning_status_filter

    # The last status of the device's profile as a filter.
    # @return [ProfileStatusFilter]
    attr_accessor :profile_status_filter

    # The cellular service provider.
    # @return [String]
    attr_accessor :carrier_name_filter

    # An array of device identifiers to filter the list.
    # @return [Array[Object]]
    attr_accessor :device_filter

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['account_name'] = 'accountName'
      @_hash['provisioning_status_filter'] = 'provisioningStatusFilter'
      @_hash['profile_status_filter'] = 'profileStatusFilter'
      @_hash['carrier_name_filter'] = 'carrierNameFilter'
      @_hash['device_filter'] = 'deviceFilter'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        account_name
        provisioning_status_filter
        profile_status_filter
        carrier_name_filter
        device_filter
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(account_name: SKIP, provisioning_status_filter: SKIP,
                   profile_status_filter: SKIP, carrier_name_filter: SKIP,
                   device_filter: SKIP)
      @account_name = account_name unless account_name == SKIP
      unless provisioning_status_filter == SKIP
        @provisioning_status_filter =
          provisioning_status_filter
      end
      @profile_status_filter = profile_status_filter unless profile_status_filter == SKIP
      @carrier_name_filter = carrier_name_filter unless carrier_name_filter == SKIP
      @device_filter = device_filter unless device_filter == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      account_name = hash.key?('accountName') ? hash['accountName'] : SKIP
      provisioning_status_filter =
        hash.key?('provisioningStatusFilter') ? hash['provisioningStatusFilter'] : SKIP
      profile_status_filter =
        hash.key?('profileStatusFilter') ? hash['profileStatusFilter'] : SKIP
      carrier_name_filter =
        hash.key?('carrierNameFilter') ? hash['carrierNameFilter'] : SKIP
      device_filter = hash.key?('deviceFilter') ? APIHelper.deserialize_union_type(
        UnionTypeLookUp.get(:EsimGlobalDeviceListDeviceFilter), hash['deviceFilter']
      ) : SKIP

      # Create object from extracted values.
      EsimGlobalDeviceList.new(account_name: account_name,
                               provisioning_status_filter: provisioning_status_filter,
                               profile_status_filter: profile_status_filter,
                               carrier_name_filter: carrier_name_filter,
                               device_filter: device_filter)
    end

    # Validates an instance of the object from a given value.
    # @param [EsimGlobalDeviceList | Hash] The value against the validation is performed.
    def self.validate(value)
      return true if value.instance_of? self

      return false unless value.instance_of? Hash

      true
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} account_name: #{@account_name}, provisioning_status_filter:"\
      " #{@provisioning_status_filter}, profile_status_filter: #{@profile_status_filter},"\
      " carrier_name_filter: #{@carrier_name_filter}, device_filter: #{@device_filter}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} account_name: #{@account_name.inspect}, provisioning_status_filter:"\
      " #{@provisioning_status_filter.inspect}, profile_status_filter:"\
      " #{@profile_status_filter.inspect}, carrier_name_filter: #{@carrier_name_filter.inspect},"\
      " device_filter: #{@device_filter.inspect}>"
    end
  end
end
