# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Response for /api/v1/application/configurations/geofence endpoint. It
  # provides a response if the configuration was created and saved in the
  # system.
  class GeoFenceConfigurationResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The generated ID (UUID v4) for the configuration. It has to be used when
    # asking for changing any of the configuration parameters.
    # @return [String]
    attr_accessor :id

    # The vendor that the configuration belongs to. E.g. Verizon, GM, Ford, etc.
    # @return [String]
    attr_accessor :vendor_id

    # Name of the configuration.
    # @return [String]
    attr_accessor :name

    # Description of the configuration.
    # @return [String]
    attr_accessor :description

    # The GeoJSON representation of geofence. Geofence supports the following
    # geometry types: LineString, Polygon, MultiLineString, and MultiPolygon.
    # The system only supports a single Feature in the FeatureCollection, so
    # only one Line, Polygon, MultiLine or MultiPolygon can be defined within
    # one Geofencing configuration.
    # @return [EtxGeofence]
    attr_accessor :geo_fence

    # List of predefined messages that belongs to the geofence. These are the
    # messages that are sent out by the system when the Trigger Condition for
    # the message is met.
    # @return [Array[Object]]
    attr_accessor :messages

    # List of predefined messages that belongs to the geofence. These are the
    # messages that are sent out by the system when the Trigger Condition for
    # the message is met.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_active

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['vendor_id'] = 'vendorId'
      @_hash['name'] = 'name'
      @_hash['description'] = 'description'
      @_hash['geo_fence'] = 'geoFence'
      @_hash['messages'] = 'messages'
      @_hash['is_active'] = 'isActive'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        name
        description
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id:, vendor_id:, geo_fence:, messages:, is_active:,
                   name: SKIP, description: SKIP)
      @id = id
      @vendor_id = vendor_id
      @name = name unless name == SKIP
      @description = description unless description == SKIP
      @geo_fence = geo_fence
      @messages = messages
      @is_active = is_active
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : nil
      vendor_id = hash.key?('vendorId') ? hash['vendorId'] : nil
      geo_fence = EtxGeofence.from_hash(hash['geoFence']) if hash['geoFence']
      messages = hash.key?('messages') ? APIHelper.deserialize_union_type(
        UnionTypeLookUp.get(:Message3), hash['messages']
      ) : nil
      is_active = hash.key?('isActive') ? hash['isActive'] : nil
      name = hash.key?('name') ? hash['name'] : SKIP
      description = hash.key?('description') ? hash['description'] : SKIP

      # Create object from extracted values.
      GeoFenceConfigurationResponse.new(id: id,
                                        vendor_id: vendor_id,
                                        geo_fence: geo_fence,
                                        messages: messages,
                                        is_active: is_active,
                                        name: name,
                                        description: description)
    end

    # Validates an instance of the object from a given value.
    # @param [GeoFenceConfigurationResponse | Hash] The value against the validation is performed.
    def self.validate(value)
      if value.instance_of? self
        return (
          APIHelper.valid_type?(value.id,
                                ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.vendor_id,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.geo_fence,
                                  ->(val) { EtxGeofence.validate(val) },
                                  is_model_hash: true) and
            UnionTypeLookUp.get(:Message3)
                           .validate(value.messages) and
            APIHelper.valid_type?(value.is_active,
                                  ->(val) { val.instance_of? TrueClass or val.instance_of? FalseClass })
        )
      end

      return false unless value.instance_of? Hash

      (
        APIHelper.valid_type?(value['id'],
                              ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['vendorId'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['geoFence'],
                                ->(val) { EtxGeofence.validate(val) },
                                is_model_hash: true) and
          UnionTypeLookUp.get(:Message3)
                         .validate(value['messages']) and
          APIHelper.valid_type?(value['isActive'],
                                ->(val) { val.instance_of? TrueClass or val.instance_of? FalseClass })
      )
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} id: #{@id}, vendor_id: #{@vendor_id}, name: #{@name}, description:"\
      " #{@description}, geo_fence: #{@geo_fence}, messages: #{@messages}, is_active:"\
      " #{@is_active}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} id: #{@id.inspect}, vendor_id: #{@vendor_id.inspect}, name:"\
      " #{@name.inspect}, description: #{@description.inspect}, geo_fence: #{@geo_fence.inspect},"\
      " messages: #{@messages.inspect}, is_active: #{@is_active.inspect}>"
    end
  end
end
