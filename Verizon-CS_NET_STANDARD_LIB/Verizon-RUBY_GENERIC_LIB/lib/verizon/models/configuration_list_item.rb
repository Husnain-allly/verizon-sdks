# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # The ConfigurationList's item that contains the configuration identifier,
  # name, description and the active flag.
  class ConfigurationListItem < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The generated ID (UUID v4) for the configuration. It has to be used when
    # asking for changing any of the configuration parameters.
    # @return [String]
    attr_accessor :id

    # Name of the configuration.
    # @return [String]
    attr_accessor :name

    # Description of the configuration.
    # @return [String]
    attr_accessor :description

    # Description of the configuration.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_active

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['name'] = 'name'
      @_hash['description'] = 'description'
      @_hash['is_active'] = 'isActive'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        name
        description
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id:, is_active:, name: SKIP, description: SKIP)
      @id = id
      @name = name unless name == SKIP
      @description = description unless description == SKIP
      @is_active = is_active
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : nil
      is_active = hash.key?('isActive') ? hash['isActive'] : nil
      name = hash.key?('name') ? hash['name'] : SKIP
      description = hash.key?('description') ? hash['description'] : SKIP

      # Create object from extracted values.
      ConfigurationListItem.new(id: id,
                                is_active: is_active,
                                name: name,
                                description: description)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} id: #{@id}, name: #{@name}, description: #{@description}, is_active:"\
      " #{@is_active}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} id: #{@id.inspect}, name: #{@name.inspect}, description:"\
      " #{@description.inspect}, is_active: #{@is_active.inspect}>"
    end
  end
end
