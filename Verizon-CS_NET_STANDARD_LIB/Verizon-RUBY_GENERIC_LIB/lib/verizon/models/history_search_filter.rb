# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # The selected device and attributes for which a request should retrieve data.
  class HistorySearchFilter < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Account name identifier.
    # @return [String]
    attr_accessor :account_name

    # Identifies a particular IoT device.
    # @return [Device]
    attr_accessor :device

    # Streaming RF parameters for which you want to retrieve history data.
    # @return [HistorySearchFilterAttributes]
    attr_accessor :attributes

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['account_name'] = 'accountName'
      @_hash['device'] = 'device'
      @_hash['attributes'] = 'attributes'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        attributes
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(account_name:, device:, attributes: SKIP,
                   additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @account_name = account_name
      @device = device
      @attributes = attributes unless attributes == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      account_name = hash.key?('accountName') ? hash['accountName'] : nil
      device = Device.from_hash(hash['device']) if hash['device']
      attributes = HistorySearchFilterAttributes.from_hash(hash['attributes']) if
        hash['attributes']

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      HistorySearchFilter.new(account_name: account_name,
                              device: device,
                              attributes: attributes,
                              additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} account_name: #{@account_name}, device: #{@device}, attributes:"\
      " #{@attributes}, additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} account_name: #{@account_name.inspect}, device: #{@device.inspect},"\
      " attributes: #{@attributes.inspect}, additional_properties: #{@additional_properties}>"
    end
  end
end
