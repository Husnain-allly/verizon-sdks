# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Devicepropertyfilter Model.
  class Devicepropertyfilter < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Devicepropertyselection]
    attr_accessor :m_selection

    # TODO: Write general description for this method
    # @return [TrueClass | FalseClass]
    attr_accessor :m_querytotalcount

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['m_selection'] = '$selection'
      @_hash['m_querytotalcount'] = '$querytotalcount'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        m_selection
        m_querytotalcount
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(m_selection: SKIP, m_querytotalcount: SKIP,
                   additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @m_selection = m_selection unless m_selection == SKIP
      @m_querytotalcount = m_querytotalcount unless m_querytotalcount == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      m_selection = Devicepropertyselection.from_hash(hash['$selection']) if hash['$selection']
      m_querytotalcount =
        hash.key?('$querytotalcount') ? hash['$querytotalcount'] : SKIP

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      Devicepropertyfilter.new(m_selection: m_selection,
                               m_querytotalcount: m_querytotalcount,
                               additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} m_selection: #{@m_selection}, m_querytotalcount: #{@m_querytotalcount},"\
      " additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} m_selection: #{@m_selection.inspect}, m_querytotalcount:"\
      " #{@m_querytotalcount.inspect}, additional_properties: #{@additional_properties}>"
    end
  end
end
