# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Returns a list and details of all custom services and states defined for a
  # specified account.
  class AccountStatesAndServices < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The engagements associated with the account.
    # @return [Array[Engagement]]
    attr_accessor :engagement

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['engagement'] = 'engagement'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(engagement:, additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @engagement = engagement
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      engagement = nil
      unless hash['engagement'].nil?
        engagement = []
        hash['engagement'].each do |structure|
          engagement << (Engagement.from_hash(structure) if structure)
        end
      end

      engagement = nil unless hash.key?('engagement')

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      AccountStatesAndServices.new(engagement: engagement,
                                   additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} engagement: #{@engagement}, additional_properties:"\
      " #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} engagement: #{@engagement.inspect}, additional_properties:"\
      " #{@additional_properties}>"
    end
  end
end
