# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Position data.
  class PositionData < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Time location obtained.
    # @return [String]
    attr_accessor :time

    # UTC offset of time.
    # @return [String]
    attr_accessor :utcoffset

    # X coordinate of location.
    # @return [String]
    attr_accessor :x

    # Y coordinate of location.
    # @return [String]
    attr_accessor :y

    # Radius of the location in meters.
    # @return [String]
    attr_accessor :radius

    # Whether requested accurary is met or not.
    # @return [TrueClass | FalseClass]
    attr_accessor :qos

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['time'] = 'time'
      @_hash['utcoffset'] = 'utcoffset'
      @_hash['x'] = 'x'
      @_hash['y'] = 'y'
      @_hash['radius'] = 'radius'
      @_hash['qos'] = 'qos'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        time
        utcoffset
        x
        y
        radius
        qos
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(time: SKIP, utcoffset: SKIP, x: SKIP, y: SKIP, radius: SKIP,
                   qos: SKIP, additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @time = time unless time == SKIP
      @utcoffset = utcoffset unless utcoffset == SKIP
      @x = x unless x == SKIP
      @y = y unless y == SKIP
      @radius = radius unless radius == SKIP
      @qos = qos unless qos == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      time = hash.key?('time') ? hash['time'] : SKIP
      utcoffset = hash.key?('utcoffset') ? hash['utcoffset'] : SKIP
      x = hash.key?('x') ? hash['x'] : SKIP
      y = hash.key?('y') ? hash['y'] : SKIP
      radius = hash.key?('radius') ? hash['radius'] : SKIP
      qos = hash.key?('qos') ? hash['qos'] : SKIP

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      PositionData.new(time: time,
                       utcoffset: utcoffset,
                       x: x,
                       y: y,
                       radius: radius,
                       qos: qos,
                       additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} time: #{@time}, utcoffset: #{@utcoffset}, x: #{@x}, y: #{@y}, radius:"\
      " #{@radius}, qos: #{@qos}, additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} time: #{@time.inspect}, utcoffset: #{@utcoffset.inspect}, x: #{@x.inspect},"\
      " y: #{@y.inspect}, radius: #{@radius.inspect}, qos: #{@qos.inspect}, additional_properties:"\
      " #{@additional_properties}>"
    end
  end
end
