# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # PromoAlert Model.
  class PromoAlert < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Array[ReadySimServicePlan]]
    attr_accessor :filter_criteria

    # TODO: Write general description for this method
    # @return [Array[Keyschunk2]]
    attr_accessor :condition

    # TODO: Write general description for this method
    # @return [TrueClass | FalseClass]
    attr_accessor :enable_promo_exp

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['filter_criteria'] = 'filterCriteria'
      @_hash['condition'] = 'condition'
      @_hash['enable_promo_exp'] = 'enablePromoExp'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        filter_criteria
        condition
        enable_promo_exp
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(filter_criteria: SKIP, condition: SKIP,
                   enable_promo_exp: SKIP, additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @filter_criteria = filter_criteria unless filter_criteria == SKIP
      @condition = condition unless condition == SKIP
      @enable_promo_exp = enable_promo_exp unless enable_promo_exp == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      filter_criteria = nil
      unless hash['filterCriteria'].nil?
        filter_criteria = []
        hash['filterCriteria'].each do |structure|
          filter_criteria << (ReadySimServicePlan.from_hash(structure) if structure)
        end
      end

      filter_criteria = SKIP unless hash.key?('filterCriteria')
      # Parameter is an array, so we need to iterate through it
      condition = nil
      unless hash['condition'].nil?
        condition = []
        hash['condition'].each do |structure|
          condition << (Keyschunk2.from_hash(structure) if structure)
        end
      end

      condition = SKIP unless hash.key?('condition')
      enable_promo_exp =
        hash.key?('enablePromoExp') ? hash['enablePromoExp'] : SKIP

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      PromoAlert.new(filter_criteria: filter_criteria,
                     condition: condition,
                     enable_promo_exp: enable_promo_exp,
                     additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} filter_criteria: #{@filter_criteria}, condition: #{@condition},"\
      " enable_promo_exp: #{@enable_promo_exp}, additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} filter_criteria: #{@filter_criteria.inspect}, condition:"\
      " #{@condition.inspect}, enable_promo_exp: #{@enable_promo_exp.inspect},"\
      " additional_properties: #{@additional_properties}>"
    end
  end
end
