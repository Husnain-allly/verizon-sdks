# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Session and usage details for up to 10 devices.
  class AggregateSessionReport < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # A unique string that associates the request with the location report
    # information that is sent in asynchronous callback message.ThingSpace will
    # send a separate callback message for each device that was in the request.
    # All of the callback messages will have the same txid.
    # @return [String]
    attr_accessor :txid

    # Contains usage per device.
    # @return [Array[AggregateUsageItem]]
    attr_accessor :usage

    # An object containing any errors reported by the device.
    # @return [Array[AggregateUsageError]]
    attr_accessor :errors

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['txid'] = 'txid'
      @_hash['usage'] = 'usage'
      @_hash['errors'] = 'errors'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        usage
        errors
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        txid
      ]
    end

    def initialize(txid:, usage: SKIP, errors: SKIP, additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @txid = txid
      @usage = usage unless usage == SKIP
      @errors = errors unless errors == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      txid = hash.key?('txid') ? hash['txid'] : nil
      # Parameter is an array, so we need to iterate through it
      usage = nil
      unless hash['usage'].nil?
        usage = []
        hash['usage'].each do |structure|
          usage << (AggregateUsageItem.from_hash(structure) if structure)
        end
      end

      usage = SKIP unless hash.key?('usage')
      # Parameter is an array, so we need to iterate through it
      errors = nil
      unless hash['errors'].nil?
        errors = []
        hash['errors'].each do |structure|
          errors << (AggregateUsageError.from_hash(structure) if structure)
        end
      end

      errors = SKIP unless hash.key?('errors')

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      AggregateSessionReport.new(txid: txid,
                                 usage: usage,
                                 errors: errors,
                                 additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} txid: #{@txid}, usage: #{@usage}, errors: #{@errors},"\
      " additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} txid: #{@txid.inspect}, usage: #{@usage.inspect}, errors:"\
      " #{@errors.inspect}, additional_properties: #{@additional_properties}>"
    end
  end
end
