# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Response for a request made to delete a device.
  class DeleteDevicesResult < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # One object per device to be deleted. Each object must contain a kind and
    # id element identifying the device.
    # @return [Object]
    attr_accessor :device_ids

    # “Success” if the device was deleted, or “Failed” if there was a problem.
    # @return [String]
    attr_accessor :status

    # Not present if status=Success. One of these messages if status=Failed:The
    # device is not in deactivate state.The user does not have access to delete
    # the device.
    # @return [String]
    attr_accessor :message

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['device_ids'] = 'deviceIds'
      @_hash['status'] = 'status'
      @_hash['message'] = 'message'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        device_ids
        status
        message
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(device_ids: SKIP, status: SKIP, message: SKIP,
                   additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @device_ids = device_ids unless device_ids == SKIP
      @status = status unless status == SKIP
      @message = message unless message == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      device_ids = hash.key?('deviceIds') ? APIHelper.deserialize_union_type(
        UnionTypeLookUp.get(:DeleteDevicesResultDeviceIds), hash['deviceIds']
      ) : SKIP
      status = hash.key?('status') ? hash['status'] : SKIP
      message = hash.key?('message') ? hash['message'] : SKIP

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      DeleteDevicesResult.new(device_ids: device_ids,
                              status: status,
                              message: message,
                              additional_properties: additional_properties)
    end

    # Validates an instance of the object from a given value.
    # @param [DeleteDevicesResult | Hash] The value against the validation is performed.
    def self.validate(value)
      return true if value.instance_of? self

      return false unless value.instance_of? Hash

      true
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} device_ids: #{@device_ids}, status: #{@status}, message: #{@message},"\
      " additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} device_ids: #{@device_ids.inspect}, status: #{@status.inspect}, message:"\
      " #{@message.inspect}, additional_properties: #{@additional_properties}>"
    end
  end
end
