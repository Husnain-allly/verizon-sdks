# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Request to return the daily network data usage of a single device during a
  # specified time period.
  class DeviceUsageListRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The earliest date for which you want usage data.
    # @return [String]
    attr_accessor :earliest

    # The last date for which you want usage data.
    # @return [String]
    attr_accessor :latest

    # An identifier for a single device.
    # @return [DeviceId]
    attr_accessor :device_id

    # An identifier for a single device.
    # @return [Label]
    attr_accessor :label

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['earliest'] = 'earliest'
      @_hash['latest'] = 'latest'
      @_hash['device_id'] = 'deviceId'
      @_hash['label'] = 'label'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        device_id
        label
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(earliest:, latest:, device_id: SKIP, label: SKIP,
                   additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @earliest = earliest
      @latest = latest
      @device_id = device_id unless device_id == SKIP
      @label = label unless label == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      earliest = hash.key?('earliest') ? hash['earliest'] : nil
      latest = hash.key?('latest') ? hash['latest'] : nil
      device_id = DeviceId.from_hash(hash['deviceId']) if hash['deviceId']
      label = Label.from_hash(hash['label']) if hash['label']

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      DeviceUsageListRequest.new(earliest: earliest,
                                 latest: latest,
                                 device_id: device_id,
                                 label: label,
                                 additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} earliest: #{@earliest}, latest: #{@latest}, device_id: #{@device_id},"\
      " label: #{@label}, additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} earliest: #{@earliest.inspect}, latest: #{@latest.inspect}, device_id:"\
      " #{@device_id.inspect}, label: #{@label.inspect}, additional_properties:"\
      " #{@additional_properties}>"
    end
  end
end
