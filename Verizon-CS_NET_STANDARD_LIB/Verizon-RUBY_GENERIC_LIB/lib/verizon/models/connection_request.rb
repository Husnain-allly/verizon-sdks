# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Request for /clients/connection. It requires the device ID acquired in the
  # registration request call; the geolocation of the device at the time of the
  # request; and the network type (Verizon or non-Verizon). The system uses this
  # information to determine with MQTT endpoint the device should use to connect
  # the ETX Message Exchange.
  class ConnectionRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The generated ID (UUID v4) for the device. It can be used as:
    #   - the MQTT Client ID when connecting to the Message Exchange system
    #   - a parameter when asking for the connection endpoint
    #   - a parameter when finishing the device registration
    #   - a parameter when unregistering the device
    # @return [UUID | String]
    attr_accessor :device_id

    # Geolocation of the device at the time of the connection request in GPS
    # coordinates.
    # @return [Geolocation]
    attr_accessor :geolocation

    # The type of the device's network connection at the time of the request. If
    # the device is on the Verizon cellular network it should use the "VZ" value
    # otherwise the "non-VZ" value.
    # Devices on the Verizon network can directly access the ETX Message
    # Exchange on the MEC (Mobile Edge Compute server)
    # @return [EtxNetworkType]
    attr_accessor :network_type

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['device_id'] = 'DeviceID'
      @_hash['geolocation'] = 'Geolocation'
      @_hash['network_type'] = 'NetworkType'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(device_id:, geolocation:, network_type:)
      @device_id = device_id
      @geolocation = geolocation
      @network_type = network_type
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      device_id = hash.key?('DeviceID') ? hash['DeviceID'] : nil
      geolocation = Geolocation.from_hash(hash['Geolocation']) if hash['Geolocation']
      network_type = hash.key?('NetworkType') ? hash['NetworkType'] : nil

      # Create object from extracted values.
      ConnectionRequest.new(device_id: device_id,
                            geolocation: geolocation,
                            network_type: network_type)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} device_id: #{@device_id}, geolocation: #{@geolocation}, network_type:"\
      " #{@network_type}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} device_id: #{@device_id.inspect}, geolocation: #{@geolocation.inspect},"\
      " network_type: #{@network_type.inspect}>"
    end
  end
end
