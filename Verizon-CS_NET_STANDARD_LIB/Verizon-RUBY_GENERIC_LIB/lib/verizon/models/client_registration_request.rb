# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Request for /clients/registration endpoint. It requires the Client Type,
  # Subtype and Vendor to be defined.
  class ClientRegistrationRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The type of the client that is to be registered. This is one of the major
    # traffic participant groups considered in V2X communication. The system
    # uses this value to define which topics the client will be able to publish
    # and subscribe to.
    # Values:
    # - **Vehicle** - Vehicle with an enclosure around the passengers.
    # (Subtypes: PassengerCar, Truck, Bus, EmergencyVehicle, SchoolBus,
    # MaintenanceVehicle)
    # - **VulnerableRoadUser** - Traffic participants without a protecting
    # enclosure. (Subtypes: Motorcycle, Bicycle, Pedestrian, Scooter)
    # - **TrafficLightController** - A Traffic light controller system.
    # (Subtypes: NA)
    # - **InfrastructureSensor** - Sensors that are deployed in the
    # infrastructure. (Subtypes: RoadSideUnit, Camera, Lidar, Radar,
    # InductiveLoop, MagneticSensor)
    # - **OnboardSensor** - Sensors that are onboard on a vehicle(Subtypes:
    # Camera, Lidar, Radar)
    # - **Software** - A software system or application. (Subtypes: Platform,
    # Application, NA)
    # @return [EtxClientType]
    attr_accessor :client_type

    # The subtype or subgroup of the client type. This further specifies the
    # client type. For example it will specify if the client is a passenger car
    # or a truck. See the ClientType description for the supported Subtypes for
    # each client type.
    # @return [ClientSubtype]
    attr_accessor :client_subtype

    # The ID the vendor wants its devices to be registered under. E.g. Verizon,
    # GM, Ford, etc.
    # @return [String]
    attr_accessor :vendor_id

    # The generated ID (UUID v4) for the device. It can be used as:
    #   - the MQTT Client ID when connecting to the Message Exchange system
    #   - a parameter when asking for the connection endpoint
    #   - a parameter when finishing the device registration
    #   - a parameter when unregistering the device
    # @return [UUID | String]
    attr_accessor :device_id

    # The IMEI number of the device.
    # @return [String]
    attr_accessor :imei

    # The ICCID number of the device.
    # @return [String]
    attr_accessor :iccid

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['client_type'] = 'ClientType'
      @_hash['client_subtype'] = 'ClientSubtype'
      @_hash['vendor_id'] = 'VendorID'
      @_hash['device_id'] = 'DeviceID'
      @_hash['imei'] = 'IMEI'
      @_hash['iccid'] = 'ICCID'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        device_id
        imei
        iccid
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(client_type:, client_subtype:, vendor_id:, device_id: SKIP,
                   imei: SKIP, iccid: SKIP)
      @client_type = client_type
      @client_subtype = client_subtype
      @vendor_id = vendor_id
      @device_id = device_id unless device_id == SKIP
      @imei = imei unless imei == SKIP
      @iccid = iccid unless iccid == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      client_type = hash.key?('ClientType') ? hash['ClientType'] : nil
      client_subtype = hash.key?('ClientSubtype') ? hash['ClientSubtype'] : nil
      vendor_id = hash.key?('VendorID') ? hash['VendorID'] : nil
      device_id = hash.key?('DeviceID') ? hash['DeviceID'] : SKIP
      imei = hash.key?('IMEI') ? hash['IMEI'] : SKIP
      iccid = hash.key?('ICCID') ? hash['ICCID'] : SKIP

      # Create object from extracted values.
      ClientRegistrationRequest.new(client_type: client_type,
                                    client_subtype: client_subtype,
                                    vendor_id: vendor_id,
                                    device_id: device_id,
                                    imei: imei,
                                    iccid: iccid)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} client_type: #{@client_type}, client_subtype: #{@client_subtype},"\
      " vendor_id: #{@vendor_id}, device_id: #{@device_id}, imei: #{@imei}, iccid: #{@iccid}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} client_type: #{@client_type.inspect}, client_subtype:"\
      " #{@client_subtype.inspect}, vendor_id: #{@vendor_id.inspect}, device_id:"\
      " #{@device_id.inspect}, imei: #{@imei.inspect}, iccid: #{@iccid.inspect}>"
    end
  end
end
