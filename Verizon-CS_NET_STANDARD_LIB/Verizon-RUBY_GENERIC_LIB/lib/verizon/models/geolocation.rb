# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Geolocation of the device at the time of the connection request in GPS
  # coordinates.
  class Geolocation < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The GPS Latitude value
    # @return [Float]
    attr_accessor :latitude

    # The GPS Longitude value
    # @return [Float]
    attr_accessor :longitude

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['latitude'] = 'Latitude'
      @_hash['longitude'] = 'Longitude'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(latitude:, longitude:)
      @latitude = latitude
      @longitude = longitude
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      latitude = hash.key?('Latitude') ? hash['Latitude'] : nil
      longitude = hash.key?('Longitude') ? hash['Longitude'] : nil

      # Create object from extracted values.
      Geolocation.new(latitude: latitude,
                      longitude: longitude)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} latitude: #{@latitude}, longitude: #{@longitude}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} latitude: #{@latitude.inspect}, longitude: #{@longitude.inspect}>"
    end
  end
end
