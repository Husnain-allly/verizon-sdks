# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # The NodeListLL data structure provides the sequence of signed offset node
  # point values for determining the latitude and longitude. Each LL point is
  # referred to as a node point.
  class NodeListLl < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The NodeSetLL data frame consists of a list of NodeLL entries using LL
    # offsets.
    # @return [Array[NodeLl]]
    attr_accessor :nodes

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['nodes'] = 'nodes'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(nodes:)
      @nodes = nodes
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      nodes = nil
      unless hash['nodes'].nil?
        nodes = []
        hash['nodes'].each do |structure|
          nodes << (NodeLl.from_hash(structure) if structure)
        end
      end

      nodes = nil unless hash.key?('nodes')

      # Create object from extracted values.
      NodeListLl.new(nodes: nodes)
    end

    # Validates an instance of the object from a given value.
    # @param [NodeListLl | Hash] The value against the validation is performed.
    def self.validate(value)
      if value.instance_of? self
        return APIHelper.valid_type?(value.nodes,
                                     ->(val) { NodeLl.validate(val) },
                                     is_model_hash: true,
                                     is_inner_model_hash: true)
      end

      return false unless value.instance_of? Hash

      APIHelper.valid_type?(value['nodes'],
                            ->(val) { NodeLl.validate(val) },
                            is_model_hash: true,
                            is_inner_model_hash: true)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} nodes: #{@nodes}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} nodes: #{@nodes.inspect}>"
    end
  end
end
