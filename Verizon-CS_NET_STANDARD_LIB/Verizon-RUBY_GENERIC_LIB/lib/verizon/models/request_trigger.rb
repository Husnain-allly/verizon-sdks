# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # RequestTrigger Model.
  class RequestTrigger < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :trigger_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :trigger_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :account_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :organization_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :trigger_category

    # TODO: Write general description for this method
    # @return [Array[PromoAlert1]]
    attr_accessor :promo_alerts

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['trigger_id'] = 'triggerId'
      @_hash['trigger_name'] = 'triggerName'
      @_hash['account_name'] = 'accountName'
      @_hash['organization_name'] = 'organizationName'
      @_hash['trigger_category'] = 'triggerCategory'
      @_hash['promo_alerts'] = 'promoAlerts'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        trigger_id
        trigger_name
        account_name
        organization_name
        trigger_category
        promo_alerts
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(trigger_id: SKIP, trigger_name: SKIP, account_name: SKIP,
                   organization_name: SKIP, trigger_category: SKIP,
                   promo_alerts: SKIP, additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @trigger_id = trigger_id unless trigger_id == SKIP
      @trigger_name = trigger_name unless trigger_name == SKIP
      @account_name = account_name unless account_name == SKIP
      @organization_name = organization_name unless organization_name == SKIP
      @trigger_category = trigger_category unless trigger_category == SKIP
      @promo_alerts = promo_alerts unless promo_alerts == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      trigger_id = hash.key?('triggerId') ? hash['triggerId'] : SKIP
      trigger_name = hash.key?('triggerName') ? hash['triggerName'] : SKIP
      account_name = hash.key?('accountName') ? hash['accountName'] : SKIP
      organization_name =
        hash.key?('organizationName') ? hash['organizationName'] : SKIP
      trigger_category =
        hash.key?('triggerCategory') ? hash['triggerCategory'] : SKIP
      # Parameter is an array, so we need to iterate through it
      promo_alerts = nil
      unless hash['promoAlerts'].nil?
        promo_alerts = []
        hash['promoAlerts'].each do |structure|
          promo_alerts << (PromoAlert1.from_hash(structure) if structure)
        end
      end

      promo_alerts = SKIP unless hash.key?('promoAlerts')

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      RequestTrigger.new(trigger_id: trigger_id,
                         trigger_name: trigger_name,
                         account_name: account_name,
                         organization_name: organization_name,
                         trigger_category: trigger_category,
                         promo_alerts: promo_alerts,
                         additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} trigger_id: #{@trigger_id}, trigger_name: #{@trigger_name}, account_name:"\
      " #{@account_name}, organization_name: #{@organization_name}, trigger_category:"\
      " #{@trigger_category}, promo_alerts: #{@promo_alerts}, additional_properties:"\
      " #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} trigger_id: #{@trigger_id.inspect}, trigger_name: #{@trigger_name.inspect},"\
      " account_name: #{@account_name.inspect}, organization_name: #{@organization_name.inspect},"\
      " trigger_category: #{@trigger_category.inspect}, promo_alerts: #{@promo_alerts.inspect},"\
      " additional_properties: #{@additional_properties}>"
    end
  end
end
