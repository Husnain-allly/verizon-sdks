# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # DailyUsage Model.
  class DailyUsage < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [GioDeviceId]
    attr_accessor :device_id

    # The start date of the time period queried as "$datetime"
    # @return [String]
    attr_accessor :earliest

    # The end date of the time period being queried as "$datetime"
    # @return [String]
    attr_accessor :latest

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['device_id'] = 'deviceId'
      @_hash['earliest'] = 'earliest'
      @_hash['latest'] = 'latest'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        device_id
        earliest
        latest
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(device_id: SKIP, earliest: SKIP, latest: SKIP,
                   additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @device_id = device_id unless device_id == SKIP
      @earliest = earliest unless earliest == SKIP
      @latest = latest unless latest == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      device_id = GioDeviceId.from_hash(hash['deviceId']) if hash['deviceId']
      earliest = hash.key?('earliest') ? hash['earliest'] : SKIP
      latest = hash.key?('latest') ? hash['latest'] : SKIP

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      DailyUsage.new(device_id: device_id,
                     earliest: earliest,
                     latest: latest,
                     additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} device_id: #{@device_id}, earliest: #{@earliest}, latest: #{@latest},"\
      " additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} device_id: #{@device_id.inspect}, earliest: #{@earliest.inspect}, latest:"\
      " #{@latest.inspect}, additional_properties: #{@additional_properties}>"
    end
  end
end
