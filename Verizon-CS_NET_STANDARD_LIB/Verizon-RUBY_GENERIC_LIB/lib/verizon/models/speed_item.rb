# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Defines the acceptable speed range for road users in m/s. Messages are
  # triggered when:     1. The road user's speed is below the required minimum
  # OR     2. The road user's speed is above the acceptable maximum AND     3.
  # The associated TriggerConditions are met. Example: For the speed range of
  # 10-20 m/s and a TriggerCondition of 'user inside geofence', the message is
  # sent if the user's speed is below 10 m/s or above 20 m/s while in the
  # geofence area.
  class SpeedItem < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Speed]
    attr_accessor :speed

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['speed'] = 'speed'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      %w[
        speed
      ]
    end

    def initialize(speed:, additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @speed = speed
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      speed = Speed.from_hash(hash['speed']) if hash['speed']

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      SpeedItem.new(speed: speed,
                    additional_properties: additional_properties)
    end

    # Validates an instance of the object from a given value.
    # @param [SpeedItem | Hash] The value against the validation is performed.
    def self.validate(value)
      if value.instance_of? self
        return APIHelper.valid_type?(value.speed,
                                     ->(val) { Speed.validate(val) },
                                     is_model_hash: true)
      end

      return false unless value.instance_of? Hash

      APIHelper.valid_type?(value['speed'],
                            ->(val) { Speed.validate(val) },
                            is_model_hash: true)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} speed: #{@speed}, additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} speed: #{@speed.inspect}, additional_properties:"\
      " #{@additional_properties}>"
    end
  end
end
