# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # DataTrigger2 Model.
  class DataTrigger2 < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [DeviceGroupFilterCriteria]
    attr_accessor :device_group

    # The condition type being monitored
    # @return [ConditionType]
    attr_accessor :condition_type

    # The boolean of the comparison. `gt` is Greater Than, `lt` is Less Than and
    # `eq` is Equal To
    # @return [Comparitor]
    attr_accessor :comparitor

    # The threshold value the trigger monitors for
    # @return [Integer]
    attr_accessor :threshold

    # The units of the threshold. This can be KB, Kilobits, MB, Megabits, or GB,
    # Gigabits
    # @return [ThresholdUnit]
    attr_accessor :threshold_unit

    # The interval to monitor for the threshold. This can be Daily, Weekly or
    # Monthly
    # @return [RulesCycleType]
    attr_accessor :cycle_type

    # The interval to monitor for the threshold. This can be Daily, Weekly or
    # Monthly
    # @return [AllowanceThreshold]
    attr_accessor :allowance_threshold

    # The interval to monitor for the threshold. This can be Daily, Weekly or
    # Monthly
    # @return [Actionobject]
    attr_accessor :action

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['device_group'] = 'deviceGroup'
      @_hash['condition_type'] = 'conditionType'
      @_hash['comparitor'] = 'comparitor'
      @_hash['threshold'] = 'threshold'
      @_hash['threshold_unit'] = 'thresholdUnit'
      @_hash['cycle_type'] = 'cycleType'
      @_hash['allowance_threshold'] = 'allowanceThreshold'
      @_hash['action'] = 'action'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        device_group
        condition_type
        comparitor
        threshold
        threshold_unit
        cycle_type
        allowance_threshold
        action
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(device_group: SKIP, condition_type: SKIP, comparitor: SKIP,
                   threshold: SKIP, threshold_unit: SKIP, cycle_type: SKIP,
                   allowance_threshold: SKIP, action: SKIP,
                   additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @device_group = device_group unless device_group == SKIP
      @condition_type = condition_type unless condition_type == SKIP
      @comparitor = comparitor unless comparitor == SKIP
      @threshold = threshold unless threshold == SKIP
      @threshold_unit = threshold_unit unless threshold_unit == SKIP
      @cycle_type = cycle_type unless cycle_type == SKIP
      @allowance_threshold = allowance_threshold unless allowance_threshold == SKIP
      @action = action unless action == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      device_group = DeviceGroupFilterCriteria.from_hash(hash['deviceGroup']) if
        hash['deviceGroup']
      condition_type = hash.key?('conditionType') ? hash['conditionType'] : SKIP
      comparitor = hash.key?('comparitor') ? hash['comparitor'] : SKIP
      threshold = hash.key?('threshold') ? hash['threshold'] : SKIP
      threshold_unit = hash.key?('thresholdUnit') ? hash['thresholdUnit'] : SKIP
      cycle_type = hash.key?('cycleType') ? hash['cycleType'] : SKIP
      allowance_threshold = AllowanceThreshold.from_hash(hash['allowanceThreshold']) if
        hash['allowanceThreshold']
      action = Actionobject.from_hash(hash['action']) if hash['action']

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      DataTrigger2.new(device_group: device_group,
                       condition_type: condition_type,
                       comparitor: comparitor,
                       threshold: threshold,
                       threshold_unit: threshold_unit,
                       cycle_type: cycle_type,
                       allowance_threshold: allowance_threshold,
                       action: action,
                       additional_properties: additional_properties)
    end

    # Validates an instance of the object from a given value.
    # @param [DataTrigger2 | Hash] The value against the validation is performed.
    def self.validate(value)
      return true if value.instance_of? self

      return false unless value.instance_of? Hash

      true
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} device_group: #{@device_group}, condition_type: #{@condition_type},"\
      " comparitor: #{@comparitor}, threshold: #{@threshold}, threshold_unit: #{@threshold_unit},"\
      " cycle_type: #{@cycle_type}, allowance_threshold: #{@allowance_threshold}, action:"\
      " #{@action}, additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} device_group: #{@device_group.inspect}, condition_type:"\
      " #{@condition_type.inspect}, comparitor: #{@comparitor.inspect}, threshold:"\
      " #{@threshold.inspect}, threshold_unit: #{@threshold_unit.inspect}, cycle_type:"\
      " #{@cycle_type.inspect}, allowance_threshold: #{@allowance_threshold.inspect}, action:"\
      " #{@action.inspect}, additional_properties: #{@additional_properties}>"
    end
  end
end
