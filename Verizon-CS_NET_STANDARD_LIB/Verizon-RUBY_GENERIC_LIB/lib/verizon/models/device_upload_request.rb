# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # DeviceUploadRequest Model.
  class DeviceUploadRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :account_name

    # TODO: Write general description for this method
    # @return [Array[DeviceList]]
    attr_accessor :devices

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :email_address

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :device_sku

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :upload_type

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['account_name'] = 'accountName'
      @_hash['devices'] = 'devices'
      @_hash['email_address'] = 'emailAddress'
      @_hash['device_sku'] = 'deviceSku'
      @_hash['upload_type'] = 'uploadType'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(account_name:, devices:, email_address:, device_sku:,
                   upload_type:, additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @account_name = account_name
      @devices = devices
      @email_address = email_address
      @device_sku = device_sku
      @upload_type = upload_type
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      account_name = hash.key?('accountName') ? hash['accountName'] : nil
      # Parameter is an array, so we need to iterate through it
      devices = nil
      unless hash['devices'].nil?
        devices = []
        hash['devices'].each do |structure|
          devices << (DeviceList.from_hash(structure) if structure)
        end
      end

      devices = nil unless hash.key?('devices')
      email_address = hash.key?('emailAddress') ? hash['emailAddress'] : nil
      device_sku = hash.key?('deviceSku') ? hash['deviceSku'] : nil
      upload_type = hash.key?('uploadType') ? hash['uploadType'] : nil

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      DeviceUploadRequest.new(account_name: account_name,
                              devices: devices,
                              email_address: email_address,
                              device_sku: device_sku,
                              upload_type: upload_type,
                              additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} account_name: #{@account_name}, devices: #{@devices}, email_address:"\
      " #{@email_address}, device_sku: #{@device_sku}, upload_type: #{@upload_type},"\
      " additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} account_name: #{@account_name.inspect}, devices: #{@devices.inspect},"\
      " email_address: #{@email_address.inspect}, device_sku: #{@device_sku.inspect}, upload_type:"\
      " #{@upload_type.inspect}, additional_properties: #{@additional_properties}>"
    end
  end
end
