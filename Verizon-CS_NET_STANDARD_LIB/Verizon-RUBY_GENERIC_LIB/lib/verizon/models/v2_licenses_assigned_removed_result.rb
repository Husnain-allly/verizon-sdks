# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # License assignment or removal confirmation.
  class V2LicensesAssignedRemovedResult < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Account name.
    # @return [String]
    attr_accessor :account_name

    # Total license count.
    # @return [Integer]
    attr_accessor :lic_total_count

    # Assigned license count.
    # @return [Integer]
    attr_accessor :lic_used_count

    # List of devices with id in IMEI.
    # @return [Array[V2DeviceStatus]]
    attr_accessor :device_list

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['account_name'] = 'accountName'
      @_hash['lic_total_count'] = 'licTotalCount'
      @_hash['lic_used_count'] = 'licUsedCount'
      @_hash['device_list'] = 'deviceList'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(account_name:, lic_total_count:, lic_used_count:,
                   device_list:, additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @account_name = account_name
      @lic_total_count = lic_total_count
      @lic_used_count = lic_used_count
      @device_list = device_list
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      account_name = hash.key?('accountName') ? hash['accountName'] : nil
      lic_total_count = hash.key?('licTotalCount') ? hash['licTotalCount'] : nil
      lic_used_count = hash.key?('licUsedCount') ? hash['licUsedCount'] : nil
      # Parameter is an array, so we need to iterate through it
      device_list = nil
      unless hash['deviceList'].nil?
        device_list = []
        hash['deviceList'].each do |structure|
          device_list << (V2DeviceStatus.from_hash(structure) if structure)
        end
      end

      device_list = nil unless hash.key?('deviceList')

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      V2LicensesAssignedRemovedResult.new(account_name: account_name,
                                          lic_total_count: lic_total_count,
                                          lic_used_count: lic_used_count,
                                          device_list: device_list,
                                          additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} account_name: #{@account_name}, lic_total_count: #{@lic_total_count},"\
      " lic_used_count: #{@lic_used_count}, device_list: #{@device_list}, additional_properties:"\
      " #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} account_name: #{@account_name.inspect}, lic_total_count:"\
      " #{@lic_total_count.inspect}, lic_used_count: #{@lic_used_count.inspect}, device_list:"\
      " #{@device_list.inspect}, additional_properties: #{@additional_properties}>"
    end
  end
end
