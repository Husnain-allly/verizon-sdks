<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

class ManagedAccountsProvisionRequest implements \JsonSerializable
{
    /**
     * @var string
     */
    private $accountName;

    /**
     * @var string
     */
    private $paccountName;

    /**
     * @var string
     */
    private $serviceName;

    /**
     * @var string
     */
    private $type;

    /**
     * @var string
     */
    private $txid;

    /**
     * @param string $accountName
     * @param string $paccountName
     * @param string $serviceName
     * @param string $type
     * @param string $txid
     */
    public function __construct(
        string $accountName,
        string $paccountName,
        string $serviceName,
        string $type,
        string $txid
    ) {
        $this->accountName = $accountName;
        $this->paccountName = $paccountName;
        $this->serviceName = $serviceName;
        $this->type = $type;
        $this->txid = $txid;
    }

    /**
     * Returns Account Name.
     * Managed account identifier
     */
    public function getAccountName(): string
    {
        return $this->accountName;
    }

    /**
     * Sets Account Name.
     * Managed account identifier
     *
     * @required
     * @maps accountName
     */
    public function setAccountName(string $accountName): void
    {
        $this->accountName = $accountName;
    }

    /**
     * Returns Paccount Name.
     * Primary Account identifier
     */
    public function getPaccountName(): string
    {
        return $this->paccountName;
    }

    /**
     * Sets Paccount Name.
     * Primary Account identifier
     *
     * @required
     * @maps paccountName
     */
    public function setPaccountName(string $paccountName): void
    {
        $this->paccountName = $paccountName;
    }

    /**
     * Returns Service Name.
     * Service name
     */
    public function getServiceName(): string
    {
        return $this->serviceName;
    }

    /**
     * Sets Service Name.
     * Service name
     *
     * @required
     * @maps serviceName
     * @factory \VerizonLib\Models\ServiceName::checkValue
     */
    public function setServiceName(string $serviceName): void
    {
        $this->serviceName = $serviceName;
    }

    /**
     * Returns Type.
     * SKU name
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * SKU name
     *
     * @required
     * @maps type
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Txid.
     * Transaction identifier returned by add request
     */
    public function getTxid(): string
    {
        return $this->txid;
    }

    /**
     * Sets Txid.
     * Transaction identifier returned by add request
     *
     * @required
     * @maps txid
     */
    public function setTxid(string $txid): void
    {
        $this->txid = $txid;
    }

    /**
     * Converts the ManagedAccountsProvisionRequest object to a human-readable string representation.
     *
     * @return string The string representation of the ManagedAccountsProvisionRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'ManagedAccountsProvisionRequest',
            [
                'accountName' => $this->accountName,
                'paccountName' => $this->paccountName,
                'serviceName' => $this->serviceName,
                'type' => $this->type,
                'txid' => $this->txid,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['accountName', 'paccountName', 'serviceName', 'type', 'txid'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['accountName']  = $this->accountName;
        $json['paccountName'] = $this->paccountName;
        $json['serviceName']  = ServiceName::checkValue($this->serviceName);
        $json['type']         = $this->type;
        $json['txid']         = $this->txid;
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
