<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * The engagements associated with the account.
 */
class Engagement implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $engagementId;

    /**
     * @var string|null
     */
    private $chargingGroup;

    /**
     * @var AccountService[]|null
     */
    private $services;

    /**
     * Returns Engagement Id.
     * The engagement ID.
     */
    public function getEngagementId(): ?string
    {
        return $this->engagementId;
    }

    /**
     * Sets Engagement Id.
     * The engagement ID.
     *
     * @maps engagementId
     */
    public function setEngagementId(?string $engagementId): void
    {
        $this->engagementId = $engagementId;
    }

    /**
     * Returns Charging Group.
     * The charging group name.
     */
    public function getChargingGroup(): ?string
    {
        return $this->chargingGroup;
    }

    /**
     * Sets Charging Group.
     * The charging group name.
     *
     * @maps chargingGroup
     */
    public function setChargingGroup(?string $chargingGroup): void
    {
        $this->chargingGroup = $chargingGroup;
    }

    /**
     * Returns Services.
     * The services associated with the account.
     *
     * @return AccountService[]|null
     */
    public function getServices(): ?array
    {
        return $this->services;
    }

    /**
     * Sets Services.
     * The services associated with the account.
     *
     * @maps services
     *
     * @param AccountService[]|null $services
     */
    public function setServices(?array $services): void
    {
        $this->services = $services;
    }

    /**
     * Converts the Engagement object to a human-readable string representation.
     *
     * @return string The string representation of the Engagement object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'Engagement',
            [
                'engagementId' => $this->engagementId,
                'chargingGroup' => $this->chargingGroup,
                'services' => $this->services,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['engagementId', 'chargingGroup', 'services'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->engagementId)) {
            $json['engagementId']  = $this->engagementId;
        }
        if (isset($this->chargingGroup)) {
            $json['chargingGroup'] = $this->chargingGroup;
        }
        if (isset($this->services)) {
            $json['services']      = $this->services;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
