<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Search Device By Property resource definition.
 */
class SearchDeviceEventHistoryRequest implements \JsonSerializable
{
    /**
     * @var AccountIdentifier
     */
    private $accountidentifier;

    /**
     * @var array<string,string>|null
     */
    private $mSelection;

    /**
     * @var ResourceIdentifier
     */
    private $resourceidentifier;

    /**
     * @var int|null
     */
    private $mLimitnumber;

    /**
     * @var string|null
     */
    private $mPage;

    /**
     * @param AccountIdentifier $accountidentifier
     * @param ResourceIdentifier $resourceidentifier
     */
    public function __construct(AccountIdentifier $accountidentifier, ResourceIdentifier $resourceidentifier)
    {
        $this->accountidentifier = $accountidentifier;
        $this->resourceidentifier = $resourceidentifier;
    }

    /**
     * Returns Accountidentifier.
     * The ID of the authenticating billing account, in the format `{"billingaccountid":"1234567890-
     * 12345"}`.
     */
    public function getAccountidentifier(): AccountIdentifier
    {
        return $this->accountidentifier;
    }

    /**
     * Sets Accountidentifier.
     * The ID of the authenticating billing account, in the format `{"billingaccountid":"1234567890-
     * 12345"}`.
     *
     * @required
     * @maps accountidentifier
     */
    public function setAccountidentifier(AccountIdentifier $accountidentifier): void
    {
        $this->accountidentifier = $accountidentifier;
    }

    /**
     * Returns M Selection.
     * A comma-separated list of properties and comparator values to match against subscriptions in the
     * ThingSpace account. See Working with Query Filters for more information. If the request does not
     * include `$selection`, the response will include all subscriptions to which the requesting user has
     * access.
     *
     * @return array<string,string>|null
     */
    public function getMSelection(): ?array
    {
        return $this->mSelection;
    }

    /**
     * Sets M Selection.
     * A comma-separated list of properties and comparator values to match against subscriptions in the
     * ThingSpace account. See Working with Query Filters for more information. If the request does not
     * include `$selection`, the response will include all subscriptions to which the requesting user has
     * access.
     *
     * @maps $selection
     *
     * @param array<string,string>|null $mSelection
     */
    public function setMSelection(?array $mSelection): void
    {
        $this->mSelection = $mSelection;
    }

    /**
     * Returns Resourceidentifier.
     * The ID of the target to delete, in the format {"id": "dd1682d3-2d80-cefc-f3ee-25154800beff"}.
     */
    public function getResourceidentifier(): ResourceIdentifier
    {
        return $this->resourceidentifier;
    }

    /**
     * Sets Resourceidentifier.
     * The ID of the target to delete, in the format {"id": "dd1682d3-2d80-cefc-f3ee-25154800beff"}.
     *
     * @required
     * @maps resourceidentifier
     */
    public function setResourceidentifier(ResourceIdentifier $resourceidentifier): void
    {
        $this->resourceidentifier = $resourceidentifier;
    }

    /**
     * Returns M Limitnumber.
     * The maximum number of events to include in the response.
     */
    public function getMLimitnumber(): ?int
    {
        return $this->mLimitnumber;
    }

    /**
     * Sets M Limitnumber.
     * The maximum number of events to include in the response.
     *
     * @maps $limitnumber
     */
    public function setMLimitnumber(?int $mLimitnumber): void
    {
        $this->mLimitnumber = $mLimitnumber;
    }

    /**
     * Returns M Page.
     * The maximum number of events to include in the response.
     */
    public function getMPage(): ?string
    {
        return $this->mPage;
    }

    /**
     * Sets M Page.
     * The maximum number of events to include in the response.
     *
     * @maps $page
     */
    public function setMPage(?string $mPage): void
    {
        $this->mPage = $mPage;
    }

    /**
     * Converts the SearchDeviceEventHistoryRequest object to a human-readable string representation.
     *
     * @return string The string representation of the SearchDeviceEventHistoryRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'SearchDeviceEventHistoryRequest',
            [
                'accountidentifier' => $this->accountidentifier,
                'mSelection' => $this->mSelection,
                'resourceidentifier' => $this->resourceidentifier,
                'mLimitnumber' => $this->mLimitnumber,
                'mPage' => $this->mPage,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['accountidentifier', '$selection', 'resourceidentifier', '$limitnumber', '$page'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['accountidentifier']  = $this->accountidentifier;
        if (isset($this->mSelection)) {
            $json['$selection']     = $this->mSelection;
        }
        $json['resourceidentifier'] = $this->resourceidentifier;
        if (isset($this->mLimitnumber)) {
            $json['$limitnumber']   = $this->mLimitnumber;
        }
        if (isset($this->mPage)) {
            $json['$page']          = $this->mPage;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
