<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Search by device id.
 */
class DeviceIdSearch implements \JsonSerializable
{
    /**
     * @var string
     */
    private $contains;

    /**
     * @var string|null
     */
    private $startswith;

    /**
     * @var string|null
     */
    private $endswith;

    /**
     * @var string
     */
    private $kind;

    /**
     * @param string $contains
     * @param string $kind
     */
    public function __construct(string $contains, string $kind)
    {
        $this->contains = $contains;
        $this->kind = $kind;
    }

    /**
     * Returns Contains.
     * The string appears anywhere in the identifer.
     */
    public function getContains(): string
    {
        return $this->contains;
    }

    /**
     * Sets Contains.
     * The string appears anywhere in the identifer.
     *
     * @required
     * @maps contains
     */
    public function setContains(string $contains): void
    {
        $this->contains = $contains;
    }

    /**
     * Returns Startswith.
     * The identifer must start with the specified string.
     */
    public function getStartswith(): ?string
    {
        return $this->startswith;
    }

    /**
     * Sets Startswith.
     * The identifer must start with the specified string.
     *
     * @maps startswith
     */
    public function setStartswith(?string $startswith): void
    {
        $this->startswith = $startswith;
    }

    /**
     * Returns Endswith.
     * The identifier must end with the specified string.
     */
    public function getEndswith(): ?string
    {
        return $this->endswith;
    }

    /**
     * Sets Endswith.
     * The identifier must end with the specified string.
     *
     * @maps endswith
     */
    public function setEndswith(?string $endswith): void
    {
        $this->endswith = $endswith;
    }

    /**
     * Returns Kind.
     * The type of the device identifier. Valid types of identifiers are:ESN (decimal),EID,ICCID (up to 20
     * digits),IMEI (up to 16 digits),MDN,MEID (hexadecimal),MSISDN.
     */
    public function getKind(): string
    {
        return $this->kind;
    }

    /**
     * Sets Kind.
     * The type of the device identifier. Valid types of identifiers are:ESN (decimal),EID,ICCID (up to 20
     * digits),IMEI (up to 16 digits),MDN,MEID (hexadecimal),MSISDN.
     *
     * @required
     * @maps kind
     */
    public function setKind(string $kind): void
    {
        $this->kind = $kind;
    }

    /**
     * Converts the DeviceIdSearch object to a human-readable string representation.
     *
     * @return string The string representation of the DeviceIdSearch object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'DeviceIdSearch',
            [
                'contains' => $this->contains,
                'startswith' => $this->startswith,
                'endswith' => $this->endswith,
                'kind' => $this->kind,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['contains', 'startswith', 'endswith', 'kind'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['contains']       = $this->contains;
        if (isset($this->startswith)) {
            $json['startswith'] = $this->startswith;
        }
        if (isset($this->endswith)) {
            $json['endswith']   = $this->endswith;
        }
        $json['kind']           = $this->kind;
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
