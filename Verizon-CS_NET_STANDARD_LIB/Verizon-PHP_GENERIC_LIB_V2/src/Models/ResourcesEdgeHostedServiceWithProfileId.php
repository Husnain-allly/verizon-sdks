<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Edge hosted service represented by Service Endpoint definition.
 */
class ResourcesEdgeHostedServiceWithProfileId implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $ern;

    /**
     * @var ResourcesServiceEndpoint|null
     */
    private $serviceEndpoint;

    /**
     * @var string|null
     */
    private $applicationServerProviderId;

    /**
     * @var string|null
     */
    private $applicationId;

    /**
     * @var string|null
     */
    private $serviceDescription;

    /**
     * @var string|null
     */
    private $serviceProfileId;

    /**
     * Returns Ern.
     * Edge Resource Name. A string identifier for a set of edge resources.
     */
    public function getErn(): ?string
    {
        return $this->ern;
    }

    /**
     * Sets Ern.
     * Edge Resource Name. A string identifier for a set of edge resources.
     *
     * @maps ern
     */
    public function setErn(?string $ern): void
    {
        $this->ern = $ern;
    }

    /**
     * Returns Service Endpoint.
     * Service Endpoint path, address, and port.
     */
    public function getServiceEndpoint(): ?ResourcesServiceEndpoint
    {
        return $this->serviceEndpoint;
    }

    /**
     * Sets Service Endpoint.
     * Service Endpoint path, address, and port.
     *
     * @maps serviceEndpoint
     */
    public function setServiceEndpoint(?ResourcesServiceEndpoint $serviceEndpoint): void
    {
        $this->serviceEndpoint = $serviceEndpoint;
    }

    /**
     * Returns Application Server Provider Id.
     * Unique ID representing the Edge Application Provider.
     */
    public function getApplicationServerProviderId(): ?string
    {
        return $this->applicationServerProviderId;
    }

    /**
     * Sets Application Server Provider Id.
     * Unique ID representing the Edge Application Provider.
     *
     * @maps applicationServerProviderId
     */
    public function setApplicationServerProviderId(?string $applicationServerProviderId): void
    {
        $this->applicationServerProviderId = $applicationServerProviderId;
    }

    /**
     * Returns Application Id.
     * Unique ID representing the Edge Application.
     */
    public function getApplicationId(): ?string
    {
        return $this->applicationId;
    }

    /**
     * Sets Application Id.
     * Unique ID representing the Edge Application.
     *
     * @maps applicationId
     */
    public function setApplicationId(?string $applicationId): void
    {
        $this->applicationId = $applicationId;
    }

    /**
     * Returns Service Description.
     */
    public function getServiceDescription(): ?string
    {
        return $this->serviceDescription;
    }

    /**
     * Sets Service Description.
     *
     * @maps serviceDescription
     */
    public function setServiceDescription(?string $serviceDescription): void
    {
        $this->serviceDescription = $serviceDescription;
    }

    /**
     * Returns Service Profile Id.
     * The system assigned ID of the service profile.
     */
    public function getServiceProfileId(): ?string
    {
        return $this->serviceProfileId;
    }

    /**
     * Sets Service Profile Id.
     * The system assigned ID of the service profile.
     *
     * @maps serviceProfileID
     */
    public function setServiceProfileId(?string $serviceProfileId): void
    {
        $this->serviceProfileId = $serviceProfileId;
    }

    /**
     * Converts the ResourcesEdgeHostedServiceWithProfileId object to a human-readable string
     * representation.
     *
     * @return string The string representation of the ResourcesEdgeHostedServiceWithProfileId object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'ResourcesEdgeHostedServiceWithProfileId',
            [
                'ern' => $this->ern,
                'serviceEndpoint' => $this->serviceEndpoint,
                'applicationServerProviderId' => $this->applicationServerProviderId,
                'applicationId' => $this->applicationId,
                'serviceDescription' => $this->serviceDescription,
                'serviceProfileId' => $this->serviceProfileId,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = [
        'ern',
        'serviceEndpoint',
        'applicationServerProviderId',
        'applicationId',
        'serviceDescription',
        'serviceProfileID'
    ];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->ern)) {
            $json['ern']                         = $this->ern;
        }
        if (isset($this->serviceEndpoint)) {
            $json['serviceEndpoint']             = $this->serviceEndpoint;
        }
        if (isset($this->applicationServerProviderId)) {
            $json['applicationServerProviderId'] = $this->applicationServerProviderId;
        }
        if (isset($this->applicationId)) {
            $json['applicationId']               = $this->applicationId;
        }
        if (isset($this->serviceDescription)) {
            $json['serviceDescription']          = $this->serviceDescription;
        }
        if (isset($this->serviceProfileId)) {
            $json['serviceProfileID']            = $this->serviceProfileId;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
