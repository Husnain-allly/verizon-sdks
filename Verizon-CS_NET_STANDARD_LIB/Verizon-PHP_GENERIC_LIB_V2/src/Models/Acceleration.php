<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

class Acceleration implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $x;

    /**
     * @var string|null
     */
    private $y;

    /**
     * @var string|null
     */
    private $z;

    /**
     * Returns X.
     */
    public function getX(): ?string
    {
        return $this->x;
    }

    /**
     * Sets X.
     *
     * @maps x
     */
    public function setX(?string $x): void
    {
        $this->x = $x;
    }

    /**
     * Returns Y.
     */
    public function getY(): ?string
    {
        return $this->y;
    }

    /**
     * Sets Y.
     *
     * @maps y
     */
    public function setY(?string $y): void
    {
        $this->y = $y;
    }

    /**
     * Returns Z.
     */
    public function getZ(): ?string
    {
        return $this->z;
    }

    /**
     * Sets Z.
     *
     * @maps z
     */
    public function setZ(?string $z): void
    {
        $this->z = $z;
    }

    /**
     * Converts the Acceleration object to a human-readable string representation.
     *
     * @return string The string representation of the Acceleration object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'Acceleration',
            [
                'x' => $this->x,
                'y' => $this->y,
                'z' => $this->z,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['x', 'y', 'z'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->x)) {
            $json['x'] = $this->x;
        }
        if (isset($this->y)) {
            $json['y'] = $this->y;
        }
        if (isset($this->z)) {
            $json['z'] = $this->z;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
