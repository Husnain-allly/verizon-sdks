<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

class DtoUserDto implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $email;

    /**
     * @var string|null
     */
    private $firstname;

    /**
     * @var string|null
     */
    private $lastname;

    /**
     * @var string|null
     */
    private $mdn;

    /**
     * @var array|null
     */
    private $customdata;

    /**
     * Returns Email.
     * Contact email for the group
     */
    public function getEmail(): ?string
    {
        return $this->email;
    }

    /**
     * Sets Email.
     * Contact email for the group
     *
     * @maps email
     */
    public function setEmail(?string $email): void
    {
        $this->email = $email;
    }

    /**
     * Returns Firstname.
     * The first name in the user record
     */
    public function getFirstname(): ?string
    {
        return $this->firstname;
    }

    /**
     * Sets Firstname.
     * The first name in the user record
     *
     * @maps firstname
     */
    public function setFirstname(?string $firstname): void
    {
        $this->firstname = $firstname;
    }

    /**
     * Returns Lastname.
     * The last name in the user record
     */
    public function getLastname(): ?string
    {
        return $this->lastname;
    }

    /**
     * Sets Lastname.
     * The last name in the user record
     *
     * @maps lastname
     */
    public function setLastname(?string $lastname): void
    {
        $this->lastname = $lastname;
    }

    /**
     * Returns Mdn.
     * The Mobile Directory Number
     */
    public function getMdn(): ?string
    {
        return $this->mdn;
    }

    /**
     * Sets Mdn.
     * The Mobile Directory Number
     *
     * @maps mdn
     */
    public function setMdn(?string $mdn): void
    {
        $this->mdn = $mdn;
    }

    /**
     * Returns Customdata.
     * Name/value pair, where the value is client defined.  The purpose is to keep track of current state
     * per device action.
     */
    public function getCustomdata(): ?array
    {
        return $this->customdata;
    }

    /**
     * Sets Customdata.
     * Name/value pair, where the value is client defined.  The purpose is to keep track of current state
     * per device action.
     *
     * @maps customdata
     */
    public function setCustomdata(?array $customdata): void
    {
        $this->customdata = $customdata;
    }

    /**
     * Converts the DtoUserDto object to a human-readable string representation.
     *
     * @return string The string representation of the DtoUserDto object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'DtoUserDto',
            [
                'email' => $this->email,
                'firstname' => $this->firstname,
                'lastname' => $this->lastname,
                'mdn' => $this->mdn,
                'customdata' => $this->customdata
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->email)) {
            $json['email']      = $this->email;
        }
        if (isset($this->firstname)) {
            $json['firstname']  = $this->firstname;
        }
        if (isset($this->lastname)) {
            $json['lastname']   = $this->lastname;
        }
        if (isset($this->mdn)) {
            $json['mdn']        = $this->mdn;
        }
        if (isset($this->customdata)) {
            $json['customdata'] = $this->customdata;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
