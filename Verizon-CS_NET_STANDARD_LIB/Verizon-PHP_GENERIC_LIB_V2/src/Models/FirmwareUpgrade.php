<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Array of upgrade objects with the specified status.
 */
class FirmwareUpgrade implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $id;

    /**
     * @var string|null
     */
    private $accountName;

    /**
     * @var string|null
     */
    private $firmwareName;

    /**
     * @var string|null
     */
    private $firmwareTo;

    /**
     * @var string|null
     */
    private $startDate;

    /**
     * @var string|null
     */
    private $status;

    /**
     * @var FirmwareUpgradeDeviceListItem[]|null
     */
    private $deviceList;

    /**
     * Returns Id.
     * The unique identifier for this upgrade.
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * The unique identifier for this upgrade.
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Account Name.
     * Account identifier in "##########-#####".
     */
    public function getAccountName(): ?string
    {
        return $this->accountName;
    }

    /**
     * Sets Account Name.
     * Account identifier in "##########-#####".
     *
     * @maps accountName
     */
    public function setAccountName(?string $accountName): void
    {
        $this->accountName = $accountName;
    }

    /**
     * Returns Firmware Name.
     * The name of the firmware image that will be used for the upgrade.
     */
    public function getFirmwareName(): ?string
    {
        return $this->firmwareName;
    }

    /**
     * Sets Firmware Name.
     * The name of the firmware image that will be used for the upgrade.
     *
     * @maps firmwareName
     */
    public function setFirmwareName(?string $firmwareName): void
    {
        $this->firmwareName = $firmwareName;
    }

    /**
     * Returns Firmware To.
     * The name of the firmware version that will be on the devices after a successful upgrade.
     */
    public function getFirmwareTo(): ?string
    {
        return $this->firmwareTo;
    }

    /**
     * Sets Firmware To.
     * The name of the firmware version that will be on the devices after a successful upgrade.
     *
     * @maps firmwareTo
     */
    public function setFirmwareTo(?string $firmwareTo): void
    {
        $this->firmwareTo = $firmwareTo;
    }

    /**
     * Returns Start Date.
     * The intended start date for the upgrade.
     */
    public function getStartDate(): ?string
    {
        return $this->startDate;
    }

    /**
     * Sets Start Date.
     * The intended start date for the upgrade.
     *
     * @maps startDate
     */
    public function setStartDate(?string $startDate): void
    {
        $this->startDate = $startDate;
    }

    /**
     * Returns Status.
     * The current status of the upgrade.
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     * The current status of the upgrade.
     *
     * @maps status
     */
    public function setStatus(?string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Device List.
     * A JSON object for each device that was included in the upgrade, showing the device IMEI, the status
     * of the upgrade, and additional information about the status.
     *
     * @return FirmwareUpgradeDeviceListItem[]|null
     */
    public function getDeviceList(): ?array
    {
        return $this->deviceList;
    }

    /**
     * Sets Device List.
     * A JSON object for each device that was included in the upgrade, showing the device IMEI, the status
     * of the upgrade, and additional information about the status.
     *
     * @maps deviceList
     *
     * @param FirmwareUpgradeDeviceListItem[]|null $deviceList
     */
    public function setDeviceList(?array $deviceList): void
    {
        $this->deviceList = $deviceList;
    }

    /**
     * Converts the FirmwareUpgrade object to a human-readable string representation.
     *
     * @return string The string representation of the FirmwareUpgrade object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'FirmwareUpgrade',
            [
                'id' => $this->id,
                'accountName' => $this->accountName,
                'firmwareName' => $this->firmwareName,
                'firmwareTo' => $this->firmwareTo,
                'startDate' => $this->startDate,
                'status' => $this->status,
                'deviceList' => $this->deviceList,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['id', 'accountName', 'firmwareName', 'firmwareTo', 'startDate', 'status', 'deviceList'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->id)) {
            $json['id']           = $this->id;
        }
        if (isset($this->accountName)) {
            $json['accountName']  = $this->accountName;
        }
        if (isset($this->firmwareName)) {
            $json['firmwareName'] = $this->firmwareName;
        }
        if (isset($this->firmwareTo)) {
            $json['firmwareTo']   = $this->firmwareTo;
        }
        if (isset($this->startDate)) {
            $json['startDate']    = $this->startDate;
        }
        if (isset($this->status)) {
            $json['status']       = $this->status;
        }
        if (isset($this->deviceList)) {
            $json['deviceList']   = $this->deviceList;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
