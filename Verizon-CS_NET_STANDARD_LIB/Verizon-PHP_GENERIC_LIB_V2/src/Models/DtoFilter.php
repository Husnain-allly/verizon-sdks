<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

class DtoFilter implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $mExpand;

    /**
     * @var int|null
     */
    private $mLimitnumber;

    /**
     * @var bool|null
     */
    private $mNopagination;

    /**
     * @var string|null
     */
    private $mPage;

    /**
     * @var int|null
     */
    private $mPagenumber;

    /**
     * @var string[]|null
     */
    private $mProjection;

    /**
     * @var array|null
     */
    private $mSelection;

    /**
     * Returns M Expand.
     * Use to provide device details for alerts specific to a device
     */
    public function getMExpand(): ?string
    {
        return $this->mExpand;
    }

    /**
     * Sets M Expand.
     * Use to provide device details for alerts specific to a device
     *
     * @maps $expand
     */
    public function setMExpand(?string $mExpand): void
    {
        $this->mExpand = $mExpand;
    }

    /**
     * Returns M Limitnumber.
     * Limit the number of results returned
     */
    public function getMLimitnumber(): ?int
    {
        return $this->mLimitnumber;
    }

    /**
     * Sets M Limitnumber.
     * Limit the number of results returned
     *
     * @maps $limitnumber
     */
    public function setMLimitnumber(?int $mLimitnumber): void
    {
        $this->mLimitnumber = $mLimitnumber;
    }

    /**
     * Returns M Nopagination.
     * A flag set to show if pagination requested (false) or not (true)
     */
    public function getMNopagination(): ?bool
    {
        return $this->mNopagination;
    }

    /**
     * Sets M Nopagination.
     * A flag set to show if pagination requested (false) or not (true)
     *
     * @maps $nopagination
     */
    public function setMNopagination(?bool $mNopagination): void
    {
        $this->mNopagination = $mNopagination;
    }

    /**
     * Returns M Page.
     */
    public function getMPage(): ?string
    {
        return $this->mPage;
    }

    /**
     * Sets M Page.
     *
     * @maps $page
     */
    public function setMPage(?string $mPage): void
    {
        $this->mPage = $mPage;
    }

    /**
     * Returns M Pagenumber.
     */
    public function getMPagenumber(): ?int
    {
        return $this->mPagenumber;
    }

    /**
     * Sets M Pagenumber.
     *
     * @maps $pagenumber
     */
    public function setMPagenumber(?int $mPagenumber): void
    {
        $this->mPagenumber = $mPagenumber;
    }

    /**
     * Returns M Projection.
     * Limits the fields of the device that the user is interested in rather than all of the fields
     *
     * @return string[]|null
     */
    public function getMProjection(): ?array
    {
        return $this->mProjection;
    }

    /**
     * Sets M Projection.
     * Limits the fields of the device that the user is interested in rather than all of the fields
     *
     * @maps $projection
     *
     * @param string[]|null $mProjection
     */
    public function setMProjection(?array $mProjection): void
    {
        $this->mProjection = $mProjection;
    }

    /**
     * Returns M Selection.
     * Filters results based on user defined criteria
     */
    public function getMSelection(): ?array
    {
        return $this->mSelection;
    }

    /**
     * Sets M Selection.
     * Filters results based on user defined criteria
     *
     * @maps $selection
     */
    public function setMSelection(?array $mSelection): void
    {
        $this->mSelection = $mSelection;
    }

    /**
     * Converts the DtoFilter object to a human-readable string representation.
     *
     * @return string The string representation of the DtoFilter object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'DtoFilter',
            [
                'mExpand' => $this->mExpand,
                'mLimitnumber' => $this->mLimitnumber,
                'mNopagination' => $this->mNopagination,
                'mPage' => $this->mPage,
                'mPagenumber' => $this->mPagenumber,
                'mProjection' => $this->mProjection,
                'mSelection' => $this->mSelection
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->mExpand)) {
            $json['$expand']       = $this->mExpand;
        }
        if (isset($this->mLimitnumber)) {
            $json['$limitnumber']  = $this->mLimitnumber;
        }
        if (isset($this->mNopagination)) {
            $json['$nopagination'] = $this->mNopagination;
        }
        if (isset($this->mPage)) {
            $json['$page']         = $this->mPage;
        }
        if (isset($this->mPagenumber)) {
            $json['$pagenumber']   = $this->mPagenumber;
        }
        if (isset($this->mProjection)) {
            $json['$projection']   = $this->mProjection;
        }
        if (isset($this->mSelection)) {
            $json['$selection']    = $this->mSelection;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
