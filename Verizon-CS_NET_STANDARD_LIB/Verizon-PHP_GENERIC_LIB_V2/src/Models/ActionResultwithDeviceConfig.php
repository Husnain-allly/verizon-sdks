<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;
use VerizonLib\Utils\DateTimeHelper;

class ActionResultwithDeviceConfig implements \JsonSerializable
{
    /**
     * @var \DateTime|null
     */
    private $createdon;

    /**
     * @var string|null
     */
    private $description;

    /**
     * @var string|null
     */
    private $deviceid;

    /**
     * @var string|null
     */
    private $errmsg;

    /**
     * @var DtoDeviceActionSetConfiguration|null
     */
    private $fields;

    /**
     * @var string|null
     */
    private $foreignid;

    /**
     * @var string|null
     */
    private $id;

    /**
     * @var \DateTime|null
     */
    private $lastupdated;

    /**
     * @var string|null
     */
    private $state;

    /**
     * @var string|null
     */
    private $transactionid;

    /**
     * @var string|null
     */
    private $version;

    /**
     * @var string|null
     */
    private $versionid;

    /**
     * Returns Createdon.
     * Timestamp of the record
     */
    public function getCreatedon(): ?\DateTime
    {
        return $this->createdon;
    }

    /**
     * Sets Createdon.
     * Timestamp of the record
     *
     * @maps createdon
     * @factory \VerizonLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setCreatedon(?\DateTime $createdon): void
    {
        $this->createdon = $createdon;
    }

    /**
     * Returns Description.
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Deviceid.
     * This is a UUID value of the device created when the device is onboarded
     */
    public function getDeviceid(): ?string
    {
        return $this->deviceid;
    }

    /**
     * Sets Deviceid.
     * This is a UUID value of the device created when the device is onboarded
     *
     * @maps deviceid
     */
    public function setDeviceid(?string $deviceid): void
    {
        $this->deviceid = $deviceid;
    }

    /**
     * Returns Errmsg.
     * Error message
     */
    public function getErrmsg(): ?string
    {
        return $this->errmsg;
    }

    /**
     * Sets Errmsg.
     * Error message
     *
     * @maps errmsg
     */
    public function setErrmsg(?string $errmsg): void
    {
        $this->errmsg = $errmsg;
    }

    /**
     * Returns Fields.
     */
    public function getFields(): ?DtoDeviceActionSetConfiguration
    {
        return $this->fields;
    }

    /**
     * Sets Fields.
     *
     * @maps fields
     */
    public function setFields(?DtoDeviceActionSetConfiguration $fields): void
    {
        $this->fields = $fields;
    }

    /**
     * Returns Foreignid.
     * UUID of the ECPD account the user belongs to
     */
    public function getForeignid(): ?string
    {
        return $this->foreignid;
    }

    /**
     * Sets Foreignid.
     * UUID of the ECPD account the user belongs to
     *
     * @maps foreignid
     */
    public function setForeignid(?string $foreignid): void
    {
        $this->foreignid = $foreignid;
    }

    /**
     * Returns Id.
     * UUID of the user record, assigned at creation
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * UUID of the user record, assigned at creation
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Lastupdated.
     * Timestamp of the record
     */
    public function getLastupdated(): ?\DateTime
    {
        return $this->lastupdated;
    }

    /**
     * Sets Lastupdated.
     * Timestamp of the record
     *
     * @maps lastupdated
     * @factory \VerizonLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setLastupdated(?\DateTime $lastupdated): void
    {
        $this->lastupdated = $lastupdated;
    }

    /**
     * Returns State.
     * The current status of the device or transaction and will be `success` or `failed`
     */
    public function getState(): ?string
    {
        return $this->state;
    }

    /**
     * Sets State.
     * The current status of the device or transaction and will be `success` or `failed`
     *
     * @maps state
     */
    public function setState(?string $state): void
    {
        $this->state = $state;
    }

    /**
     * Returns Transactionid.
     * The system-generated UUID of the transaction
     */
    public function getTransactionid(): ?string
    {
        return $this->transactionid;
    }

    /**
     * Sets Transactionid.
     * The system-generated UUID of the transaction
     *
     * @maps transactionid
     */
    public function setTransactionid(?string $transactionid): void
    {
        $this->transactionid = $transactionid;
    }

    /**
     * Returns Version.
     * The resource version
     */
    public function getVersion(): ?string
    {
        return $this->version;
    }

    /**
     * Sets Version.
     * The resource version
     *
     * @maps version
     */
    public function setVersion(?string $version): void
    {
        $this->version = $version;
    }

    /**
     * Returns Versionid.
     * The UUID of the resource version
     */
    public function getVersionid(): ?string
    {
        return $this->versionid;
    }

    /**
     * Sets Versionid.
     * The UUID of the resource version
     *
     * @maps versionid
     */
    public function setVersionid(?string $versionid): void
    {
        $this->versionid = $versionid;
    }

    /**
     * Converts the ActionResultwithDeviceConfig object to a human-readable string representation.
     *
     * @return string The string representation of the ActionResultwithDeviceConfig object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'ActionResultwithDeviceConfig',
            [
                'createdon' => $this->createdon,
                'description' => $this->description,
                'deviceid' => $this->deviceid,
                'errmsg' => $this->errmsg,
                'fields' => $this->fields,
                'foreignid' => $this->foreignid,
                'id' => $this->id,
                'lastupdated' => $this->lastupdated,
                'state' => $this->state,
                'transactionid' => $this->transactionid,
                'version' => $this->version,
                'versionid' => $this->versionid,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = [
        'createdon',
        'description',
        'deviceid',
        'errmsg',
        'fields',
        'foreignid',
        'id',
        'lastupdated',
        'state',
        'transactionid',
        'version',
        'versionid'
    ];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->createdon)) {
            $json['createdon']     = DateTimeHelper::toRfc3339DateTime($this->createdon);
        }
        if (isset($this->description)) {
            $json['description']   = $this->description;
        }
        if (isset($this->deviceid)) {
            $json['deviceid']      = $this->deviceid;
        }
        if (isset($this->errmsg)) {
            $json['errmsg']        = $this->errmsg;
        }
        if (isset($this->fields)) {
            $json['fields']        = $this->fields;
        }
        if (isset($this->foreignid)) {
            $json['foreignid']     = $this->foreignid;
        }
        if (isset($this->id)) {
            $json['id']            = $this->id;
        }
        if (isset($this->lastupdated)) {
            $json['lastupdated']   = DateTimeHelper::toRfc3339DateTime($this->lastupdated);
        }
        if (isset($this->state)) {
            $json['state']         = $this->state;
        }
        if (isset($this->transactionid)) {
            $json['transactionid'] = $this->transactionid;
        }
        if (isset($this->version)) {
            $json['version']       = $this->version;
        }
        if (isset($this->versionid)) {
            $json['versionid']     = $this->versionid;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
