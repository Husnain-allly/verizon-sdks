<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;
use VerizonLib\Utils\DateTimeHelper;

/**
 * Firmware upgrades information.
 */
class DeviceFirmwareUpgrade implements \JsonSerializable
{
    /**
     * @var string
     */
    private $deviceId;

    /**
     * @var string
     */
    private $campaignId;

    /**
     * @var string
     */
    private $accountName;

    /**
     * @var string|null
     */
    private $firmwareName;

    /**
     * @var string|null
     */
    private $firmwareFrom;

    /**
     * @var string|null
     */
    private $firmwareTo;

    /**
     * @var \DateTime
     */
    private $startDate;

    /**
     * @var string
     */
    private $status;

    /**
     * @var string
     */
    private $reason;

    /**
     * @var string|null
     */
    private $reportUpdatedTime;

    /**
     * @param string $deviceId
     * @param string $campaignId
     * @param string $accountName
     * @param \DateTime $startDate
     * @param string $status
     * @param string $reason
     */
    public function __construct(
        string $deviceId,
        string $campaignId,
        string $accountName,
        \DateTime $startDate,
        string $status,
        string $reason
    ) {
        $this->deviceId = $deviceId;
        $this->campaignId = $campaignId;
        $this->accountName = $accountName;
        $this->startDate = $startDate;
        $this->status = $status;
        $this->reason = $reason;
    }

    /**
     * Returns Device Id.
     * Device identifier.
     */
    public function getDeviceId(): string
    {
        return $this->deviceId;
    }

    /**
     * Sets Device Id.
     * Device identifier.
     *
     * @required
     * @maps deviceId
     */
    public function setDeviceId(string $deviceId): void
    {
        $this->deviceId = $deviceId;
    }

    /**
     * Returns Campaign Id.
     * Campaign identifier.
     */
    public function getCampaignId(): string
    {
        return $this->campaignId;
    }

    /**
     * Sets Campaign Id.
     * Campaign identifier.
     *
     * @required
     * @maps campaignId
     */
    public function setCampaignId(string $campaignId): void
    {
        $this->campaignId = $campaignId;
    }

    /**
     * Returns Account Name.
     * Account identifier.
     */
    public function getAccountName(): string
    {
        return $this->accountName;
    }

    /**
     * Sets Account Name.
     * Account identifier.
     *
     * @required
     * @maps accountName
     */
    public function setAccountName(string $accountName): void
    {
        $this->accountName = $accountName;
    }

    /**
     * Returns Firmware Name.
     * Firmware name.
     */
    public function getFirmwareName(): ?string
    {
        return $this->firmwareName;
    }

    /**
     * Sets Firmware Name.
     * Firmware name.
     *
     * @maps firmwareName
     */
    public function setFirmwareName(?string $firmwareName): void
    {
        $this->firmwareName = $firmwareName;
    }

    /**
     * Returns Firmware From.
     * Old firmware version.
     */
    public function getFirmwareFrom(): ?string
    {
        return $this->firmwareFrom;
    }

    /**
     * Sets Firmware From.
     * Old firmware version.
     *
     * @maps firmwareFrom
     */
    public function setFirmwareFrom(?string $firmwareFrom): void
    {
        $this->firmwareFrom = $firmwareFrom;
    }

    /**
     * Returns Firmware To.
     * New firmware version.
     */
    public function getFirmwareTo(): ?string
    {
        return $this->firmwareTo;
    }

    /**
     * Sets Firmware To.
     * New firmware version.
     *
     * @maps firmwareTo
     */
    public function setFirmwareTo(?string $firmwareTo): void
    {
        $this->firmwareTo = $firmwareTo;
    }

    /**
     * Returns Start Date.
     * Firmware upgrade start date.
     */
    public function getStartDate(): \DateTime
    {
        return $this->startDate;
    }

    /**
     * Sets Start Date.
     * Firmware upgrade start date.
     *
     * @required
     * @maps startDate
     * @factory \VerizonLib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setStartDate(\DateTime $startDate): void
    {
        $this->startDate = $startDate;
    }

    /**
     * Returns Status.
     * Firmware upgrade status.
     */
    public function getStatus(): string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     * Firmware upgrade status.
     *
     * @required
     * @maps status
     */
    public function setStatus(string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Reason.
     * Software upgrade result reason.
     */
    public function getReason(): string
    {
        return $this->reason;
    }

    /**
     * Sets Reason.
     * Software upgrade result reason.
     *
     * @required
     * @maps reason
     */
    public function setReason(string $reason): void
    {
        $this->reason = $reason;
    }

    /**
     * Returns Report Updated Time.
     * Report updated time.
     */
    public function getReportUpdatedTime(): ?string
    {
        return $this->reportUpdatedTime;
    }

    /**
     * Sets Report Updated Time.
     * Report updated time.
     *
     * @maps reportUpdatedTime
     */
    public function setReportUpdatedTime(?string $reportUpdatedTime): void
    {
        $this->reportUpdatedTime = $reportUpdatedTime;
    }

    /**
     * Converts the DeviceFirmwareUpgrade object to a human-readable string representation.
     *
     * @return string The string representation of the DeviceFirmwareUpgrade object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'DeviceFirmwareUpgrade',
            [
                'deviceId' => $this->deviceId,
                'campaignId' => $this->campaignId,
                'accountName' => $this->accountName,
                'firmwareName' => $this->firmwareName,
                'firmwareFrom' => $this->firmwareFrom,
                'firmwareTo' => $this->firmwareTo,
                'startDate' => $this->startDate,
                'status' => $this->status,
                'reason' => $this->reason,
                'reportUpdatedTime' => $this->reportUpdatedTime,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = [
        'deviceId',
        'campaignId',
        'accountName',
        'firmwareName',
        'firmwareFrom',
        'firmwareTo',
        'startDate',
        'status',
        'reason',
        'reportUpdatedTime'
    ];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['deviceId']              = $this->deviceId;
        $json['campaignId']            = $this->campaignId;
        $json['accountName']           = $this->accountName;
        if (isset($this->firmwareName)) {
            $json['firmwareName']      = $this->firmwareName;
        }
        if (isset($this->firmwareFrom)) {
            $json['firmwareFrom']      = $this->firmwareFrom;
        }
        if (isset($this->firmwareTo)) {
            $json['firmwareTo']        = $this->firmwareTo;
        }
        $json['startDate']             = DateTimeHelper::toSimpleDate($this->startDate);
        $json['status']                = $this->status;
        $json['reason']                = $this->reason;
        if (isset($this->reportUpdatedTime)) {
            $json['reportUpdatedTime'] = $this->reportUpdatedTime;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
