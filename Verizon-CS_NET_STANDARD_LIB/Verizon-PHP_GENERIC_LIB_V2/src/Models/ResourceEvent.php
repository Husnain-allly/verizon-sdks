<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;
use VerizonLib\Utils\DateTimeHelper;

class ResourceEvent implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $accountclientid;

    /**
     * @var string|null
     */
    private $callbackurl;

    /**
     * @var \DateTime
     */
    private $createdon;

    /**
     * @var string|null
     */
    private $description;

    /**
     * @var string|null
     */
    private $deviceid;

    /**
     * @var string|null
     */
    private $errmsg;

    /**
     * @var string
     */
    private $fieldid;

    /**
     * @var DtoFields|null
     */
    private $fields;

    /**
     * @var int[]|null
     */
    private $fieldvalue;

    /**
     * @var string
     */
    private $foreignid;

    /**
     * @var string|null
     */
    private $id;

    /**
     * @var \DateTime
     */
    private $lastupdated;

    /**
     * @var string|null
     */
    private $modelid;

    /**
     * @var string|null
     */
    private $name;

    /**
     * @var bool|null
     */
    private $sensordataaggregation;

    /**
     * @var string
     */
    private $state;

    /**
     * @var string|null
     */
    private $transactionid;

    /**
     * @var string|null
     */
    private $version;

    /**
     * @var string
     */
    private $versionid;

    /**
     * @param \DateTime $createdon
     * @param string $fieldid
     * @param string $foreignid
     * @param \DateTime $lastupdated
     * @param string $state
     * @param string $versionid
     */
    public function __construct(
        \DateTime $createdon,
        string $fieldid,
        string $foreignid,
        \DateTime $lastupdated,
        string $state,
        string $versionid
    ) {
        $this->createdon = $createdon;
        $this->fieldid = $fieldid;
        $this->foreignid = $foreignid;
        $this->lastupdated = $lastupdated;
        $this->state = $state;
        $this->versionid = $versionid;
    }

    /**
     * Returns Accountclientid.
     * Not used in this release, future functionality
     */
    public function getAccountclientid(): ?string
    {
        return $this->accountclientid;
    }

    /**
     * Sets Accountclientid.
     * Not used in this release, future functionality
     *
     * @maps accountclientid
     */
    public function setAccountclientid(?string $accountclientid): void
    {
        $this->accountclientid = $accountclientid;
    }

    /**
     * Returns Callbackurl.
     * The URL of the callback listener
     */
    public function getCallbackurl(): ?string
    {
        return $this->callbackurl;
    }

    /**
     * Sets Callbackurl.
     * The URL of the callback listener
     *
     * @maps callbackurl
     */
    public function setCallbackurl(?string $callbackurl): void
    {
        $this->callbackurl = $callbackurl;
    }

    /**
     * Returns Createdon.
     * Timestamp of the record
     */
    public function getCreatedon(): \DateTime
    {
        return $this->createdon;
    }

    /**
     * Sets Createdon.
     * Timestamp of the record
     *
     * @required
     * @maps createdon
     * @factory \VerizonLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setCreatedon(\DateTime $createdon): void
    {
        $this->createdon = $createdon;
    }

    /**
     * Returns Description.
     * a short description
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     * a short description
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Deviceid.
     * This is a UUID value of the device created when the device is onboarded
     */
    public function getDeviceid(): ?string
    {
        return $this->deviceid;
    }

    /**
     * Sets Deviceid.
     * This is a UUID value of the device created when the device is onboarded
     *
     * @maps deviceid
     */
    public function setDeviceid(?string $deviceid): void
    {
        $this->deviceid = $deviceid;
    }

    /**
     * Returns Errmsg.
     * Error message
     */
    public function getErrmsg(): ?string
    {
        return $this->errmsg;
    }

    /**
     * Sets Errmsg.
     * Error message
     *
     * @maps errmsg
     */
    public function setErrmsg(?string $errmsg): void
    {
        $this->errmsg = $errmsg;
    }

    /**
     * Returns Fieldid.
     */
    public function getFieldid(): string
    {
        return $this->fieldid;
    }

    /**
     * Sets Fieldid.
     *
     * @required
     * @maps fieldid
     */
    public function setFieldid(string $fieldid): void
    {
        $this->fieldid = $fieldid;
    }

    /**
     * Returns Fields.
     * Fields to return needed by search
     */
    public function getFields(): ?DtoFields
    {
        return $this->fields;
    }

    /**
     * Sets Fields.
     * Fields to return needed by search
     *
     * @maps fields
     */
    public function setFields(?DtoFields $fields): void
    {
        $this->fields = $fields;
    }

    /**
     * Returns Fieldvalue.
     *
     * @return int[]|null
     */
    public function getFieldvalue(): ?array
    {
        return $this->fieldvalue;
    }

    /**
     * Sets Fieldvalue.
     *
     * @maps fieldvalue
     *
     * @param int[]|null $fieldvalue
     */
    public function setFieldvalue(?array $fieldvalue): void
    {
        $this->fieldvalue = $fieldvalue;
    }

    /**
     * Returns Foreignid.
     * UUID of the ECPD account the user belongs to
     */
    public function getForeignid(): string
    {
        return $this->foreignid;
    }

    /**
     * Sets Foreignid.
     * UUID of the ECPD account the user belongs to
     *
     * @required
     * @maps foreignid
     */
    public function setForeignid(string $foreignid): void
    {
        $this->foreignid = $foreignid;
    }

    /**
     * Returns Id.
     * UUID of the user record, assigned at creation
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * UUID of the user record, assigned at creation
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Lastupdated.
     * Timestamp of the record
     */
    public function getLastupdated(): \DateTime
    {
        return $this->lastupdated;
    }

    /**
     * Sets Lastupdated.
     * Timestamp of the record
     *
     * @required
     * @maps lastupdated
     * @factory \VerizonLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setLastupdated(\DateTime $lastupdated): void
    {
        $this->lastupdated = $lastupdated;
    }

    /**
     * Returns Modelid.
     * The model ID of the device
     */
    public function getModelid(): ?string
    {
        return $this->modelid;
    }

    /**
     * Sets Modelid.
     * The model ID of the device
     *
     * @maps modelid
     */
    public function setModelid(?string $modelid): void
    {
        $this->modelid = $modelid;
    }

    /**
     * Returns Name.
     * User defined name of the record
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * User defined name of the record
     *
     * @maps name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Sensordataaggregation.
     * A flag to indicate if sensor data is to be aggregated (true) or not
     */
    public function getSensordataaggregation(): ?bool
    {
        return $this->sensordataaggregation;
    }

    /**
     * Sets Sensordataaggregation.
     * A flag to indicate if sensor data is to be aggregated (true) or not
     *
     * @maps sensordataaggregation
     */
    public function setSensordataaggregation(?bool $sensordataaggregation): void
    {
        $this->sensordataaggregation = $sensordataaggregation;
    }

    /**
     * Returns State.
     * The current status of the device or transaction and will be `success` or `failed`
     */
    public function getState(): string
    {
        return $this->state;
    }

    /**
     * Sets State.
     * The current status of the device or transaction and will be `success` or `failed`
     *
     * @required
     * @maps state
     */
    public function setState(string $state): void
    {
        $this->state = $state;
    }

    /**
     * Returns Transactionid.
     * The system-generated UUID of the transaction
     */
    public function getTransactionid(): ?string
    {
        return $this->transactionid;
    }

    /**
     * Sets Transactionid.
     * The system-generated UUID of the transaction
     *
     * @maps transactionid
     */
    public function setTransactionid(?string $transactionid): void
    {
        $this->transactionid = $transactionid;
    }

    /**
     * Returns Version.
     * The resource version
     */
    public function getVersion(): ?string
    {
        return $this->version;
    }

    /**
     * Sets Version.
     * The resource version
     *
     * @maps version
     */
    public function setVersion(?string $version): void
    {
        $this->version = $version;
    }

    /**
     * Returns Versionid.
     * The UUID of the resource version
     */
    public function getVersionid(): string
    {
        return $this->versionid;
    }

    /**
     * Sets Versionid.
     * The UUID of the resource version
     *
     * @required
     * @maps versionid
     */
    public function setVersionid(string $versionid): void
    {
        $this->versionid = $versionid;
    }

    /**
     * Converts the ResourceEvent object to a human-readable string representation.
     *
     * @return string The string representation of the ResourceEvent object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'ResourceEvent',
            [
                'accountclientid' => $this->accountclientid,
                'callbackurl' => $this->callbackurl,
                'createdon' => $this->createdon,
                'description' => $this->description,
                'deviceid' => $this->deviceid,
                'errmsg' => $this->errmsg,
                'fieldid' => $this->fieldid,
                'fields' => $this->fields,
                'fieldvalue' => $this->fieldvalue,
                'foreignid' => $this->foreignid,
                'id' => $this->id,
                'lastupdated' => $this->lastupdated,
                'modelid' => $this->modelid,
                'name' => $this->name,
                'sensordataaggregation' => $this->sensordataaggregation,
                'state' => $this->state,
                'transactionid' => $this->transactionid,
                'version' => $this->version,
                'versionid' => $this->versionid
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->accountclientid)) {
            $json['accountclientid']       = $this->accountclientid;
        }
        if (isset($this->callbackurl)) {
            $json['callbackurl']           = $this->callbackurl;
        }
        $json['createdon']                 = DateTimeHelper::toRfc3339DateTime($this->createdon);
        if (isset($this->description)) {
            $json['description']           = $this->description;
        }
        if (isset($this->deviceid)) {
            $json['deviceid']              = $this->deviceid;
        }
        if (isset($this->errmsg)) {
            $json['errmsg']                = $this->errmsg;
        }
        $json['fieldid']                   = $this->fieldid;
        if (isset($this->fields)) {
            $json['fields']                = $this->fields;
        }
        if (isset($this->fieldvalue)) {
            $json['fieldvalue']            = $this->fieldvalue;
        }
        $json['foreignid']                 = $this->foreignid;
        if (isset($this->id)) {
            $json['id']                    = $this->id;
        }
        $json['lastupdated']               = DateTimeHelper::toRfc3339DateTime($this->lastupdated);
        if (isset($this->modelid)) {
            $json['modelid']               = $this->modelid;
        }
        if (isset($this->name)) {
            $json['name']                  = $this->name;
        }
        if (isset($this->sensordataaggregation)) {
            $json['sensordataaggregation'] = $this->sensordataaggregation;
        }
        $json['state']                     = $this->state;
        if (isset($this->transactionid)) {
            $json['transactionid']         = $this->transactionid;
        }
        if (isset($this->version)) {
            $json['version']               = $this->version;
        }
        $json['versionid']                 = $this->versionid;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
