<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Used to filter data by time period or number of devices.
 */
class HistorySearchRequest implements \JsonSerializable
{
    /**
     * @var HistorySearchFilter
     */
    private $mFilter;

    /**
     * @var int|null
     */
    private $mLimitNumber;

    /**
     * @var HistorySearchLimitTime|null
     */
    private $mLimitTime;

    /**
     * @var string|null
     */
    private $mPage;

    /**
     * @param HistorySearchFilter $mFilter
     */
    public function __construct(HistorySearchFilter $mFilter)
    {
        $this->mFilter = $mFilter;
    }

    /**
     * Returns M Filter.
     * The selected device and attributes for which a request should retrieve data.
     */
    public function getMFilter(): HistorySearchFilter
    {
        return $this->mFilter;
    }

    /**
     * Sets M Filter.
     * The selected device and attributes for which a request should retrieve data.
     *
     * @required
     * @maps $filter
     */
    public function setMFilter(HistorySearchFilter $mFilter): void
    {
        $this->mFilter = $mFilter;
    }

    /**
     * Returns M Limit Number.
     * The maximum number of historical attributes to include in the response. If the request matches more
     * than this number of attributes, the response will contain an X-Next value in the header that can be
     * used as the page value in the next request to retrieve the next page of events.
     */
    public function getMLimitNumber(): ?int
    {
        return $this->mLimitNumber;
    }

    /**
     * Sets M Limit Number.
     * The maximum number of historical attributes to include in the response. If the request matches more
     * than this number of attributes, the response will contain an X-Next value in the header that can be
     * used as the page value in the next request to retrieve the next page of events.
     *
     * @maps $limitNumber
     */
    public function setMLimitNumber(?int $mLimitNumber): void
    {
        $this->mLimitNumber = $mLimitNumber;
    }

    /**
     * Returns M Limit Time.
     * The time period for which a request should retrieve data, beginning with the limitTime.startOn and
     * proceeding with the limitTime.duration.
     */
    public function getMLimitTime(): ?HistorySearchLimitTime
    {
        return $this->mLimitTime;
    }

    /**
     * Sets M Limit Time.
     * The time period for which a request should retrieve data, beginning with the limitTime.startOn and
     * proceeding with the limitTime.duration.
     *
     * @maps $limitTime
     */
    public function setMLimitTime(?HistorySearchLimitTime $mLimitTime): void
    {
        $this->mLimitTime = $mLimitTime;
    }

    /**
     * Returns M Page.
     * Page number for pagination purposes.
     */
    public function getMPage(): ?string
    {
        return $this->mPage;
    }

    /**
     * Sets M Page.
     * Page number for pagination purposes.
     *
     * @maps $page
     */
    public function setMPage(?string $mPage): void
    {
        $this->mPage = $mPage;
    }

    /**
     * Converts the HistorySearchRequest object to a human-readable string representation.
     *
     * @return string The string representation of the HistorySearchRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'HistorySearchRequest',
            [
                'mFilter' => $this->mFilter,
                'mLimitNumber' => $this->mLimitNumber,
                'mLimitTime' => $this->mLimitTime,
                'mPage' => $this->mPage,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['$filter', '$limitNumber', '$limitTime', '$page'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['$filter']          = $this->mFilter;
        if (isset($this->mLimitNumber)) {
            $json['$limitNumber'] = $this->mLimitNumber;
        }
        if (isset($this->mLimitTime)) {
            $json['$limitTime']   = $this->mLimitTime;
        }
        if (isset($this->mPage)) {
            $json['$page']        = $this->mPage;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
