<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

class ResourceOnBoardSensor implements \JsonSerializable
{
    /**
     * @var string
     */
    private $deveui;

    /**
     * @var string
     */
    private $appeui;

    /**
     * @var string
     */
    private $appkey;

    /**
     * @var string
     */
    private $class;

    /**
     * @var string
     */
    private $kind;

    /**
     * @var string
     */
    private $description;

    /**
     * @var string
     */
    private $name;

    /**
     * @var array|null
     */
    private $customdata;

    /**
     * @param string $deveui
     * @param string $appeui
     * @param string $appkey
     * @param string $class
     * @param string $kind
     * @param string $description
     * @param string $name
     */
    public function __construct(
        string $deveui,
        string $appeui,
        string $appkey,
        string $class,
        string $kind,
        string $description,
        string $name
    ) {
        $this->deveui = $deveui;
        $this->appeui = $appeui;
        $this->appkey = $appkey;
        $this->class = $class;
        $this->kind = $kind;
        $this->description = $description;
        $this->name = $name;
    }

    /**
     * Returns Deveui.
     * the IEEE EUI64 address space used to identify a device. It is supplied by the device manufacturer
     */
    public function getDeveui(): string
    {
        return $this->deveui;
    }

    /**
     * Sets Deveui.
     * the IEEE EUI64 address space used to identify a device. It is supplied by the device manufacturer
     *
     * @required
     * @maps deveui
     */
    public function setDeveui(string $deveui): void
    {
        $this->deveui = $deveui;
    }

    /**
     * Returns Appeui.
     * global application ID in IEEE EUI64 address space that uniquely identifies the entity able to
     * process the JoinReq frame
     */
    public function getAppeui(): string
    {
        return $this->appeui;
    }

    /**
     * Sets Appeui.
     * global application ID in IEEE EUI64 address space that uniquely identifies the entity able to
     * process the JoinReq frame
     *
     * @required
     * @maps appeui
     */
    public function setAppeui(string $appeui): void
    {
        $this->appeui = $appeui;
    }

    /**
     * Returns Appkey.
     * an encryption key used for messages during every over the air activation
     */
    public function getAppkey(): string
    {
        return $this->appkey;
    }

    /**
     * Sets Appkey.
     * an encryption key used for messages during every over the air activation
     *
     * @required
     * @maps appkey
     */
    public function setAppkey(string $appkey): void
    {
        $this->appkey = $appkey;
    }

    /**
     * Returns Class.
     * Class of the sensor device. Valid values are Class A (A), Class B (B), and Class C (C). All LoRaWAN
     * devices must implement Class A
     */
    public function getClass(): string
    {
        return $this->class;
    }

    /**
     * Sets Class.
     * Class of the sensor device. Valid values are Class A (A), Class B (B), and Class C (C). All LoRaWAN
     * devices must implement Class A
     *
     * @required
     * @maps class
     */
    public function setClass(string $class): void
    {
        $this->class = $class;
    }

    /**
     * Returns Kind.
     * The kind of sensor device
     */
    public function getKind(): string
    {
        return $this->kind;
    }

    /**
     * Sets Kind.
     * The kind of sensor device
     *
     * @required
     * @maps kind
     */
    public function setKind(string $kind): void
    {
        $this->kind = $kind;
    }

    /**
     * Returns Description.
     */
    public function getDescription(): string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     *
     * @required
     * @maps description
     */
    public function setDescription(string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Name.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     *
     * @required
     * @maps name
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Customdata.
     * Name/value pair, where the value is client defined.  The purpose is to keep track of current state
     * per device action.
     */
    public function getCustomdata(): ?array
    {
        return $this->customdata;
    }

    /**
     * Sets Customdata.
     * Name/value pair, where the value is client defined.  The purpose is to keep track of current state
     * per device action.
     *
     * @maps customdata
     */
    public function setCustomdata(?array $customdata): void
    {
        $this->customdata = $customdata;
    }

    /**
     * Converts the ResourceOnBoardSensor object to a human-readable string representation.
     *
     * @return string The string representation of the ResourceOnBoardSensor object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'ResourceOnBoardSensor',
            [
                'deveui' => $this->deveui,
                'appeui' => $this->appeui,
                'appkey' => $this->appkey,
                'class' => $this->class,
                'kind' => $this->kind,
                'description' => $this->description,
                'name' => $this->name,
                'customdata' => $this->customdata
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['deveui']         = $this->deveui;
        $json['appeui']         = $this->appeui;
        $json['appkey']         = $this->appkey;
        $json['class']          = $this->class;
        $json['kind']           = $this->kind;
        $json['description']    = $this->description;
        $json['name']           = $this->name;
        if (isset($this->customdata)) {
            $json['customdata'] = $this->customdata;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
