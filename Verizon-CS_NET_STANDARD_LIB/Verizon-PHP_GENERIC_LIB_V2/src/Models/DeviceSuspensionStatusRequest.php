<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Request to return service suspension information about one or more devices.
 */
class DeviceSuspensionStatusRequest implements \JsonSerializable
{
    /**
     * @var DeviceId[]|null
     */
    private $deviceIds;

    /**
     * @var DeviceFilterWithoutAccount|null
     */
    private $filter;

    /**
     * @var string|null
     */
    private $accountName;

    /**
     * Returns Device Ids.
     * The devices that you want to include in the request, specified by device identifier. You only need
     * to provide one identifier per device.
     *
     * @return DeviceId[]|null
     */
    public function getDeviceIds(): ?array
    {
        return $this->deviceIds;
    }

    /**
     * Sets Device Ids.
     * The devices that you want to include in the request, specified by device identifier. You only need
     * to provide one identifier per device.
     *
     * @maps deviceIds
     *
     * @param DeviceId[]|null $deviceIds
     */
    public function setDeviceIds(?array $deviceIds): void
    {
        $this->deviceIds = $deviceIds;
    }

    /**
     * Returns Filter.
     * Filter for devices without account.
     */
    public function getFilter(): ?DeviceFilterWithoutAccount
    {
        return $this->filter;
    }

    /**
     * Sets Filter.
     * Filter for devices without account.
     *
     * @maps filter
     */
    public function setFilter(?DeviceFilterWithoutAccount $filter): void
    {
        $this->filter = $filter;
    }

    /**
     * Returns Account Name.
     * The name of a billing account.
     */
    public function getAccountName(): ?string
    {
        return $this->accountName;
    }

    /**
     * Sets Account Name.
     * The name of a billing account.
     *
     * @maps accountName
     */
    public function setAccountName(?string $accountName): void
    {
        $this->accountName = $accountName;
    }

    /**
     * Converts the DeviceSuspensionStatusRequest object to a human-readable string representation.
     *
     * @return string The string representation of the DeviceSuspensionStatusRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'DeviceSuspensionStatusRequest',
            [
                'deviceIds' => $this->deviceIds,
                'filter' => $this->filter,
                'accountName' => $this->accountName,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['deviceIds', 'filter', 'accountName'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->deviceIds)) {
            $json['deviceIds']   = $this->deviceIds;
        }
        if (isset($this->filter)) {
            $json['filter']      = $this->filter;
        }
        if (isset($this->accountName)) {
            $json['accountName'] = $this->accountName;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
