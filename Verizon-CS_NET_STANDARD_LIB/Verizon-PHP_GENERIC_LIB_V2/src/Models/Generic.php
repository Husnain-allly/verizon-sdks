<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Custom message which is defined by the user and can support "any" message type or format.
 *
 * **Note:** ETX prefers the j2735 or the j2735_gr encoding and only vendor specific message types are
 * allowed to be published in different message formats.
 */
class Generic implements \JsonSerializable
{
    /**
     * @var string
     */
    private $messageType;

    /**
     * @var string
     */
    private $messageFormat;

    /**
     * @var string
     */
    private $payload;

    /**
     * @param string $messageType
     * @param string $messageFormat
     * @param string $payload
     */
    public function __construct(string $messageType, string $messageFormat, string $payload)
    {
        $this->messageType = $messageType;
        $this->messageFormat = $messageFormat;
        $this->payload = $payload;
    }

    /**
     * Returns Message Type.
     * The type of message. This can be any of the standard V2X messages specified in the SAE J2735
     * standard (e.g. BSM, PSM, RSA, TIM, MAP, SPAT, etc.), or it can be a vendor specific message type
     * that is not defined by the standard.
     */
    public function getMessageType(): string
    {
        return $this->messageType;
    }

    /**
     * Sets Message Type.
     * The type of message. This can be any of the standard V2X messages specified in the SAE J2735
     * standard (e.g. BSM, PSM, RSA, TIM, MAP, SPAT, etc.), or it can be a vendor specific message type
     * that is not defined by the standard.
     *
     * @required
     * @maps messageType
     */
    public function setMessageType(string $messageType): void
    {
        $this->messageType = $messageType;
    }

    /**
     * Returns Message Format.
     * The encoding of the message (e.g. j2735, protobuf, json, Avro, etc.). If the message is encapsulated
     * within a GeoRoutedMsg protocol buffer wrapper, append _gr to the message format (e.g. j2735 =>
     * j2735_gr).
     *
     * **Note:** ETX prefers the j2735 or the j2735_gr encoding and only vendor specific message types are
     * allowed to be published in different message formats.
     */
    public function getMessageFormat(): string
    {
        return $this->messageFormat;
    }

    /**
     * Sets Message Format.
     * The encoding of the message (e.g. j2735, protobuf, json, Avro, etc.). If the message is encapsulated
     * within a GeoRoutedMsg protocol buffer wrapper, append _gr to the message format (e.g. j2735 =>
     * j2735_gr).
     *
     * **Note:** ETX prefers the j2735 or the j2735_gr encoding and only vendor specific message types are
     * allowed to be published in different message formats.
     *
     * @required
     * @maps messageFormat
     */
    public function setMessageFormat(string $messageFormat): void
    {
        $this->messageFormat = $messageFormat;
    }

    /**
     * Returns Payload.
     * The base64 encoded message.
     */
    public function getPayload(): string
    {
        return $this->payload;
    }

    /**
     * Sets Payload.
     * The base64 encoded message.
     *
     * @required
     * @maps payload
     */
    public function setPayload(string $payload): void
    {
        $this->payload = $payload;
    }

    /**
     * Converts the Generic object to a human-readable string representation.
     *
     * @return string The string representation of the Generic object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'Generic',
            [
                'messageType' => $this->messageType,
                'messageFormat' => $this->messageFormat,
                'payload' => $this->payload
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['messageType']   = $this->messageType;
        $json['messageFormat'] = $this->messageFormat;
        $json['payload']       = $this->payload;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
