<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

class RetrievesAvailableFilesResponse implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $fileName;

    /**
     * @var string|null
     */
    private $fileVersion;

    /**
     * @var string|null
     */
    private $releaseNote;

    /**
     * @var string|null
     */
    private $make;

    /**
     * @var string|null
     */
    private $model;

    /**
     * @var string|null
     */
    private $localTargetPath;

    /**
     * @var string|null
     */
    private $distributionType;

    /**
     * @var string|null
     */
    private $devicePlatformId;

    /**
     * Returns File Name.
     * ThingSpace-generated name of the file. You will use this name when listing or scheduling campaigns
     * for the file.
     */
    public function getFileName(): ?string
    {
        return $this->fileName;
    }

    /**
     * Sets File Name.
     * ThingSpace-generated name of the file. You will use this name when listing or scheduling campaigns
     * for the file.
     *
     * @maps fileName
     */
    public function setFileName(?string $fileName): void
    {
        $this->fileName = $fileName;
    }

    /**
     * Returns File Version.
     * Version of the file.
     */
    public function getFileVersion(): ?string
    {
        return $this->fileVersion;
    }

    /**
     * Sets File Version.
     * Version of the file.
     *
     * @maps fileVersion
     */
    public function setFileVersion(?string $fileVersion): void
    {
        $this->fileVersion = $fileVersion;
    }

    /**
     * Returns Release Note.
     * Software release note.
     */
    public function getReleaseNote(): ?string
    {
        return $this->releaseNote;
    }

    /**
     * Sets Release Note.
     * Software release note.
     *
     * @maps releaseNote
     */
    public function setReleaseNote(?string $releaseNote): void
    {
        $this->releaseNote = $releaseNote;
    }

    /**
     * Returns Make.
     * The software-applicable device make.
     */
    public function getMake(): ?string
    {
        return $this->make;
    }

    /**
     * Sets Make.
     * The software-applicable device make.
     *
     * @maps make
     */
    public function setMake(?string $make): void
    {
        $this->make = $make;
    }

    /**
     * Returns Model.
     * The software-applicable device model.
     */
    public function getModel(): ?string
    {
        return $this->model;
    }

    /**
     * Sets Model.
     * The software-applicable device model.
     *
     * @maps model
     */
    public function setModel(?string $model): void
    {
        $this->model = $model;
    }

    /**
     * Returns Local Target Path.
     * Local target path on the device.
     */
    public function getLocalTargetPath(): ?string
    {
        return $this->localTargetPath;
    }

    /**
     * Sets Local Target Path.
     * Local target path on the device.
     *
     * @maps localTargetPath
     */
    public function setLocalTargetPath(?string $localTargetPath): void
    {
        $this->localTargetPath = $localTargetPath;
    }

    /**
     * Returns Distribution Type.
     * Valid values
     */
    public function getDistributionType(): ?string
    {
        return $this->distributionType;
    }

    /**
     * Sets Distribution Type.
     * Valid values
     *
     * @maps distributionType
     */
    public function setDistributionType(?string $distributionType): void
    {
        $this->distributionType = $distributionType;
    }

    /**
     * Returns Device Platform Id.
     * The platform (Android, iOS, etc.,) that the software can be applied to.
     */
    public function getDevicePlatformId(): ?string
    {
        return $this->devicePlatformId;
    }

    /**
     * Sets Device Platform Id.
     * The platform (Android, iOS, etc.,) that the software can be applied to.
     *
     * @maps devicePlatformId
     */
    public function setDevicePlatformId(?string $devicePlatformId): void
    {
        $this->devicePlatformId = $devicePlatformId;
    }

    /**
     * Converts the RetrievesAvailableFilesResponse object to a human-readable string representation.
     *
     * @return string The string representation of the RetrievesAvailableFilesResponse object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'RetrievesAvailableFilesResponse',
            [
                'fileName' => $this->fileName,
                'fileVersion' => $this->fileVersion,
                'releaseNote' => $this->releaseNote,
                'make' => $this->make,
                'model' => $this->model,
                'localTargetPath' => $this->localTargetPath,
                'distributionType' => $this->distributionType,
                'devicePlatformId' => $this->devicePlatformId,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = [
        'fileName',
        'fileVersion',
        'releaseNote',
        'make',
        'model',
        'localTargetPath',
        'distributionType',
        'devicePlatformId'
    ];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->fileName)) {
            $json['fileName']         = $this->fileName;
        }
        if (isset($this->fileVersion)) {
            $json['fileVersion']      = $this->fileVersion;
        }
        if (isset($this->releaseNote)) {
            $json['releaseNote']      = $this->releaseNote;
        }
        if (isset($this->make)) {
            $json['make']             = $this->make;
        }
        if (isset($this->model)) {
            $json['model']            = $this->model;
        }
        if (isset($this->localTargetPath)) {
            $json['localTargetPath']  = $this->localTargetPath;
        }
        if (isset($this->distributionType)) {
            $json['distributionType'] = $this->distributionType;
        }
        if (isset($this->devicePlatformId)) {
            $json['devicePlatformId'] = $this->devicePlatformId;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
