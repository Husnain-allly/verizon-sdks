<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

class QosDeviceInfo implements \JsonSerializable
{
    /**
     * @var QosDeviceId
     */
    private $deviceId;

    /**
     * @var string|null
     */
    private $deviceIPv6Addr;

    /**
     * @var FlowInfo[]
     */
    private $flowInfo;

    /**
     * @param QosDeviceId $deviceId
     * @param FlowInfo[] $flowInfo
     */
    public function __construct(QosDeviceId $deviceId, array $flowInfo)
    {
        $this->deviceId = $deviceId;
        $this->flowInfo = $flowInfo;
    }

    /**
     * Returns Device Id.
     */
    public function getDeviceId(): QosDeviceId
    {
        return $this->deviceId;
    }

    /**
     * Sets Device Id.
     *
     * @required
     * @maps deviceId
     */
    public function setDeviceId(QosDeviceId $deviceId): void
    {
        $this->deviceId = $deviceId;
    }

    /**
     * Returns Device I Pv 6 Addr.
     */
    public function getDeviceIPv6Addr(): ?string
    {
        return $this->deviceIPv6Addr;
    }

    /**
     * Sets Device I Pv 6 Addr.
     *
     * @maps deviceIPv6Addr
     */
    public function setDeviceIPv6Addr(?string $deviceIPv6Addr): void
    {
        $this->deviceIPv6Addr = $deviceIPv6Addr;
    }

    /**
     * Returns Flow Info.
     *
     * @return FlowInfo[]
     */
    public function getFlowInfo(): array
    {
        return $this->flowInfo;
    }

    /**
     * Sets Flow Info.
     *
     * @required
     * @maps flowInfo
     *
     * @param FlowInfo[] $flowInfo
     */
    public function setFlowInfo(array $flowInfo): void
    {
        $this->flowInfo = $flowInfo;
    }

    /**
     * Converts the QosDeviceInfo object to a human-readable string representation.
     *
     * @return string The string representation of the QosDeviceInfo object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'QosDeviceInfo',
            [
                'deviceId' => $this->deviceId,
                'deviceIPv6Addr' => $this->deviceIPv6Addr,
                'flowInfo' => $this->flowInfo,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['deviceId', 'deviceIPv6Addr', 'flowInfo'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['deviceId']           = $this->deviceId;
        if (isset($this->deviceIPv6Addr)) {
            $json['deviceIPv6Addr'] = $this->deviceIPv6Addr;
        }
        $json['flowInfo']           = $this->flowInfo;
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
