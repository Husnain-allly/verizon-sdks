<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Request for /clients/connection. It requires the device ID acquired in the registration request call;
 * the geolocation of the device at the time of the request; and the network type (Verizon or non-
 * Verizon). The system uses this information to determine with MQTT endpoint the device should use to
 * connect the ETX Message Exchange.
 */
class ConnectionRequest implements \JsonSerializable
{
    /**
     * @var string
     */
    private $deviceId;

    /**
     * @var Geolocation
     */
    private $geolocation;

    /**
     * @var string
     */
    private $networkType;

    /**
     * @param string $deviceId
     * @param Geolocation $geolocation
     * @param string $networkType
     */
    public function __construct(string $deviceId, Geolocation $geolocation, string $networkType)
    {
        $this->deviceId = $deviceId;
        $this->geolocation = $geolocation;
        $this->networkType = $networkType;
    }

    /**
     * Returns Device Id.
     * The generated ID (UUID v4) for the device. It can be used as:
     * - the MQTT Client ID when connecting to the Message Exchange system
     * - a parameter when asking for the connection endpoint
     * - a parameter when finishing the device registration
     * - a parameter when unregistering the device
     */
    public function getDeviceId(): string
    {
        return $this->deviceId;
    }

    /**
     * Sets Device Id.
     * The generated ID (UUID v4) for the device. It can be used as:
     * - the MQTT Client ID when connecting to the Message Exchange system
     * - a parameter when asking for the connection endpoint
     * - a parameter when finishing the device registration
     * - a parameter when unregistering the device
     *
     * @required
     * @maps DeviceID
     */
    public function setDeviceId(string $deviceId): void
    {
        $this->deviceId = $deviceId;
    }

    /**
     * Returns Geolocation.
     * Geolocation of the device at the time of the connection request in GPS coordinates.
     */
    public function getGeolocation(): Geolocation
    {
        return $this->geolocation;
    }

    /**
     * Sets Geolocation.
     * Geolocation of the device at the time of the connection request in GPS coordinates.
     *
     * @required
     * @maps Geolocation
     */
    public function setGeolocation(Geolocation $geolocation): void
    {
        $this->geolocation = $geolocation;
    }

    /**
     * Returns Network Type.
     * The type of the device's network connection at the time of the request. If the device is on the
     * Verizon cellular network it should use the "VZ" value otherwise the "non-VZ" value.
     *
     * Devices on the Verizon network can directly access the ETX Message Exchange on the MEC (Mobile Edge
     * Compute server)
     */
    public function getNetworkType(): string
    {
        return $this->networkType;
    }

    /**
     * Sets Network Type.
     * The type of the device's network connection at the time of the request. If the device is on the
     * Verizon cellular network it should use the "VZ" value otherwise the "non-VZ" value.
     *
     * Devices on the Verizon network can directly access the ETX Message Exchange on the MEC (Mobile Edge
     * Compute server)
     *
     * @required
     * @maps NetworkType
     * @factory \VerizonLib\Models\EtxNetworkType::checkValue
     */
    public function setNetworkType(string $networkType): void
    {
        $this->networkType = $networkType;
    }

    /**
     * Converts the ConnectionRequest object to a human-readable string representation.
     *
     * @return string The string representation of the ConnectionRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'ConnectionRequest',
            [
                'deviceId' => $this->deviceId,
                'geolocation' => $this->geolocation,
                'networkType' => $this->networkType
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['DeviceID']    = $this->deviceId;
        $json['Geolocation'] = $this->geolocation;
        $json['NetworkType'] = EtxNetworkType::checkValue($this->networkType);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
