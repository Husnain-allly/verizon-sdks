<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models\Builders;

use Core\Utils\CoreHelper;
use VerizonLib\Models\AggregateUsage;
use VerizonLib\Models\GioDeviceId;

/**
 * Builder for model AggregateUsage
 *
 * @see AggregateUsage
 */
class AggregateUsageBuilder
{
    /**
     * @var AggregateUsage
     */
    private $instance;

    private function __construct(AggregateUsage $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new Aggregate Usage Builder object.
     */
    public static function init(): self
    {
        return new self(new AggregateUsage());
    }

    /**
     * Sets device Id field.
     *
     * @param GioDeviceId|null $value
     */
    public function deviceId(?GioDeviceId $value): self
    {
        $this->instance->setDeviceId($value);
        return $this;
    }

    /**
     * Sets account Name field.
     *
     * @param string|null $value
     */
    public function accountName(?string $value): self
    {
        $this->instance->setAccountName($value);
        return $this;
    }

    /**
     * Sets start Time field.
     *
     * @param string|null $value
     */
    public function startTime(?string $value): self
    {
        $this->instance->setStartTime($value);
        return $this;
    }

    /**
     * Sets end Time field.
     *
     * @param string|null $value
     */
    public function endTime(?string $value): self
    {
        $this->instance->setEndTime($value);
        return $this;
    }

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function additionalProperty(string $name, $value): self
    {
        $this->instance->addAdditionalProperty($name, $value);
        return $this;
    }

    /**
     * Initializes a new Aggregate Usage object.
     */
    public function build(): AggregateUsage
    {
        return CoreHelper::clone($this->instance);
    }
}
