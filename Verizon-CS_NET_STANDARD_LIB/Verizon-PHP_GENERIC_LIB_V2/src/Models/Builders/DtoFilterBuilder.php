<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models\Builders;

use Core\Utils\CoreHelper;
use VerizonLib\Models\DtoFilter;

/**
 * Builder for model DtoFilter
 *
 * @see DtoFilter
 */
class DtoFilterBuilder
{
    /**
     * @var DtoFilter
     */
    private $instance;

    private function __construct(DtoFilter $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new Dto Filter Builder object.
     */
    public static function init(): self
    {
        return new self(new DtoFilter());
    }

    /**
     * Sets expand field.
     *
     * @param string|null $value
     */
    public function mExpand(?string $value): self
    {
        $this->instance->setMExpand($value);
        return $this;
    }

    /**
     * Sets limitnumber field.
     *
     * @param int|null $value
     */
    public function mLimitnumber(?int $value): self
    {
        $this->instance->setMLimitnumber($value);
        return $this;
    }

    /**
     * Sets nopagination field.
     *
     * @param bool|null $value
     */
    public function mNopagination(?bool $value): self
    {
        $this->instance->setMNopagination($value);
        return $this;
    }

    /**
     * Sets page field.
     *
     * @param string|null $value
     */
    public function mPage(?string $value): self
    {
        $this->instance->setMPage($value);
        return $this;
    }

    /**
     * Sets pagenumber field.
     *
     * @param int|null $value
     */
    public function mPagenumber(?int $value): self
    {
        $this->instance->setMPagenumber($value);
        return $this;
    }

    /**
     * Sets projection field.
     *
     * @param string[]|null $value
     */
    public function mProjection(?array $value): self
    {
        $this->instance->setMProjection($value);
        return $this;
    }

    /**
     * Sets selection field.
     *
     * @param array|null $value
     */
    public function mSelection(?array $value): self
    {
        $this->instance->setMSelection($value);
        return $this;
    }

    /**
     * Initializes a new Dto Filter object.
     */
    public function build(): DtoFilter
    {
        return CoreHelper::clone($this->instance);
    }
}
