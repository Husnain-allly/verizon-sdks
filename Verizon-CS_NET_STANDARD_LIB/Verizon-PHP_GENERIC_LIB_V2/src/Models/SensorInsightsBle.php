<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Property objects for Bluetooth Low-Energy (BLE) devices
 */
class SensorInsightsBle implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $dataMode;

    /**
     * @var int|null
     */
    private $manufacturerId;

    /**
     * @var int|null
     */
    private $maxNumScan;

    /**
     * @var int|null
     */
    private $minSigStr;

    /**
     * @var int|null
     */
    private $monitorPeriod;

    /**
     * @var array[]|null
     */
    private $moreManufId;

    /**
     * @var int|null
     */
    private $opMode;

    /**
     * @var int|null
     */
    private $reportOffset;

    /**
     * @var int|null
     */
    private $reportPeriod;

    /**
     * @var int|null
     */
    private $reportType;

    /**
     * @var int|null
     */
    private $scanDuration;

    /**
     * Returns Data Mode.
     * The data mode the sensor is using
     */
    public function getDataMode(): ?int
    {
        return $this->dataMode;
    }

    /**
     * Sets Data Mode.
     * The data mode the sensor is using
     *
     * @maps dataMode
     */
    public function setDataMode(?int $dataMode): void
    {
        $this->dataMode = $dataMode;
    }

    /**
     * Returns Manufacturer Id.
     * The numeric manufacturer ID
     */
    public function getManufacturerId(): ?int
    {
        return $this->manufacturerId;
    }

    /**
     * Sets Manufacturer Id.
     * The numeric manufacturer ID
     *
     * @maps manufacturerId
     */
    public function setManufacturerId(?int $manufacturerId): void
    {
        $this->manufacturerId = $manufacturerId;
    }

    /**
     * Returns Max Num Scan.
     * How frequently the device can be scanned
     */
    public function getMaxNumScan(): ?int
    {
        return $this->maxNumScan;
    }

    /**
     * Sets Max Num Scan.
     * How frequently the device can be scanned
     *
     * @maps maxNumScan
     */
    public function setMaxNumScan(?int $maxNumScan): void
    {
        $this->maxNumScan = $maxNumScan;
    }

    /**
     * Returns Min Sig Str.
     * The minimum signal strength needed for the sensor to transmit (in Decibels or dB)
     */
    public function getMinSigStr(): ?int
    {
        return $this->minSigStr;
    }

    /**
     * Sets Min Sig Str.
     * The minimum signal strength needed for the sensor to transmit (in Decibels or dB)
     *
     * @maps minSigStr
     */
    public function setMinSigStr(?int $minSigStr): void
    {
        $this->minSigStr = $minSigStr;
    }

    /**
     * Returns Monitor Period.
     * The ammount of time to monitor the sensor and varies by device
     */
    public function getMonitorPeriod(): ?int
    {
        return $this->monitorPeriod;
    }

    /**
     * Sets Monitor Period.
     * The ammount of time to monitor the sensor and varies by device
     *
     * @maps monitorPeriod
     */
    public function setMonitorPeriod(?int $monitorPeriod): void
    {
        $this->monitorPeriod = $monitorPeriod;
    }

    /**
     * Returns More Manuf Id.
     * Values for the manufacturer and these vary by device
     *
     * @return array[]|null
     */
    public function getMoreManufId(): ?array
    {
        return $this->moreManufId;
    }

    /**
     * Sets More Manuf Id.
     * Values for the manufacturer and these vary by device
     *
     * @maps moreManufId
     *
     * @param array[]|null $moreManufId
     */
    public function setMoreManufId(?array $moreManufId): void
    {
        $this->moreManufId = $moreManufId;
    }

    /**
     * Returns Op Mode.
     * The operation mode
     */
    public function getOpMode(): ?int
    {
        return $this->opMode;
    }

    /**
     * Sets Op Mode.
     * The operation mode
     *
     * @maps opMode
     */
    public function setOpMode(?int $opMode): void
    {
        $this->opMode = $opMode;
    }

    /**
     * Returns Report Offset.
     * The ammount of time between sensor readings and reports
     */
    public function getReportOffset(): ?int
    {
        return $this->reportOffset;
    }

    /**
     * Sets Report Offset.
     * The ammount of time between sensor readings and reports
     *
     * @maps reportOffset
     */
    public function setReportOffset(?int $reportOffset): void
    {
        $this->reportOffset = $reportOffset;
    }

    /**
     * Returns Report Period.
     * The ammount of time between reports
     */
    public function getReportPeriod(): ?int
    {
        return $this->reportPeriod;
    }

    /**
     * Sets Report Period.
     * The ammount of time between reports
     *
     * @maps reportPeriod
     */
    public function setReportPeriod(?int $reportPeriod): void
    {
        $this->reportPeriod = $reportPeriod;
    }

    /**
     * Returns Report Type.
     * The report type
     */
    public function getReportType(): ?int
    {
        return $this->reportType;
    }

    /**
     * Sets Report Type.
     * The report type
     *
     * @maps reportType
     */
    public function setReportType(?int $reportType): void
    {
        $this->reportType = $reportType;
    }

    /**
     * Returns Scan Duration.
     * The ammount of time the sensor is queried for data
     */
    public function getScanDuration(): ?int
    {
        return $this->scanDuration;
    }

    /**
     * Sets Scan Duration.
     * The ammount of time the sensor is queried for data
     *
     * @maps scanDuration
     */
    public function setScanDuration(?int $scanDuration): void
    {
        $this->scanDuration = $scanDuration;
    }

    /**
     * Converts the SensorInsightsBle object to a human-readable string representation.
     *
     * @return string The string representation of the SensorInsightsBle object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'SensorInsightsBle',
            [
                'dataMode' => $this->dataMode,
                'manufacturerId' => $this->manufacturerId,
                'maxNumScan' => $this->maxNumScan,
                'minSigStr' => $this->minSigStr,
                'monitorPeriod' => $this->monitorPeriod,
                'moreManufId' => $this->moreManufId,
                'opMode' => $this->opMode,
                'reportOffset' => $this->reportOffset,
                'reportPeriod' => $this->reportPeriod,
                'reportType' => $this->reportType,
                'scanDuration' => $this->scanDuration,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = [
        'dataMode',
        'manufacturerId',
        'maxNumScan',
        'minSigStr',
        'monitorPeriod',
        'moreManufId',
        'opMode',
        'reportOffset',
        'reportPeriod',
        'reportType',
        'scanDuration'
    ];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->dataMode)) {
            $json['dataMode']       = $this->dataMode;
        }
        if (isset($this->manufacturerId)) {
            $json['manufacturerId'] = $this->manufacturerId;
        }
        if (isset($this->maxNumScan)) {
            $json['maxNumScan']     = $this->maxNumScan;
        }
        if (isset($this->minSigStr)) {
            $json['minSigStr']      = $this->minSigStr;
        }
        if (isset($this->monitorPeriod)) {
            $json['monitorPeriod']  = $this->monitorPeriod;
        }
        if (isset($this->moreManufId)) {
            $json['moreManufId']    = $this->moreManufId;
        }
        if (isset($this->opMode)) {
            $json['opMode']         = $this->opMode;
        }
        if (isset($this->reportOffset)) {
            $json['reportOffset']   = $this->reportOffset;
        }
        if (isset($this->reportPeriod)) {
            $json['reportPeriod']   = $this->reportPeriod;
        }
        if (isset($this->reportType)) {
            $json['reportType']     = $this->reportType;
        }
        if (isset($this->scanDuration)) {
            $json['scanDuration']   = $this->scanDuration;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
