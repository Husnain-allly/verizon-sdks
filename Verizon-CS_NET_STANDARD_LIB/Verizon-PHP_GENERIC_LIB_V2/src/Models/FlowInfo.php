<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

class FlowInfo implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $flowServer;

    /**
     * @var string|null
     */
    private $flowDevice;

    /**
     * @var string|null
     */
    private $flowDirection;

    /**
     * @var string|null
     */
    private $flowProtocol;

    /**
     * @var string|null
     */
    private $qciOption;

    /**
     * Returns Flow Server.
     */
    public function getFlowServer(): ?string
    {
        return $this->flowServer;
    }

    /**
     * Sets Flow Server.
     *
     * @maps flowServer
     */
    public function setFlowServer(?string $flowServer): void
    {
        $this->flowServer = $flowServer;
    }

    /**
     * Returns Flow Device.
     */
    public function getFlowDevice(): ?string
    {
        return $this->flowDevice;
    }

    /**
     * Sets Flow Device.
     *
     * @maps flowDevice
     */
    public function setFlowDevice(?string $flowDevice): void
    {
        $this->flowDevice = $flowDevice;
    }

    /**
     * Returns Flow Direction.
     */
    public function getFlowDirection(): ?string
    {
        return $this->flowDirection;
    }

    /**
     * Sets Flow Direction.
     *
     * @maps flowDirection
     */
    public function setFlowDirection(?string $flowDirection): void
    {
        $this->flowDirection = $flowDirection;
    }

    /**
     * Returns Flow Protocol.
     */
    public function getFlowProtocol(): ?string
    {
        return $this->flowProtocol;
    }

    /**
     * Sets Flow Protocol.
     *
     * @maps flowProtocol
     */
    public function setFlowProtocol(?string $flowProtocol): void
    {
        $this->flowProtocol = $flowProtocol;
    }

    /**
     * Returns Qci Option.
     */
    public function getQciOption(): ?string
    {
        return $this->qciOption;
    }

    /**
     * Sets Qci Option.
     *
     * @maps qciOption
     */
    public function setQciOption(?string $qciOption): void
    {
        $this->qciOption = $qciOption;
    }

    /**
     * Converts the FlowInfo object to a human-readable string representation.
     *
     * @return string The string representation of the FlowInfo object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'FlowInfo',
            [
                'flowServer' => $this->flowServer,
                'flowDevice' => $this->flowDevice,
                'flowDirection' => $this->flowDirection,
                'flowProtocol' => $this->flowProtocol,
                'qciOption' => $this->qciOption,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['flowServer', 'flowDevice', 'flowDirection', 'flowProtocol', 'qciOption'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->flowServer)) {
            $json['flowServer']    = $this->flowServer;
        }
        if (isset($this->flowDevice)) {
            $json['flowDevice']    = $this->flowDevice;
        }
        if (isset($this->flowDirection)) {
            $json['flowDirection'] = $this->flowDirection;
        }
        if (isset($this->flowProtocol)) {
            $json['flowProtocol']  = $this->flowProtocol;
        }
        if (isset($this->qciOption)) {
            $json['qciOption']     = $this->qciOption;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
