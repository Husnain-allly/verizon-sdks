<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * The data frame allows sending various advisory and road sign types of information to equipped
 * devices.
 */
class DataFrame implements \JsonSerializable
{
    /**
     * @var int
     */
    private $notUsed;

    /**
     * @var string
     */
    private $frameType;

    /**
     * @var MsgId|MsgId1
     */
    private $msgId;

    /**
     * @var int|null
     */
    private $startYear;

    /**
     * @var int
     */
    private $startTime;

    /**
     * @var int
     */
    private $durationTime;

    /**
     * @var int
     */
    private $priority;

    /**
     * @var int
     */
    private $notUsed1;

    /**
     * @var GeographicalPath[]
     */
    private $regions;

    /**
     * @var int
     */
    private $notUsed2;

    /**
     * @var int
     */
    private $notUsed3;

    /**
     * @var Content|Content1|Content2|Content3|Content4
     */
    private $content;

    /**
     * @param int $notUsed
     * @param string $frameType
     * @param MsgId|MsgId1 $msgId
     * @param int $startTime
     * @param int $durationTime
     * @param int $priority
     * @param int $notUsed1
     * @param GeographicalPath[] $regions
     * @param int $notUsed2
     * @param int $notUsed3
     * @param Content|Content1|Content2|Content3|Content4 $content
     */
    public function __construct(
        int $notUsed,
        string $frameType,
        $msgId,
        int $startTime,
        int $durationTime,
        int $priority,
        int $notUsed1,
        array $regions,
        int $notUsed2,
        int $notUsed3,
        $content
    ) {
        $this->notUsed = $notUsed;
        $this->frameType = $frameType;
        $this->msgId = $msgId;
        $this->startTime = $startTime;
        $this->durationTime = $durationTime;
        $this->priority = $priority;
        $this->notUsed1 = $notUsed1;
        $this->regions = $regions;
        $this->notUsed2 = $notUsed2;
        $this->notUsed3 = $notUsed3;
        $this->content = $content;
    }

    /**
     * Returns Not Used.
     * Always set to 0 and carries no meaning. Legacy field maintained for backward compatibility.
     */
    public function getNotUsed(): int
    {
        return $this->notUsed;
    }

    /**
     * Sets Not Used.
     * Always set to 0 and carries no meaning. Legacy field maintained for backward compatibility.
     *
     * @required
     * @maps notUsed
     */
    public function setNotUsed(int $notUsed): void
    {
        $this->notUsed = $notUsed;
    }

    /**
     * Returns Frame Type.
     * The frameType data element provides the type of message to follow in the rest of the message frame
     * structure. The following frame types are supported:
     * - unknown
     * - advisory
     * - roadSignage
     * - commercialSignage
     */
    public function getFrameType(): string
    {
        return $this->frameType;
    }

    /**
     * Sets Frame Type.
     * The frameType data element provides the type of message to follow in the rest of the message frame
     * structure. The following frame types are supported:
     * - unknown
     * - advisory
     * - roadSignage
     * - commercialSignage
     *
     * @required
     * @maps frameType
     * @factory \VerizonLib\Models\FrameType::checkValue
     */
    public function setFrameType(string $frameType): void
    {
        $this->frameType = $frameType;
    }

    /**
     * Returns Msg Id.
     *
     * @return MsgId|MsgId1
     */
    public function getMsgId()
    {
        return $this->msgId;
    }

    /**
     * Sets Msg Id.
     *
     * @required
     * @maps msgId
     * @mapsBy oneOf(MsgId,MsgId1)
     *
     * @param MsgId|MsgId1 $msgId
     */
    public function setMsgId($msgId): void
    {
        $this->msgId = $msgId;
    }

    /**
     * Returns Start Year.
     * The V2X year consists of integer values from zero to 4095 representing the year according to the
     * Gregorian calendar date system. The value of zero shall represent an unknown value.
     */
    public function getStartYear(): ?int
    {
        return $this->startYear;
    }

    /**
     * Sets Start Year.
     * The V2X year consists of integer values from zero to 4095 representing the year according to the
     * Gregorian calendar date system. The value of zero shall represent an unknown value.
     *
     * @maps startYear
     */
    public function setStartYear(?int $startYear): void
    {
        $this->startYear = $startYear;
    }

    /**
     * Returns Start Time.
     * Start time expresses the number of elapsed minutes of the current year in the time system being used
     * (typically UTC time). The value 527040 shall be used for invalid.
     */
    public function getStartTime(): int
    {
        return $this->startTime;
    }

    /**
     * Sets Start Time.
     * Start time expresses the number of elapsed minutes of the current year in the time system being used
     * (typically UTC time). The value 527040 shall be used for invalid.
     *
     * @required
     * @maps startTime
     */
    public function setStartTime(int $startTime): void
    {
        $this->startTime = $startTime;
    }

    /**
     * Returns Duration Time.
     * The duration, in units of whole minutes, that a object persists for. A value of 32000 means that the
     * object persists forever. The range 0..32000 provides for about 22.2 days of maximum duration.
     */
    public function getDurationTime(): int
    {
        return $this->durationTime;
    }

    /**
     * Sets Duration Time.
     * The duration, in units of whole minutes, that a object persists for. A value of 32000 means that the
     * object persists forever. The range 0..32000 provides for about 22.2 days of maximum duration.
     *
     * @required
     * @maps durationTime
     */
    public function setDurationTime(int $durationTime): void
    {
        $this->durationTime = $durationTime;
    }

    /**
     * Returns Priority.
     * The relative importance of the sign, on a scale from zero (least important) to seven (most
     * important).
     */
    public function getPriority(): int
    {
        return $this->priority;
    }

    /**
     * Sets Priority.
     * The relative importance of the sign, on a scale from zero (least important) to seven (most
     * important).
     *
     * @required
     * @maps priority
     */
    public function setPriority(int $priority): void
    {
        $this->priority = $priority;
    }

    /**
     * Returns Not Used 1.
     * Always set to 0 and carries no meaning. Legacy field maintained for backward compatibility.
     */
    public function getNotUsed1(): int
    {
        return $this->notUsed1;
    }

    /**
     * Sets Not Used 1.
     * Always set to 0 and carries no meaning. Legacy field maintained for backward compatibility.
     *
     * @required
     * @maps notUsed1
     */
    public function setNotUsed1(int $notUsed1): void
    {
        $this->notUsed1 = $notUsed1;
    }

    /**
     * Returns Regions.
     * The data frame is used to support the cross-cutting need in many V2X messages to describe arbitrary
     * spatial areas (polygons, boundary lines, and other basic shapes) required by various message types
     * in a small message size. This data frame can describe a complex path or region of arbitrary size
     * using either one of the two supported node offset methods (XY offsets or LL offsets) or using simple
     * geometric projections.
     *
     * @return GeographicalPath[]
     */
    public function getRegions(): array
    {
        return $this->regions;
    }

    /**
     * Sets Regions.
     * The data frame is used to support the cross-cutting need in many V2X messages to describe arbitrary
     * spatial areas (polygons, boundary lines, and other basic shapes) required by various message types
     * in a small message size. This data frame can describe a complex path or region of arbitrary size
     * using either one of the two supported node offset methods (XY offsets or LL offsets) or using simple
     * geometric projections.
     *
     * @required
     * @maps regions
     *
     * @param GeographicalPath[] $regions
     */
    public function setRegions(array $regions): void
    {
        $this->regions = $regions;
    }

    /**
     * Returns Not Used 2.
     * Always set to 0 and carries no meaning. Legacy field maintained for backward compatibility.
     */
    public function getNotUsed2(): int
    {
        return $this->notUsed2;
    }

    /**
     * Sets Not Used 2.
     * Always set to 0 and carries no meaning. Legacy field maintained for backward compatibility.
     *
     * @required
     * @maps notUsed2
     */
    public function setNotUsed2(int $notUsed2): void
    {
        $this->notUsed2 = $notUsed2;
    }

    /**
     * Returns Not Used 3.
     * Always set to 0 and carries no meaning. Legacy field maintained for backward compatibility.
     */
    public function getNotUsed3(): int
    {
        return $this->notUsed3;
    }

    /**
     * Sets Not Used 3.
     * Always set to 0 and carries no meaning. Legacy field maintained for backward compatibility.
     *
     * @required
     * @maps notUsed3
     */
    public function setNotUsed3(int $notUsed3): void
    {
        $this->notUsed3 = $notUsed3;
    }

    /**
     * Returns Content.
     *
     * @return Content|Content1|Content2|Content3|Content4
     */
    public function getContent()
    {
        return $this->content;
    }

    /**
     * Sets Content.
     *
     * @required
     * @maps content
     * @mapsBy oneOf(Content,Content1,Content2,Content3,Content4)
     *
     * @param Content|Content1|Content2|Content3|Content4 $content
     */
    public function setContent($content): void
    {
        $this->content = $content;
    }

    /**
     * Converts the DataFrame object to a human-readable string representation.
     *
     * @return string The string representation of the DataFrame object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'DataFrame',
            [
                'notUsed' => $this->notUsed,
                'frameType' => $this->frameType,
                'msgId' => $this->msgId,
                'startYear' => $this->startYear,
                'startTime' => $this->startTime,
                'durationTime' => $this->durationTime,
                'priority' => $this->priority,
                'notUsed1' => $this->notUsed1,
                'regions' => $this->regions,
                'notUsed2' => $this->notUsed2,
                'notUsed3' => $this->notUsed3,
                'content' => $this->content
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['notUsed']       = $this->notUsed;
        $json['frameType']     = FrameType::checkValue($this->frameType);
        $json['msgId']         = ApiHelper::getJsonHelper()->verifyTypes($this->msgId, 'oneOf(MsgId,MsgId1)');
        if (isset($this->startYear)) {
            $json['startYear'] = $this->startYear;
        }
        $json['startTime']     = $this->startTime;
        $json['durationTime']  = $this->durationTime;
        $json['priority']      = $this->priority;
        $json['notUsed1']      = $this->notUsed1;
        $json['regions']       = $this->regions;
        $json['notUsed2']      = $this->notUsed2;
        $json['notUsed3']      = $this->notUsed3;
        $json['content']       =
            ApiHelper::getJsonHelper()->verifyTypes(
                $this->content,
                'oneOf(Content,Content1,Content2,Content3,Content4)'
            );

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
