<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Includes callback listeners that were registered through the Connectivity Management API.
 */
class ConnectivityManagementCallback implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $accountName;

    /**
     * @var string|null
     */
    private $password;

    /**
     * @var string|null
     */
    private $serviceName;

    /**
     * @var string|null
     */
    private $url;

    /**
     * @var string|null
     */
    private $username;

    /**
     * Returns Account Name.
     * The name of the billing account for which callback messages will be sent.
     */
    public function getAccountName(): ?string
    {
        return $this->accountName;
    }

    /**
     * Sets Account Name.
     * The name of the billing account for which callback messages will be sent.
     *
     * @maps accountName
     */
    public function setAccountName(?string $accountName): void
    {
        $this->accountName = $accountName;
    }

    /**
     * Returns Password.
     * The password defined when a URL was registered for the callback service, or an empty string if no
     * password was defined.
     */
    public function getPassword(): ?string
    {
        return $this->password;
    }

    /**
     * Sets Password.
     * The password defined when a URL was registered for the callback service, or an empty string if no
     * password was defined.
     *
     * @maps password
     */
    public function setPassword(?string $password): void
    {
        $this->password = $password;
    }

    /**
     * Returns Service Name.
     * The name of the callback service, which identifies the type and format of messages that will be sent
     * to the registered URL.
     */
    public function getServiceName(): ?string
    {
        return $this->serviceName;
    }

    /**
     * Sets Service Name.
     * The name of the callback service, which identifies the type and format of messages that will be sent
     * to the registered URL.
     *
     * @maps serviceName
     */
    public function setServiceName(?string $serviceName): void
    {
        $this->serviceName = $serviceName;
    }

    /**
     * Returns Url.
     * The address of the callback listening service where the ThingSpace Platform will send callback
     * messages for the service type.
     */
    public function getUrl(): ?string
    {
        return $this->url;
    }

    /**
     * Sets Url.
     * The address of the callback listening service where the ThingSpace Platform will send callback
     * messages for the service type.
     *
     * @maps url
     */
    public function setUrl(?string $url): void
    {
        $this->url = $url;
    }

    /**
     * Returns Username.
     * The username defined when a URL was registered for the callback service, or an empty string if no
     * username was defined.
     */
    public function getUsername(): ?string
    {
        return $this->username;
    }

    /**
     * Sets Username.
     * The username defined when a URL was registered for the callback service, or an empty string if no
     * username was defined.
     *
     * @maps username
     */
    public function setUsername(?string $username): void
    {
        $this->username = $username;
    }

    /**
     * Converts the ConnectivityManagementCallback object to a human-readable string representation.
     *
     * @return string The string representation of the ConnectivityManagementCallback object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'ConnectivityManagementCallback',
            [
                'accountName' => $this->accountName,
                'password' => $this->password,
                'serviceName' => $this->serviceName,
                'url' => $this->url,
                'username' => $this->username,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['accountName', 'password', 'serviceName', 'url', 'username'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->accountName)) {
            $json['accountName'] = $this->accountName;
        }
        if (isset($this->password)) {
            $json['password']    = $this->password;
        }
        if (isset($this->serviceName)) {
            $json['serviceName'] = $this->serviceName;
        }
        if (isset($this->url)) {
            $json['url']         = $this->url;
        }
        if (isset($this->username)) {
            $json['username']    = $this->username;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
