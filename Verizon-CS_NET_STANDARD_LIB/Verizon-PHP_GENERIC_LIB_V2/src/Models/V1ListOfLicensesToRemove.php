<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;
use VerizonLib\Utils\DateTimeHelper;

/**
 * List of cancellation candidate devices.
 */
class V1ListOfLicensesToRemove implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $count;

    /**
     * @var bool|null
     */
    private $hasMoreData;

    /**
     * @var \DateTime|null
     */
    private $updateTime;

    /**
     * @var string[]|null
     */
    private $deviceList;

    /**
     * Returns Count.
     * The total number of devices on the list.
     */
    public function getCount(): ?int
    {
        return $this->count;
    }

    /**
     * Sets Count.
     * The total number of devices on the list.
     *
     * @maps count
     */
    public function setCount(?int $count): void
    {
        $this->count = $count;
    }

    /**
     * Returns Has More Data.
     * True if there are more devices to retrieve.
     */
    public function getHasMoreData(): ?bool
    {
        return $this->hasMoreData;
    }

    /**
     * Sets Has More Data.
     * True if there are more devices to retrieve.
     *
     * @maps hasMoreData
     */
    public function setHasMoreData(?bool $hasMoreData): void
    {
        $this->hasMoreData = $hasMoreData;
    }

    /**
     * Returns Update Time.
     * The date and time that the list was last updated.
     */
    public function getUpdateTime(): ?\DateTime
    {
        return $this->updateTime;
    }

    /**
     * Sets Update Time.
     * The date and time that the list was last updated.
     *
     * @maps updateTime
     * @factory \VerizonLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setUpdateTime(?\DateTime $updateTime): void
    {
        $this->updateTime = $updateTime;
    }

    /**
     * Returns Device List.
     * The IMEIs of the devices.
     *
     * @return string[]|null
     */
    public function getDeviceList(): ?array
    {
        return $this->deviceList;
    }

    /**
     * Sets Device List.
     * The IMEIs of the devices.
     *
     * @maps deviceList
     *
     * @param string[]|null $deviceList
     */
    public function setDeviceList(?array $deviceList): void
    {
        $this->deviceList = $deviceList;
    }

    /**
     * Converts the V1ListOfLicensesToRemove object to a human-readable string representation.
     *
     * @return string The string representation of the V1ListOfLicensesToRemove object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'V1ListOfLicensesToRemove',
            [
                'count' => $this->count,
                'hasMoreData' => $this->hasMoreData,
                'updateTime' => $this->updateTime,
                'deviceList' => $this->deviceList,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['count', 'hasMoreData', 'updateTime', 'deviceList'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->count)) {
            $json['count']       = $this->count;
        }
        if (isset($this->hasMoreData)) {
            $json['hasMoreData'] = $this->hasMoreData;
        }
        if (isset($this->updateTime)) {
            $json['updateTime']  = DateTimeHelper::toRfc3339DateTime($this->updateTime);
        }
        if (isset($this->deviceList)) {
            $json['deviceList']  = $this->deviceList;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
