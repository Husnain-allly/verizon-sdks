<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

class DevicesConsentResult implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $accountName;

    /**
     * @var bool|null
     */
    private $allDevice;

    /**
     * @var bool|null
     */
    private $hasMoreData;

    /**
     * @var int|null
     */
    private $totalCount;

    /**
     * @var string|null
     */
    private $updateTime;

    /**
     * @var string[]|null
     */
    private $exclusion;

    /**
     * Returns Account Name.
     * Account identifier in "##########-#####".
     */
    public function getAccountName(): ?string
    {
        return $this->accountName;
    }

    /**
     * Sets Account Name.
     * Account identifier in "##########-#####".
     *
     * @maps accountName
     */
    public function setAccountName(?string $accountName): void
    {
        $this->accountName = $accountName;
    }

    /**
     * Returns All Device.
     * Exclude all devices or not?
     */
    public function getAllDevice(): ?bool
    {
        return $this->allDevice;
    }

    /**
     * Sets All Device.
     * Exclude all devices or not?
     *
     * @maps allDevice
     */
    public function setAllDevice(?bool $allDevice): void
    {
        $this->allDevice = $allDevice;
    }

    /**
     * Returns Has More Data.
     * Are there more devices to retrieve or not?
     */
    public function getHasMoreData(): ?bool
    {
        return $this->hasMoreData;
    }

    /**
     * Sets Has More Data.
     * Are there more devices to retrieve or not?
     *
     * @maps hasMoreData
     */
    public function setHasMoreData(?bool $hasMoreData): void
    {
        $this->hasMoreData = $hasMoreData;
    }

    /**
     * Returns Total Count.
     * Total number of excluded devices in the account.
     */
    public function getTotalCount(): ?int
    {
        return $this->totalCount;
    }

    /**
     * Sets Total Count.
     * Total number of excluded devices in the account.
     *
     * @maps totalCount
     */
    public function setTotalCount(?int $totalCount): void
    {
        $this->totalCount = $totalCount;
    }

    /**
     * Returns Update Time.
     * Last update time.
     */
    public function getUpdateTime(): ?string
    {
        return $this->updateTime;
    }

    /**
     * Sets Update Time.
     * Last update time.
     *
     * @maps updateTime
     */
    public function setUpdateTime(?string $updateTime): void
    {
        $this->updateTime = $updateTime;
    }

    /**
     * Returns Exclusion.
     * Device ID list.
     *
     * @return string[]|null
     */
    public function getExclusion(): ?array
    {
        return $this->exclusion;
    }

    /**
     * Sets Exclusion.
     * Device ID list.
     *
     * @maps exclusion
     *
     * @param string[]|null $exclusion
     */
    public function setExclusion(?array $exclusion): void
    {
        $this->exclusion = $exclusion;
    }

    /**
     * Converts the DevicesConsentResult object to a human-readable string representation.
     *
     * @return string The string representation of the DevicesConsentResult object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'DevicesConsentResult',
            [
                'accountName' => $this->accountName,
                'allDevice' => $this->allDevice,
                'hasMoreData' => $this->hasMoreData,
                'totalCount' => $this->totalCount,
                'updateTime' => $this->updateTime,
                'exclusion' => $this->exclusion,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['accountName', 'allDevice', 'hasMoreData', 'totalCount', 'updateTime', 'exclusion'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->accountName)) {
            $json['accountName'] = $this->accountName;
        }
        if (isset($this->allDevice)) {
            $json['allDevice']   = $this->allDevice;
        }
        if (isset($this->hasMoreData)) {
            $json['hasMoreData'] = $this->hasMoreData;
        }
        if (isset($this->totalCount)) {
            $json['totalCount']  = $this->totalCount;
        }
        if (isset($this->updateTime)) {
            $json['updateTime']  = $this->updateTime;
        }
        if (isset($this->exclusion)) {
            $json['exclusion']   = $this->exclusion;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
