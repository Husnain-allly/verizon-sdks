<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;
use VerizonLib\Utils\DateTimeHelper;

class UsageHistory implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $bytesUsed;

    /**
     * @var string|null
     */
    private $serviceplan;

    /**
     * @var int|null
     */
    private $smsUsed;

    /**
     * @var int|null
     */
    private $moSms;

    /**
     * @var int|null
     */
    private $mtSms;

    /**
     * @var string|null
     */
    private $source;

    /**
     * @var \DateTime|null
     */
    private $eventDateTime;

    /**
     * Returns Bytes Used.
     */
    public function getBytesUsed(): ?int
    {
        return $this->bytesUsed;
    }

    /**
     * Sets Bytes Used.
     *
     * @maps bytesUsed
     */
    public function setBytesUsed(?int $bytesUsed): void
    {
        $this->bytesUsed = $bytesUsed;
    }

    /**
     * Returns Serviceplan.
     */
    public function getServiceplan(): ?string
    {
        return $this->serviceplan;
    }

    /**
     * Sets Serviceplan.
     *
     * @maps serviceplan
     */
    public function setServiceplan(?string $serviceplan): void
    {
        $this->serviceplan = $serviceplan;
    }

    /**
     * Returns Sms Used.
     */
    public function getSmsUsed(): ?int
    {
        return $this->smsUsed;
    }

    /**
     * Sets Sms Used.
     *
     * @maps smsUsed
     */
    public function setSmsUsed(?int $smsUsed): void
    {
        $this->smsUsed = $smsUsed;
    }

    /**
     * Returns Mo Sms.
     */
    public function getMoSms(): ?int
    {
        return $this->moSms;
    }

    /**
     * Sets Mo Sms.
     *
     * @maps moSMS
     */
    public function setMoSms(?int $moSms): void
    {
        $this->moSms = $moSms;
    }

    /**
     * Returns Mt Sms.
     */
    public function getMtSms(): ?int
    {
        return $this->mtSms;
    }

    /**
     * Sets Mt Sms.
     *
     * @maps mtSMS
     */
    public function setMtSms(?int $mtSms): void
    {
        $this->mtSms = $mtSms;
    }

    /**
     * Returns Source.
     */
    public function getSource(): ?string
    {
        return $this->source;
    }

    /**
     * Sets Source.
     *
     * @maps source
     */
    public function setSource(?string $source): void
    {
        $this->source = $source;
    }

    /**
     * Returns Event Date Time.
     */
    public function getEventDateTime(): ?\DateTime
    {
        return $this->eventDateTime;
    }

    /**
     * Sets Event Date Time.
     *
     * @maps eventDateTime
     * @factory \VerizonLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setEventDateTime(?\DateTime $eventDateTime): void
    {
        $this->eventDateTime = $eventDateTime;
    }

    /**
     * Converts the UsageHistory object to a human-readable string representation.
     *
     * @return string The string representation of the UsageHistory object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'UsageHistory',
            [
                'bytesUsed' => $this->bytesUsed,
                'serviceplan' => $this->serviceplan,
                'smsUsed' => $this->smsUsed,
                'moSms' => $this->moSms,
                'mtSms' => $this->mtSms,
                'source' => $this->source,
                'eventDateTime' => $this->eventDateTime,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['bytesUsed', 'serviceplan', 'smsUsed', 'moSMS', 'mtSMS', 'source', 'eventDateTime'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->bytesUsed)) {
            $json['bytesUsed']     = $this->bytesUsed;
        }
        if (isset($this->serviceplan)) {
            $json['serviceplan']   = $this->serviceplan;
        }
        if (isset($this->smsUsed)) {
            $json['smsUsed']       = $this->smsUsed;
        }
        if (isset($this->moSms)) {
            $json['moSMS']         = $this->moSms;
        }
        if (isset($this->mtSms)) {
            $json['mtSMS']         = $this->mtSms;
        }
        if (isset($this->source)) {
            $json['source']        = $this->source;
        }
        if (isset($this->eventDateTime)) {
            $json['eventDateTime'] = DateTimeHelper::toRfc3339DateTime($this->eventDateTime);
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
