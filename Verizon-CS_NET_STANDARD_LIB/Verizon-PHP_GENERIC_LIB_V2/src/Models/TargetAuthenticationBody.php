<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

class TargetAuthenticationBody implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $grantType;

    /**
     * @var string|null
     */
    private $refreshToken;

    /**
     * @var string|null
     */
    private $scope;

    /**
     * @var TargetAuthenticationBodyHeaders|null
     */
    private $headers;

    /**
     * @var TargetAuthenticationBodyHost|null
     */
    private $host;

    /**
     * Returns Grant Type.
     * Authentication grant type.
     */
    public function getGrantType(): ?string
    {
        return $this->grantType;
    }

    /**
     * Sets Grant Type.
     * Authentication grant type.
     *
     * @maps grant_type
     */
    public function setGrantType(?string $grantType): void
    {
        $this->grantType = $grantType;
    }

    /**
     * Returns Refresh Token.
     * Refresh token.
     */
    public function getRefreshToken(): ?string
    {
        return $this->refreshToken;
    }

    /**
     * Sets Refresh Token.
     * Refresh token.
     *
     * @maps refresh_token
     */
    public function setRefreshToken(?string $refreshToken): void
    {
        $this->refreshToken = $refreshToken;
    }

    /**
     * Returns Scope.
     * Authentication scopes.
     */
    public function getScope(): ?string
    {
        return $this->scope;
    }

    /**
     * Sets Scope.
     * Authentication scopes.
     *
     * @maps scope
     */
    public function setScope(?string $scope): void
    {
        $this->scope = $scope;
    }

    /**
     * Returns Headers.
     * Authentication headers.
     */
    public function getHeaders(): ?TargetAuthenticationBodyHeaders
    {
        return $this->headers;
    }

    /**
     * Sets Headers.
     * Authentication headers.
     *
     * @maps headers
     */
    public function setHeaders(?TargetAuthenticationBodyHeaders $headers): void
    {
        $this->headers = $headers;
    }

    /**
     * Returns Host.
     * Host information.
     */
    public function getHost(): ?TargetAuthenticationBodyHost
    {
        return $this->host;
    }

    /**
     * Sets Host.
     * Host information.
     *
     * @maps host
     */
    public function setHost(?TargetAuthenticationBodyHost $host): void
    {
        $this->host = $host;
    }

    /**
     * Converts the TargetAuthenticationBody object to a human-readable string representation.
     *
     * @return string The string representation of the TargetAuthenticationBody object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'TargetAuthenticationBody',
            [
                'grantType' => $this->grantType,
                'refreshToken' => $this->refreshToken,
                'scope' => $this->scope,
                'headers' => $this->headers,
                'host' => $this->host,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['grant_type', 'refresh_token', 'scope', 'headers', 'host'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->grantType)) {
            $json['grant_type']    = $this->grantType;
        }
        if (isset($this->refreshToken)) {
            $json['refresh_token'] = $this->refreshToken;
        }
        if (isset($this->scope)) {
            $json['scope']         = $this->scope;
        }
        if (isset($this->headers)) {
            $json['headers']       = $this->headers;
        }
        if (isset($this->host)) {
            $json['host']          = $this->host;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
