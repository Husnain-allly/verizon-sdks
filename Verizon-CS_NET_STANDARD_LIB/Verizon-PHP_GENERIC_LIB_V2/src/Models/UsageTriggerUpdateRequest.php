<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

class UsageTriggerUpdateRequest implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $triggerName;

    /**
     * @var string
     */
    private $accountName;

    /**
     * @var string|null
     */
    private $thresholdValue;

    /**
     * @var string|null
     */
    private $smsPhoneNumbers;

    /**
     * @var string|null
     */
    private $emailAddresses;

    /**
     * @param string $accountName
     */
    public function __construct(string $accountName)
    {
        $this->accountName = $accountName;
    }

    /**
     * Returns Trigger Name.
     * Usage trigger name
     */
    public function getTriggerName(): ?string
    {
        return $this->triggerName;
    }

    /**
     * Sets Trigger Name.
     * Usage trigger name
     *
     * @maps triggerName
     */
    public function setTriggerName(?string $triggerName): void
    {
        $this->triggerName = $triggerName;
    }

    /**
     * Returns Account Name.
     * Account name
     */
    public function getAccountName(): string
    {
        return $this->accountName;
    }

    /**
     * Sets Account Name.
     * Account name
     *
     * @required
     * @maps accountName
     */
    public function setAccountName(string $accountName): void
    {
        $this->accountName = $accountName;
    }

    /**
     * Returns Threshold Value.
     * The percent of subscribed usage required to activate the trigger, such as 90 or 100.
     */
    public function getThresholdValue(): ?string
    {
        return $this->thresholdValue;
    }

    /**
     * Sets Threshold Value.
     * The percent of subscribed usage required to activate the trigger, such as 90 or 100.
     *
     * @maps thresholdValue
     */
    public function setThresholdValue(?string $thresholdValue): void
    {
        $this->thresholdValue = $thresholdValue;
    }

    /**
     * Returns Sms Phone Numbers.
     * Comma-separated list of phone numbers to send SMS alerts to. Digits only; no dashes or parentheses,
     * etc.
     */
    public function getSmsPhoneNumbers(): ?string
    {
        return $this->smsPhoneNumbers;
    }

    /**
     * Sets Sms Phone Numbers.
     * Comma-separated list of phone numbers to send SMS alerts to. Digits only; no dashes or parentheses,
     * etc.
     *
     * @maps smsPhoneNumbers
     */
    public function setSmsPhoneNumbers(?string $smsPhoneNumbers): void
    {
        $this->smsPhoneNumbers = $smsPhoneNumbers;
    }

    /**
     * Returns Email Addresses.
     * Comma-separated list of email addresses to send alerts to.
     */
    public function getEmailAddresses(): ?string
    {
        return $this->emailAddresses;
    }

    /**
     * Sets Email Addresses.
     * Comma-separated list of email addresses to send alerts to.
     *
     * @maps emailAddresses
     */
    public function setEmailAddresses(?string $emailAddresses): void
    {
        $this->emailAddresses = $emailAddresses;
    }

    /**
     * Converts the UsageTriggerUpdateRequest object to a human-readable string representation.
     *
     * @return string The string representation of the UsageTriggerUpdateRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'UsageTriggerUpdateRequest',
            [
                'triggerName' => $this->triggerName,
                'accountName' => $this->accountName,
                'thresholdValue' => $this->thresholdValue,
                'smsPhoneNumbers' => $this->smsPhoneNumbers,
                'emailAddresses' => $this->emailAddresses,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['triggerName', 'accountName', 'thresholdValue', 'smsPhoneNumbers', 'emailAddresses'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->triggerName)) {
            $json['triggerName']     = $this->triggerName;
        }
        $json['accountName']         = $this->accountName;
        if (isset($this->thresholdValue)) {
            $json['thresholdValue']  = $this->thresholdValue;
        }
        if (isset($this->smsPhoneNumbers)) {
            $json['smsPhoneNumbers'] = $this->smsPhoneNumbers;
        }
        if (isset($this->emailAddresses)) {
            $json['emailAddresses']  = $this->emailAddresses;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
