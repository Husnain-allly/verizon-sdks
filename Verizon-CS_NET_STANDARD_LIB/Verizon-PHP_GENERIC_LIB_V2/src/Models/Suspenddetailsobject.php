<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

class Suspenddetailsobject implements \JsonSerializable
{
    /**
     * @var string[]|null
     */
    private $suspendFromAccounts;

    /**
     * @var int|null
     */
    private $suspendDuration;

    /**
     * @var string|null
     */
    private $suspendOption;

    /**
     * @var int|null
     */
    private $threshold;

    /**
     * @var string|null
     */
    private $thresholdUnit;

    /**
     * Returns Suspend From Accounts.
     *
     * @return string[]|null
     */
    public function getSuspendFromAccounts(): ?array
    {
        return $this->suspendFromAccounts;
    }

    /**
     * Sets Suspend From Accounts.
     *
     * @maps suspendFromAccounts
     *
     * @param string[]|null $suspendFromAccounts
     */
    public function setSuspendFromAccounts(?array $suspendFromAccounts): void
    {
        $this->suspendFromAccounts = $suspendFromAccounts;
    }

    /**
     * Returns Suspend Duration.
     */
    public function getSuspendDuration(): ?int
    {
        return $this->suspendDuration;
    }

    /**
     * Sets Suspend Duration.
     *
     * @maps suspendDuration
     */
    public function setSuspendDuration(?int $suspendDuration): void
    {
        $this->suspendDuration = $suspendDuration;
    }

    /**
     * Returns Suspend Option.
     */
    public function getSuspendOption(): ?string
    {
        return $this->suspendOption;
    }

    /**
     * Sets Suspend Option.
     *
     * @maps suspendOption
     */
    public function setSuspendOption(?string $suspendOption): void
    {
        $this->suspendOption = $suspendOption;
    }

    /**
     * Returns Threshold.
     * The threshold value the trigger monitors for
     */
    public function getThreshold(): ?int
    {
        return $this->threshold;
    }

    /**
     * Sets Threshold.
     * The threshold value the trigger monitors for
     *
     * @maps threshold
     */
    public function setThreshold(?int $threshold): void
    {
        $this->threshold = $threshold;
    }

    /**
     * Returns Threshold Unit.
     * The units of the threshold. This can be KB, Kilobits, MB, Megabits, or GB, Gigabits
     */
    public function getThresholdUnit(): ?string
    {
        return $this->thresholdUnit;
    }

    /**
     * Sets Threshold Unit.
     * The units of the threshold. This can be KB, Kilobits, MB, Megabits, or GB, Gigabits
     *
     * @maps thresholdUnit
     * @factory \VerizonLib\Models\ThresholdUnit::checkValue
     */
    public function setThresholdUnit(?string $thresholdUnit): void
    {
        $this->thresholdUnit = $thresholdUnit;
    }

    /**
     * Converts the Suspenddetailsobject object to a human-readable string representation.
     *
     * @return string The string representation of the Suspenddetailsobject object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'Suspenddetailsobject',
            [
                'suspendFromAccounts' => $this->suspendFromAccounts,
                'suspendDuration' => $this->suspendDuration,
                'suspendOption' => $this->suspendOption,
                'threshold' => $this->threshold,
                'thresholdUnit' => $this->thresholdUnit,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = [
        'suspendFromAccounts',
        'suspendDuration',
        'suspendOption',
        'threshold',
        'thresholdUnit'
    ];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->suspendFromAccounts)) {
            $json['suspendFromAccounts'] = $this->suspendFromAccounts;
        }
        if (isset($this->suspendDuration)) {
            $json['suspendDuration']     = $this->suspendDuration;
        }
        if (isset($this->suspendOption)) {
            $json['suspendOption']       = $this->suspendOption;
        }
        if (isset($this->threshold)) {
            $json['threshold']           = $this->threshold;
        }
        if (isset($this->thresholdUnit)) {
            $json['thresholdUnit']       = ThresholdUnit::checkValue($this->thresholdUnit);
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
