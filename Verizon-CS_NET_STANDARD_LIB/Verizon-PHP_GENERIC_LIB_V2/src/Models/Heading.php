<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

class Heading implements \JsonSerializable
{
    /**
     * @var float
     */
    private $min;

    /**
     * @var float
     */
    private $max;

    /**
     * @param float $min
     * @param float $max
     */
    public function __construct(float $min, float $max)
    {
        $this->min = $min;
        $this->max = $max;
    }

    /**
     * Returns Min.
     * The minimum value of heading in unit of degrees.
     */
    public function getMin(): float
    {
        return $this->min;
    }

    /**
     * Sets Min.
     * The minimum value of heading in unit of degrees.
     *
     * @required
     * @maps min
     */
    public function setMin(float $min): void
    {
        $this->min = $min;
    }

    /**
     * Returns Max.
     * The maximum value of heading in unit of degrees.
     */
    public function getMax(): float
    {
        return $this->max;
    }

    /**
     * Sets Max.
     * The maximum value of heading in unit of degrees.
     *
     * @required
     * @maps max
     */
    public function setMax(float $max): void
    {
        $this->max = $max;
    }

    /**
     * Converts the Heading object to a human-readable string representation.
     *
     * @return string The string representation of the Heading object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify('Heading', ['min' => $this->min, 'max' => $this->max]);
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['min'] = $this->min;
        $json['max'] = $this->max;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
