<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * The request body must include the UUID of the subscription that you want to update plus any
 * properties that you want to change.
 */
class CreateIoTApplicationRequest implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $appName;

    /**
     * @var string|null
     */
    private $billingAccountId;

    /**
     * @var string|null
     */
    private $clientId;

    /**
     * @var string|null
     */
    private $clientSecret;

    /**
     * @var string|null
     */
    private $emailIDs;

    /**
     * @var string|null
     */
    private $resourcegroup;

    /**
     * @var string|null
     */
    private $sampleIoTcApp;

    /**
     * @var string|null
     */
    private $subscriptionId;

    /**
     * @var string|null
     */
    private $tenantId;

    /**
     * Returns App Name.
     * A user defined name for the application being deployed in Azure IoT Central.
     */
    public function getAppName(): ?string
    {
        return $this->appName;
    }

    /**
     * Sets App Name.
     * A user defined name for the application being deployed in Azure IoT Central.
     *
     * @maps appName
     */
    public function setAppName(?string $appName): void
    {
        $this->appName = $appName;
    }

    /**
     * Returns Billing Account Id.
     * The ThingSpace ID of the authenticating billing account
     */
    public function getBillingAccountId(): ?string
    {
        return $this->billingAccountId;
    }

    /**
     * Sets Billing Account Id.
     * The ThingSpace ID of the authenticating billing account
     *
     * @maps billingAccountID
     */
    public function setBillingAccountId(?string $billingAccountId): void
    {
        $this->billingAccountId = $billingAccountId;
    }

    /**
     * Returns Client Id.
     * The Azure ClientID of the associated Azure target account
     */
    public function getClientId(): ?string
    {
        return $this->clientId;
    }

    /**
     * Sets Client Id.
     * The Azure ClientID of the associated Azure target account
     *
     * @maps clientID
     */
    public function setClientId(?string $clientId): void
    {
        $this->clientId = $clientId;
    }

    /**
     * Returns Client Secret.
     * The Azure Client Secret of the associated Azure target account
     */
    public function getClientSecret(): ?string
    {
        return $this->clientSecret;
    }

    /**
     * Sets Client Secret.
     * The Azure Client Secret of the associated Azure target account
     *
     * @maps clientSecret
     */
    public function setClientSecret(?string $clientSecret): void
    {
        $this->clientSecret = $clientSecret;
    }

    /**
     * Returns Email I Ds.
     * The “email IDs” to be added to/sent to with this API.
     */
    public function getEmailIDs(): ?string
    {
        return $this->emailIDs;
    }

    /**
     * Sets Email I Ds.
     * The “email IDs” to be added to/sent to with this API.
     *
     * @maps emailIDs
     */
    public function setEmailIDs(?string $emailIDs): void
    {
        $this->emailIDs = $emailIDs;
    }

    /**
     * Returns Resourcegroup.
     * The Azure Resource group of the associated Azure target account
     */
    public function getResourcegroup(): ?string
    {
        return $this->resourcegroup;
    }

    /**
     * Sets Resourcegroup.
     * The Azure Resource group of the associated Azure target account
     *
     * @maps resourcegroup
     */
    public function setResourcegroup(?string $resourcegroup): void
    {
        $this->resourcegroup = $resourcegroup;
    }

    /**
     * Returns Sample Io Tc App.
     * This is the reference Azure IoT Central application developed by Verizon.
     */
    public function getSampleIoTcApp(): ?string
    {
        return $this->sampleIoTcApp;
    }

    /**
     * Sets Sample Io Tc App.
     * This is the reference Azure IoT Central application developed by Verizon.
     *
     * @maps sampleIOTcApp
     */
    public function setSampleIoTcApp(?string $sampleIoTcApp): void
    {
        $this->sampleIoTcApp = $sampleIoTcApp;
    }

    /**
     * Returns Subscription Id.
     * The Azure Subscription ID of the associated Azure target account
     */
    public function getSubscriptionId(): ?string
    {
        return $this->subscriptionId;
    }

    /**
     * Sets Subscription Id.
     * The Azure Subscription ID of the associated Azure target account
     *
     * @maps subscriptionID
     */
    public function setSubscriptionId(?string $subscriptionId): void
    {
        $this->subscriptionId = $subscriptionId;
    }

    /**
     * Returns Tenant Id.
     * The Azure Tenant ID of the associated Azure target account
     */
    public function getTenantId(): ?string
    {
        return $this->tenantId;
    }

    /**
     * Sets Tenant Id.
     * The Azure Tenant ID of the associated Azure target account
     *
     * @maps tenantID
     */
    public function setTenantId(?string $tenantId): void
    {
        $this->tenantId = $tenantId;
    }

    /**
     * Converts the CreateIoTApplicationRequest object to a human-readable string representation.
     *
     * @return string The string representation of the CreateIoTApplicationRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'CreateIoTApplicationRequest',
            [
                'appName' => $this->appName,
                'billingAccountId' => $this->billingAccountId,
                'clientId' => $this->clientId,
                'clientSecret' => $this->clientSecret,
                'emailIDs' => $this->emailIDs,
                'resourcegroup' => $this->resourcegroup,
                'sampleIoTcApp' => $this->sampleIoTcApp,
                'subscriptionId' => $this->subscriptionId,
                'tenantId' => $this->tenantId,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = [
        'appName',
        'billingAccountID',
        'clientID',
        'clientSecret',
        'emailIDs',
        'resourcegroup',
        'sampleIOTcApp',
        'subscriptionID',
        'tenantID'
    ];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->appName)) {
            $json['appName']          = $this->appName;
        }
        if (isset($this->billingAccountId)) {
            $json['billingAccountID'] = $this->billingAccountId;
        }
        if (isset($this->clientId)) {
            $json['clientID']         = $this->clientId;
        }
        if (isset($this->clientSecret)) {
            $json['clientSecret']     = $this->clientSecret;
        }
        if (isset($this->emailIDs)) {
            $json['emailIDs']         = $this->emailIDs;
        }
        if (isset($this->resourcegroup)) {
            $json['resourcegroup']    = $this->resourcegroup;
        }
        if (isset($this->sampleIoTcApp)) {
            $json['sampleIOTcApp']    = $this->sampleIoTcApp;
        }
        if (isset($this->subscriptionId)) {
            $json['subscriptionID']   = $this->subscriptionId;
        }
        if (isset($this->tenantId)) {
            $json['tenantID']         = $this->tenantId;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
