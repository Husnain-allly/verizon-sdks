<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;
use VerizonLib\Utils\DateTimeHelper;

class ResourceDevice implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $accountclientid;

    /**
     * @var string|null
     */
    private $billingaccountid;

    /**
     * @var string|null
     */
    private $chipset;

    /**
     * @var \DateTime
     */
    private $createdon;

    /**
     * @var array|null
     */
    private $customdata;

    /**
     * @var string|null
     */
    private $description;

    /**
     * @var int|null
     */
    private $esn;

    /**
     * @var DtoFields|null
     */
    private $fields;

    /**
     * @var string
     */
    private $foreignid;

    /**
     * @var string|null
     */
    private $hardwareversion;

    /**
     * @var string|null
     */
    private $iccid;

    /**
     * @var string|null
     */
    private $id;

    /**
     * @var int|null
     */
    private $imei;

    /**
     * @var int|null
     */
    private $imsi;

    /**
     * @var \DateTime
     */
    private $lastupdated;

    /**
     * @var string[]|null
     */
    private $licenses;

    /**
     * @var string|null
     */
    private $mac;

    /**
     * @var string|null
     */
    private $manufacturer;

    /**
     * @var string|null
     */
    private $meid;

    /**
     * @var string|null
     */
    private $msisdn;

    /**
     * @var string|null
     */
    private $name;

    /**
     * @var string|null
     */
    private $parentdeviceid;

    /**
     * @var string|null
     */
    private $productmodel;

    /**
     * @var string|null
     */
    private $providerid;

    /**
     * @var string|null
     */
    private $qrcode;

    /**
     * @var string|null
     */
    private $refid;

    /**
     * @var string|null
     */
    private $refidtype;

    /**
     * @var string|null
     */
    private $serial;

    /**
     * @var string[]|null
     */
    private $services;

    /**
     * @var string|null
     */
    private $sku;

    /**
     * @var string|null
     */
    private $softwareversion;

    /**
     * @var string
     */
    private $state;

    /**
     * @var string|null
     */
    private $version;

    /**
     * @var string
     */
    private $versionid;

    /**
     * @var int|null
     */
    private $eventretention;

    /**
     * @param \DateTime $createdon
     * @param string $foreignid
     * @param \DateTime $lastupdated
     * @param string $state
     * @param string $versionid
     */
    public function __construct(
        \DateTime $createdon,
        string $foreignid,
        \DateTime $lastupdated,
        string $state,
        string $versionid
    ) {
        $this->createdon = $createdon;
        $this->foreignid = $foreignid;
        $this->lastupdated = $lastupdated;
        $this->state = $state;
        $this->versionid = $versionid;
    }

    /**
     * Returns Accountclientid.
     * Not used in this release, future functionality
     */
    public function getAccountclientid(): ?string
    {
        return $this->accountclientid;
    }

    /**
     * Sets Accountclientid.
     * Not used in this release, future functionality
     *
     * @maps accountclientid
     */
    public function setAccountclientid(?string $accountclientid): void
    {
        $this->accountclientid = $accountclientid;
    }

    /**
     * Returns Billingaccountid.
     * The billing account ID. This is the same value as the Account ID
     */
    public function getBillingaccountid(): ?string
    {
        return $this->billingaccountid;
    }

    /**
     * Sets Billingaccountid.
     * The billing account ID. This is the same value as the Account ID
     *
     * @maps billingaccountid
     */
    public function setBillingaccountid(?string $billingaccountid): void
    {
        $this->billingaccountid = $billingaccountid;
    }

    /**
     * Returns Chipset.
     * The Identifier of chipset used by the device
     */
    public function getChipset(): ?string
    {
        return $this->chipset;
    }

    /**
     * Sets Chipset.
     * The Identifier of chipset used by the device
     *
     * @maps chipset
     */
    public function setChipset(?string $chipset): void
    {
        $this->chipset = $chipset;
    }

    /**
     * Returns Createdon.
     * Timestamp of the record
     */
    public function getCreatedon(): \DateTime
    {
        return $this->createdon;
    }

    /**
     * Sets Createdon.
     * Timestamp of the record
     *
     * @required
     * @maps createdon
     * @factory \VerizonLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setCreatedon(\DateTime $createdon): void
    {
        $this->createdon = $createdon;
    }

    /**
     * Returns Customdata.
     * Name/value pair, where the value is client defined.  The purpose is to keep track of current state
     * per device action.
     */
    public function getCustomdata(): ?array
    {
        return $this->customdata;
    }

    /**
     * Sets Customdata.
     * Name/value pair, where the value is client defined.  The purpose is to keep track of current state
     * per device action.
     *
     * @maps customdata
     */
    public function setCustomdata(?array $customdata): void
    {
        $this->customdata = $customdata;
    }

    /**
     * Returns Description.
     * a short description
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     * a short description
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Esn.
     * The Electronic Serial Number (ESN) of the device
     */
    public function getEsn(): ?int
    {
        return $this->esn;
    }

    /**
     * Sets Esn.
     * The Electronic Serial Number (ESN) of the device
     *
     * @maps esn
     */
    public function setEsn(?int $esn): void
    {
        $this->esn = $esn;
    }

    /**
     * Returns Fields.
     * Fields to return needed by search
     */
    public function getFields(): ?DtoFields
    {
        return $this->fields;
    }

    /**
     * Sets Fields.
     * Fields to return needed by search
     *
     * @maps fields
     */
    public function setFields(?DtoFields $fields): void
    {
        $this->fields = $fields;
    }

    /**
     * Returns Foreignid.
     * UUID of the ECPD account the user belongs to
     */
    public function getForeignid(): string
    {
        return $this->foreignid;
    }

    /**
     * Sets Foreignid.
     * UUID of the ECPD account the user belongs to
     *
     * @required
     * @maps foreignid
     */
    public function setForeignid(string $foreignid): void
    {
        $this->foreignid = $foreignid;
    }

    /**
     * Returns Hardwareversion.
     * The manufacturer's hardware version of the device
     */
    public function getHardwareversion(): ?string
    {
        return $this->hardwareversion;
    }

    /**
     * Sets Hardwareversion.
     * The manufacturer's hardware version of the device
     *
     * @maps hardwareversion
     */
    public function setHardwareversion(?string $hardwareversion): void
    {
        $this->hardwareversion = $hardwareversion;
    }

    /**
     * Returns Iccid.
     * The 20-digit Integrated Circuit Card ID (SIM card ID)
     */
    public function getIccid(): ?string
    {
        return $this->iccid;
    }

    /**
     * Sets Iccid.
     * The 20-digit Integrated Circuit Card ID (SIM card ID)
     *
     * @maps iccid
     */
    public function setIccid(?string $iccid): void
    {
        $this->iccid = $iccid;
    }

    /**
     * Returns Id.
     * UUID of the user record, assigned at creation
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * UUID of the user record, assigned at creation
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Imei.
     * The 15-digit International Mobile Equipment ID
     */
    public function getImei(): ?int
    {
        return $this->imei;
    }

    /**
     * Sets Imei.
     * The 15-digit International Mobile Equipment ID
     *
     * @maps imei
     */
    public function setImei(?int $imei): void
    {
        $this->imei = $imei;
    }

    /**
     * Returns Imsi.
     * The 64-bit International Mobile Subscriber Identity
     */
    public function getImsi(): ?int
    {
        return $this->imsi;
    }

    /**
     * Sets Imsi.
     * The 64-bit International Mobile Subscriber Identity
     *
     * @maps imsi
     */
    public function setImsi(?int $imsi): void
    {
        $this->imsi = $imsi;
    }

    /**
     * Returns Lastupdated.
     * Timestamp of the record
     */
    public function getLastupdated(): \DateTime
    {
        return $this->lastupdated;
    }

    /**
     * Sets Lastupdated.
     * Timestamp of the record
     *
     * @required
     * @maps lastupdated
     * @factory \VerizonLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setLastupdated(\DateTime $lastupdated): void
    {
        $this->lastupdated = $lastupdated;
    }

    /**
     * Returns Licenses.
     * licenses assigned to the device
     *
     * @return string[]|null
     */
    public function getLicenses(): ?array
    {
        return $this->licenses;
    }

    /**
     * Sets Licenses.
     * licenses assigned to the device
     *
     * @maps licenses
     *
     * @param string[]|null $licenses
     */
    public function setLicenses(?array $licenses): void
    {
        $this->licenses = $licenses;
    }

    /**
     * Returns Mac.
     * The Media Access Control address of the device, listed on the device in the format XX-XX-XX-XX-XX-XX
     * or XX:XX:XX:XX:XX:XX
     */
    public function getMac(): ?string
    {
        return $this->mac;
    }

    /**
     * Sets Mac.
     * The Media Access Control address of the device, listed on the device in the format XX-XX-XX-XX-XX-XX
     * or XX:XX:XX:XX:XX:XX
     *
     * @maps mac
     */
    public function setMac(?string $mac): void
    {
        $this->mac = $mac;
    }

    /**
     * Returns Manufacturer.
     * The manufacturer of the device
     */
    public function getManufacturer(): ?string
    {
        return $this->manufacturer;
    }

    /**
     * Sets Manufacturer.
     * The manufacturer of the device
     *
     * @maps manufacturer
     */
    public function setManufacturer(?string $manufacturer): void
    {
        $this->manufacturer = $manufacturer;
    }

    /**
     * Returns Meid.
     * The 56-bit Mobile Equipment ID
     */
    public function getMeid(): ?string
    {
        return $this->meid;
    }

    /**
     * Sets Meid.
     * The 56-bit Mobile Equipment ID
     *
     * @maps meid
     */
    public function setMeid(?string $meid): void
    {
        $this->meid = $meid;
    }

    /**
     * Returns Msisdn.
     * The Mobile Station International Subscriber Directory Number. In the USA, this is 1+ a 10-digit
     * phone number
     */
    public function getMsisdn(): ?string
    {
        return $this->msisdn;
    }

    /**
     * Sets Msisdn.
     * The Mobile Station International Subscriber Directory Number. In the USA, this is 1+ a 10-digit
     * phone number
     *
     * @maps msisdn
     */
    public function setMsisdn(?string $msisdn): void
    {
        $this->msisdn = $msisdn;
    }

    /**
     * Returns Name.
     * User defined name of the record
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * User defined name of the record
     *
     * @maps name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Parentdeviceid.
     * this field is applicable for BLE sensors. This represents the value of parent gateway device
     */
    public function getParentdeviceid(): ?string
    {
        return $this->parentdeviceid;
    }

    /**
     * Sets Parentdeviceid.
     * this field is applicable for BLE sensors. This represents the value of parent gateway device
     *
     * @maps parentdeviceid
     */
    public function setParentdeviceid(?string $parentdeviceid): void
    {
        $this->parentdeviceid = $parentdeviceid;
    }

    /**
     * Returns Productmodel.
     * The device model name
     */
    public function getProductmodel(): ?string
    {
        return $this->productmodel;
    }

    /**
     * Sets Productmodel.
     * The device model name
     *
     * @maps productmodel
     */
    public function setProductmodel(?string $productmodel): void
    {
        $this->productmodel = $productmodel;
    }

    /**
     * Returns Providerid.
     * The id of the provider who is responible for talking to the device
     */
    public function getProviderid(): ?string
    {
        return $this->providerid;
    }

    /**
     * Sets Providerid.
     * The id of the provider who is responible for talking to the device
     *
     * @maps providerid
     */
    public function setProviderid(?string $providerid): void
    {
        $this->providerid = $providerid;
    }

    /**
     * Returns Qrcode.
     * The numeric value of the Quick Response (QR) code
     */
    public function getQrcode(): ?string
    {
        return $this->qrcode;
    }

    /**
     * Sets Qrcode.
     * The numeric value of the Quick Response (QR) code
     *
     * @maps qrcode
     */
    public function setQrcode(?string $qrcode): void
    {
        $this->qrcode = $qrcode;
    }

    /**
     * Returns Refid.
     * The device reference ID
     */
    public function getRefid(): ?string
    {
        return $this->refid;
    }

    /**
     * Sets Refid.
     * The device reference ID
     *
     * @maps refid
     */
    public function setRefid(?string $refid): void
    {
        $this->refid = $refid;
    }

    /**
     * Returns Refidtype.
     * The type of value represented by `refid`
     */
    public function getRefidtype(): ?string
    {
        return $this->refidtype;
    }

    /**
     * Sets Refidtype.
     * The type of value represented by `refid`
     *
     * @maps refidtype
     */
    public function setRefidtype(?string $refidtype): void
    {
        $this->refidtype = $refidtype;
    }

    /**
     * Returns Serial.
     * The device's serial number
     */
    public function getSerial(): ?string
    {
        return $this->serial;
    }

    /**
     * Sets Serial.
     * The device's serial number
     *
     * @maps serial
     */
    public function setSerial(?string $serial): void
    {
        $this->serial = $serial;
    }

    /**
     * Returns Services.
     *
     * @return string[]|null
     */
    public function getServices(): ?array
    {
        return $this->services;
    }

    /**
     * Sets Services.
     *
     * @maps services
     *
     * @param string[]|null $services
     */
    public function setServices(?array $services): void
    {
        $this->services = $services;
    }

    /**
     * Returns Sku.
     * The Stock Keeping Unit (SKU) number of the device
     */
    public function getSku(): ?string
    {
        return $this->sku;
    }

    /**
     * Sets Sku.
     * The Stock Keeping Unit (SKU) number of the device
     *
     * @maps sku
     */
    public function setSku(?string $sku): void
    {
        $this->sku = $sku;
    }

    /**
     * Returns Softwareversion.
     * the current device software version
     */
    public function getSoftwareversion(): ?string
    {
        return $this->softwareversion;
    }

    /**
     * Sets Softwareversion.
     * the current device software version
     *
     * @maps softwareversion
     */
    public function setSoftwareversion(?string $softwareversion): void
    {
        $this->softwareversion = $softwareversion;
    }

    /**
     * Returns State.
     * The current status of the device or transaction and will be `success` or `failed`
     */
    public function getState(): string
    {
        return $this->state;
    }

    /**
     * Sets State.
     * The current status of the device or transaction and will be `success` or `failed`
     *
     * @required
     * @maps state
     */
    public function setState(string $state): void
    {
        $this->state = $state;
    }

    /**
     * Returns Version.
     * The resource version
     */
    public function getVersion(): ?string
    {
        return $this->version;
    }

    /**
     * Sets Version.
     * The resource version
     *
     * @maps version
     */
    public function setVersion(?string $version): void
    {
        $this->version = $version;
    }

    /**
     * Returns Versionid.
     * The UUID of the resource version
     */
    public function getVersionid(): string
    {
        return $this->versionid;
    }

    /**
     * Sets Versionid.
     * The UUID of the resource version
     *
     * @required
     * @maps versionid
     */
    public function setVersionid(string $versionid): void
    {
        $this->versionid = $versionid;
    }

    /**
     * Returns Eventretention.
     * Data retention period
     */
    public function getEventretention(): ?int
    {
        return $this->eventretention;
    }

    /**
     * Sets Eventretention.
     * Data retention period
     *
     * @maps eventretention
     */
    public function setEventretention(?int $eventretention): void
    {
        $this->eventretention = $eventretention;
    }

    /**
     * Converts the ResourceDevice object to a human-readable string representation.
     *
     * @return string The string representation of the ResourceDevice object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'ResourceDevice',
            [
                'accountclientid' => $this->accountclientid,
                'billingaccountid' => $this->billingaccountid,
                'chipset' => $this->chipset,
                'createdon' => $this->createdon,
                'customdata' => $this->customdata,
                'description' => $this->description,
                'esn' => $this->esn,
                'fields' => $this->fields,
                'foreignid' => $this->foreignid,
                'hardwareversion' => $this->hardwareversion,
                'iccid' => $this->iccid,
                'id' => $this->id,
                'imei' => $this->imei,
                'imsi' => $this->imsi,
                'lastupdated' => $this->lastupdated,
                'licenses' => $this->licenses,
                'mac' => $this->mac,
                'manufacturer' => $this->manufacturer,
                'meid' => $this->meid,
                'msisdn' => $this->msisdn,
                'name' => $this->name,
                'parentdeviceid' => $this->parentdeviceid,
                'productmodel' => $this->productmodel,
                'providerid' => $this->providerid,
                'qrcode' => $this->qrcode,
                'refid' => $this->refid,
                'refidtype' => $this->refidtype,
                'serial' => $this->serial,
                'services' => $this->services,
                'sku' => $this->sku,
                'softwareversion' => $this->softwareversion,
                'state' => $this->state,
                'version' => $this->version,
                'versionid' => $this->versionid,
                'eventretention' => $this->eventretention
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->accountclientid)) {
            $json['accountclientid']  = $this->accountclientid;
        }
        if (isset($this->billingaccountid)) {
            $json['billingaccountid'] = $this->billingaccountid;
        }
        if (isset($this->chipset)) {
            $json['chipset']          = $this->chipset;
        }
        $json['createdon']            = DateTimeHelper::toRfc3339DateTime($this->createdon);
        if (isset($this->customdata)) {
            $json['customdata']       = $this->customdata;
        }
        if (isset($this->description)) {
            $json['description']      = $this->description;
        }
        if (isset($this->esn)) {
            $json['esn']              = $this->esn;
        }
        if (isset($this->fields)) {
            $json['fields']           = $this->fields;
        }
        $json['foreignid']            = $this->foreignid;
        if (isset($this->hardwareversion)) {
            $json['hardwareversion']  = $this->hardwareversion;
        }
        if (isset($this->iccid)) {
            $json['iccid']            = $this->iccid;
        }
        if (isset($this->id)) {
            $json['id']               = $this->id;
        }
        if (isset($this->imei)) {
            $json['imei']             = $this->imei;
        }
        if (isset($this->imsi)) {
            $json['imsi']             = $this->imsi;
        }
        $json['lastupdated']          = DateTimeHelper::toRfc3339DateTime($this->lastupdated);
        if (isset($this->licenses)) {
            $json['licenses']         = $this->licenses;
        }
        if (isset($this->mac)) {
            $json['mac']              = $this->mac;
        }
        if (isset($this->manufacturer)) {
            $json['manufacturer']     = $this->manufacturer;
        }
        if (isset($this->meid)) {
            $json['meid']             = $this->meid;
        }
        if (isset($this->msisdn)) {
            $json['msisdn']           = $this->msisdn;
        }
        if (isset($this->name)) {
            $json['name']             = $this->name;
        }
        if (isset($this->parentdeviceid)) {
            $json['parentdeviceid']   = $this->parentdeviceid;
        }
        if (isset($this->productmodel)) {
            $json['productmodel']     = $this->productmodel;
        }
        if (isset($this->providerid)) {
            $json['providerid']       = $this->providerid;
        }
        if (isset($this->qrcode)) {
            $json['qrcode']           = $this->qrcode;
        }
        if (isset($this->refid)) {
            $json['refid']            = $this->refid;
        }
        if (isset($this->refidtype)) {
            $json['refidtype']        = $this->refidtype;
        }
        if (isset($this->serial)) {
            $json['serial']           = $this->serial;
        }
        if (isset($this->services)) {
            $json['services']         = $this->services;
        }
        if (isset($this->sku)) {
            $json['sku']              = $this->sku;
        }
        if (isset($this->softwareversion)) {
            $json['softwareversion']  = $this->softwareversion;
        }
        $json['state']                = $this->state;
        if (isset($this->version)) {
            $json['version']          = $this->version;
        }
        $json['versionid']            = $this->versionid;
        if (isset($this->eventretention)) {
            $json['eventretention']   = $this->eventretention;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
