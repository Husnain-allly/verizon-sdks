<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Device list information.
 */
class DeviceListResult implements \JsonSerializable
{
    /**
     * @var string
     */
    private $accountName;

    /**
     * @var int
     */
    private $deviceCount;

    /**
     * @var V3Device[]
     */
    private $deviceList;

    /**
     * @param string $accountName
     * @param int $deviceCount
     * @param V3Device[] $deviceList
     */
    public function __construct(string $accountName, int $deviceCount, array $deviceList)
    {
        $this->accountName = $accountName;
        $this->deviceCount = $deviceCount;
        $this->deviceList = $deviceList;
    }

    /**
     * Returns Account Name.
     * Account name.
     */
    public function getAccountName(): string
    {
        return $this->accountName;
    }

    /**
     * Sets Account Name.
     * Account name.
     *
     * @required
     * @maps accountName
     */
    public function setAccountName(string $accountName): void
    {
        $this->accountName = $accountName;
    }

    /**
     * Returns Device Count.
     * Total device count.
     */
    public function getDeviceCount(): int
    {
        return $this->deviceCount;
    }

    /**
     * Sets Device Count.
     * Total device count.
     *
     * @required
     * @maps deviceCount
     */
    public function setDeviceCount(int $deviceCount): void
    {
        $this->deviceCount = $deviceCount;
    }

    /**
     * Returns Device List.
     * List of devices with id in IMEI.
     *
     * @return V3Device[]
     */
    public function getDeviceList(): array
    {
        return $this->deviceList;
    }

    /**
     * Sets Device List.
     * List of devices with id in IMEI.
     *
     * @required
     * @maps deviceList
     *
     * @param V3Device[] $deviceList
     */
    public function setDeviceList(array $deviceList): void
    {
        $this->deviceList = $deviceList;
    }

    /**
     * Converts the DeviceListResult object to a human-readable string representation.
     *
     * @return string The string representation of the DeviceListResult object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'DeviceListResult',
            [
                'accountName' => $this->accountName,
                'deviceCount' => $this->deviceCount,
                'deviceList' => $this->deviceList,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['accountName', 'deviceCount', 'deviceList'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['accountName'] = $this->accountName;
        $json['deviceCount'] = $this->deviceCount;
        $json['deviceList']  = $this->deviceList;
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
