<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * The GeoJSON representation of geofence. Geofence supports the following geometry types: LineString,
 * Polygon, MultiLineString, and MultiPolygon. The system only supports a single Feature in the
 * FeatureCollection, so only one Line, Polygon, MultiLine or MultiPolygon can be defined within one
 * Geofencing configuration.
 */
class EtxGeofence implements \JsonSerializable
{
    /**
     * @var string
     */
    private $type;

    /**
     * @var GeoFeature[]
     */
    private $features;

    /**
     * @param string $type
     * @param GeoFeature[] $features
     */
    public function __construct(string $type, array $features)
    {
        $this->type = $type;
        $this->features = $features;
    }

    /**
     * Returns Type.
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     *
     * @required
     * @maps type
     * @factory \VerizonLib\Models\FeatureCollectionType::checkValue
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Features.
     *
     * @return GeoFeature[]
     */
    public function getFeatures(): array
    {
        return $this->features;
    }

    /**
     * Sets Features.
     *
     * @required
     * @maps features
     *
     * @param GeoFeature[] $features
     */
    public function setFeatures(array $features): void
    {
        $this->features = $features;
    }

    /**
     * Converts the EtxGeofence object to a human-readable string representation.
     *
     * @return string The string representation of the EtxGeofence object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify('EtxGeofence', ['type' => $this->type, 'features' => $this->features]);
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['type']     = FeatureCollectionType::checkValue($this->type);
        $json['features'] = $this->features;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
