<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Position data.
 */
class PositionData implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $time;

    /**
     * @var string|null
     */
    private $utcoffset;

    /**
     * @var string|null
     */
    private $x;

    /**
     * @var string|null
     */
    private $y;

    /**
     * @var string|null
     */
    private $radius;

    /**
     * @var bool|null
     */
    private $qos;

    /**
     * Returns Time.
     * Time location obtained.
     */
    public function getTime(): ?string
    {
        return $this->time;
    }

    /**
     * Sets Time.
     * Time location obtained.
     *
     * @maps time
     */
    public function setTime(?string $time): void
    {
        $this->time = $time;
    }

    /**
     * Returns Utcoffset.
     * UTC offset of time.
     */
    public function getUtcoffset(): ?string
    {
        return $this->utcoffset;
    }

    /**
     * Sets Utcoffset.
     * UTC offset of time.
     *
     * @maps utcoffset
     */
    public function setUtcoffset(?string $utcoffset): void
    {
        $this->utcoffset = $utcoffset;
    }

    /**
     * Returns X.
     * X coordinate of location.
     */
    public function getX(): ?string
    {
        return $this->x;
    }

    /**
     * Sets X.
     * X coordinate of location.
     *
     * @maps x
     */
    public function setX(?string $x): void
    {
        $this->x = $x;
    }

    /**
     * Returns Y.
     * Y coordinate of location.
     */
    public function getY(): ?string
    {
        return $this->y;
    }

    /**
     * Sets Y.
     * Y coordinate of location.
     *
     * @maps y
     */
    public function setY(?string $y): void
    {
        $this->y = $y;
    }

    /**
     * Returns Radius.
     * Radius of the location in meters.
     */
    public function getRadius(): ?string
    {
        return $this->radius;
    }

    /**
     * Sets Radius.
     * Radius of the location in meters.
     *
     * @maps radius
     */
    public function setRadius(?string $radius): void
    {
        $this->radius = $radius;
    }

    /**
     * Returns Qos.
     * Whether requested accurary is met or not.
     */
    public function getQos(): ?bool
    {
        return $this->qos;
    }

    /**
     * Sets Qos.
     * Whether requested accurary is met or not.
     *
     * @maps qos
     */
    public function setQos(?bool $qos): void
    {
        $this->qos = $qos;
    }

    /**
     * Converts the PositionData object to a human-readable string representation.
     *
     * @return string The string representation of the PositionData object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'PositionData',
            [
                'time' => $this->time,
                'utcoffset' => $this->utcoffset,
                'x' => $this->x,
                'y' => $this->y,
                'radius' => $this->radius,
                'qos' => $this->qos,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['time', 'utcoffset', 'x', 'y', 'radius', 'qos'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->time)) {
            $json['time']      = $this->time;
        }
        if (isset($this->utcoffset)) {
            $json['utcoffset'] = $this->utcoffset;
        }
        if (isset($this->x)) {
            $json['x']         = $this->x;
        }
        if (isset($this->y)) {
            $json['y']         = $this->y;
        }
        if (isset($this->radius)) {
            $json['radius']    = $this->radius;
        }
        if (isset($this->qos)) {
            $json['qos']       = $this->qos;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
