<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Error message.
 */
class IErrorMessage implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $errorCode;

    /**
     * @var string|null
     */
    private $errorMessage;

    /**
     * @var string|null
     */
    private $httpStatusCode;

    /**
     * @var string|null
     */
    private $detailErrorMessage;

    /**
     * Returns Error Code.
     * Error Code.
     */
    public function getErrorCode(): ?string
    {
        return $this->errorCode;
    }

    /**
     * Sets Error Code.
     * Error Code.
     *
     * @maps errorCode
     * @factory \VerizonLib\Models\ErrorResponseCode::checkValue
     */
    public function setErrorCode(?string $errorCode): void
    {
        $this->errorCode = $errorCode;
    }

    /**
     * Returns Error Message.
     * Details and additional information about the error code.
     */
    public function getErrorMessage(): ?string
    {
        return $this->errorMessage;
    }

    /**
     * Sets Error Message.
     * Details and additional information about the error code.
     *
     * @maps errorMessage
     */
    public function setErrorMessage(?string $errorMessage): void
    {
        $this->errorMessage = $errorMessage;
    }

    /**
     * Returns Http Status Code.
     * HTML error code and description.
     */
    public function getHttpStatusCode(): ?string
    {
        return $this->httpStatusCode;
    }

    /**
     * Sets Http Status Code.
     * HTML error code and description.
     *
     * @maps httpStatusCode
     * @factory \VerizonLib\Models\HttpStatusCode::checkValue
     */
    public function setHttpStatusCode(?string $httpStatusCode): void
    {
        $this->httpStatusCode = $httpStatusCode;
    }

    /**
     * Returns Detail Error Message.
     * More detail and information about the HTML error code.
     */
    public function getDetailErrorMessage(): ?string
    {
        return $this->detailErrorMessage;
    }

    /**
     * Sets Detail Error Message.
     * More detail and information about the HTML error code.
     *
     * @maps detailErrorMessage
     */
    public function setDetailErrorMessage(?string $detailErrorMessage): void
    {
        $this->detailErrorMessage = $detailErrorMessage;
    }

    /**
     * Converts the IErrorMessage object to a human-readable string representation.
     *
     * @return string The string representation of the IErrorMessage object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'IErrorMessage',
            [
                'errorCode' => $this->errorCode,
                'errorMessage' => $this->errorMessage,
                'httpStatusCode' => $this->httpStatusCode,
                'detailErrorMessage' => $this->detailErrorMessage,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['errorCode', 'errorMessage', 'httpStatusCode', 'detailErrorMessage'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->errorCode)) {
            $json['errorCode']          = ErrorResponseCode::checkValue($this->errorCode);
        }
        if (isset($this->errorMessage)) {
            $json['errorMessage']       = $this->errorMessage;
        }
        if (isset($this->httpStatusCode)) {
            $json['httpStatusCode']     = HttpStatusCode::checkValue($this->httpStatusCode);
        }
        if (isset($this->detailErrorMessage)) {
            $json['detailErrorMessage'] = $this->detailErrorMessage;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
