<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Response to return the optimal 5G Edge platforms for deployment based on a region, service profile
 * of the service that you want to deploy or user equipment.
 */
class ListMecPlatformsResult implements \JsonSerializable
{
    /**
     * @var MecPlatformResource[]|null
     */
    private $mecPlatforms;

    /**
     * Returns Mec Platforms.
     * A list of optimal MEC Platforms where you can register your deployed application.
     *
     * @return MecPlatformResource[]|null
     */
    public function getMecPlatforms(): ?array
    {
        return $this->mecPlatforms;
    }

    /**
     * Sets Mec Platforms.
     * A list of optimal MEC Platforms where you can register your deployed application.
     *
     * @maps MECPlatforms
     *
     * @param MecPlatformResource[]|null $mecPlatforms
     */
    public function setMecPlatforms(?array $mecPlatforms): void
    {
        $this->mecPlatforms = $mecPlatforms;
    }

    /**
     * Converts the ListMecPlatformsResult object to a human-readable string representation.
     *
     * @return string The string representation of the ListMecPlatformsResult object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify('ListMecPlatformsResult', ['mecPlatforms' => $this->mecPlatforms]);
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->mecPlatforms)) {
            $json['MECPlatforms'] = $this->mecPlatforms;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
