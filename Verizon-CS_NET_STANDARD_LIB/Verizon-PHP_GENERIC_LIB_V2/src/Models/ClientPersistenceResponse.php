<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Response for /v2/clients/registration. It provides a generated device ID and the certificates needed
 * to connect the ETX Message Exchange.
 */
class ClientPersistenceResponse implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $deviceId;

    /**
     * @var Certificate|null
     */
    private $certificate;

    /**
     * @var string|null
     */
    private $clientType;

    /**
     * @var string|null
     */
    private $clientSubtype;

    /**
     * @var string|null
     */
    private $vendorId;

    /**
     * Returns Device Id.
     * The generated ID (UUID v4) for the device. It can be used as:
     * - the MQTT Client ID when connecting to the Message Exchange system
     * - a parameter when asking for the connection endpoint
     * - a parameter when finishing the device registration
     * - a parameter when unregistering the device
     */
    public function getDeviceId(): ?string
    {
        return $this->deviceId;
    }

    /**
     * Sets Device Id.
     * The generated ID (UUID v4) for the device. It can be used as:
     * - the MQTT Client ID when connecting to the Message Exchange system
     * - a parameter when asking for the connection endpoint
     * - a parameter when finishing the device registration
     * - a parameter when unregistering the device
     *
     * @maps DeviceID
     */
    public function setDeviceId(?string $deviceId): void
    {
        $this->deviceId = $deviceId;
    }

    /**
     * Returns Certificate.
     * Structure for the credentials required to connect to the ETX MQTT Message Exchange.
     */
    public function getCertificate(): ?Certificate
    {
        return $this->certificate;
    }

    /**
     * Sets Certificate.
     * Structure for the credentials required to connect to the ETX MQTT Message Exchange.
     *
     * @maps Certificate
     */
    public function setCertificate(?Certificate $certificate): void
    {
        $this->certificate = $certificate;
    }

    /**
     * Returns Client Type.
     * The type of the client that is to be registered. This is one of the major traffic participant groups
     * considered in V2X communication. The system uses this value to define which topics the client will
     * be able to publish and subscribe to.
     *
     * Values:
     * - **Vehicle** - Vehicle with an enclosure around the passengers. (Subtypes: PassengerCar, Truck, Bus,
     * EmergencyVehicle, SchoolBus, MaintenanceVehicle)
     * - **VulnerableRoadUser** - Traffic participants without a protecting enclosure. (Subtypes:
     * Motorcycle, Bicycle, Pedestrian, Scooter)
     * - **TrafficLightController** - A Traffic light controller system. (Subtypes: NA)
     * - **InfrastructureSensor** - Sensors that are deployed in the infrastructure. (Subtypes:
     * RoadSideUnit, Camera, Lidar, Radar, InductiveLoop, MagneticSensor)
     * - **OnboardSensor** - Sensors that are onboard on a vehicle(Subtypes: Camera, Lidar, Radar)
     * - **Software** - A software system or application. (Subtypes: Platform, Application, NA)
     */
    public function getClientType(): ?string
    {
        return $this->clientType;
    }

    /**
     * Sets Client Type.
     * The type of the client that is to be registered. This is one of the major traffic participant groups
     * considered in V2X communication. The system uses this value to define which topics the client will
     * be able to publish and subscribe to.
     *
     * Values:
     * - **Vehicle** - Vehicle with an enclosure around the passengers. (Subtypes: PassengerCar, Truck, Bus,
     * EmergencyVehicle, SchoolBus, MaintenanceVehicle)
     * - **VulnerableRoadUser** - Traffic participants without a protecting enclosure. (Subtypes:
     * Motorcycle, Bicycle, Pedestrian, Scooter)
     * - **TrafficLightController** - A Traffic light controller system. (Subtypes: NA)
     * - **InfrastructureSensor** - Sensors that are deployed in the infrastructure. (Subtypes:
     * RoadSideUnit, Camera, Lidar, Radar, InductiveLoop, MagneticSensor)
     * - **OnboardSensor** - Sensors that are onboard on a vehicle(Subtypes: Camera, Lidar, Radar)
     * - **Software** - A software system or application. (Subtypes: Platform, Application, NA)
     *
     * @maps ClientType
     * @factory \VerizonLib\Models\EtxClientType::checkValue
     */
    public function setClientType(?string $clientType): void
    {
        $this->clientType = $clientType;
    }

    /**
     * Returns Client Subtype.
     * The subtype or subgroup of the client type. This further specifies the client type. For example it
     * will specify if the client is a passenger car or a truck. See the ClientType description for the
     * supported Subtypes for each client type.
     */
    public function getClientSubtype(): ?string
    {
        return $this->clientSubtype;
    }

    /**
     * Sets Client Subtype.
     * The subtype or subgroup of the client type. This further specifies the client type. For example it
     * will specify if the client is a passenger car or a truck. See the ClientType description for the
     * supported Subtypes for each client type.
     *
     * @maps ClientSubtype
     * @factory \VerizonLib\Models\ClientSubtype::checkValue
     */
    public function setClientSubtype(?string $clientSubtype): void
    {
        $this->clientSubtype = $clientSubtype;
    }

    /**
     * Returns Vendor Id.
     * The ID the vendor wants its devices to be registered under. E.g. Verizon, GM, Ford, etc.
     */
    public function getVendorId(): ?string
    {
        return $this->vendorId;
    }

    /**
     * Sets Vendor Id.
     * The ID the vendor wants its devices to be registered under. E.g. Verizon, GM, Ford, etc.
     *
     * @maps VendorID
     */
    public function setVendorId(?string $vendorId): void
    {
        $this->vendorId = $vendorId;
    }

    /**
     * Converts the ClientPersistenceResponse object to a human-readable string representation.
     *
     * @return string The string representation of the ClientPersistenceResponse object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'ClientPersistenceResponse',
            [
                'deviceId' => $this->deviceId,
                'certificate' => $this->certificate,
                'clientType' => $this->clientType,
                'clientSubtype' => $this->clientSubtype,
                'vendorId' => $this->vendorId
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->deviceId)) {
            $json['DeviceID']      = $this->deviceId;
        }
        if (isset($this->certificate)) {
            $json['Certificate']   = $this->certificate;
        }
        if (isset($this->clientType)) {
            $json['ClientType']    = EtxClientType::checkValue($this->clientType);
        }
        if (isset($this->clientSubtype)) {
            $json['ClientSubtype'] = ClientSubtype::checkValue($this->clientSubtype);
        }
        if (isset($this->vendorId)) {
            $json['VendorID']      = $this->vendorId;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
