<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Information about the carrier.
 */
class CarrierInformation implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $carrierName;

    /**
     * @var string|null
     */
    private $servicePlan;

    /**
     * @var string|null
     */
    private $state;

    /**
     * Returns Carrier Name.
     * The carrier that will perform the activation. This parameter is only required if you have more than
     * one carrier.
     */
    public function getCarrierName(): ?string
    {
        return $this->carrierName;
    }

    /**
     * Sets Carrier Name.
     * The carrier that will perform the activation. This parameter is only required if you have more than
     * one carrier.
     *
     * @maps carrierName
     */
    public function setCarrierName(?string $carrierName): void
    {
        $this->carrierName = $carrierName;
    }

    /**
     * Returns Service Plan.
     * The service plan code that is assigned to the device.
     */
    public function getServicePlan(): ?string
    {
        return $this->servicePlan;
    }

    /**
     * Sets Service Plan.
     * The service plan code that is assigned to the device.
     *
     * @maps servicePlan
     */
    public function setServicePlan(?string $servicePlan): void
    {
        $this->servicePlan = $servicePlan;
    }

    /**
     * Returns State.
     * The device state. Valid values include: Activate, Suspend, Deactive, Pre-active.
     */
    public function getState(): ?string
    {
        return $this->state;
    }

    /**
     * Sets State.
     * The device state. Valid values include: Activate, Suspend, Deactive, Pre-active.
     *
     * @maps state
     */
    public function setState(?string $state): void
    {
        $this->state = $state;
    }

    /**
     * Converts the CarrierInformation object to a human-readable string representation.
     *
     * @return string The string representation of the CarrierInformation object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'CarrierInformation',
            [
                'carrierName' => $this->carrierName,
                'servicePlan' => $this->servicePlan,
                'state' => $this->state,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['carrierName', 'servicePlan', 'state'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->carrierName)) {
            $json['carrierName'] = $this->carrierName;
        }
        if (isset($this->servicePlan)) {
            $json['servicePlan'] = $this->servicePlan;
        }
        if (isset($this->state)) {
            $json['state']       = $this->state;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
