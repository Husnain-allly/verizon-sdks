<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * IP pool that is available to the account.
 */
class IpPool implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $poolName;

    /**
     * @var string|null
     */
    private $poolType;

    /**
     * @var bool|null
     */
    private $isDefaultPool;

    /**
     * Returns Pool Name.
     * The name of the IP pool.
     */
    public function getPoolName(): ?string
    {
        return $this->poolName;
    }

    /**
     * Sets Pool Name.
     * The name of the IP pool.
     *
     * @maps poolName
     */
    public function setPoolName(?string $poolName): void
    {
        $this->poolName = $poolName;
    }

    /**
     * Returns Pool Type.
     * The type of IP pool, such as “Static IP” or “Dynamic IP.”
     */
    public function getPoolType(): ?string
    {
        return $this->poolType;
    }

    /**
     * Sets Pool Type.
     * The type of IP pool, such as “Static IP” or “Dynamic IP.”
     *
     * @maps poolType
     */
    public function setPoolType(?string $poolType): void
    {
        $this->poolType = $poolType;
    }

    /**
     * Returns Is Default Pool.
     * True if this is the default IP pool for the account.
     */
    public function getIsDefaultPool(): ?bool
    {
        return $this->isDefaultPool;
    }

    /**
     * Sets Is Default Pool.
     * True if this is the default IP pool for the account.
     *
     * @maps isDefaultPool
     */
    public function setIsDefaultPool(?bool $isDefaultPool): void
    {
        $this->isDefaultPool = $isDefaultPool;
    }

    /**
     * Converts the IpPool object to a human-readable string representation.
     *
     * @return string The string representation of the IpPool object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'IpPool',
            [
                'poolName' => $this->poolName,
                'poolType' => $this->poolType,
                'isDefaultPool' => $this->isDefaultPool,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['poolName', 'poolType', 'isDefaultPool'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->poolName)) {
            $json['poolName']      = $this->poolName;
        }
        if (isset($this->poolType)) {
            $json['poolType']      = $this->poolType;
        }
        if (isset($this->isDefaultPool)) {
            $json['isDefaultPool'] = $this->isDefaultPool;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
