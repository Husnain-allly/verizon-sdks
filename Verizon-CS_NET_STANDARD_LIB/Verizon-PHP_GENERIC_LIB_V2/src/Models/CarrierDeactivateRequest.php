<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Request to deactivate a carrier.
 */
class CarrierDeactivateRequest implements \JsonSerializable
{
    /**
     * @var string
     */
    private $accountName;

    /**
     * @var AccountDeviceList[]
     */
    private $devices;

    /**
     * @var string
     */
    private $reasonCode;

    /**
     * @var CustomFields[]|null
     */
    private $customFields;

    /**
     * @var bool|null
     */
    private $etfWaiver;

    /**
     * @var string|null
     */
    private $groupName;

    /**
     * @var string|null
     */
    private $servicePlan;

    /**
     * @var bool|null
     */
    private $deleteAfterDeactivation;

    /**
     * @param string $accountName
     * @param AccountDeviceList[] $devices
     * @param string $reasonCode
     */
    public function __construct(string $accountName, array $devices, string $reasonCode)
    {
        $this->accountName = $accountName;
        $this->devices = $devices;
        $this->reasonCode = $reasonCode;
    }

    /**
     * Returns Account Name.
     * The name of a billing account.
     */
    public function getAccountName(): string
    {
        return $this->accountName;
    }

    /**
     * Sets Account Name.
     * The name of a billing account.
     *
     * @required
     * @maps accountName
     */
    public function setAccountName(string $accountName): void
    {
        $this->accountName = $accountName;
    }

    /**
     * Returns Devices.
     * The devices for which you want to deactivate service, specified by device identifier.
     *
     * @return AccountDeviceList[]
     */
    public function getDevices(): array
    {
        return $this->devices;
    }

    /**
     * Sets Devices.
     * The devices for which you want to deactivate service, specified by device identifier.
     *
     * @required
     * @maps devices
     *
     * @param AccountDeviceList[] $devices
     */
    public function setDevices(array $devices): void
    {
        $this->devices = $devices;
    }

    /**
     * Returns Reason Code.
     * Code identifying the reason for the deactivation. Currently the only valid reason code is “FF”,
     * which corresponds to General Admin/Maintenance.
     */
    public function getReasonCode(): string
    {
        return $this->reasonCode;
    }

    /**
     * Sets Reason Code.
     * Code identifying the reason for the deactivation. Currently the only valid reason code is “FF”,
     * which corresponds to General Admin/Maintenance.
     *
     * @required
     * @maps reasonCode
     */
    public function setReasonCode(string $reasonCode): void
    {
        $this->reasonCode = $reasonCode;
    }

    /**
     * Returns Custom Fields.
     * Custom field names and values, if you want to only include devices that have matching values.
     *
     * @return CustomFields[]|null
     */
    public function getCustomFields(): ?array
    {
        return $this->customFields;
    }

    /**
     * Sets Custom Fields.
     * Custom field names and values, if you want to only include devices that have matching values.
     *
     * @maps customFields
     *
     * @param CustomFields[]|null $customFields
     */
    public function setCustomFields(?array $customFields): void
    {
        $this->customFields = $customFields;
    }

    /**
     * Returns Etf Waiver.
     * Fees may be assessed for deactivating Verizon Wireless devices, depending on the account contract.
     * The etfWaiver parameter waives the Early Termination Fee (ETF), if applicable.
     */
    public function getEtfWaiver(): ?bool
    {
        return $this->etfWaiver;
    }

    /**
     * Sets Etf Waiver.
     * Fees may be assessed for deactivating Verizon Wireless devices, depending on the account contract.
     * The etfWaiver parameter waives the Early Termination Fee (ETF), if applicable.
     *
     * @maps etfWaiver
     */
    public function setEtfWaiver(?bool $etfWaiver): void
    {
        $this->etfWaiver = $etfWaiver;
    }

    /**
     * Returns Group Name.
     * The name of a device group, if you want to deactivate all devices in that group.
     */
    public function getGroupName(): ?string
    {
        return $this->groupName;
    }

    /**
     * Sets Group Name.
     * The name of a device group, if you want to deactivate all devices in that group.
     *
     * @maps groupName
     */
    public function setGroupName(?string $groupName): void
    {
        $this->groupName = $groupName;
    }

    /**
     * Returns Service Plan.
     * The name of a service plan, if you want to only include devices that have that service plan.
     */
    public function getServicePlan(): ?string
    {
        return $this->servicePlan;
    }

    /**
     * Sets Service Plan.
     * The name of a service plan, if you want to only include devices that have that service plan.
     *
     * @maps servicePlan
     */
    public function setServicePlan(?string $servicePlan): void
    {
        $this->servicePlan = $servicePlan;
    }

    /**
     * Returns Delete After Deactivation.
     */
    public function getDeleteAfterDeactivation(): ?bool
    {
        return $this->deleteAfterDeactivation;
    }

    /**
     * Sets Delete After Deactivation.
     *
     * @maps deleteAfterDeactivation
     */
    public function setDeleteAfterDeactivation(?bool $deleteAfterDeactivation): void
    {
        $this->deleteAfterDeactivation = $deleteAfterDeactivation;
    }

    /**
     * Converts the CarrierDeactivateRequest object to a human-readable string representation.
     *
     * @return string The string representation of the CarrierDeactivateRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'CarrierDeactivateRequest',
            [
                'accountName' => $this->accountName,
                'devices' => $this->devices,
                'reasonCode' => $this->reasonCode,
                'customFields' => $this->customFields,
                'etfWaiver' => $this->etfWaiver,
                'groupName' => $this->groupName,
                'servicePlan' => $this->servicePlan,
                'deleteAfterDeactivation' => $this->deleteAfterDeactivation,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = [
        'accountName',
        'devices',
        'reasonCode',
        'customFields',
        'etfWaiver',
        'groupName',
        'servicePlan',
        'deleteAfterDeactivation'
    ];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['accountName']                 = $this->accountName;
        $json['devices']                     = $this->devices;
        $json['reasonCode']                  = $this->reasonCode;
        if (isset($this->customFields)) {
            $json['customFields']            = $this->customFields;
        }
        if (isset($this->etfWaiver)) {
            $json['etfWaiver']               = $this->etfWaiver;
        }
        if (isset($this->groupName)) {
            $json['groupName']               = $this->groupName;
        }
        if (isset($this->servicePlan)) {
            $json['servicePlan']             = $this->servicePlan;
        }
        if (isset($this->deleteAfterDeactivation)) {
            $json['deleteAfterDeactivation'] = $this->deleteAfterDeactivation;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
