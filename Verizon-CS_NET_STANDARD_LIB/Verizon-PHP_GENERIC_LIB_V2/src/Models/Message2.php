<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

class Message2 implements \JsonSerializable
{
    /**
     * @var bool
     */
    private $isPrivate;

    /**
     * @var string[]
     */
    private $roadUserType;

    /**
     * @var string[]
     */
    private $triggerConditions;

    /**
     * @var array<SpeedItem|HeadingItem>|null
     */
    private $limits;

    /**
     * @var string[]|null
     */
    private $distributionType;

    /**
     * @var DistributionSchedule|null
     */
    private $distributionSchedule;

    /**
     * @var SaeInfo
     */
    private $saeInfo;

    /**
     * @param bool $isPrivate
     * @param string[] $roadUserType
     * @param string[] $triggerConditions
     * @param SaeInfo $saeInfo
     */
    public function __construct(bool $isPrivate, array $roadUserType, array $triggerConditions, SaeInfo $saeInfo)
    {
        $this->isPrivate = $isPrivate;
        $this->roadUserType = $roadUserType;
        $this->triggerConditions = $triggerConditions;
        $this->saeInfo = $saeInfo;
    }

    /**
     * Returns Is Private.
     * Defines whether the message is private or public.
     * Private messages are published under the Vendor ID defined in the configuration and only visible to
     * devices of selected vendors.
     * Public messages are published under the Public vendor and are visible to all the users.
     */
    public function getIsPrivate(): bool
    {
        return $this->isPrivate;
    }

    /**
     * Sets Is Private.
     * Defines whether the message is private or public.
     * Private messages are published under the Vendor ID defined in the configuration and only visible to
     * devices of selected vendors.
     * Public messages are published under the Public vendor and are visible to all the users.
     *
     * @required
     * @maps isPrivate
     */
    public function setIsPrivate(bool $isPrivate): void
    {
        $this->isPrivate = $isPrivate;
    }

    /**
     * Returns Road User Type.
     * Type of the Road User.
     *
     * @return string[]
     */
    public function getRoadUserType(): array
    {
        return $this->roadUserType;
    }

    /**
     * Sets Road User Type.
     * Type of the Road User.
     *
     * @required
     * @maps roadUserType
     * @factory \VerizonLib\Models\RoadUserTypes::checkValue
     *
     * @param string[] $roadUserType
     */
    public function setRoadUserType(array $roadUserType): void
    {
        $this->roadUserType = $roadUserType;
    }

    /**
     * Returns Trigger Conditions.
     * Trigger conditions that define on which road user action the message will be sent. If multiple
     * Trigger Conditions are defined any of them will trigger the message.
     *
     * @return string[]
     */
    public function getTriggerConditions(): array
    {
        return $this->triggerConditions;
    }

    /**
     * Sets Trigger Conditions.
     * Trigger conditions that define on which road user action the message will be sent. If multiple
     * Trigger Conditions are defined any of them will trigger the message.
     *
     * @required
     * @maps triggerConditions
     * @factory \VerizonLib\Models\TriggerCondition::checkValue
     *
     * @param string[] $triggerConditions
     */
    public function setTriggerConditions(array $triggerConditions): void
    {
        $this->triggerConditions = $triggerConditions;
    }

    /**
     * Returns Limits.
     * List of limitations. These limitations can be used for making the trigger condition more precise by
     * defining speed and motion direction requirements to be met before the messages are sent out.
     *
     * @return array<SpeedItem|HeadingItem>|null
     */
    public function getLimits(): ?array
    {
        return $this->limits;
    }

    /**
     * Sets Limits.
     * List of limitations. These limitations can be used for making the trigger condition more precise by
     * defining speed and motion direction requirements to be met before the messages are sent out.
     *
     * @maps limits
     * @mapsBy anyOf(oneOf(SpeedItem,HeadingItem)[],null)
     *
     * @param array<SpeedItem|HeadingItem>|null $limits
     */
    public function setLimits(?array $limits): void
    {
        $this->limits = $limits;
    }

    /**
     * Returns Distribution Type.
     * Type of the distribution.
     *
     * @return string[]|null
     */
    public function getDistributionType(): ?array
    {
        return $this->distributionType;
    }

    /**
     * Sets Distribution Type.
     * Type of the distribution.
     *
     * @maps distributionType
     * @factory \VerizonLib\Models\DistributionTypes::checkValue
     *
     * @param string[]|null $distributionType
     */
    public function setDistributionType(?array $distributionType): void
    {
        $this->distributionType = $distributionType;
    }

    /**
     * Returns Distribution Schedule.
     * The distribution schedule parameters for broadcast messages.
     */
    public function getDistributionSchedule(): ?DistributionSchedule
    {
        return $this->distributionSchedule;
    }

    /**
     * Sets Distribution Schedule.
     * The distribution schedule parameters for broadcast messages.
     *
     * @maps distributionSchedule
     */
    public function setDistributionSchedule(?DistributionSchedule $distributionSchedule): void
    {
        $this->distributionSchedule = $distributionSchedule;
    }

    /**
     * Returns Sae Info.
     */
    public function getSaeInfo(): SaeInfo
    {
        return $this->saeInfo;
    }

    /**
     * Sets Sae Info.
     *
     * @required
     * @maps saeInfo
     */
    public function setSaeInfo(SaeInfo $saeInfo): void
    {
        $this->saeInfo = $saeInfo;
    }

    /**
     * Converts the Message2 object to a human-readable string representation.
     *
     * @return string The string representation of the Message2 object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'Message2',
            [
                'isPrivate' => $this->isPrivate,
                'roadUserType' => $this->roadUserType,
                'triggerConditions' => $this->triggerConditions,
                'limits' => $this->limits,
                'distributionType' => $this->distributionType,
                'distributionSchedule' => $this->distributionSchedule,
                'saeInfo' => $this->saeInfo,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = [
        'isPrivate',
        'roadUserType',
        'triggerConditions',
        'limits',
        'distributionType',
        'distributionSchedule',
        'saeInfo'
    ];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['isPrivate']                = $this->isPrivate;
        $json['roadUserType']             = RoadUserTypes::checkValue($this->roadUserType);
        $json['triggerConditions']        = TriggerCondition::checkValue($this->triggerConditions);
        if (isset($this->limits)) {
            $json['limits']               =
                ApiHelper::getJsonHelper()->verifyTypes(
                    $this->limits,
                    'anyOf(oneOf(SpeedItem,HeadingItem)[],null)'
                );
        }
        if (isset($this->distributionType)) {
            $json['distributionType']     = DistributionTypes::checkValue($this->distributionType);
        }
        if (isset($this->distributionSchedule)) {
            $json['distributionSchedule'] = $this->distributionSchedule;
        }
        $json['saeInfo']                  = $this->saeInfo;
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
