<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib;

use Core\ClientBuilder;
use Core\Utils\CoreHelper;
use Unirest\Configuration;
use Unirest\HttpClient;
use VerizonLib\Apis\AccountDevicesApi;
use VerizonLib\Apis\AccountRequestsApi;
use VerizonLib\Apis\AccountsApi;
use VerizonLib\Apis\AccountSubscriptionsApi;
use VerizonLib\Apis\AnomalySettingsApi;
use VerizonLib\Apis\AnomalyTriggersApi;
use VerizonLib\Apis\AnomalyTriggersV2Api;
use VerizonLib\Apis\AppConfigServiceApi;
use VerizonLib\Apis\BillingApi;
use VerizonLib\Apis\CampaignsV2Api;
use VerizonLib\Apis\CampaignsV3Api;
use VerizonLib\Apis\ClientLoggingApi;
use VerizonLib\Apis\CloudConnectorDevicesApi;
use VerizonLib\Apis\CloudConnectorSubscriptionsApi;
use VerizonLib\Apis\ConfigurationFilesApi;
use VerizonLib\Apis\ConnectivityCallbacksApi;
use VerizonLib\Apis\CreatePricePlanTriggersApi;
use VerizonLib\Apis\DeviceActionsApi;
use VerizonLib\Apis\DeviceDiagnosticsApi;
use VerizonLib\Apis\DeviceGroupsApi;
use VerizonLib\Apis\DeviceLocationCallbacksApi;
use VerizonLib\Apis\DeviceManagementApi;
use VerizonLib\Apis\DeviceMonitoringApi;
use VerizonLib\Apis\DeviceProfileManagementApi;
use VerizonLib\Apis\DeviceReportsApi;
use VerizonLib\Apis\DeviceServiceManagementApi;
use VerizonLib\Apis\DevicesLocationsApi;
use VerizonLib\Apis\DevicesLocationSubscriptionsApi;
use VerizonLib\Apis\DeviceSmsMessagingApi;
use VerizonLib\Apis\DiagnosticsCallbacksApi;
use VerizonLib\Apis\DiagnosticsFactoryResetApi;
use VerizonLib\Apis\DiagnosticsHistoryApi;
use VerizonLib\Apis\DiagnosticsObservationsApi;
use VerizonLib\Apis\DiagnosticsSettingsApi;
use VerizonLib\Apis\DiagnosticsSubscriptionsApi;
use VerizonLib\Apis\EuiccDeviceProfileManagementApi;
use VerizonLib\Apis\ExclusionsApi;
use VerizonLib\Apis\FirmwareV1Api;
use VerizonLib\Apis\FirmwareV3Api;
use VerizonLib\Apis\GlobalReportingApi;
use VerizonLib\Apis\HyperPreciseLocationCallbacksApi;
use VerizonLib\Apis\M5GBiDeviceActionsApi;
use VerizonLib\Apis\M5GEdgePlatformsApi;
use VerizonLib\Apis\ManagingEsimProfilesApi;
use VerizonLib\Apis\MapDataManagerApi;
use VerizonLib\Apis\OauthAuthorizationApi;
use VerizonLib\Apis\PerformanceMetricsApi;
use VerizonLib\Apis\PromotionPeriodInformationApi;
use VerizonLib\Apis\PwnApi;
use VerizonLib\Apis\RegistrationApi;
use VerizonLib\Apis\RetrieveRatePlanListApi;
use VerizonLib\Apis\RetrieveTheTriggersApi;
use VerizonLib\Apis\SensorInsightsDeviceProfileApi;
use VerizonLib\Apis\SensorInsightsDevicesApi;
use VerizonLib\Apis\SensorInsightsGatewaysApi;
use VerizonLib\Apis\SensorInsightsHealthScoreApi;
use VerizonLib\Apis\SensorInsightsNotificationGroupsApi;
use VerizonLib\Apis\SensorInsightsRulesApi;
use VerizonLib\Apis\SensorInsightsSensorsApi;
use VerizonLib\Apis\SensorInsightsSmartAlertMetricsApi;
use VerizonLib\Apis\SensorInsightsSmartAlertsApi;
use VerizonLib\Apis\SensorInsightsUsersApi;
use VerizonLib\Apis\ServerLoggingApi;
use VerizonLib\Apis\ServiceEndpointsApi;
use VerizonLib\Apis\ServicePlansApi;
use VerizonLib\Apis\ServiceProfilesApi;
use VerizonLib\Apis\SessionManagementApi;
use VerizonLib\Apis\SimActionsApi;
use VerizonLib\Apis\SimSecureForIoTLicensesApi;
use VerizonLib\Apis\SmsApi;
use VerizonLib\Apis\SoftwareManagementCallbacksV1Api;
use VerizonLib\Apis\SoftwareManagementCallbacksV2Api;
use VerizonLib\Apis\SoftwareManagementCallbacksV3Api;
use VerizonLib\Apis\SoftwareManagementLicensesV1Api;
use VerizonLib\Apis\SoftwareManagementLicensesV2Api;
use VerizonLib\Apis\SoftwareManagementLicensesV3Api;
use VerizonLib\Apis\SoftwareManagementReportsV1Api;
use VerizonLib\Apis\SoftwareManagementReportsV2Api;
use VerizonLib\Apis\SoftwareManagementReportsV3Api;
use VerizonLib\Apis\SoftwareManagementSubscriptionsV1Api;
use VerizonLib\Apis\SoftwareManagementSubscriptionsV2Api;
use VerizonLib\Apis\SoftwareManagementSubscriptionsV3Api;
use VerizonLib\Apis\TargetsApi;
use VerizonLib\Apis\ThingSpaceQualityOfServiceApiActionsApi;
use VerizonLib\Apis\UpdatePricePlanTriggersApi;
use VerizonLib\Apis\UpdateTriggersApi;
use VerizonLib\Apis\UsageTriggerManagementApi;
use VerizonLib\Apis\WirelessNetworkPerformanceApi;
use VerizonLib\Authentication\SessionTokenCredentials;
use VerizonLib\Authentication\SessionTokenCredentialsBuilder;
use VerizonLib\Authentication\SessionTokenManager;
use VerizonLib\Authentication\ThingspaceOauth1Credentials;
use VerizonLib\Authentication\ThingspaceOauth1CredentialsBuilder;
use VerizonLib\Authentication\ThingspaceOauth1Manager;
use VerizonLib\Authentication\ThingspaceOauthCredentials;
use VerizonLib\Authentication\ThingspaceOauthCredentialsBuilder;
use VerizonLib\Authentication\ThingspaceOauthManager;
use VerizonLib\Authentication\VzM2MTokenCredentials;
use VerizonLib\Authentication\VzM2MTokenCredentialsBuilder;
use VerizonLib\Authentication\VzM2MTokenManager;
use VerizonLib\Logging\LoggingConfigurationBuilder;
use VerizonLib\Logging\RequestLoggingConfigurationBuilder;
use VerizonLib\Logging\ResponseLoggingConfigurationBuilder;
use VerizonLib\Proxy\ProxyConfigurationBuilder;
use VerizonLib\Utils\CompatibilityConverter;

class VerizonClient implements ConfigurationInterface
{
    private $m5GEdgePlatforms;

    private $serviceEndpoints;

    private $serviceProfiles;

    private $deviceManagement;

    private $accounts;

    private $deviceGroups;

    private $sms;

    private $sessionManagement;

    private $connectivityCallbacks;

    private $accountRequests;

    private $servicePlans;

    private $deviceDiagnostics;

    private $deviceMonitoring;

    private $deviceProfileManagement;

    private $euiccDeviceProfileManagement;

    private $devicesLocations;

    private $exclusions;

    private $devicesLocationSubscriptions;

    private $deviceLocationCallbacks;

    private $usageTriggerManagement;

    private $billing;

    private $softwareManagementSubscriptionsV1;

    private $softwareManagementLicensesV1;

    private $firmwareV1;

    private $softwareManagementCallbacksV1;

    private $softwareManagementReportsV1;

    private $softwareManagementSubscriptionsV2;

    private $softwareManagementLicensesV2;

    private $campaignsV2;

    private $softwareManagementCallbacksV2;

    private $softwareManagementReportsV2;

    private $clientLogging;

    private $serverLogging;

    private $configurationFiles;

    private $softwareManagementSubscriptionsV3;

    private $softwareManagementLicensesV3;

    private $campaignsV3;

    private $softwareManagementReportsV3;

    private $firmwareV3;

    private $accountDevices;

    private $softwareManagementCallbacksV3;

    private $simSecureForIoTLicenses;

    private $accountSubscriptions;

    private $performanceMetrics;

    private $diagnosticsSubscriptions;

    private $diagnosticsObservations;

    private $diagnosticsHistory;

    private $diagnosticsSettings;

    private $diagnosticsCallbacks;

    private $diagnosticsFactoryReset;

    private $targets;

    private $cloudConnectorSubscriptions;

    private $cloudConnectorDevices;

    private $deviceServiceManagement;

    private $deviceReports;

    private $hyperPreciseLocationCallbacks;

    private $anomalySettings;

    private $anomalyTriggers;

    private $anomalyTriggersV2;

    private $wirelessNetworkPerformance;

    private $managingEsimProfiles;

    private $deviceSmsMessaging;

    private $deviceActions;

    private $thingSpaceQualityOfServiceApiActions;

    private $pwn;

    private $promotionPeriodInformation;

    private $retrieveTheTriggers;

    private $updateTriggers;

    private $simActions;

    private $globalReporting;

    private $retrieveRatePlanList;

    private $createPricePlanTriggers;

    private $updatePricePlanTriggers;

    private $m5GBiDeviceActions;

    private $sensorInsightsSensors;

    private $sensorInsightsDevices;

    private $sensorInsightsGateways;

    private $sensorInsightsSmartAlerts;

    private $sensorInsightsRules;

    private $sensorInsightsHealthScore;

    private $sensorInsightsNotificationGroups;

    private $sensorInsightsUsers;

    private $sensorInsightsDeviceProfile;

    private $sensorInsightsSmartAlertMetrics;

    private $appConfigService;

    private $registration;

    private $mapDataManager;

    private $oauthAuthorization;

    private $thingspaceOauthManager;

    private $vzM2MTokenManager;

    private $thingspaceOauth1Manager;

    private $sessionTokenManager;

    private $loggingConfigurationBuilder;

    private $proxyConfiguration;

    private $config;

    private $client;

    /**
     * @see VerizonClientBuilder::init()
     * @see VerizonClientBuilder::build()
     *
     * @param array $config
     */
    public function __construct(array $config = [])
    {
        $this->config = array_merge(ConfigurationDefaults::_ALL, CoreHelper::clone($config));
        $this->thingspaceOauthManager = new ThingspaceOauthManager($this->config);
        $this->vzM2MTokenManager = new VzM2MTokenManager($this->config);
        $this->thingspaceOauth1Manager = new ThingspaceOauth1Manager($this->config);
        $this->sessionTokenManager = new SessionTokenManager($this->config);
        $this->validateConfig();
        $loggingConfiguration = null;
        if ($this->config['loggingConfiguration'] instanceof LoggingConfigurationBuilder) {
            $this->loggingConfigurationBuilder = $this->config['loggingConfiguration'];
            $loggingConfiguration = $this->loggingConfigurationBuilder->build();
        }
        $this->proxyConfiguration = $this->config['proxyConfiguration'] ?? ConfigurationDefaults::PROXY_CONFIGURATION;
        $this->client = ClientBuilder::init(
            new HttpClient(Configuration::init($this)->proxyConfiguration($this->proxyConfiguration))
        )
            ->converter(new CompatibilityConverter())
            ->jsonHelper(ApiHelper::getJsonHelper())
            ->apiCallback($this->config['httpCallback'] ?? null)
            ->userAgent('PHP-SDK/1.3.0 [OS: {os-info}, Engine: {engine}/{engine-version}]')
            ->serverUrls(self::ENVIRONMENT_MAP[$this->getEnvironment()], Server::EDGE_DISCOVERY)
            ->authManagers([
                'thingspace_oauth' => $this->thingspaceOauthManager,
                'VZ-M2M-Token' => $this->vzM2MTokenManager,
                'thingspace_oauth1' => $this->thingspaceOauth1Manager,
                'SessionToken' => $this->sessionTokenManager
            ])
            ->loggingConfiguration($loggingConfiguration)
            ->build();
        $this->thingspaceOauthManager->setClient($this->client);
        $this->thingspaceOauth1Manager->setClient($this->client);
    }

    /**
     * Create a builder with the current client's configurations.
     *
     * @return VerizonClientBuilder VerizonClientBuilder instance
     */
    public function toBuilder(): VerizonClientBuilder
    {
        $builder = VerizonClientBuilder::init()
            ->timeout($this->getTimeout())
            ->enableRetries($this->shouldEnableRetries())
            ->numberOfRetries($this->getNumberOfRetries())
            ->retryInterval($this->getRetryInterval())
            ->backOffFactor($this->getBackOffFactor())
            ->maximumRetryWaitTime($this->getMaximumRetryWaitTime())
            ->retryOnTimeout($this->shouldRetryOnTimeout())
            ->httpStatusCodesToRetry($this->getHttpStatusCodesToRetry())
            ->httpMethodsToRetry($this->getHttpMethodsToRetry())
            ->environment($this->getEnvironment())
            ->httpCallback($this->config['httpCallback'] ?? null)
            ->proxyConfiguration($this->getProxyConfigurationBuilder());

        $thingspaceOauth = $this->getThingspaceOauthCredentialsBuilder();
        if ($thingspaceOauth != null) {
            $builder->thingspaceOauthCredentials($thingspaceOauth);
        }

        $vzM2MToken = $this->getVzM2MTokenCredentialsBuilder();
        if ($vzM2MToken != null) {
            $builder->vzM2MTokenCredentials($vzM2MToken);
        }

        $thingspaceOauth1 = $this->getThingspaceOauth1CredentialsBuilder();
        if ($thingspaceOauth1 != null) {
            $builder->thingspaceOauth1Credentials($thingspaceOauth1);
        }

        $sessionToken = $this->getSessionTokenCredentialsBuilder();
        if ($sessionToken != null) {
            $builder->sessionTokenCredentials($sessionToken);
        }
        $loggingConfigurationBuilder = $this->getLoggingConfigurationBuilder();
        if ($loggingConfigurationBuilder != null) {
            $builder->loggingConfiguration($loggingConfigurationBuilder);
        }
        return $builder;
    }

    public function getTimeout(): int
    {
        return $this->config['timeout'] ?? ConfigurationDefaults::TIMEOUT;
    }

    public function shouldEnableRetries(): bool
    {
        return $this->config['enableRetries'] ?? ConfigurationDefaults::ENABLE_RETRIES;
    }

    public function getNumberOfRetries(): int
    {
        return $this->config['numberOfRetries'] ?? ConfigurationDefaults::NUMBER_OF_RETRIES;
    }

    public function getRetryInterval(): float
    {
        return $this->config['retryInterval'] ?? ConfigurationDefaults::RETRY_INTERVAL;
    }

    public function getBackOffFactor(): float
    {
        return $this->config['backOffFactor'] ?? ConfigurationDefaults::BACK_OFF_FACTOR;
    }

    public function getMaximumRetryWaitTime(): int
    {
        return $this->config['maximumRetryWaitTime'] ?? ConfigurationDefaults::MAXIMUM_RETRY_WAIT_TIME;
    }

    public function shouldRetryOnTimeout(): bool
    {
        return $this->config['retryOnTimeout'] ?? ConfigurationDefaults::RETRY_ON_TIMEOUT;
    }

    public function getHttpStatusCodesToRetry(): array
    {
        return $this->config['httpStatusCodesToRetry'] ?? ConfigurationDefaults::HTTP_STATUS_CODES_TO_RETRY;
    }

    public function getHttpMethodsToRetry(): array
    {
        return $this->config['httpMethodsToRetry'] ?? ConfigurationDefaults::HTTP_METHODS_TO_RETRY;
    }

    public function getEnvironment(): string
    {
        return $this->config['environment'] ?? ConfigurationDefaults::ENVIRONMENT;
    }

    public function getThingspaceOauthCredentials(): ThingspaceOauthCredentials
    {
        return $this->thingspaceOauthManager;
    }

    public function getThingspaceOauthCredentialsBuilder(): ?ThingspaceOauthCredentialsBuilder
    {
        if (
            empty($this->thingspaceOauthManager->getOauthClientId()) &&
            empty($this->thingspaceOauthManager->getOauthClientSecret())
        ) {
            return null;
        }
        return ThingspaceOauthCredentialsBuilder::init(
            $this->thingspaceOauthManager->getOauthClientId(),
            $this->thingspaceOauthManager->getOauthClientSecret()
        )
            ->oauthToken($this->thingspaceOauthManager->getOauthToken())
            ->oauthScopes($this->thingspaceOauthManager->getOauthScopes());
    }

    public function getVzM2MTokenCredentials(): VzM2MTokenCredentials
    {
        return $this->vzM2MTokenManager;
    }

    public function getVzM2MTokenCredentialsBuilder(): ?VzM2MTokenCredentialsBuilder
    {
        if (empty($this->vzM2MTokenManager->getVzM2MToken())) {
            return null;
        }
        return VzM2MTokenCredentialsBuilder::init($this->vzM2MTokenManager->getVzM2MToken());
    }

    public function getThingspaceOauth1Credentials(): ThingspaceOauth1Credentials
    {
        return $this->thingspaceOauth1Manager;
    }

    public function getThingspaceOauth1CredentialsBuilder(): ?ThingspaceOauth1CredentialsBuilder
    {
        if (
            empty($this->thingspaceOauth1Manager->getOauthClientId()) &&
            empty($this->thingspaceOauth1Manager->getOauthClientSecret())
        ) {
            return null;
        }
        return ThingspaceOauth1CredentialsBuilder::init(
            $this->thingspaceOauth1Manager->getOauthClientId(),
            $this->thingspaceOauth1Manager->getOauthClientSecret()
        )->oauthToken($this->thingspaceOauth1Manager->getOauthToken());
    }

    public function getSessionTokenCredentials(): SessionTokenCredentials
    {
        return $this->sessionTokenManager;
    }

    public function getSessionTokenCredentialsBuilder(): ?SessionTokenCredentialsBuilder
    {
        if (empty($this->sessionTokenManager->getSessionToken())) {
            return null;
        }
        return SessionTokenCredentialsBuilder::init($this->sessionTokenManager->getSessionToken());
    }

    public function getLoggingConfigurationBuilder(): ?LoggingConfigurationBuilder
    {
        if (is_null($this->loggingConfigurationBuilder)) {
            return null;
        }
        $config = $this->loggingConfigurationBuilder->getConfiguration();
        return LoggingConfigurationBuilder::init()
            ->level($config['level'])
            ->logger($config['logger'])
            ->maskSensitiveHeaders($config['maskSensitiveHeaders'])
            ->requestConfiguration(RequestLoggingConfigurationBuilder::init()
                ->includeQueryInPath($config['requestConfiguration']['includeQueryInPath'])
                ->body($config['requestConfiguration']['body'])
                ->headers($config['requestConfiguration']['headers'])
                ->includeHeaders(...$config['requestConfiguration']['includeHeaders'])
                ->excludeHeaders(...$config['requestConfiguration']['excludeHeaders'])
                ->unmaskHeaders(...$config['requestConfiguration']['unmaskHeaders']))
            ->responseConfiguration(ResponseLoggingConfigurationBuilder::init()
                ->body($config['responseConfiguration']['body'])
                ->headers($config['responseConfiguration']['headers'])
                ->includeHeaders(...$config['responseConfiguration']['includeHeaders'])
                ->excludeHeaders(...$config['responseConfiguration']['excludeHeaders'])
                ->unmaskHeaders(...$config['responseConfiguration']['unmaskHeaders']));
    }

    /**
     * Get the proxy configuration builder
     */
    public function getProxyConfigurationBuilder(): ProxyConfigurationBuilder
    {
        return ProxyConfigurationBuilder::init($this->proxyConfiguration['address'])
            ->port($this->proxyConfiguration['port'])
            ->tunnel($this->proxyConfiguration['tunnel'])
            ->auth($this->proxyConfiguration['auth']['user'], $this->proxyConfiguration['auth']['pass'])
            ->authMethod($this->proxyConfiguration['auth']['method']);
    }

    /**
     * Get the client configuration as an associative array
     *
     * @see VerizonClientBuilder::getConfiguration()
     */
    public function getConfiguration(): array
    {
        return $this->toBuilder()->getConfiguration();
    }

    /**
     * Clone this client and override given configuration options
     *
     * @see VerizonClientBuilder::build()
     */
    public function withConfiguration(array $config): self
    {
        return new self(array_merge($this->config, $config));
    }

    /**
     * Validate required configuration variables
     */
    private function validateConfig(): void
    {
        $builder = VerizonClientBuilder::init();

        $thingspaceOauth = $this->getThingspaceOauthCredentialsBuilder();
        if ($thingspaceOauth != null) {
            $builder->thingspaceOauthCredentials($thingspaceOauth);
        }
    }

    /**
     * Get the base uri for a given server in the current environment.
     *
     * @param string $server Server name
     *
     * @return string Base URI
     */
    public function getBaseUri(string $server = Server::EDGE_DISCOVERY): string
    {
        return $this->client->getGlobalRequest($server)->getQueryUrl();
    }

    /**
     * Returns M 5G Edge Platforms Api
     */
    public function getM5GEdgePlatformsApi(): M5GEdgePlatformsApi
    {
        if ($this->m5GEdgePlatforms == null) {
            $this->m5GEdgePlatforms = new M5GEdgePlatformsApi($this->client);
        }
        return $this->m5GEdgePlatforms;
    }

    /**
     * Returns Service Endpoints Api
     */
    public function getServiceEndpointsApi(): ServiceEndpointsApi
    {
        if ($this->serviceEndpoints == null) {
            $this->serviceEndpoints = new ServiceEndpointsApi($this->client);
        }
        return $this->serviceEndpoints;
    }

    /**
     * Returns Service Profiles Api
     */
    public function getServiceProfilesApi(): ServiceProfilesApi
    {
        if ($this->serviceProfiles == null) {
            $this->serviceProfiles = new ServiceProfilesApi($this->client);
        }
        return $this->serviceProfiles;
    }

    /**
     * Returns Device Management Api
     */
    public function getDeviceManagementApi(): DeviceManagementApi
    {
        if ($this->deviceManagement == null) {
            $this->deviceManagement = new DeviceManagementApi($this->client);
        }
        return $this->deviceManagement;
    }

    /**
     * Returns Accounts Api
     */
    public function getAccountsApi(): AccountsApi
    {
        if ($this->accounts == null) {
            $this->accounts = new AccountsApi($this->client);
        }
        return $this->accounts;
    }

    /**
     * Returns Device Groups Api
     */
    public function getDeviceGroupsApi(): DeviceGroupsApi
    {
        if ($this->deviceGroups == null) {
            $this->deviceGroups = new DeviceGroupsApi($this->client);
        }
        return $this->deviceGroups;
    }

    /**
     * Returns Sms Api
     */
    public function getSmsApi(): SmsApi
    {
        if ($this->sms == null) {
            $this->sms = new SmsApi($this->client);
        }
        return $this->sms;
    }

    /**
     * Returns Session Management Api
     */
    public function getSessionManagementApi(): SessionManagementApi
    {
        if ($this->sessionManagement == null) {
            $this->sessionManagement = new SessionManagementApi($this->client);
        }
        return $this->sessionManagement;
    }

    /**
     * Returns Connectivity Callbacks Api
     */
    public function getConnectivityCallbacksApi(): ConnectivityCallbacksApi
    {
        if ($this->connectivityCallbacks == null) {
            $this->connectivityCallbacks = new ConnectivityCallbacksApi($this->client);
        }
        return $this->connectivityCallbacks;
    }

    /**
     * Returns Account Requests Api
     */
    public function getAccountRequestsApi(): AccountRequestsApi
    {
        if ($this->accountRequests == null) {
            $this->accountRequests = new AccountRequestsApi($this->client);
        }
        return $this->accountRequests;
    }

    /**
     * Returns Service Plans Api
     */
    public function getServicePlansApi(): ServicePlansApi
    {
        if ($this->servicePlans == null) {
            $this->servicePlans = new ServicePlansApi($this->client);
        }
        return $this->servicePlans;
    }

    /**
     * Returns Device Diagnostics Api
     */
    public function getDeviceDiagnosticsApi(): DeviceDiagnosticsApi
    {
        if ($this->deviceDiagnostics == null) {
            $this->deviceDiagnostics = new DeviceDiagnosticsApi($this->client);
        }
        return $this->deviceDiagnostics;
    }

    /**
     * Returns Device Monitoring Api
     */
    public function getDeviceMonitoringApi(): DeviceMonitoringApi
    {
        if ($this->deviceMonitoring == null) {
            $this->deviceMonitoring = new DeviceMonitoringApi($this->client);
        }
        return $this->deviceMonitoring;
    }

    /**
     * Returns Device Profile Management Api
     */
    public function getDeviceProfileManagementApi(): DeviceProfileManagementApi
    {
        if ($this->deviceProfileManagement == null) {
            $this->deviceProfileManagement = new DeviceProfileManagementApi($this->client);
        }
        return $this->deviceProfileManagement;
    }

    /**
     * Returns Euicc Device Profile Management Api
     */
    public function getEuiccDeviceProfileManagementApi(): EuiccDeviceProfileManagementApi
    {
        if ($this->euiccDeviceProfileManagement == null) {
            $this->euiccDeviceProfileManagement = new EuiccDeviceProfileManagementApi($this->client);
        }
        return $this->euiccDeviceProfileManagement;
    }

    /**
     * Returns Devices Locations Api
     */
    public function getDevicesLocationsApi(): DevicesLocationsApi
    {
        if ($this->devicesLocations == null) {
            $this->devicesLocations = new DevicesLocationsApi($this->client);
        }
        return $this->devicesLocations;
    }

    /**
     * Returns Exclusions Api
     */
    public function getExclusionsApi(): ExclusionsApi
    {
        if ($this->exclusions == null) {
            $this->exclusions = new ExclusionsApi($this->client);
        }
        return $this->exclusions;
    }

    /**
     * Returns Devices Location Subscriptions Api
     */
    public function getDevicesLocationSubscriptionsApi(): DevicesLocationSubscriptionsApi
    {
        if ($this->devicesLocationSubscriptions == null) {
            $this->devicesLocationSubscriptions = new DevicesLocationSubscriptionsApi($this->client);
        }
        return $this->devicesLocationSubscriptions;
    }

    /**
     * Returns Device Location Callbacks Api
     */
    public function getDeviceLocationCallbacksApi(): DeviceLocationCallbacksApi
    {
        if ($this->deviceLocationCallbacks == null) {
            $this->deviceLocationCallbacks = new DeviceLocationCallbacksApi($this->client);
        }
        return $this->deviceLocationCallbacks;
    }

    /**
     * Returns Usage Trigger Management Api
     */
    public function getUsageTriggerManagementApi(): UsageTriggerManagementApi
    {
        if ($this->usageTriggerManagement == null) {
            $this->usageTriggerManagement = new UsageTriggerManagementApi($this->client);
        }
        return $this->usageTriggerManagement;
    }

    /**
     * Returns Billing Api
     */
    public function getBillingApi(): BillingApi
    {
        if ($this->billing == null) {
            $this->billing = new BillingApi($this->client);
        }
        return $this->billing;
    }

    /**
     * Returns Software Management Subscriptions V1 Api
     */
    public function getSoftwareManagementSubscriptionsV1Api(): SoftwareManagementSubscriptionsV1Api
    {
        if ($this->softwareManagementSubscriptionsV1 == null) {
            $this->softwareManagementSubscriptionsV1 = new SoftwareManagementSubscriptionsV1Api($this->client);
        }
        return $this->softwareManagementSubscriptionsV1;
    }

    /**
     * Returns Software Management Licenses V1 Api
     */
    public function getSoftwareManagementLicensesV1Api(): SoftwareManagementLicensesV1Api
    {
        if ($this->softwareManagementLicensesV1 == null) {
            $this->softwareManagementLicensesV1 = new SoftwareManagementLicensesV1Api($this->client);
        }
        return $this->softwareManagementLicensesV1;
    }

    /**
     * Returns Firmware V1 Api
     */
    public function getFirmwareV1Api(): FirmwareV1Api
    {
        if ($this->firmwareV1 == null) {
            $this->firmwareV1 = new FirmwareV1Api($this->client);
        }
        return $this->firmwareV1;
    }

    /**
     * Returns Software Management Callbacks V1 Api
     */
    public function getSoftwareManagementCallbacksV1Api(): SoftwareManagementCallbacksV1Api
    {
        if ($this->softwareManagementCallbacksV1 == null) {
            $this->softwareManagementCallbacksV1 = new SoftwareManagementCallbacksV1Api($this->client);
        }
        return $this->softwareManagementCallbacksV1;
    }

    /**
     * Returns Software Management Reports V1 Api
     */
    public function getSoftwareManagementReportsV1Api(): SoftwareManagementReportsV1Api
    {
        if ($this->softwareManagementReportsV1 == null) {
            $this->softwareManagementReportsV1 = new SoftwareManagementReportsV1Api($this->client);
        }
        return $this->softwareManagementReportsV1;
    }

    /**
     * Returns Software Management Subscriptions V2 Api
     */
    public function getSoftwareManagementSubscriptionsV2Api(): SoftwareManagementSubscriptionsV2Api
    {
        if ($this->softwareManagementSubscriptionsV2 == null) {
            $this->softwareManagementSubscriptionsV2 = new SoftwareManagementSubscriptionsV2Api($this->client);
        }
        return $this->softwareManagementSubscriptionsV2;
    }

    /**
     * Returns Software Management Licenses V2 Api
     */
    public function getSoftwareManagementLicensesV2Api(): SoftwareManagementLicensesV2Api
    {
        if ($this->softwareManagementLicensesV2 == null) {
            $this->softwareManagementLicensesV2 = new SoftwareManagementLicensesV2Api($this->client);
        }
        return $this->softwareManagementLicensesV2;
    }

    /**
     * Returns Campaigns V2 Api
     */
    public function getCampaignsV2Api(): CampaignsV2Api
    {
        if ($this->campaignsV2 == null) {
            $this->campaignsV2 = new CampaignsV2Api($this->client);
        }
        return $this->campaignsV2;
    }

    /**
     * Returns Software Management Callbacks V2 Api
     */
    public function getSoftwareManagementCallbacksV2Api(): SoftwareManagementCallbacksV2Api
    {
        if ($this->softwareManagementCallbacksV2 == null) {
            $this->softwareManagementCallbacksV2 = new SoftwareManagementCallbacksV2Api($this->client);
        }
        return $this->softwareManagementCallbacksV2;
    }

    /**
     * Returns Software Management Reports V2 Api
     */
    public function getSoftwareManagementReportsV2Api(): SoftwareManagementReportsV2Api
    {
        if ($this->softwareManagementReportsV2 == null) {
            $this->softwareManagementReportsV2 = new SoftwareManagementReportsV2Api($this->client);
        }
        return $this->softwareManagementReportsV2;
    }

    /**
     * Returns Client Logging Api
     */
    public function getClientLoggingApi(): ClientLoggingApi
    {
        if ($this->clientLogging == null) {
            $this->clientLogging = new ClientLoggingApi($this->client);
        }
        return $this->clientLogging;
    }

    /**
     * Returns Server Logging Api
     */
    public function getServerLoggingApi(): ServerLoggingApi
    {
        if ($this->serverLogging == null) {
            $this->serverLogging = new ServerLoggingApi($this->client);
        }
        return $this->serverLogging;
    }

    /**
     * Returns Configuration Files Api
     */
    public function getConfigurationFilesApi(): ConfigurationFilesApi
    {
        if ($this->configurationFiles == null) {
            $this->configurationFiles = new ConfigurationFilesApi($this->client);
        }
        return $this->configurationFiles;
    }

    /**
     * Returns Software Management Subscriptions V3 Api
     */
    public function getSoftwareManagementSubscriptionsV3Api(): SoftwareManagementSubscriptionsV3Api
    {
        if ($this->softwareManagementSubscriptionsV3 == null) {
            $this->softwareManagementSubscriptionsV3 = new SoftwareManagementSubscriptionsV3Api($this->client);
        }
        return $this->softwareManagementSubscriptionsV3;
    }

    /**
     * Returns Software Management Licenses V3 Api
     */
    public function getSoftwareManagementLicensesV3Api(): SoftwareManagementLicensesV3Api
    {
        if ($this->softwareManagementLicensesV3 == null) {
            $this->softwareManagementLicensesV3 = new SoftwareManagementLicensesV3Api($this->client);
        }
        return $this->softwareManagementLicensesV3;
    }

    /**
     * Returns Campaigns V3 Api
     */
    public function getCampaignsV3Api(): CampaignsV3Api
    {
        if ($this->campaignsV3 == null) {
            $this->campaignsV3 = new CampaignsV3Api($this->client);
        }
        return $this->campaignsV3;
    }

    /**
     * Returns Software Management Reports V3 Api
     */
    public function getSoftwareManagementReportsV3Api(): SoftwareManagementReportsV3Api
    {
        if ($this->softwareManagementReportsV3 == null) {
            $this->softwareManagementReportsV3 = new SoftwareManagementReportsV3Api($this->client);
        }
        return $this->softwareManagementReportsV3;
    }

    /**
     * Returns Firmware V3 Api
     */
    public function getFirmwareV3Api(): FirmwareV3Api
    {
        if ($this->firmwareV3 == null) {
            $this->firmwareV3 = new FirmwareV3Api($this->client);
        }
        return $this->firmwareV3;
    }

    /**
     * Returns Account Devices Api
     */
    public function getAccountDevicesApi(): AccountDevicesApi
    {
        if ($this->accountDevices == null) {
            $this->accountDevices = new AccountDevicesApi($this->client);
        }
        return $this->accountDevices;
    }

    /**
     * Returns Software Management Callbacks V3 Api
     */
    public function getSoftwareManagementCallbacksV3Api(): SoftwareManagementCallbacksV3Api
    {
        if ($this->softwareManagementCallbacksV3 == null) {
            $this->softwareManagementCallbacksV3 = new SoftwareManagementCallbacksV3Api($this->client);
        }
        return $this->softwareManagementCallbacksV3;
    }

    /**
     * Returns Sim Secure for Io T Licenses Api
     */
    public function getSimSecureForIoTLicensesApi(): SimSecureForIoTLicensesApi
    {
        if ($this->simSecureForIoTLicenses == null) {
            $this->simSecureForIoTLicenses = new SimSecureForIoTLicensesApi($this->client);
        }
        return $this->simSecureForIoTLicenses;
    }

    /**
     * Returns Account Subscriptions Api
     */
    public function getAccountSubscriptionsApi(): AccountSubscriptionsApi
    {
        if ($this->accountSubscriptions == null) {
            $this->accountSubscriptions = new AccountSubscriptionsApi($this->client);
        }
        return $this->accountSubscriptions;
    }

    /**
     * Returns Performance Metrics Api
     */
    public function getPerformanceMetricsApi(): PerformanceMetricsApi
    {
        if ($this->performanceMetrics == null) {
            $this->performanceMetrics = new PerformanceMetricsApi($this->client);
        }
        return $this->performanceMetrics;
    }

    /**
     * Returns Diagnostics Subscriptions Api
     */
    public function getDiagnosticsSubscriptionsApi(): DiagnosticsSubscriptionsApi
    {
        if ($this->diagnosticsSubscriptions == null) {
            $this->diagnosticsSubscriptions = new DiagnosticsSubscriptionsApi($this->client);
        }
        return $this->diagnosticsSubscriptions;
    }

    /**
     * Returns Diagnostics Observations Api
     */
    public function getDiagnosticsObservationsApi(): DiagnosticsObservationsApi
    {
        if ($this->diagnosticsObservations == null) {
            $this->diagnosticsObservations = new DiagnosticsObservationsApi($this->client);
        }
        return $this->diagnosticsObservations;
    }

    /**
     * Returns Diagnostics History Api
     */
    public function getDiagnosticsHistoryApi(): DiagnosticsHistoryApi
    {
        if ($this->diagnosticsHistory == null) {
            $this->diagnosticsHistory = new DiagnosticsHistoryApi($this->client);
        }
        return $this->diagnosticsHistory;
    }

    /**
     * Returns Diagnostics Settings Api
     */
    public function getDiagnosticsSettingsApi(): DiagnosticsSettingsApi
    {
        if ($this->diagnosticsSettings == null) {
            $this->diagnosticsSettings = new DiagnosticsSettingsApi($this->client);
        }
        return $this->diagnosticsSettings;
    }

    /**
     * Returns Diagnostics Callbacks Api
     */
    public function getDiagnosticsCallbacksApi(): DiagnosticsCallbacksApi
    {
        if ($this->diagnosticsCallbacks == null) {
            $this->diagnosticsCallbacks = new DiagnosticsCallbacksApi($this->client);
        }
        return $this->diagnosticsCallbacks;
    }

    /**
     * Returns Diagnostics Factory Reset Api
     */
    public function getDiagnosticsFactoryResetApi(): DiagnosticsFactoryResetApi
    {
        if ($this->diagnosticsFactoryReset == null) {
            $this->diagnosticsFactoryReset = new DiagnosticsFactoryResetApi($this->client);
        }
        return $this->diagnosticsFactoryReset;
    }

    /**
     * Returns Targets Api
     */
    public function getTargetsApi(): TargetsApi
    {
        if ($this->targets == null) {
            $this->targets = new TargetsApi($this->client);
        }
        return $this->targets;
    }

    /**
     * Returns Cloud Connector Subscriptions Api
     */
    public function getCloudConnectorSubscriptionsApi(): CloudConnectorSubscriptionsApi
    {
        if ($this->cloudConnectorSubscriptions == null) {
            $this->cloudConnectorSubscriptions = new CloudConnectorSubscriptionsApi($this->client);
        }
        return $this->cloudConnectorSubscriptions;
    }

    /**
     * Returns Cloud Connector Devices Api
     */
    public function getCloudConnectorDevicesApi(): CloudConnectorDevicesApi
    {
        if ($this->cloudConnectorDevices == null) {
            $this->cloudConnectorDevices = new CloudConnectorDevicesApi($this->client);
        }
        return $this->cloudConnectorDevices;
    }

    /**
     * Returns Device Service Management Api
     */
    public function getDeviceServiceManagementApi(): DeviceServiceManagementApi
    {
        if ($this->deviceServiceManagement == null) {
            $this->deviceServiceManagement = new DeviceServiceManagementApi($this->client);
        }
        return $this->deviceServiceManagement;
    }

    /**
     * Returns Device Reports Api
     */
    public function getDeviceReportsApi(): DeviceReportsApi
    {
        if ($this->deviceReports == null) {
            $this->deviceReports = new DeviceReportsApi($this->client);
        }
        return $this->deviceReports;
    }

    /**
     * Returns Hyper Precise Location Callbacks Api
     */
    public function getHyperPreciseLocationCallbacksApi(): HyperPreciseLocationCallbacksApi
    {
        if ($this->hyperPreciseLocationCallbacks == null) {
            $this->hyperPreciseLocationCallbacks = new HyperPreciseLocationCallbacksApi($this->client);
        }
        return $this->hyperPreciseLocationCallbacks;
    }

    /**
     * Returns Anomaly Settings Api
     */
    public function getAnomalySettingsApi(): AnomalySettingsApi
    {
        if ($this->anomalySettings == null) {
            $this->anomalySettings = new AnomalySettingsApi($this->client);
        }
        return $this->anomalySettings;
    }

    /**
     * Returns Anomaly Triggers Api
     */
    public function getAnomalyTriggersApi(): AnomalyTriggersApi
    {
        if ($this->anomalyTriggers == null) {
            $this->anomalyTriggers = new AnomalyTriggersApi($this->client);
        }
        return $this->anomalyTriggers;
    }

    /**
     * Returns Anomaly Triggers V2 Api
     */
    public function getAnomalyTriggersV2Api(): AnomalyTriggersV2Api
    {
        if ($this->anomalyTriggersV2 == null) {
            $this->anomalyTriggersV2 = new AnomalyTriggersV2Api($this->client);
        }
        return $this->anomalyTriggersV2;
    }

    /**
     * Returns Wireless Network Performance Api
     */
    public function getWirelessNetworkPerformanceApi(): WirelessNetworkPerformanceApi
    {
        if ($this->wirelessNetworkPerformance == null) {
            $this->wirelessNetworkPerformance = new WirelessNetworkPerformanceApi($this->client);
        }
        return $this->wirelessNetworkPerformance;
    }

    /**
     * Returns Managing Esim Profiles Api
     */
    public function getManagingEsimProfilesApi(): ManagingEsimProfilesApi
    {
        if ($this->managingEsimProfiles == null) {
            $this->managingEsimProfiles = new ManagingEsimProfilesApi($this->client);
        }
        return $this->managingEsimProfiles;
    }

    /**
     * Returns Device Sms Messaging Api
     */
    public function getDeviceSmsMessagingApi(): DeviceSmsMessagingApi
    {
        if ($this->deviceSmsMessaging == null) {
            $this->deviceSmsMessaging = new DeviceSmsMessagingApi($this->client);
        }
        return $this->deviceSmsMessaging;
    }

    /**
     * Returns Device Actions Api
     */
    public function getDeviceActionsApi(): DeviceActionsApi
    {
        if ($this->deviceActions == null) {
            $this->deviceActions = new DeviceActionsApi($this->client);
        }
        return $this->deviceActions;
    }

    /**
     * Returns Thing Space Quality of Service Api Actions Api
     */
    public function getThingSpaceQualityOfServiceApiActionsApi(): ThingSpaceQualityOfServiceApiActionsApi
    {
        if ($this->thingSpaceQualityOfServiceApiActions == null) {
            $this->thingSpaceQualityOfServiceApiActions = new ThingSpaceQualityOfServiceApiActionsApi(
                $this->client
            );
        }
        return $this->thingSpaceQualityOfServiceApiActions;
    }

    /**
     * Returns Pwn Api
     */
    public function getPwnApi(): PwnApi
    {
        if ($this->pwn == null) {
            $this->pwn = new PwnApi($this->client);
        }
        return $this->pwn;
    }

    /**
     * Returns Promotion Period Information Api
     */
    public function getPromotionPeriodInformationApi(): PromotionPeriodInformationApi
    {
        if ($this->promotionPeriodInformation == null) {
            $this->promotionPeriodInformation = new PromotionPeriodInformationApi($this->client);
        }
        return $this->promotionPeriodInformation;
    }

    /**
     * Returns Retrieve the Triggers Api
     */
    public function getRetrieveTheTriggersApi(): RetrieveTheTriggersApi
    {
        if ($this->retrieveTheTriggers == null) {
            $this->retrieveTheTriggers = new RetrieveTheTriggersApi($this->client);
        }
        return $this->retrieveTheTriggers;
    }

    /**
     * Returns Update Triggers Api
     */
    public function getUpdateTriggersApi(): UpdateTriggersApi
    {
        if ($this->updateTriggers == null) {
            $this->updateTriggers = new UpdateTriggersApi($this->client);
        }
        return $this->updateTriggers;
    }

    /**
     * Returns Sim Actions Api
     */
    public function getSimActionsApi(): SimActionsApi
    {
        if ($this->simActions == null) {
            $this->simActions = new SimActionsApi($this->client);
        }
        return $this->simActions;
    }

    /**
     * Returns Global Reporting Api
     */
    public function getGlobalReportingApi(): GlobalReportingApi
    {
        if ($this->globalReporting == null) {
            $this->globalReporting = new GlobalReportingApi($this->client);
        }
        return $this->globalReporting;
    }

    /**
     * Returns Retrieve Rate Plan List Api
     */
    public function getRetrieveRatePlanListApi(): RetrieveRatePlanListApi
    {
        if ($this->retrieveRatePlanList == null) {
            $this->retrieveRatePlanList = new RetrieveRatePlanListApi($this->client);
        }
        return $this->retrieveRatePlanList;
    }

    /**
     * Returns Create Price Plan Triggers Api
     */
    public function getCreatePricePlanTriggersApi(): CreatePricePlanTriggersApi
    {
        if ($this->createPricePlanTriggers == null) {
            $this->createPricePlanTriggers = new CreatePricePlanTriggersApi($this->client);
        }
        return $this->createPricePlanTriggers;
    }

    /**
     * Returns Update Price Plan Triggers Api
     */
    public function getUpdatePricePlanTriggersApi(): UpdatePricePlanTriggersApi
    {
        if ($this->updatePricePlanTriggers == null) {
            $this->updatePricePlanTriggers = new UpdatePricePlanTriggersApi($this->client);
        }
        return $this->updatePricePlanTriggers;
    }

    /**
     * Returns M 5G Bi Device Actions Api
     */
    public function getM5GBiDeviceActionsApi(): M5GBiDeviceActionsApi
    {
        if ($this->m5GBiDeviceActions == null) {
            $this->m5GBiDeviceActions = new M5GBiDeviceActionsApi($this->client);
        }
        return $this->m5GBiDeviceActions;
    }

    /**
     * Returns Sensor Insights Sensors Api
     */
    public function getSensorInsightsSensorsApi(): SensorInsightsSensorsApi
    {
        if ($this->sensorInsightsSensors == null) {
            $this->sensorInsightsSensors = new SensorInsightsSensorsApi($this->client);
        }
        return $this->sensorInsightsSensors;
    }

    /**
     * Returns Sensor Insights Devices Api
     */
    public function getSensorInsightsDevicesApi(): SensorInsightsDevicesApi
    {
        if ($this->sensorInsightsDevices == null) {
            $this->sensorInsightsDevices = new SensorInsightsDevicesApi($this->client);
        }
        return $this->sensorInsightsDevices;
    }

    /**
     * Returns Sensor Insights Gateways Api
     */
    public function getSensorInsightsGatewaysApi(): SensorInsightsGatewaysApi
    {
        if ($this->sensorInsightsGateways == null) {
            $this->sensorInsightsGateways = new SensorInsightsGatewaysApi($this->client);
        }
        return $this->sensorInsightsGateways;
    }

    /**
     * Returns Sensor Insights Smart Alerts Api
     */
    public function getSensorInsightsSmartAlertsApi(): SensorInsightsSmartAlertsApi
    {
        if ($this->sensorInsightsSmartAlerts == null) {
            $this->sensorInsightsSmartAlerts = new SensorInsightsSmartAlertsApi($this->client);
        }
        return $this->sensorInsightsSmartAlerts;
    }

    /**
     * Returns Sensor Insights Rules Api
     */
    public function getSensorInsightsRulesApi(): SensorInsightsRulesApi
    {
        if ($this->sensorInsightsRules == null) {
            $this->sensorInsightsRules = new SensorInsightsRulesApi($this->client);
        }
        return $this->sensorInsightsRules;
    }

    /**
     * Returns Sensor Insights Health Score Api
     */
    public function getSensorInsightsHealthScoreApi(): SensorInsightsHealthScoreApi
    {
        if ($this->sensorInsightsHealthScore == null) {
            $this->sensorInsightsHealthScore = new SensorInsightsHealthScoreApi($this->client);
        }
        return $this->sensorInsightsHealthScore;
    }

    /**
     * Returns Sensor Insights Notification Groups Api
     */
    public function getSensorInsightsNotificationGroupsApi(): SensorInsightsNotificationGroupsApi
    {
        if ($this->sensorInsightsNotificationGroups == null) {
            $this->sensorInsightsNotificationGroups = new SensorInsightsNotificationGroupsApi($this->client);
        }
        return $this->sensorInsightsNotificationGroups;
    }

    /**
     * Returns Sensor Insights Users Api
     */
    public function getSensorInsightsUsersApi(): SensorInsightsUsersApi
    {
        if ($this->sensorInsightsUsers == null) {
            $this->sensorInsightsUsers = new SensorInsightsUsersApi($this->client);
        }
        return $this->sensorInsightsUsers;
    }

    /**
     * Returns Sensor Insights Device Profile Api
     */
    public function getSensorInsightsDeviceProfileApi(): SensorInsightsDeviceProfileApi
    {
        if ($this->sensorInsightsDeviceProfile == null) {
            $this->sensorInsightsDeviceProfile = new SensorInsightsDeviceProfileApi($this->client);
        }
        return $this->sensorInsightsDeviceProfile;
    }

    /**
     * Returns Sensor Insights Smart Alert Metrics Api
     */
    public function getSensorInsightsSmartAlertMetricsApi(): SensorInsightsSmartAlertMetricsApi
    {
        if ($this->sensorInsightsSmartAlertMetrics == null) {
            $this->sensorInsightsSmartAlertMetrics = new SensorInsightsSmartAlertMetricsApi($this->client);
        }
        return $this->sensorInsightsSmartAlertMetrics;
    }

    /**
     * Returns App Config Service Api
     */
    public function getAppConfigServiceApi(): AppConfigServiceApi
    {
        if ($this->appConfigService == null) {
            $this->appConfigService = new AppConfigServiceApi($this->client);
        }
        return $this->appConfigService;
    }

    /**
     * Returns Registration Api
     */
    public function getRegistrationApi(): RegistrationApi
    {
        if ($this->registration == null) {
            $this->registration = new RegistrationApi($this->client);
        }
        return $this->registration;
    }

    /**
     * Returns Map Data Manager Api
     */
    public function getMapDataManagerApi(): MapDataManagerApi
    {
        if ($this->mapDataManager == null) {
            $this->mapDataManager = new MapDataManagerApi($this->client);
        }
        return $this->mapDataManager;
    }

    /**
     * Returns Oauth Authorization Api
     */
    public function getOauthAuthorizationApi(): OauthAuthorizationApi
    {
        if ($this->oauthAuthorization == null) {
            $this->oauthAuthorization = new OauthAuthorizationApi($this->client);
        }
        return $this->oauthAuthorization;
    }

    /**
     * A map of all base urls used in different environments and servers
     *
     * @var array
     */
    private const ENVIRONMENT_MAP = [
        Environment::PRODUCTION => [
            Server::EDGE_DISCOVERY => 'https://5gedge.verizon.com/api/mec/eds',
            Server::IMP_SERVER => 'https://imp.thingspace.verizon.com',
            Server::THINGSPACE => 'https://thingspace.verizon.com/api',
            Server::OAUTH_SERVER => 'https://thingspace.verizon.com/api/ts/v1',
            Server::M2M => 'https://thingspace.verizon.com/api/m2m',
            Server::DEVICE_LOCATION => 'https://thingspace.verizon.com/api/loc/v1',
            Server::SUBSCRIPTION_SERVER => 'https://thingspace.verizon.com/api/subsc/v1',
            Server::SOFTWARE_MANAGEMENT_V1 => 'https://thingspace.verizon.com/api/fota/v1',
            Server::SOFTWARE_MANAGEMENT_V2 => 'https://thingspace.verizon.com/api/fota/v2',
            Server::SOFTWARE_MANAGEMENT_V3 => 'https://thingspace.verizon.com/api/fota/v3',
            Server::PERFORMANCE => 'https://5gedge.verizon.com/api/mec',
            Server::DEVICE_DIAGNOSTICS => 'https://thingspace.verizon.com/api/diagnostics/v1',
            Server::CLOUD_CONNECTOR => 'https://thingspace.verizon.com/api/cc/v1',
            Server::HYPER_PRECISE_LOCATION => 'https://thingspace.verizon.com/api/hyper-precise/v1',
            Server::SERVICES => 'https://5gedge.verizon.com/api/mec/services',
            Server::QUALITY_OF_SERVICE => 'https://thingspace.verizon.com/api/m2m/v1/devices'
        ],
        Environment::MOCK_SERVER_FOR_LIMITED_AVAILABILITY_SEE_QUICK_START => [
            Server::EDGE_DISCOVERY => 'https://mock.thingspace.verizon.com/api/mec/eds',
            Server::IMP_SERVER => 'https://mock.thingspace.verizon.com',
            Server::THINGSPACE => 'https://mock.thingspace.verizon.com/api',
            Server::OAUTH_SERVER => 'https://mock.thingspace.verizon.com/api/ts/v1',
            Server::M2M => 'https://mock.thingspace.verizon.com/api/m2m',
            Server::DEVICE_LOCATION => 'https://mock.thingspace.verizon.com/api/loc/v1',
            Server::SUBSCRIPTION_SERVER => 'https://mock.thingspace.verizon.com/api/subsc/v1',
            Server::SOFTWARE_MANAGEMENT_V1 => 'https://mock.thingspace.verizon.com/api/fota/v1',
            Server::SOFTWARE_MANAGEMENT_V2 => 'https://mock.thingspace.verizon.com/api/fota/v2',
            Server::SOFTWARE_MANAGEMENT_V3 => 'https://mock.thingspace.verizon.com/api/fota/v3',
            Server::PERFORMANCE => 'https://mock.thingspace.verizon.com/api/mec',
            Server::DEVICE_DIAGNOSTICS => 'https://mock.thingspace.verizon.com/api/diagnostics/v1',
            Server::CLOUD_CONNECTOR => 'https://mock.thingspace.verizon.com/api/cc/v1',
            Server::HYPER_PRECISE_LOCATION => 'https://mock.thingspace.verizon.com/api/hyper-precise/v1',
            Server::SERVICES => 'https://mock.thingspace.verizon.com/api/mec/services',
            Server::QUALITY_OF_SERVICE => 'https://mock.thingspace.verizon.com/api/m2m/v1/devices'
        ]
    ];
}
