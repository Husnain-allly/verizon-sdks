<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Apis;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\M5GBiRestErrorResponseException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\M5GBiactivateRequest;
use VerizonLib\Models\M5GBichangeRequest;
use VerizonLib\Models\M5GBideviceDetailsresponse;
use VerizonLib\Models\M5GBideviceId;
use VerizonLib\Models\M5GBiRequestResponse;
use VerizonLib\Server;

class M5GBiDeviceActionsApi extends BaseApi
{
    /**
     * Uses the decive's Integrated Circuit Card Identification Number (ICCID) to retrive and display the
     * device's properties.
     *
     * @param M5GBideviceId $body Device Profile Query
     *
     * @return ApiResponse Response from the API call
     */
    public function businessInternetlistDeviceInformation(M5GBideviceId $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/actions/list')
            ->server(Server::THINGSPACE)
            ->auth('thingspace_oauth', 'VZ-M2M-Token')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body)->required());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error response', M5GBiRestErrorResponseException::class))
            ->type(M5GBideviceDetailsresponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Uses the device's ICCID and IMEI to activate service.
     *
     * @param M5GBiactivateRequest $body Activate 5G BI service. Defining
     *        <code>publicIpRestriction</code> as "Unrestricted" or "Restricted" is required for
     *        activating as Public Static. Leave  <code>publicIpRestriction</code> undefined to
     *        activate as Public Dynamic. Removing <code>publicIpRestriction</code> from the
     *        request will activate as Mobile Private Network (MPN).
     *
     * @return ApiResponse Response from the API call
     */
    public function businessInternetactivateUsingPost(M5GBiactivateRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/actions/activate')
            ->server(Server::THINGSPACE)
            ->auth('thingspace_oauth', 'VZ-M2M-Token')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body)->required());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error response', M5GBiRestErrorResponseException::class))
            ->type(M5GBiRequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Change a device's service plan to use 5G BI.
     *
     * @param M5GBichangeRequest $body This endpoint is for use when changing a device's service
     *        plan to a 5G BI service plan. The service plan can change for an active device up to
     *        four times per month but will require address validation for each change. The
     *        service plan cannot be changed for a device while its service is suspended.
     *
     * @return ApiResponse Response from the API call
     */
    public function businessInternetServiceplanchange(M5GBichangeRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/actions/plan')
            ->server(Server::THINGSPACE)
            ->auth('thingspace_oauth', 'VZ-M2M-Token')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body)->required());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error response', M5GBiRestErrorResponseException::class))
            ->type(M5GBiRequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
