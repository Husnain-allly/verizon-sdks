<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Apis;

use Core\Authentication\Auth;
use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\SecurityResultException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\AssignLicenseRequest;
use VerizonLib\Models\SecuritySuccessResult;
use VerizonLib\Server;

class SimSecureForIoTLicensesApi extends BaseApi
{
    /**
     * Assigns SIM-Secure for IoT licenses to SIMs.
     *
     * @param AssignLicenseRequest $body Request to assign license to devices.
     * @param string|null $xRequestId Transaction Id.
     *
     * @return ApiResponse Response from the API call
     */
    public function assignLicenseToDevices(AssignLicenseRequest $body, ?string $xRequestId = null): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/devices/license/actions/assign')
            ->server(Server::M2M)
            ->auth(Auth::and('thingspace_oauth', 'VZ-M2M-Token'))
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)->required(),
                HeaderParam::init('X-Request-ID', $xRequestId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad request.', SecurityResultException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized request.', SecurityResultException::class))
            ->throwErrorOn('403', ErrorType::init('Request Forbidden.', SecurityResultException::class))
            ->throwErrorOn('404', ErrorType::init('Not Found / Does not exist.', SecurityResultException::class))
            ->throwErrorOn(
                '406',
                ErrorType::init('Format / Request Unacceptable.', SecurityResultException::class)
            )
            ->throwErrorOn('429', ErrorType::init('Too many requests.', SecurityResultException::class))
            ->throwErrorOn('0', ErrorType::init('Error response.', SecurityResultException::class))
            ->type(SecuritySuccessResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Unassigns SIM-Secure for IoT Flexible and Flexible Bundle license from SIMs.
     *
     * @param string $xRequestId Transaction Id.
     *
     * @return ApiResponse Response from the API call
     */
    public function unassignLicenseToDevices(string $xRequestId): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/v1/devices/license/actions/assign')
            ->server(Server::M2M)
            ->auth(Auth::and('thingspace_oauth', 'VZ-M2M-Token'))
            ->parameters(HeaderParam::init('X-Request-ID', $xRequestId)->required());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad request.', SecurityResultException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized request.', SecurityResultException::class))
            ->throwErrorOn('403', ErrorType::init('Request forbidden.', SecurityResultException::class))
            ->throwErrorOn('404', ErrorType::init('Not Found / Does not exist.', SecurityResultException::class))
            ->throwErrorOn(
                '406',
                ErrorType::init('Format / Request Unacceptable.', SecurityResultException::class)
            )
            ->throwErrorOn('429', ErrorType::init('Too many requests.', SecurityResultException::class))
            ->throwErrorOn('0', ErrorType::init('Error response.', SecurityResultException::class))
            ->type(SecuritySuccessResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
