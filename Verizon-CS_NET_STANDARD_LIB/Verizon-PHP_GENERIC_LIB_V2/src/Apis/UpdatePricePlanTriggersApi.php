<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Apis;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\RuleRestErrorResponseException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\AccountGroupShareUpdateTriggerRequest;
use VerizonLib\Models\AccountLevelUpdateTriggerRequest;
use VerizonLib\Models\AccountShareUpdateTriggerRequest;
use VerizonLib\Models\DeviceLevelUpdateTriggerRequest;
use VerizonLib\Models\PayAsYouGoUpdateTriggerRequest;
use VerizonLib\Models\TriggerResponse;
use VerizonLib\Models\Updatetriggerchunk;
use VerizonLib\Server;

class UpdatePricePlanTriggersApi extends BaseApi
{
    /**
     * Updates a usage trigger at the account level, device level or a price plan trigger for all devices
     * on the account
     *
     * @param AccountLevelUpdateTriggerRequest|DeviceLevelUpdateTriggerRequest|AccountGroupShareUpdateTriggerRequest|AccountShareUpdateTriggerRequest|PayAsYouGoUpdateTriggerRequest|Updatetriggerchunk $body
     *        Update a trigger
     *
     * @return ApiResponse Response from the API call
     */
    public function updateTriggerRules($body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/v2/triggers')
            ->server(Server::THINGSPACE)
            ->auth('thingspace_oauth1', 'VZ-M2M-Token')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
                    ->required()
                    ->strictType('anyOf(AccountLevelUpdateTriggerRequest,DeviceLevelUpdateTriggerRequest,Acc' .
                    'ountGroupShareUpdateTriggerRequest,AccountShareUpdateTriggerRequest,PayAsYo' .
                    'uGoUpdateTriggerRequest,Updatetriggerchunk)')
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error response', RuleRestErrorResponseException::class))
            ->type(TriggerResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
