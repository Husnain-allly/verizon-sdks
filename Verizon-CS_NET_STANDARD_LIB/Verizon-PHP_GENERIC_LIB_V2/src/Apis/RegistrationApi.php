<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Apis;

use Core\Authentication\Auth;
use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\EtxResponseErrorException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\ClientPersistenceResponse;
use VerizonLib\Models\ClientRegistrationRequest;
use VerizonLib\Models\ClientRegistrationResponse;
use VerizonLib\Models\ConnectionRequest;
use VerizonLib\Models\ConnectionResponse;
use VerizonLib\Server;

class RegistrationApi extends BaseApi
{
    /**
     * With this API call the user (client) registers its device or software service to the ETX system.
     * Therefore, when a connection is initiated from the device or software service to the ETX system
     * along with the credential provided by this registration call, then the connection will be authorized.
     *
     * - The user can register multiple devices or software services, which can all be used at the same
     * time.
     * - There rules set in the system that limit the type and subtype of the clients that are allowed to
     * be registered under the VendorID. The rules are created based ont he agreement between the Vendor
     * and Verizon.
     * - The user will only be able to register a limited number of devices or software services under the
     * same VendorID. This registration limit is specified by the agreement between the Vendor and Verizon.
     *
     * Note: The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and
     * Session/M2M tokens in order to call this API.
     *
     *
     * @param ClientRegistrationRequest $body
     *
     * @return ApiResponse Response from the API call
     */
    public function registerEtxDevice(ClientRegistrationRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/api/v2/clients/registration')
            ->server(Server::IMP_SERVER)
            ->auth(Auth::and('thingspace_oauth', 'SessionToken'))
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body)->required());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid Request', EtxResponseErrorException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized Request', EtxResponseErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden Request', EtxResponseErrorException::class))
            ->throwErrorOn('429', ErrorType::init('Too Many Requests', EtxResponseErrorException::class))
            ->throwErrorOn('503', ErrorType::init('Internal Server Error', EtxResponseErrorException::class))
            ->throwErrorOn('0', ErrorType::init('Forbidden', EtxResponseErrorException::class))
            ->type(ClientRegistrationResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * With this API call the user (client) can:
     * - renew the certificate of a device or software service in the ETX system if the original
     * certificate has expired. If the client's certificate expired or going to expire within 30 days and
     * new certificate will be issued. If the certificate expires more than 30 days, the current
     * certificate will be returned to the client.
     * - complete its device or software service registration to the ETX system if the original
     * registration request was not successful because of a pending certificate generation. Whenever the
     * user receives a "client registration is pending" response (HTTP 202) from POST /clients/registration
     * call. The client should initiate this PUT API call to finish the registration process and get the
     * required certificate.
     *
     * Note: The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and
     * Session/M2M tokens in order to call this API.
     *
     *
     * @param string $deviceId
     * @param string $vendorId The VendorID set during the Vendor registration call.
     * @param array|null $body
     *
     * @return ApiResponse Response from the API call
     */
    public function renewEtxDevice(string $deviceId, string $vendorId, ?array $body = null): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/api/v2/clients/registration')
            ->server(Server::IMP_SERVER)
            ->auth(Auth::and('thingspace_oauth', 'SessionToken'))
            ->parameters(
                HeaderParam::init('DeviceID', $deviceId)->required(),
                HeaderParam::init('VendorID', $vendorId)->required(),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid Request', EtxResponseErrorException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized Request', EtxResponseErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden Request', EtxResponseErrorException::class))
            ->throwErrorOn('429', ErrorType::init('Too Many Requests', EtxResponseErrorException::class))
            ->throwErrorOn('503', ErrorType::init('Internal Server Error', EtxResponseErrorException::class))
            ->throwErrorOn('0', ErrorType::init('Forbidden', EtxResponseErrorException::class))
            ->type(ClientRegistrationResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * With this API call the user (client) can unregister its devices and software services from the ETX
     * system. The unregistered devices and services will no longer be able to use the ETX Message Exchange.
     *
     * Note: The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and
     * Session/M2M tokens in order to call this API.
     *
     *
     * @param string $vendorId The VendorID set during the Vendor registration call.
     * @param string[] $deviceIDs The list of device IDs and software service IDs to be unregistered
     *
     * @return ApiResponse Response from the API call
     */
    public function unregisterEtxDevice(string $vendorId, array $deviceIDs): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/api/v2/clients/registration')
            ->server(Server::IMP_SERVER)
            ->auth(Auth::and('thingspace_oauth', 'SessionToken'))
            ->parameters(
                HeaderParam::init('VendorID', $vendorId)->required(),
                QueryParam::init('DeviceIDs', $deviceIDs)->required()
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid Request', EtxResponseErrorException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized Request', EtxResponseErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden Request', EtxResponseErrorException::class))
            ->throwErrorOn('429', ErrorType::init('Too Many Requests', EtxResponseErrorException::class))
            ->throwErrorOn('503', ErrorType::init('Internal Server Error', EtxResponseErrorException::class))
            ->throwErrorOn('0', ErrorType::init('Forbidden', EtxResponseErrorException::class))
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * With this API call the user can check the certificate of the device. At least one of the DeviceID,
     * IMEI or ICCID is required to make the call.
     *
     * Note: The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and
     * Session/M2M tokens in order to call this API.
     *
     *
     * @param string|null $deviceId
     * @param string|null $imei
     * @param string|null $iccid
     *
     * @return ApiResponse Response from the API call
     */
    public function getEtxDeviceCertificate(
        ?string $deviceId = null,
        ?string $imei = null,
        ?string $iccid = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/api/v2/clients/registration')
            ->server(Server::IMP_SERVER)
            ->auth(Auth::and('thingspace_oauth', 'SessionToken'))
            ->parameters(
                QueryParam::init('DeviceID', $deviceId),
                QueryParam::init('IMEI', $imei),
                QueryParam::init('ICCID', $iccid)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid request', EtxResponseErrorException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', EtxResponseErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden Request', EtxResponseErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Not Found', EtxResponseErrorException::class))
            ->throwErrorOn('429', ErrorType::init('Too Many Requests', EtxResponseErrorException::class))
            ->throwErrorOn('500', ErrorType::init('Internal server Error', EtxResponseErrorException::class))
            ->throwErrorOn('0', ErrorType::init('Forbidden', EtxResponseErrorException::class))
            ->type(ClientPersistenceResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * With this API call the device or software service requests the MQTT URL for the location that it
     * needs to connect. To determine the proper URL the device or software service needs to provide its ID
     * (the one that was provided in the registration request), location (GPS coordinates), and whether it
     * is on the Verizon cellular network or not.
     *
     * Note: The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and
     * Session/M2M tokens in order to call this API.
     *
     *
     * @param string $vendorId The VendorID set during the Vendor registration call.
     * @param ConnectionRequest $body
     *
     * @return ApiResponse Response from the API call
     */
    public function retrieveMqtturl(string $vendorId, ConnectionRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/api/v2/clients/connection')
            ->server(Server::IMP_SERVER)
            ->auth(Auth::and('thingspace_oauth', 'SessionToken'))
            ->parameters(
                HeaderParam::init('VendorID', $vendorId)->required(),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)->required()
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid request', EtxResponseErrorException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', EtxResponseErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden Request', EtxResponseErrorException::class))
            ->throwErrorOn('429', ErrorType::init('Too Many Requests', EtxResponseErrorException::class))
            ->throwErrorOn('503', ErrorType::init('Internal server Error', EtxResponseErrorException::class))
            ->throwErrorOn('0', ErrorType::init('Forbidden', EtxResponseErrorException::class))
            ->type(ConnectionResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
