<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Apis;

use Core\Authentication\Auth;
use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\GioRestErrorResponseException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\DeviceProfileRequest;
use VerizonLib\Models\FallBack;
use VerizonLib\Models\GioDeactivateDeviceProfileRequest;
use VerizonLib\Models\GioProfileRequest;
use VerizonLib\Models\GioRequestResponse;
use VerizonLib\Server;

class ManagingEsimProfilesApi extends BaseApi
{
    /**
     * Resume service to a device with either a lead or local profile.
     *
     * @param GioProfileRequest $body Device Profile Query
     *
     * @return ApiResponse Response from the API call
     */
    public function resumeProfile(GioProfileRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/profile/actions/profile_resume')
            ->server(Server::THINGSPACE)
            ->auth(Auth::and('thingspace_oauth', 'VZ-M2M-Token'))
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body)->required());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error response', GioRestErrorResponseException::class))
            ->type(GioRequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Suspend a device's Global profile.
     *
     * @param GioProfileRequest $body Device Profile Query
     *
     * @return ApiResponse Response from the API call
     */
    public function profileSuspend(GioProfileRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/m2m/v1/devices/profile/actions/profile_suspend'
        )
            ->server(Server::THINGSPACE)
            ->auth(Auth::and('thingspace_oauth', 'VZ-M2M-Token'))
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body)->required());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error response', GioRestErrorResponseException::class))
            ->type(GioRequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Suspend all service to an eUICC device, including the lead and local profile.
     *
     * @param GioProfileRequest $body Device Profile Query
     *
     * @return ApiResponse Response from the API call
     */
    public function deviceSuspend(GioProfileRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/profile/actions/device_suspend')
            ->server(Server::THINGSPACE)
            ->auth(Auth::and('thingspace_oauth', 'VZ-M2M-Token'))
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body)->required());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error response', GioRestErrorResponseException::class))
            ->type(GioRequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Enable a fallback profile to be set.
     *
     * @param FallBack $body Set the fallback attributes to allow a fallback profile to be
     *        activated.
     *
     * @return ApiResponse Response from the API call
     */
    public function setFallback(FallBack $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/v1/devices/profile/actions/setfallbackattribute'
        )
            ->server(Server::THINGSPACE)
            ->auth(Auth::and('thingspace_oauth', 'VZ-M2M-Token'))
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body)->required());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error response', GioRestErrorResponseException::class))
            ->type(GioRequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Activate a device with either a lead or local profile.
     *
     * @param GioProfileRequest $body Device Profile Query
     *
     * @return ApiResponse Response from the API call
     */
    public function activateADeviceProfile(GioProfileRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/profile/actions/activate')
            ->server(Server::THINGSPACE)
            ->auth(Auth::and('thingspace_oauth', 'VZ-M2M-Token'))
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body)->required());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error response', GioRestErrorResponseException::class))
            ->type(GioRequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Enable a device lead or local profile.
     *
     * @param DeviceProfileRequest $body Device Profile Query
     *
     * @return ApiResponse Response from the API call
     */
    public function enableADeviceProfile(DeviceProfileRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/profile/actions/enable')
            ->server(Server::THINGSPACE)
            ->auth(Auth::and('thingspace_oauth', 'VZ-M2M-Token'))
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body)->required());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error response', GioRestErrorResponseException::class))
            ->type(GioRequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Deactivate the lead or local profile. **Note:** to reactivate the profile, use the **Activate**
     * endpoint above.
     *
     * @param GioDeactivateDeviceProfileRequest $body Device Profile Query
     *
     * @return ApiResponse Response from the API call
     */
    public function deactivateADeviceProfile(GioDeactivateDeviceProfileRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/profile/actions/deactivate')
            ->server(Server::THINGSPACE)
            ->auth(Auth::and('thingspace_oauth', 'VZ-M2M-Token'))
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body)->required());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error response', GioRestErrorResponseException::class))
            ->type(GioRequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Enable the Global IoT Orchestration device profile for download.
     *
     * @param DeviceProfileRequest $body Device Profile Query
     *
     * @return ApiResponse Response from the API call
     */
    public function enableADeviceProfileForDownload(DeviceProfileRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/m2m/v1/devices/profile/actions/download_enable'
        )
            ->server(Server::THINGSPACE)
            ->auth(Auth::and('thingspace_oauth', 'VZ-M2M-Token'))
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body)->required());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error response', GioRestErrorResponseException::class))
            ->type(GioRequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Download a Global IoT Orchestration device profile.
     *
     * @param DeviceProfileRequest $body Device Profile Query
     *
     * @return ApiResponse Response from the API call
     */
    public function downloadADeviceProfile(DeviceProfileRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/profile/actions/download')
            ->server(Server::THINGSPACE)
            ->auth(Auth::and('thingspace_oauth', 'VZ-M2M-Token'))
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body)->required());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error response', GioRestErrorResponseException::class))
            ->type(GioRequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete a device profile for Global IoT Orchestration. **Note:** the profile must be deactivated
     * first!
     *
     * @param DeviceProfileRequest $body Device Profile Query
     *
     * @return ApiResponse Response from the API call
     */
    public function deleteADeviceProfile(DeviceProfileRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/profile/actions/delete')
            ->server(Server::THINGSPACE)
            ->auth(Auth::and('thingspace_oauth', 'VZ-M2M-Token'))
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body)->required());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error response', GioRestErrorResponseException::class))
            ->type(GioRequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
