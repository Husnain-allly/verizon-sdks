<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Apis;

use Core\Authentication\Auth;
use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\EsimRestErrorResponseException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\EsimGlobalDeviceList;
use VerizonLib\Models\EsimProvhistoryRequest;
use VerizonLib\Models\EsimRequestResponse;
use VerizonLib\Server;

class GlobalReportingApi extends BaseApi
{
    /**
     * Retrieve the provisioning history of a specific device or devices.
     *
     * @param EsimProvhistoryRequest $body Device Provisioning History
     *
     * @return ApiResponse Response from the API call
     */
    public function deviceprovhistoryUsingPost(EsimProvhistoryRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v2/devices/history/actions/list')
            ->server(Server::THINGSPACE)
            ->auth(Auth::and('thingspace_oauth', 'VZ-M2M-Token'))
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body)->required());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad request', EsimRestErrorResponseException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', EsimRestErrorResponseException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', EsimRestErrorResponseException::class))
            ->throwErrorOn(
                '404',
                ErrorType::init('Not Found / Does not exist', EsimRestErrorResponseException::class)
            )
            ->throwErrorOn(
                '406',
                ErrorType::init('Format / Request Unacceptable', EsimRestErrorResponseException::class)
            )
            ->throwErrorOn('429', ErrorType::init('Too many requests', EsimRestErrorResponseException::class))
            ->throwErrorOn('0', ErrorType::init('Error response', EsimRestErrorResponseException::class))
            ->type(EsimRequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Retrieve a list of all devices associated with an account.
     *
     * @param EsimGlobalDeviceList $body Device List
     *
     * @return ApiResponse Response from the API call
     */
    public function retrieveGlobalList(EsimGlobalDeviceList $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v2/devices/actions/list')
            ->server(Server::THINGSPACE)
            ->auth(Auth::and('thingspace_oauth', 'VZ-M2M-Token'))
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body)->required());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad request', EsimRestErrorResponseException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', EsimRestErrorResponseException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', EsimRestErrorResponseException::class))
            ->throwErrorOn(
                '404',
                ErrorType::init('Not Found / Does not exist', EsimRestErrorResponseException::class)
            )
            ->throwErrorOn(
                '406',
                ErrorType::init('Format / Request Unacceptable', EsimRestErrorResponseException::class)
            )
            ->throwErrorOn('429', ErrorType::init('Too many requests', EsimRestErrorResponseException::class))
            ->throwErrorOn('0', ErrorType::init('Error response', EsimRestErrorResponseException::class))
            ->type(EsimRequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
