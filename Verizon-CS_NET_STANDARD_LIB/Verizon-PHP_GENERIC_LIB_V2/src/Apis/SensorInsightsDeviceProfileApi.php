<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Apis;

use Core\Authentication\Auth;
use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\M400ManagementErrorException;
use VerizonLib\Exceptions\M403ManagementErrorException;
use VerizonLib\Exceptions\M500ManagementErrorException;
use VerizonLib\Exceptions\ManagementErrorException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\DtoConfigurationProfile;
use VerizonLib\Models\DtoConfigurationProfileDelete;
use VerizonLib\Models\DtoConfigurationProfilePath;
use VerizonLib\Models\DtoProfileResponse;
use VerizonLib\Models\ResourceResourceQuery;
use VerizonLib\Server;

class SensorInsightsDeviceProfileApi extends BaseApi
{
    /**
     * Create a device profile
     *
     * @param DtoConfigurationProfile $body
     *
     * @return ApiResponse Response from the API call
     */
    public function createAProfile(DtoConfigurationProfile $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/dm/v1/deviceConfigurationProfiles')
            ->server(Server::THINGSPACE)
            ->auth(Auth::and('thingspace_oauth', 'VZ-M2M-Token'))
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body)->required());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', M400ManagementErrorException::class))
            ->throwErrorOn('401', ErrorType::init('UnAuthorized', ManagementErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', M403ManagementErrorException::class))
            ->throwErrorOn('500', ErrorType::init('Internal server error.', M500ManagementErrorException::class))
            ->type(DtoProfileResponse::class, 1)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete a device profile
     *
     * @param DtoConfigurationProfileDelete $deleterequest payload for the delete request
     *
     * @return ApiResponse Response from the API call
     */
    public function deleteAProfile(DtoConfigurationProfileDelete $deleterequest): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/dm/v1/deviceConfigurationProfiles')
            ->server(Server::THINGSPACE)
            ->auth(Auth::and('thingspace_oauth', 'VZ-M2M-Token'))
            ->parameters(HeaderParam::init('deleterequest', $deleterequest)->required());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', M400ManagementErrorException::class))
            ->throwErrorOn('401', ErrorType::init('UnAuthorized', ManagementErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', M403ManagementErrorException::class))
            ->throwErrorOn('500', ErrorType::init('Internal server error.', M500ManagementErrorException::class))
            ->type(DtoProfileResponse::class, 1)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Partially update a device profile
     *
     * @param DtoConfigurationProfilePath $body
     *
     * @return ApiResponse Response from the API call
     */
    public function updateAProfile(DtoConfigurationProfilePath $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PATCH, '/dm/v1/deviceConfigurationProfiles')
            ->server(Server::THINGSPACE)
            ->auth(Auth::and('thingspace_oauth', 'VZ-M2M-Token'))
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body)->required());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', M400ManagementErrorException::class))
            ->throwErrorOn('401', ErrorType::init('UnAuthorized', ManagementErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', M403ManagementErrorException::class))
            ->throwErrorOn('500', ErrorType::init('Internal server error.', M500ManagementErrorException::class))
            ->type(DtoProfileResponse::class, 1)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Query a device profile for an individual device
     *
     * @param ResourceResourceQuery $body body
     *
     * @return ApiResponse Response from the API call
     */
    public function queryAProfile(ResourceResourceQuery $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/dm/v1/deviceConfigurationProfiles/actions/query'
        )
            ->server(Server::THINGSPACE)
            ->auth(Auth::and('thingspace_oauth', 'VZ-M2M-Token'))
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body)->required());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', M400ManagementErrorException::class))
            ->throwErrorOn('401', ErrorType::init('UnAuthorized', ManagementErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', M403ManagementErrorException::class))
            ->throwErrorOn('500', ErrorType::init('Internal server error.', M500ManagementErrorException::class))
            ->type(DtoProfileResponse::class, 1)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
