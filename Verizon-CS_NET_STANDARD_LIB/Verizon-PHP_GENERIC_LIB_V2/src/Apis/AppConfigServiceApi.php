<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Apis;

use Core\Authentication\Auth;
use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\AppConfigResponseErrorException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\ConfigurationListItem;
use VerizonLib\Models\GeoFenceConfigurationRequest;
use VerizonLib\Models\GeoFenceConfigurationResponse;
use VerizonLib\Models\GeoFenceConfigurationUpdateRequest;
use VerizonLib\Server;

class AppConfigServiceApi extends BaseApi
{
    /**
     * This endpoint fetches and returns the list of configurations defined by the Vendor. The list
     * contains the configurations' identifier, name, description, and active flag. The vendor ID is
     * provided when the configuration is created through the POST request.
     *
     * Note: The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and
     * Session/M2M tokens in order to call this API.
     *
     *
     * @param string $vendorId The vendor's identifier
     *
     * @return ApiResponse Response from the API call
     */
    public function getConfigurationList(string $vendorId): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/api/v1/application/configurations/geofence/ids')
            ->server(Server::IMP_SERVER)
            ->auth(Auth::and('thingspace_oauth', 'SessionToken'))
            ->parameters(HeaderParam::init('VendorID', $vendorId)->required());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('403', ErrorType::init('Forbidden', AppConfigResponseErrorException::class))
            ->throwErrorOn(
                '404',
                ErrorType::init('Configuration not found', AppConfigResponseErrorException::class)
            )
            ->throwErrorOn('429', ErrorType::init('Too many requests', AppConfigResponseErrorException::class))
            ->throwErrorOn('0', ErrorType::init('unexpected error', AppConfigResponseErrorException::class))
            ->type(ConfigurationListItem::class, 1)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint fetches and returns a specific configuration's details. The configuration ID parameter,
     * which was provided when the configuration was created through the POST request, is need to retrieve
     * the configuration details.
     *
     * Note: The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and
     * Session/M2M tokens in order to call this API.
     *
     *
     * @param string $id The configuration identifier
     * @param string $vendorId The vendor's identifier
     *
     * @return ApiResponse Response from the API call
     */
    public function getConfiguration(string $id, string $vendorId): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/api/v1/application/configurations/geofence')
            ->server(Server::IMP_SERVER)
            ->auth(Auth::and('thingspace_oauth', 'SessionToken'))
            ->parameters(
                QueryParam::init('id', $id)->required(),
                HeaderParam::init('VendorID', $vendorId)->required()
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('403', ErrorType::init('Forbidden', AppConfigResponseErrorException::class))
            ->throwErrorOn(
                '404',
                ErrorType::init('Configuration not found', AppConfigResponseErrorException::class)
            )
            ->throwErrorOn('429', ErrorType::init('Too many requests', AppConfigResponseErrorException::class))
            ->throwErrorOn('0', ErrorType::init('unexpected error', AppConfigResponseErrorException::class))
            ->type(GeoFenceConfigurationResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint creates a new configuration in the system. The data for the new configuration should
     * be provided as JSON in the body of the POST request. The system will return with a unique ID for the
     * configuration, which is needed for any further manipulation (update or delete) of the configuration.
     *
     * Note: The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and
     * Session/M2M tokens in order to call this API.
     *
     *
     * @param string $vendorId The vendor's identifier
     * @param GeoFenceConfigurationRequest $body
     *
     * @return ApiResponse Response from the API call
     */
    public function createConfiguration(string $vendorId, GeoFenceConfigurationRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/api/v1/application/configurations/geofence')
            ->server(Server::IMP_SERVER)
            ->auth(Auth::and('thingspace_oauth', 'SessionToken'))
            ->parameters(
                HeaderParam::init('VendorID', $vendorId)->required(),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)->required()
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid configuration', AppConfigResponseErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', AppConfigResponseErrorException::class))
            ->throwErrorOn('429', ErrorType::init('Too many requests', AppConfigResponseErrorException::class))
            ->throwErrorOn('0', ErrorType::init('unexpected error', AppConfigResponseErrorException::class))
            ->type(GeoFenceConfigurationResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint updates an existing configuration. Similar to POST, the updated data for the
     * configuration should be provided as JSON in the body of the PUT request. The configuration ID
     * parameter, which was provided by the POST (create) operation, is required to do any updates on the
     * configuration.
     *
     * Note: The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and
     * Session/M2M tokens in order to call this API.
     *
     *
     * @param string $vendorId The vendor's identifier
     * @param string $id The configuration identifier
     * @param GeoFenceConfigurationUpdateRequest $body
     *
     * @return ApiResponse Response from the API call
     */
    public function updateConfiguration(
        string $vendorId,
        string $id,
        GeoFenceConfigurationUpdateRequest $body
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/api/v1/application/configurations/geofence')
            ->server(Server::IMP_SERVER)
            ->auth(Auth::and('thingspace_oauth', 'SessionToken'))
            ->parameters(
                HeaderParam::init('VendorID', $vendorId)->required(),
                QueryParam::init('id', $id)->required(),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)->required()
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid configuration', AppConfigResponseErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', AppConfigResponseErrorException::class))
            ->throwErrorOn(
                '404',
                ErrorType::init('Configuration not found', AppConfigResponseErrorException::class)
            )
            ->throwErrorOn('429', ErrorType::init('Too many requests', AppConfigResponseErrorException::class))
            ->throwErrorOn('0', ErrorType::init('unexpected error', AppConfigResponseErrorException::class))
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint deletes a specific configuration from the system. It requires the configuration ID
     * parameter, which was provided by the POST (create) operation.
     *
     * Note: The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and
     * Session/M2M tokens in order to call this API.
     *
     *
     * @param string $vendorId The vendor's identifier
     * @param string $id The configuration identifier
     *
     * @return ApiResponse Response from the API call
     */
    public function deleteConfiguration(string $vendorId, string $id): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/api/v1/application/configurations/geofence')
            ->server(Server::IMP_SERVER)
            ->auth(Auth::and('thingspace_oauth', 'SessionToken'))
            ->parameters(
                HeaderParam::init('VendorID', $vendorId)->required(),
                QueryParam::init('id', $id)->required()
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('403', ErrorType::init('Forbidden', AppConfigResponseErrorException::class))
            ->throwErrorOn('429', ErrorType::init('Too many requests', AppConfigResponseErrorException::class))
            ->throwErrorOn('0', ErrorType::init('unexpected error', AppConfigResponseErrorException::class))
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
