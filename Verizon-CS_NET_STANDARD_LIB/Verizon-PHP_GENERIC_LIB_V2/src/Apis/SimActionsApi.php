<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Apis;

use Core\Authentication\Auth;
use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\EsimRestErrorResponseException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\EsimProfileRequest;
use VerizonLib\Models\EsimProfileRequest2;
use VerizonLib\Models\EsimRequestResponse;
use VerizonLib\Models\ProfileRequest2;
use VerizonLib\Server;

class SimActionsApi extends BaseApi
{
    /**
     * System assign a new activation code to reactivate a deactivated device. **Note:** the previously
     * assigned ICCID must be used to request a new activation code.
     *
     * @param EsimProfileRequest2 $body Device Profile Query
     *
     * @return ApiResponse Response from the API call
     */
    public function newactivatecode(EsimProfileRequest2 $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/m2m/v1/devices/profile/actions/renew_activation_code'
        )
            ->server(Server::THINGSPACE)
            ->auth(Auth::and('thingspace_oauth', 'VZ-M2M-Token'))
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body)->required());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad request', EsimRestErrorResponseException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', EsimRestErrorResponseException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', EsimRestErrorResponseException::class))
            ->throwErrorOn(
                '404',
                ErrorType::init('Not Found / Does not exist', EsimRestErrorResponseException::class)
            )
            ->throwErrorOn(
                '406',
                ErrorType::init('Format / Request Unacceptable', EsimRestErrorResponseException::class)
            )
            ->throwErrorOn('429', ErrorType::init('Too many requests', EsimRestErrorResponseException::class))
            ->throwErrorOn('0', ErrorType::init('Error response', EsimRestErrorResponseException::class))
            ->type(EsimRequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Uses the profile to activate the SIM.
     *
     * @param EsimProfileRequest $body Device Profile Query
     *
     * @return ApiResponse Response from the API call
     */
    public function setactivateUsingPost(EsimProfileRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/profile/actions/activate')
            ->server(Server::THINGSPACE)
            ->auth(Auth::and('thingspace_oauth', 'VZ-M2M-Token'))
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body)->required());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad request', EsimRestErrorResponseException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', EsimRestErrorResponseException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', EsimRestErrorResponseException::class))
            ->throwErrorOn(
                '404',
                ErrorType::init('Not Found / Does not exist', EsimRestErrorResponseException::class)
            )
            ->throwErrorOn(
                '406',
                ErrorType::init('Format / Request Unacceptable', EsimRestErrorResponseException::class)
            )
            ->throwErrorOn('429', ErrorType::init('Too many requests', EsimRestErrorResponseException::class))
            ->throwErrorOn('0', ErrorType::init('Error response', EsimRestErrorResponseException::class))
            ->type(EsimRequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Uses the profile to deactivate the SIM.
     *
     * @param ProfileRequest2 $body Device Profile Query
     *
     * @return ApiResponse Response from the API call
     */
    public function setdeactivateUsingPost(ProfileRequest2 $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/profile/actions/deactivate')
            ->server(Server::THINGSPACE)
            ->auth(Auth::and('thingspace_oauth', 'VZ-M2M-Token'))
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body)->required());

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad request', EsimRestErrorResponseException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', EsimRestErrorResponseException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', EsimRestErrorResponseException::class))
            ->throwErrorOn(
                '404',
                ErrorType::init('Not Found / Does not exist', EsimRestErrorResponseException::class)
            )
            ->throwErrorOn(
                '406',
                ErrorType::init('Format / Request Unacceptable', EsimRestErrorResponseException::class)
            )
            ->throwErrorOn('429', ErrorType::init('Too many requests', EsimRestErrorResponseException::class))
            ->throwErrorOn('0', ErrorType::init('Error response', EsimRestErrorResponseException::class))
            ->type(EsimRequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
