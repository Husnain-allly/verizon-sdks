<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib;

use CoreInterfaces\Http\HttpConfigurations;
use VerizonLib\Authentication\SessionTokenCredentials;
use VerizonLib\Authentication\SessionTokenCredentialsBuilder;
use VerizonLib\Authentication\ThingspaceOauth1Credentials;
use VerizonLib\Authentication\ThingspaceOauth1CredentialsBuilder;
use VerizonLib\Authentication\ThingspaceOauthCredentials;
use VerizonLib\Authentication\ThingspaceOauthCredentialsBuilder;
use VerizonLib\Authentication\VzM2MTokenCredentials;
use VerizonLib\Authentication\VzM2MTokenCredentialsBuilder;
use VerizonLib\Logging\LoggingConfigurationBuilder;
use VerizonLib\Proxy\ProxyConfigurationBuilder;

/**
 * An interface for all configuration parameters required by the SDK.
 */
interface ConfigurationInterface extends HttpConfigurations
{
    /**
     * Get current API environment
     */
    public function getEnvironment(): string;

    /**
     * Get the credentials to use with ThingspaceOauth
     */
    public function getThingspaceOauthCredentials(): ThingspaceOauthCredentials;

    /**
     * Get the credentials builder instance to update credentials for ThingspaceOauth
     */
    public function getThingspaceOauthCredentialsBuilder(): ?ThingspaceOauthCredentialsBuilder;

    /**
     * Get the credentials to use with VzM2MToken
     */
    public function getVzM2MTokenCredentials(): VzM2MTokenCredentials;

    /**
     * Get the credentials builder instance to update credentials for VzM2MToken
     */
    public function getVzM2MTokenCredentialsBuilder(): ?VzM2MTokenCredentialsBuilder;

    /**
     * Get the credentials to use with ThingspaceOauth1
     */
    public function getThingspaceOauth1Credentials(): ThingspaceOauth1Credentials;

    /**
     * Get the credentials builder instance to update credentials for ThingspaceOauth1
     */
    public function getThingspaceOauth1CredentialsBuilder(): ?ThingspaceOauth1CredentialsBuilder;

    /**
     * Get the credentials to use with SessionToken
     */
    public function getSessionTokenCredentials(): SessionTokenCredentials;

    /**
     * Get the credentials builder instance to update credentials for SessionToken
     */
    public function getSessionTokenCredentialsBuilder(): ?SessionTokenCredentialsBuilder;

    /**
     * Represents the logging configurations for API calls.
     */
    public function getLoggingConfigurationBuilder(): ?LoggingConfigurationBuilder;

    /**
     * Represents the proxy configurations for API calls.
     */
    public function getProxyConfigurationBuilder(): ProxyConfigurationBuilder;

    /**
     * Get the base uri for a given server in the current environment.
     *
     * @param string $server Server name
     *
     * @return string Base URI
     */
    public function getBaseUri(string $server = Server::EDGE_DISCOVERY): string;
}
