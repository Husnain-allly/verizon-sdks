<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib;

use Core\Types\Sdk\CoreCallback;
use Core\Utils\CoreHelper;
use VerizonLib\Authentication\SessionTokenCredentialsBuilder;
use VerizonLib\Authentication\ThingspaceOauth1CredentialsBuilder;
use VerizonLib\Authentication\ThingspaceOauthCredentialsBuilder;
use VerizonLib\Authentication\VzM2MTokenCredentialsBuilder;
use VerizonLib\Logging\LoggingConfigurationBuilder;
use VerizonLib\Proxy\ProxyConfigurationBuilder;

class VerizonClientBuilder
{
    /**
     * @var array
     */
    private $config = [];

    /**
     * @phan-suppress PhanEmptyPrivateMethod
     */
    private function __construct()
    {
    }

    public static function init(): self
    {
        return new self();
    }

    public function getConfiguration(): array
    {
        return CoreHelper::clone($this->config);
    }

    public function timeout(int $timeout): self
    {
        $this->config['timeout'] = $timeout;
        return $this;
    }

    public function enableRetries(bool $enableRetries): self
    {
        $this->config['enableRetries'] = $enableRetries;
        return $this;
    }

    public function numberOfRetries(int $numberOfRetries): self
    {
        $this->config['numberOfRetries'] = $numberOfRetries;
        return $this;
    }

    public function retryInterval(float $retryInterval): self
    {
        $this->config['retryInterval'] = $retryInterval;
        return $this;
    }

    public function backOffFactor(float $backOffFactor): self
    {
        $this->config['backOffFactor'] = $backOffFactor;
        return $this;
    }

    public function maximumRetryWaitTime(int $maximumRetryWaitTime): self
    {
        $this->config['maximumRetryWaitTime'] = $maximumRetryWaitTime;
        return $this;
    }

    public function retryOnTimeout(bool $retryOnTimeout): self
    {
        $this->config['retryOnTimeout'] = $retryOnTimeout;
        return $this;
    }

    /**
     * @param int[] $httpStatusCodesToRetry
     *
     * @return $this
     */
    public function httpStatusCodesToRetry(array $httpStatusCodesToRetry): self
    {
        $this->config['httpStatusCodesToRetry'] = $httpStatusCodesToRetry;
        return $this;
    }

    /**
     * @param string[] $httpMethodsToRetry
     *
     * @return $this
     */
    public function httpMethodsToRetry(array $httpMethodsToRetry): self
    {
        $this->config['httpMethodsToRetry'] = $httpMethodsToRetry;
        return $this;
    }

    public function environment(string $environment): self
    {
        $this->config['environment'] = $environment;
        return $this;
    }

    public function thingspaceOauthCredentials(ThingspaceOauthCredentialsBuilder $thingspaceOauth): self
    {
        $this->config = array_merge($this->config, $thingspaceOauth->getConfiguration());
        return $this;
    }

    public function vzM2MTokenCredentials(VzM2MTokenCredentialsBuilder $vzM2MToken): self
    {
        $this->config = array_merge($this->config, $vzM2MToken->getConfiguration());
        return $this;
    }

    public function thingspaceOauth1Credentials(ThingspaceOauth1CredentialsBuilder $thingspaceOauth1): self
    {
        $this->config = array_merge($this->config, $thingspaceOauth1->getConfiguration());
        return $this;
    }

    public function sessionTokenCredentials(SessionTokenCredentialsBuilder $sessionToken): self
    {
        $this->config = array_merge($this->config, $sessionToken->getConfiguration());
        return $this;
    }

    public function httpCallback($httpCallback): self
    {
        if (!$httpCallback instanceof CoreCallback) {
            return $this;
        }
        $this->config['httpCallback'] = $httpCallback;
        return $this;
    }

    public function loggingConfiguration(LoggingConfigurationBuilder $loggingConfiguration): self
    {
        $this->config['loggingConfiguration'] = $loggingConfiguration;
        return $this;
    }

    public function proxyConfiguration(ProxyConfigurationBuilder $proxyConfiguration): self
    {
        $this->config['proxyConfiguration'] = $proxyConfiguration->getConfiguration();
        return $this;
    }

    public function build(): VerizonClient
    {
        return new VerizonClient($this->config);
    }
}
