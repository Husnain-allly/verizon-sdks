/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.AdditionalProperties;
import io.apimatic.core.utilities.ConversionHelper;
import java.util.List;
import java.util.Map;

/**
 * This is a model class for ObservationRequest type.
 */
public class ObservationRequest {
    private String accountName;
    private List<Device> devices;
    private List<ObservationRequestAttribute> attributes;
    private NumericalData frequency;
    private NumericalData duration;
    private AdditionalProperties<Object> additionalProperties = 
            new AdditionalProperties<Object>(this.getClass());

    /**
     * Default constructor.
     */
    public ObservationRequest() {
    }

    /**
     * Initialization constructor.
     * @param  accountName  String value for accountName.
     * @param  devices  List of Device value for devices.
     * @param  attributes  List of ObservationRequestAttribute value for attributes.
     * @param  frequency  NumericalData value for frequency.
     * @param  duration  NumericalData value for duration.
     */
    public ObservationRequest(
            String accountName,
            List<Device> devices,
            List<ObservationRequestAttribute> attributes,
            NumericalData frequency,
            NumericalData duration) {
        this.accountName = accountName;
        this.devices = devices;
        this.attributes = attributes;
        this.frequency = frequency;
        this.duration = duration;
    }

    /**
     * Getter for AccountName.
     * Account identifier in "##########-#####".
     * @return Returns the String
     */
    @JsonGetter("accountName")
    public String getAccountName() {
        return accountName;
    }

    /**
     * Setter for AccountName.
     * Account identifier in "##########-#####".
     * @param accountName Value for String
     */
    @JsonSetter("accountName")
    public void setAccountName(String accountName) {
        this.accountName = accountName;
    }

    /**
     * Getter for Devices.
     * List of devices.
     * @return Returns the List of Device
     */
    @JsonGetter("devices")
    public List<Device> getDevices() {
        return devices;
    }

    /**
     * Setter for Devices.
     * List of devices.
     * @param devices Value for List of Device
     */
    @JsonSetter("devices")
    public void setDevices(List<Device> devices) {
        this.devices = devices;
    }

    /**
     * Getter for Attributes.
     * Attributes are streaming RF parameters that you want to observe.
     * @return Returns the List of ObservationRequestAttribute
     */
    @JsonGetter("attributes")
    public List<ObservationRequestAttribute> getAttributes() {
        return attributes;
    }

    /**
     * Setter for Attributes.
     * Attributes are streaming RF parameters that you want to observe.
     * @param attributes Value for List of ObservationRequestAttribute
     */
    @JsonSetter("attributes")
    public void setAttributes(List<ObservationRequestAttribute> attributes) {
        this.attributes = attributes;
    }

    /**
     * Getter for Frequency.
     * Describes value and unit of time.
     * @return Returns the NumericalData
     */
    @JsonGetter("frequency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public NumericalData getFrequency() {
        return frequency;
    }

    /**
     * Setter for Frequency.
     * Describes value and unit of time.
     * @param frequency Value for NumericalData
     */
    @JsonSetter("frequency")
    public void setFrequency(NumericalData frequency) {
        this.frequency = frequency;
    }

    /**
     * Getter for Duration.
     * Describes value and unit of time.
     * @return Returns the NumericalData
     */
    @JsonGetter("duration")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public NumericalData getDuration() {
        return duration;
    }

    /**
     * Setter for Duration.
     * Describes value and unit of time.
     * @param duration Value for NumericalData
     */
    @JsonSetter("duration")
    public void setDuration(NumericalData duration) {
        this.duration = duration;
    }

    /**
     * Hidden method for the serialization of additional properties.
     * @return The map of additionally set properties.
     */
    @JsonAnyGetter
    private Map<String, Object> getAdditionalProperties() {
        return additionalProperties.getAdditionalProperties();
    }

    /**
     * Hidden method for the de-serialization of additional properties.
     * @param name The name of the additional property.
     * @param value The Object value of the additional property.
     */
    @JsonAnySetter
    private void setAdditionalProperties(String name, Object value) {
        additionalProperties.setAdditionalProperty(name,
                ConversionHelper.convertToSimpleType(value,
                        x -> x),
                true);
    }

    /**
     * Getter for the value of additional properties based on provided property name.
     * @param name The name of the additional property.
     * @return Either the Object property value or null if not exist.
     */
    
    public Object getAdditionalProperty(String name) {
        return additionalProperties.getAdditionalProperty(name);
    }

    /**
     * Converts this ObservationRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ObservationRequest [" + "accountName=" + accountName + ", devices=" + devices
                + ", attributes=" + attributes + ", frequency=" + frequency + ", duration="
                + duration + ", additionalProperties=" + additionalProperties + "]";
    }

    /**
     * Builds a new {@link ObservationRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ObservationRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(accountName, devices, attributes)
                .frequency(getFrequency())
                .duration(getDuration());
        builder.additionalProperties = additionalProperties;
        return builder;
    }

    /**
     * Class to build instances of {@link ObservationRequest}.
     */
    public static class Builder {
        private String accountName;
        private List<Device> devices;
        private List<ObservationRequestAttribute> attributes;
        private NumericalData frequency;
        private NumericalData duration;
        private AdditionalProperties<Object> additionalProperties =
                new AdditionalProperties<Object>();

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  accountName  String value for accountName.
         * @param  devices  List of Device value for devices.
         * @param  attributes  List of ObservationRequestAttribute value for attributes.
         */
        public Builder(String accountName, List<Device> devices,
                List<ObservationRequestAttribute> attributes) {
            this.accountName = accountName;
            this.devices = devices;
            this.attributes = attributes;
        }

        /**
         * Setter for accountName.
         * @param  accountName  String value for accountName.
         * @return Builder
         */
        public Builder accountName(String accountName) {
            this.accountName = accountName;
            return this;
        }

        /**
         * Setter for devices.
         * @param  devices  List of Device value for devices.
         * @return Builder
         */
        public Builder devices(List<Device> devices) {
            this.devices = devices;
            return this;
        }

        /**
         * Setter for attributes.
         * @param  attributes  List of ObservationRequestAttribute value for attributes.
         * @return Builder
         */
        public Builder attributes(List<ObservationRequestAttribute> attributes) {
            this.attributes = attributes;
            return this;
        }

        /**
         * Setter for frequency.
         * @param  frequency  NumericalData value for frequency.
         * @return Builder
         */
        public Builder frequency(NumericalData frequency) {
            this.frequency = frequency;
            return this;
        }

        /**
         * Setter for duration.
         * @param  duration  NumericalData value for duration.
         * @return Builder
         */
        public Builder duration(NumericalData duration) {
            this.duration = duration;
            return this;
        }

        /**
         * Setter for additional property that are not in model fields.
         * @param name The name of the additional property.
         * @param value The Object value of the additional property.
         * @return Builder.
         */
        public Builder additionalProperty(String name, Object value) {
            this.additionalProperties.setAdditionalProperty(name, value);
            return this;
        }

        /**
         * Builds a new {@link ObservationRequest} object using the set fields.
         * @return {@link ObservationRequest}
         */
        public ObservationRequest build() {
            ObservationRequest model =
                    new ObservationRequest(accountName, devices, attributes, frequency, duration);
            model.additionalProperties = additionalProperties;
            return model;
        }
    }
}
