/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.apis;

import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.Server;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.exceptions.M400ManagementErrorException;
import com.verizon.m5gedge.exceptions.M403ManagementErrorException;
import com.verizon.m5gedge.exceptions.M404ManagementErrorException;
import com.verizon.m5gedge.exceptions.M500ManagementErrorException;
import com.verizon.m5gedge.exceptions.ManagementErrorException;
import com.verizon.m5gedge.http.request.HttpMethod;
import com.verizon.m5gedge.http.response.ApiResponse;
import com.verizon.m5gedge.models.DtoAddUsersToNotificationGroupRequest;
import com.verizon.m5gedge.models.DtoCreateNotificationGroupRequest;
import com.verizon.m5gedge.models.DtoDeleteNotificationGroupRequest;
import com.verizon.m5gedge.models.DtoListNotificationGroupRequest;
import com.verizon.m5gedge.models.DtoNotificationGroupResponseEntity;
import com.verizon.m5gedge.models.DtoRemoveUsersFromNotificationGroupRequest;
import com.verizon.m5gedge.models.DtoUpdateNotificationGroupRequest;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class SensorInsightsNotificationGroupsApi extends BaseApi {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public SensorInsightsNotificationGroupsApi(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * @param  body  Required parameter: Retrieve a notification group
     * @return    Returns the List of DtoNotificationGroupResponseEntity wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<List<DtoNotificationGroupResponseEntity>> sensorInsightsListNotificationGroupRequest(
            final DtoListNotificationGroupRequest body) throws ApiException, IOException {
        return prepareSensorInsightsListNotificationGroupRequestRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Retrieve a notification group
     * @return    Returns the List of DtoNotificationGroupResponseEntity wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<List<DtoNotificationGroupResponseEntity>>> sensorInsightsListNotificationGroupRequestAsync(
            final DtoListNotificationGroupRequest body) {
        try {
            return prepareSensorInsightsListNotificationGroupRequestRequest(body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for sensorInsightsListNotificationGroupRequest.
     */
    private ApiCall<ApiResponse<List<DtoNotificationGroupResponseEntity>>, ApiException> prepareSensorInsightsListNotificationGroupRequestRequest(
            final DtoListNotificationGroupRequest body) {
        return new ApiCall.Builder<ApiResponse<List<DtoNotificationGroupResponseEntity>>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/dm/v1/notificationGroups/actions/query")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        DtoNotificationGroupResponseEntity[].class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Request",
                                (reason, context) -> new M400ManagementErrorException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("UnAuthorized",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden",
                                (reason, context) -> new M403ManagementErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Not Found",
                                (reason, context) -> new M404ManagementErrorException(reason, context)))
                        .localErrorCase("406",
                                 ErrorCase.setReason("Not Acceptable",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("415",
                                 ErrorCase.setReason("Unsupported media type",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("Too many requests",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal server error.",
                                (reason, context) -> new M500ManagementErrorException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Unexpected error",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Partially update a notification group
     * @return    Returns the DtoNotificationGroupResponseEntity wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DtoNotificationGroupResponseEntity> sensorInsightsUpdateNotificationGroupRequest(
            final DtoUpdateNotificationGroupRequest body) throws ApiException, IOException {
        return prepareSensorInsightsUpdateNotificationGroupRequestRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Partially update a notification group
     * @return    Returns the DtoNotificationGroupResponseEntity wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DtoNotificationGroupResponseEntity>> sensorInsightsUpdateNotificationGroupRequestAsync(
            final DtoUpdateNotificationGroupRequest body) {
        try {
            return prepareSensorInsightsUpdateNotificationGroupRequestRequest(body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for sensorInsightsUpdateNotificationGroupRequest.
     */
    private ApiCall<ApiResponse<DtoNotificationGroupResponseEntity>, ApiException> prepareSensorInsightsUpdateNotificationGroupRequestRequest(
            final DtoUpdateNotificationGroupRequest body) {
        return new ApiCall.Builder<ApiResponse<DtoNotificationGroupResponseEntity>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/dm/v1/notificationGroups")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DtoNotificationGroupResponseEntity.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Request",
                                (reason, context) -> new M400ManagementErrorException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("UnAuthorized",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden",
                                (reason, context) -> new M403ManagementErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Not Found",
                                (reason, context) -> new M404ManagementErrorException(reason, context)))
                        .localErrorCase("406",
                                 ErrorCase.setReason("Not Acceptable",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("415",
                                 ErrorCase.setReason("Unsupported media type",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("Too many requests",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal server error.",
                                (reason, context) -> new M500ManagementErrorException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Unexpected error",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Create a notification group
     * @return    Returns the DtoNotificationGroupResponseEntity wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DtoNotificationGroupResponseEntity> sensorInsightsCreateNotificationGroupRequest(
            final DtoCreateNotificationGroupRequest body) throws ApiException, IOException {
        return prepareSensorInsightsCreateNotificationGroupRequestRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Create a notification group
     * @return    Returns the DtoNotificationGroupResponseEntity wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DtoNotificationGroupResponseEntity>> sensorInsightsCreateNotificationGroupRequestAsync(
            final DtoCreateNotificationGroupRequest body) {
        try {
            return prepareSensorInsightsCreateNotificationGroupRequestRequest(body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for sensorInsightsCreateNotificationGroupRequest.
     */
    private ApiCall<ApiResponse<DtoNotificationGroupResponseEntity>, ApiException> prepareSensorInsightsCreateNotificationGroupRequestRequest(
            final DtoCreateNotificationGroupRequest body) {
        return new ApiCall.Builder<ApiResponse<DtoNotificationGroupResponseEntity>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/dm/v1/notificationGroups")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DtoNotificationGroupResponseEntity.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Request",
                                (reason, context) -> new M400ManagementErrorException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("UnAuthorized",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden",
                                (reason, context) -> new M403ManagementErrorException(reason, context)))
                        .localErrorCase("406",
                                 ErrorCase.setReason("Not Acceptable",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("415",
                                 ErrorCase.setReason("Unsupported media type",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("Too many requests",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal server error.",
                                (reason, context) -> new M500ManagementErrorException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Unexpected error",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  payload  Required parameter: Payload for the delete request.
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> sensorInsightsDeleteNotificationGroup(
            final DtoDeleteNotificationGroupRequest payload) throws ApiException, IOException {
        return prepareSensorInsightsDeleteNotificationGroupRequest(payload).execute();
    }

    /**
     * @param  payload  Required parameter: Payload for the delete request.
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> sensorInsightsDeleteNotificationGroupAsync(
            final DtoDeleteNotificationGroupRequest payload) {
        try {
            return prepareSensorInsightsDeleteNotificationGroupRequest(payload).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for sensorInsightsDeleteNotificationGroup.
     */
    private ApiCall<ApiResponse<Void>, ApiException> prepareSensorInsightsDeleteNotificationGroupRequest(
            final DtoDeleteNotificationGroupRequest payload) {
        return new ApiCall.Builder<ApiResponse<Void>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/dm/v1/notificationGroups")
                        .queryParam(param -> param.key("payload")
                                .value(payload))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Request",
                                (reason, context) -> new M400ManagementErrorException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("UnAuthorized",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden",
                                (reason, context) -> new M403ManagementErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Not Found",
                                (reason, context) -> new M404ManagementErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Add users to a notification group
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> sensorInsightsAddUsersToNotificationGroupRequest(
            final DtoAddUsersToNotificationGroupRequest body) throws ApiException, IOException {
        return prepareSensorInsightsAddUsersToNotificationGroupRequestRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Add users to a notification group
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> sensorInsightsAddUsersToNotificationGroupRequestAsync(
            final DtoAddUsersToNotificationGroupRequest body) {
        try {
            return prepareSensorInsightsAddUsersToNotificationGroupRequestRequest(body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for sensorInsightsAddUsersToNotificationGroupRequest.
     */
    private ApiCall<ApiResponse<Void>, ApiException> prepareSensorInsightsAddUsersToNotificationGroupRequestRequest(
            final DtoAddUsersToNotificationGroupRequest body) {
        return new ApiCall.Builder<ApiResponse<Void>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/dm/v1/notificationGroups/actions/add-users")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Request",
                                (reason, context) -> new M400ManagementErrorException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("UnAuthorized",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden",
                                (reason, context) -> new M403ManagementErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Not Found",
                                (reason, context) -> new M404ManagementErrorException(reason, context)))
                        .localErrorCase("406",
                                 ErrorCase.setReason("Not Acceptable",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("415",
                                 ErrorCase.setReason("Unsupported media type",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("Too many requests",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal server error.",
                                (reason, context) -> new M500ManagementErrorException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Unexpected error",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Remove users from a notification group
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> sensorInsightsRemoveUsersFromNotificationGroupRequest(
            final DtoRemoveUsersFromNotificationGroupRequest body) throws ApiException, IOException {
        return prepareSensorInsightsRemoveUsersFromNotificationGroupRequestRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Remove users from a notification group
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> sensorInsightsRemoveUsersFromNotificationGroupRequestAsync(
            final DtoRemoveUsersFromNotificationGroupRequest body) {
        try {
            return prepareSensorInsightsRemoveUsersFromNotificationGroupRequestRequest(body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for sensorInsightsRemoveUsersFromNotificationGroupRequest.
     */
    private ApiCall<ApiResponse<Void>, ApiException> prepareSensorInsightsRemoveUsersFromNotificationGroupRequestRequest(
            final DtoRemoveUsersFromNotificationGroupRequest body) {
        return new ApiCall.Builder<ApiResponse<Void>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/dm/v1/notificationGroups/actions/remove-users")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Request",
                                (reason, context) -> new M400ManagementErrorException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("UnAuthorized",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden",
                                (reason, context) -> new M403ManagementErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Not Found",
                                (reason, context) -> new M404ManagementErrorException(reason, context)))
                        .localErrorCase("406",
                                 ErrorCase.setReason("Not Acceptable",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("415",
                                 ErrorCase.setReason("Unsupported media type",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("Too many requests",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal server error.",
                                (reason, context) -> new M500ManagementErrorException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Unexpected error",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}