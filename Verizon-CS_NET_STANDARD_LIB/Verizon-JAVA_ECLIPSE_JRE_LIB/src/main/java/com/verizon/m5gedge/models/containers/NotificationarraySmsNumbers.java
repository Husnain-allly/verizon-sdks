/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.models.Cellphonenumber;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;

/**
 * This is a container class for any-of types.
 */
@JsonDeserialize(using = NotificationarraySmsNumbers.NotificationarraySmsNumbersDeserializer.class)
public abstract class NotificationarraySmsNumbers {
    
    /**
     * This is cellphonenumber case.
     * @param cellphonenumber Cellphonenumber value for cellphonenumber.
     * @return The CellphonenumberCase object.
     */
    public static NotificationarraySmsNumbers fromCellphonenumber(Cellphonenumber cellphonenumber) {
        return cellphonenumber == null ? null : new CellphonenumberCase(cellphonenumber);
    }

    /**
     * Method to match from the provided any-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The any-of type cases callback.
     * @return The any-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for any-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R cellphonenumber(Cellphonenumber cellphonenumber);
    }

    /**
     * This is a implementation class for CellphonenumberCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "Cellphonenumber")
    private static class CellphonenumberCase extends NotificationarraySmsNumbers {

        @JsonValue
        private Cellphonenumber cellphonenumber;

        CellphonenumberCase(Cellphonenumber cellphonenumber) {
            this.cellphonenumber = cellphonenumber;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.cellphonenumber(this.cellphonenumber);
        }

        @JsonCreator
        private CellphonenumberCase(JsonNode jsonNode) throws IOException {
            this.cellphonenumber = ApiHelper.deserialize(jsonNode,
                Cellphonenumber.class);
        }

        @Override
        public String toString() {
            return cellphonenumber.toString();
        }
    }

    /**
     * This is a custom deserializer class for NotificationarraySmsNumbers.
     */
    protected static class NotificationarraySmsNumbersDeserializer
            extends JsonDeserializer<NotificationarraySmsNumbers> {

        @Override
        public NotificationarraySmsNumbers deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(CellphonenumberCase.class), false);
        }
    }

}
