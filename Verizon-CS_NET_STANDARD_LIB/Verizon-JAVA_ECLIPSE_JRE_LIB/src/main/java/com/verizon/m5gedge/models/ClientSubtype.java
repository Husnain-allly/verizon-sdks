/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;


/**
 * ClientSubtype to be used.
 */
public enum ClientSubtype {
    PASSENGERCAR,

    TRUCK,

    BUS,

    EMERGENCYVEHICLE,

    SCHOOLBUS,

    MAINTENANCEVEHICLE,

    PEDESTRIAN,

    BICYCLE,

    SCOOTER,

    MOTORCYCLE,

    ROADSIDEUNIT,

    CAMERA,

    LIDAR,

    RADAR,

    INDUCTIVELOOP,

    MAGNETICSENSOR,

    PLATFORM,

    APPLICATION,

    NA;


    private static TreeMap<String, ClientSubtype> valueMap = new TreeMap<>();
    private String value;

    static {
        PASSENGERCAR.value = "PassengerCar";
        TRUCK.value = "Truck";
        BUS.value = "Bus";
        EMERGENCYVEHICLE.value = "EmergencyVehicle";
        SCHOOLBUS.value = "SchoolBus";
        MAINTENANCEVEHICLE.value = "MaintenanceVehicle";
        PEDESTRIAN.value = "Pedestrian";
        BICYCLE.value = "Bicycle";
        SCOOTER.value = "Scooter";
        MOTORCYCLE.value = "Motorcycle";
        ROADSIDEUNIT.value = "RoadSideUnit";
        CAMERA.value = "Camera";
        LIDAR.value = "Lidar";
        RADAR.value = "Radar";
        INDUCTIVELOOP.value = "InductiveLoop";
        MAGNETICSENSOR.value = "MagneticSensor";
        PLATFORM.value = "Platform";
        APPLICATION.value = "Application";
        NA.value = "NA";

        valueMap.put("PassengerCar", PASSENGERCAR);
        valueMap.put("Truck", TRUCK);
        valueMap.put("Bus", BUS);
        valueMap.put("EmergencyVehicle", EMERGENCYVEHICLE);
        valueMap.put("SchoolBus", SCHOOLBUS);
        valueMap.put("MaintenanceVehicle", MAINTENANCEVEHICLE);
        valueMap.put("Pedestrian", PEDESTRIAN);
        valueMap.put("Bicycle", BICYCLE);
        valueMap.put("Scooter", SCOOTER);
        valueMap.put("Motorcycle", MOTORCYCLE);
        valueMap.put("RoadSideUnit", ROADSIDEUNIT);
        valueMap.put("Camera", CAMERA);
        valueMap.put("Lidar", LIDAR);
        valueMap.put("Radar", RADAR);
        valueMap.put("InductiveLoop", INDUCTIVELOOP);
        valueMap.put("MagneticSensor", MAGNETICSENSOR);
        valueMap.put("Platform", PLATFORM);
        valueMap.put("Application", APPLICATION);
        valueMap.put("NA", NA);
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     * @throws IOException when provided value is not mapped to any enum member.
     */
    @JsonCreator
    public static ClientSubtype constructFromString(String toConvert) throws IOException {
        ClientSubtype enumValue = fromString(toConvert);
        if (enumValue == null) {
            throw new IOException("Unable to create enum instance with value: " + toConvert);
        }
        return enumValue;
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     */
    public static ClientSubtype fromString(String toConvert) {
        return valueMap.get(toConvert);
    }

    /**
     * Returns the string value associated with the enum member.
     * @return The string value against enum member.
     */
    @JsonValue
    public String value() {
        return value;
    }
        
    /**
     * Get string representation of this enum.
     */
    @Override
    public String toString() {
        return value.toString();
    }

    /**
     * Convert list of ClientSubtype values to list of string values.
     * @param toConvert The list of ClientSubtype values to convert.
     * @return List of representative string values.
     */
    public static List<String> toValue(List<ClientSubtype> toConvert) {
        if (toConvert == null) {
            return null;
        }
        List<String> convertedValues = new ArrayList<>();
        for (ClientSubtype enumValue : toConvert) {
            convertedValues.add(enumValue.value);
        }
        return convertedValues;
    }
} 