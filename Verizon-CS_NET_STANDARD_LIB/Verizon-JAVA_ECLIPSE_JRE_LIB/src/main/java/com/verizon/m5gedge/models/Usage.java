/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.AdditionalProperties;
import io.apimatic.core.utilities.ConversionHelper;
import java.util.List;
import java.util.Map;

/**
 * This is a model class for Usage type.
 */
public class Usage {
    private Long bytesUsed;
    private List<CustomFields> extendedAttributes;
    private String servicePlan;
    private Integer smsUsed;
    private String source;
    private String timestamp;
    private AdditionalProperties<Object> additionalProperties = 
            new AdditionalProperties<Object>(this.getClass());

    /**
     * Default constructor.
     */
    public Usage() {
    }

    /**
     * Initialization constructor.
     * @param  bytesUsed  Long value for bytesUsed.
     * @param  extendedAttributes  List of CustomFields value for extendedAttributes.
     * @param  servicePlan  String value for servicePlan.
     * @param  smsUsed  Integer value for smsUsed.
     * @param  source  String value for source.
     * @param  timestamp  String value for timestamp.
     */
    public Usage(
            Long bytesUsed,
            List<CustomFields> extendedAttributes,
            String servicePlan,
            Integer smsUsed,
            String source,
            String timestamp) {
        this.bytesUsed = bytesUsed;
        this.extendedAttributes = extendedAttributes;
        this.servicePlan = servicePlan;
        this.smsUsed = smsUsed;
        this.source = source;
        this.timestamp = timestamp;
    }

    /**
     * Getter for BytesUsed.
     * The number of bytes that the device sent or received on the report date.
     * @return Returns the Long
     */
    @JsonGetter("bytesUsed")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getBytesUsed() {
        return bytesUsed;
    }

    /**
     * Setter for BytesUsed.
     * The number of bytes that the device sent or received on the report date.
     * @param bytesUsed Value for Long
     */
    @JsonSetter("bytesUsed")
    public void setBytesUsed(Long bytesUsed) {
        this.bytesUsed = bytesUsed;
    }

    /**
     * Getter for ExtendedAttributes.
     * The number of mobile-originated and mobile-terminated SMS messages on the report date.
     * @return Returns the List of CustomFields
     */
    @JsonGetter("extendedAttributes")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<CustomFields> getExtendedAttributes() {
        return extendedAttributes;
    }

    /**
     * Setter for ExtendedAttributes.
     * The number of mobile-originated and mobile-terminated SMS messages on the report date.
     * @param extendedAttributes Value for List of CustomFields
     */
    @JsonSetter("extendedAttributes")
    public void setExtendedAttributes(List<CustomFields> extendedAttributes) {
        this.extendedAttributes = extendedAttributes;
    }

    /**
     * Getter for ServicePlan.
     * The list of service plans associated with the device/account.
     * @return Returns the String
     */
    @JsonGetter("servicePlan")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getServicePlan() {
        return servicePlan;
    }

    /**
     * Setter for ServicePlan.
     * The list of service plans associated with the device/account.
     * @param servicePlan Value for String
     */
    @JsonSetter("servicePlan")
    public void setServicePlan(String servicePlan) {
        this.servicePlan = servicePlan;
    }

    /**
     * Getter for SmsUsed.
     * The number of SMS messages that were sent or received on the report date.
     * @return Returns the Integer
     */
    @JsonGetter("smsUsed")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getSmsUsed() {
        return smsUsed;
    }

    /**
     * Setter for SmsUsed.
     * The number of SMS messages that were sent or received on the report date.
     * @param smsUsed Value for Integer
     */
    @JsonSetter("smsUsed")
    public void setSmsUsed(Integer smsUsed) {
        this.smsUsed = smsUsed;
    }

    /**
     * Getter for Source.
     * The source of the information for the reported usage.
     * @return Returns the String
     */
    @JsonGetter("source")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSource() {
        return source;
    }

    /**
     * Setter for Source.
     * The source of the information for the reported usage.
     * @param source Value for String
     */
    @JsonSetter("source")
    public void setSource(String source) {
        this.source = source;
    }

    /**
     * Getter for Timestamp.
     * The date of the recorded usage.
     * @return Returns the String
     */
    @JsonGetter("timestamp")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTimestamp() {
        return timestamp;
    }

    /**
     * Setter for Timestamp.
     * The date of the recorded usage.
     * @param timestamp Value for String
     */
    @JsonSetter("timestamp")
    public void setTimestamp(String timestamp) {
        this.timestamp = timestamp;
    }

    /**
     * Hidden method for the serialization of additional properties.
     * @return The map of additionally set properties.
     */
    @JsonAnyGetter
    private Map<String, Object> getAdditionalProperties() {
        return additionalProperties.getAdditionalProperties();
    }

    /**
     * Hidden method for the de-serialization of additional properties.
     * @param name The name of the additional property.
     * @param value The Object value of the additional property.
     */
    @JsonAnySetter
    private void setAdditionalProperties(String name, Object value) {
        additionalProperties.setAdditionalProperty(name,
                ConversionHelper.convertToSimpleType(value,
                        x -> x),
                true);
    }

    /**
     * Getter for the value of additional properties based on provided property name.
     * @param name The name of the additional property.
     * @return Either the Object property value or null if not exist.
     */
    
    public Object getAdditionalProperty(String name) {
        return additionalProperties.getAdditionalProperty(name);
    }

    /**
     * Converts this Usage into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Usage [" + "bytesUsed=" + bytesUsed + ", extendedAttributes=" + extendedAttributes
                + ", servicePlan=" + servicePlan + ", smsUsed=" + smsUsed + ", source=" + source
                + ", timestamp=" + timestamp + ", additionalProperties=" + additionalProperties
                + "]";
    }

    /**
     * Builds a new {@link Usage.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Usage.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .bytesUsed(getBytesUsed())
                .extendedAttributes(getExtendedAttributes())
                .servicePlan(getServicePlan())
                .smsUsed(getSmsUsed())
                .source(getSource())
                .timestamp(getTimestamp());
        builder.additionalProperties = additionalProperties;
        return builder;
    }

    /**
     * Class to build instances of {@link Usage}.
     */
    public static class Builder {
        private Long bytesUsed;
        private List<CustomFields> extendedAttributes;
        private String servicePlan;
        private Integer smsUsed;
        private String source;
        private String timestamp;
        private AdditionalProperties<Object> additionalProperties =
                new AdditionalProperties<Object>();



        /**
         * Setter for bytesUsed.
         * @param  bytesUsed  Long value for bytesUsed.
         * @return Builder
         */
        public Builder bytesUsed(Long bytesUsed) {
            this.bytesUsed = bytesUsed;
            return this;
        }

        /**
         * Setter for extendedAttributes.
         * @param  extendedAttributes  List of CustomFields value for extendedAttributes.
         * @return Builder
         */
        public Builder extendedAttributes(List<CustomFields> extendedAttributes) {
            this.extendedAttributes = extendedAttributes;
            return this;
        }

        /**
         * Setter for servicePlan.
         * @param  servicePlan  String value for servicePlan.
         * @return Builder
         */
        public Builder servicePlan(String servicePlan) {
            this.servicePlan = servicePlan;
            return this;
        }

        /**
         * Setter for smsUsed.
         * @param  smsUsed  Integer value for smsUsed.
         * @return Builder
         */
        public Builder smsUsed(Integer smsUsed) {
            this.smsUsed = smsUsed;
            return this;
        }

        /**
         * Setter for source.
         * @param  source  String value for source.
         * @return Builder
         */
        public Builder source(String source) {
            this.source = source;
            return this;
        }

        /**
         * Setter for timestamp.
         * @param  timestamp  String value for timestamp.
         * @return Builder
         */
        public Builder timestamp(String timestamp) {
            this.timestamp = timestamp;
            return this;
        }

        /**
         * Setter for additional property that are not in model fields.
         * @param name The name of the additional property.
         * @param value The Object value of the additional property.
         * @return Builder.
         */
        public Builder additionalProperty(String name, Object value) {
            this.additionalProperties.setAdditionalProperty(name, value);
            return this;
        }

        /**
         * Builds a new {@link Usage} object using the set fields.
         * @return {@link Usage}
         */
        public Usage build() {
            Usage model =
                    new Usage(bytesUsed, extendedAttributes, servicePlan, smsUsed, source,
                            timestamp);
            model.additionalProperties = additionalProperties;
            return model;
        }
    }
}
