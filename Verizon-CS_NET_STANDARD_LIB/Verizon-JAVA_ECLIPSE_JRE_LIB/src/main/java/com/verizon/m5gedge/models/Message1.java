/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.verizon.m5gedge.models.containers.Limits;
import io.apimatic.core.types.AdditionalProperties;
import io.apimatic.core.utilities.ConversionHelper;
import java.util.List;
import java.util.Map;

/**
 * This is a model class for Message1 type.
 */
public class Message1 {
    private boolean isPrivate;
    private List<RoadUserTypes> roadUserType;
    private List<TriggerCondition> triggerConditions;
    private List<Limits> limits;
    private List<DistributionTypes> distributionType;
    private DistributionSchedule distributionSchedule;
    private SaeAlert saeAlert;
    private AdditionalProperties<Object> additionalProperties = 
            new AdditionalProperties<Object>(this.getClass());

    /**
     * Default constructor.
     */
    public Message1() {
    }

    /**
     * Initialization constructor.
     * @param  isPrivate  boolean value for isPrivate.
     * @param  roadUserType  List of RoadUserTypes value for roadUserType.
     * @param  triggerConditions  List of TriggerCondition value for triggerConditions.
     * @param  saeAlert  SaeAlert value for saeAlert.
     * @param  limits  List of Limits value for limits.
     * @param  distributionType  List of DistributionTypes value for distributionType.
     * @param  distributionSchedule  DistributionSchedule value for distributionSchedule.
     */
    public Message1(
            boolean isPrivate,
            List<RoadUserTypes> roadUserType,
            List<TriggerCondition> triggerConditions,
            SaeAlert saeAlert,
            List<Limits> limits,
            List<DistributionTypes> distributionType,
            DistributionSchedule distributionSchedule) {
        this.isPrivate = isPrivate;
        this.roadUserType = roadUserType;
        this.triggerConditions = triggerConditions;
        this.limits = limits;
        this.distributionType = distributionType;
        this.distributionSchedule = distributionSchedule;
        this.saeAlert = saeAlert;
    }

    /**
     * Initialization constructor.
     * @param  isPrivate  boolean value for isPrivate.
     * @param  roadUserType  List of RoadUserTypes value for roadUserType.
     * @param  triggerConditions  List of TriggerCondition value for triggerConditions.
     * @param  saeAlert  SaeAlert value for saeAlert.
     */
    @JsonCreator
    protected Message1(
            @JsonProperty("isPrivate") boolean isPrivate,
            @JsonProperty("roadUserType") List<RoadUserTypes> roadUserType,
            @JsonProperty("triggerConditions") List<TriggerCondition> triggerConditions,
            @JsonProperty("saeAlert") SaeAlert saeAlert) {
        this(isPrivate, roadUserType, triggerConditions, saeAlert, null, null, null);
    }

    /**
     * Getter for IsPrivate.
     * Defines whether the message is private or public. Private messages are published under the
     * Vendor ID defined in the configuration and only visible to devices of selected vendors.
     * Public messages are published under the Public vendor and are visible to all the users.
     * @return Returns the boolean
     */
    @JsonGetter("isPrivate")
    public boolean getIsPrivate() {
        return isPrivate;
    }

    /**
     * Setter for IsPrivate.
     * Defines whether the message is private or public. Private messages are published under the
     * Vendor ID defined in the configuration and only visible to devices of selected vendors.
     * Public messages are published under the Public vendor and are visible to all the users.
     * @param isPrivate Value for boolean
     */
    @JsonSetter("isPrivate")
    public void setIsPrivate(boolean isPrivate) {
        this.isPrivate = isPrivate;
    }

    /**
     * Getter for RoadUserType.
     * Type of the Road User.
     * @return Returns the List of RoadUserTypes
     */
    @JsonGetter("roadUserType")
    public List<RoadUserTypes> getRoadUserType() {
        return roadUserType;
    }

    /**
     * Setter for RoadUserType.
     * Type of the Road User.
     * @param roadUserType Value for List of RoadUserTypes
     */
    @JsonSetter("roadUserType")
    public void setRoadUserType(List<RoadUserTypes> roadUserType) {
        this.roadUserType = roadUserType;
    }

    /**
     * Getter for TriggerConditions.
     * Trigger conditions that define on which road user action the message will be sent. If
     * multiple Trigger Conditions are defined any of them will trigger the message.
     * @return Returns the List of TriggerCondition
     */
    @JsonGetter("triggerConditions")
    public List<TriggerCondition> getTriggerConditions() {
        return triggerConditions;
    }

    /**
     * Setter for TriggerConditions.
     * Trigger conditions that define on which road user action the message will be sent. If
     * multiple Trigger Conditions are defined any of them will trigger the message.
     * @param triggerConditions Value for List of TriggerCondition
     */
    @JsonSetter("triggerConditions")
    public void setTriggerConditions(List<TriggerCondition> triggerConditions) {
        this.triggerConditions = triggerConditions;
    }

    /**
     * Getter for Limits.
     * List of limitations. These limitations can be used for making the trigger condition more
     * precise by defining speed and motion direction requirements to be met before the messages are
     * sent out.
     * @return Returns the List of Limits
     */
    @JsonGetter("limits")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Limits> getLimits() {
        return limits;
    }

    /**
     * Setter for Limits.
     * List of limitations. These limitations can be used for making the trigger condition more
     * precise by defining speed and motion direction requirements to be met before the messages are
     * sent out.
     * @param limits Value for List of Limits
     */
    @JsonSetter("limits")
    public void setLimits(List<Limits> limits) {
        this.limits = limits;
    }

    /**
     * Getter for DistributionType.
     * Type of the distribution.
     * @return Returns the List of DistributionTypes
     */
    @JsonGetter("distributionType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<DistributionTypes> getDistributionType() {
        return distributionType;
    }

    /**
     * Setter for DistributionType.
     * Type of the distribution.
     * @param distributionType Value for List of DistributionTypes
     */
    @JsonSetter("distributionType")
    public void setDistributionType(List<DistributionTypes> distributionType) {
        this.distributionType = distributionType;
    }

    /**
     * Getter for DistributionSchedule.
     * The distribution schedule parameters for broadcast messages.
     * @return Returns the DistributionSchedule
     */
    @JsonGetter("distributionSchedule")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public DistributionSchedule getDistributionSchedule() {
        return distributionSchedule;
    }

    /**
     * Setter for DistributionSchedule.
     * The distribution schedule parameters for broadcast messages.
     * @param distributionSchedule Value for DistributionSchedule
     */
    @JsonSetter("distributionSchedule")
    public void setDistributionSchedule(DistributionSchedule distributionSchedule) {
        this.distributionSchedule = distributionSchedule;
    }

    /**
     * Getter for SaeAlert.
     * @return Returns the SaeAlert
     */
    @JsonGetter("saeAlert")
    public SaeAlert getSaeAlert() {
        return saeAlert;
    }

    /**
     * Setter for SaeAlert.
     * @param saeAlert Value for SaeAlert
     */
    @JsonSetter("saeAlert")
    public void setSaeAlert(SaeAlert saeAlert) {
        this.saeAlert = saeAlert;
    }

    /**
     * Hidden method for the serialization of additional properties.
     * @return The map of additionally set properties.
     */
    @JsonAnyGetter
    private Map<String, Object> getAdditionalProperties() {
        return additionalProperties.getAdditionalProperties();
    }

    /**
     * Hidden method for the de-serialization of additional properties.
     * @param name The name of the additional property.
     * @param value The Object value of the additional property.
     */
    @JsonAnySetter
    private void setAdditionalProperties(String name, Object value) {
        additionalProperties.setAdditionalProperty(name,
                ConversionHelper.convertToSimpleType(value,
                        x -> x),
                true);
    }

    /**
     * Getter for the value of additional properties based on provided property name.
     * @param name The name of the additional property.
     * @return Either the Object property value or null if not exist.
     */
    
    public Object getAdditionalProperty(String name) {
        return additionalProperties.getAdditionalProperty(name);
    }

    /**
     * Converts this Message1 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Message1 [" + "isPrivate=" + isPrivate + ", roadUserType=" + roadUserType
                + ", triggerConditions=" + triggerConditions + ", saeAlert=" + saeAlert
                + ", limits=" + limits + ", distributionType=" + distributionType
                + ", distributionSchedule=" + distributionSchedule + ", additionalProperties="
                + additionalProperties + "]";
    }

    /**
     * Builds a new {@link Message1.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Message1.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(isPrivate, roadUserType, triggerConditions, saeAlert)
                .limits(getLimits())
                .distributionType(getDistributionType())
                .distributionSchedule(getDistributionSchedule());
        builder.additionalProperties = additionalProperties;
        return builder;
    }

    /**
     * Class to build instances of {@link Message1}.
     */
    public static class Builder {
        private boolean isPrivate;
        private List<RoadUserTypes> roadUserType;
        private List<TriggerCondition> triggerConditions;
        private SaeAlert saeAlert;
        private List<Limits> limits;
        private List<DistributionTypes> distributionType;
        private DistributionSchedule distributionSchedule;
        private AdditionalProperties<Object> additionalProperties =
                new AdditionalProperties<Object>();

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  isPrivate  boolean value for isPrivate.
         * @param  roadUserType  List of RoadUserTypes value for roadUserType.
         * @param  triggerConditions  List of TriggerCondition value for triggerConditions.
         * @param  saeAlert  SaeAlert value for saeAlert.
         */
        public Builder(boolean isPrivate, List<RoadUserTypes> roadUserType,
                List<TriggerCondition> triggerConditions, SaeAlert saeAlert) {
            this.isPrivate = isPrivate;
            this.roadUserType = roadUserType;
            this.triggerConditions = triggerConditions;
            this.saeAlert = saeAlert;
        }

        /**
         * Setter for isPrivate.
         * @param  isPrivate  boolean value for isPrivate.
         * @return Builder
         */
        public Builder isPrivate(boolean isPrivate) {
            this.isPrivate = isPrivate;
            return this;
        }

        /**
         * Setter for roadUserType.
         * @param  roadUserType  List of RoadUserTypes value for roadUserType.
         * @return Builder
         */
        public Builder roadUserType(List<RoadUserTypes> roadUserType) {
            this.roadUserType = roadUserType;
            return this;
        }

        /**
         * Setter for triggerConditions.
         * @param  triggerConditions  List of TriggerCondition value for triggerConditions.
         * @return Builder
         */
        public Builder triggerConditions(List<TriggerCondition> triggerConditions) {
            this.triggerConditions = triggerConditions;
            return this;
        }

        /**
         * Setter for saeAlert.
         * @param  saeAlert  SaeAlert value for saeAlert.
         * @return Builder
         */
        public Builder saeAlert(SaeAlert saeAlert) {
            this.saeAlert = saeAlert;
            return this;
        }

        /**
         * Setter for limits.
         * @param  limits  List of Limits value for limits.
         * @return Builder
         */
        public Builder limits(List<Limits> limits) {
            this.limits = limits;
            return this;
        }

        /**
         * Setter for distributionType.
         * @param  distributionType  List of DistributionTypes value for distributionType.
         * @return Builder
         */
        public Builder distributionType(List<DistributionTypes> distributionType) {
            this.distributionType = distributionType;
            return this;
        }

        /**
         * Setter for distributionSchedule.
         * @param  distributionSchedule  DistributionSchedule value for distributionSchedule.
         * @return Builder
         */
        public Builder distributionSchedule(DistributionSchedule distributionSchedule) {
            this.distributionSchedule = distributionSchedule;
            return this;
        }

        /**
         * Setter for additional property that are not in model fields.
         * @param name The name of the additional property.
         * @param value The Object value of the additional property.
         * @return Builder.
         */
        public Builder additionalProperty(String name, Object value) {
            this.additionalProperties.setAdditionalProperty(name, value);
            return this;
        }

        /**
         * Builds a new {@link Message1} object using the set fields.
         * @return {@link Message1}
         */
        public Message1 build() {
            Message1 model =
                    new Message1(isPrivate, roadUserType, triggerConditions, saeAlert, limits,
                            distributionType, distributionSchedule);
            model.additionalProperties = additionalProperties;
            return model;
        }
    }
}
