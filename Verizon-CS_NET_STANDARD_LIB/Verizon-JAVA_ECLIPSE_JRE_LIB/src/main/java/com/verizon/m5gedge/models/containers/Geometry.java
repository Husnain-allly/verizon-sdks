/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.models.LineString;
import com.verizon.m5gedge.models.MultiLineString;
import com.verizon.m5gedge.models.MultiPolygon;
import com.verizon.m5gedge.models.Polygon;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;

/**
 * This is a container class for one-of types.
 */
@JsonDeserialize(using = Geometry.GeometryDeserializer.class)
public abstract class Geometry {
    
    /**
     * This is LineString case.
     * @param lineString LineString value for lineString.
     * @return The LineStringCase object.
     */
    public static Geometry fromLineString(LineString lineString) {
        return lineString == null ? null : new LineStringCase(lineString);
    }

    /**
     * This is Polygon case.
     * @param polygon Polygon value for polygon.
     * @return The PolygonCase object.
     */
    public static Geometry fromPolygon(Polygon polygon) {
        return polygon == null ? null : new PolygonCase(polygon);
    }

    /**
     * This is MultiLineString case.
     * @param multiLineString MultiLineString value for multiLineString.
     * @return The MultiLineStringCase object.
     */
    public static Geometry fromMultiLineString(MultiLineString multiLineString) {
        return multiLineString == null ? null : new MultiLineStringCase(multiLineString);
    }

    /**
     * This is MultiPolygon case.
     * @param multiPolygon MultiPolygon value for multiPolygon.
     * @return The MultiPolygonCase object.
     */
    public static Geometry fromMultiPolygon(MultiPolygon multiPolygon) {
        return multiPolygon == null ? null : new MultiPolygonCase(multiPolygon);
    }

    /**
     * Method to match from the provided one-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The one-of type cases callback.
     * @return The one-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for one-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R lineString(LineString lineString);

        R polygon(Polygon polygon);

        R multiLineString(MultiLineString multiLineString);

        R multiPolygon(MultiPolygon multiPolygon);
    }

    /**
     * This is a implementation class for LineStringCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "LineString")
    private static class LineStringCase extends Geometry {

        @JsonValue
        private LineString lineString;

        LineStringCase(LineString lineString) {
            this.lineString = lineString;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.lineString(this.lineString);
        }

        @JsonCreator
        private LineStringCase(JsonNode jsonNode) throws IOException {
            this.lineString = ApiHelper.deserialize(jsonNode,
                LineString.class);
        }

        @Override
        public String toString() {
            return lineString.toString();
        }
    }

    /**
     * This is a implementation class for PolygonCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "Polygon")
    private static class PolygonCase extends Geometry {

        @JsonValue
        private Polygon polygon;

        PolygonCase(Polygon polygon) {
            this.polygon = polygon;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.polygon(this.polygon);
        }

        @JsonCreator
        private PolygonCase(JsonNode jsonNode) throws IOException {
            this.polygon = ApiHelper.deserialize(jsonNode,
                Polygon.class);
        }

        @Override
        public String toString() {
            return polygon.toString();
        }
    }

    /**
     * This is a implementation class for MultiLineStringCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "MultiLineString")
    private static class MultiLineStringCase extends Geometry {

        @JsonValue
        private MultiLineString multiLineString;

        MultiLineStringCase(MultiLineString multiLineString) {
            this.multiLineString = multiLineString;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.multiLineString(this.multiLineString);
        }

        @JsonCreator
        private MultiLineStringCase(JsonNode jsonNode) throws IOException {
            this.multiLineString = ApiHelper.deserialize(jsonNode,
                MultiLineString.class);
        }

        @Override
        public String toString() {
            return multiLineString.toString();
        }
    }

    /**
     * This is a implementation class for MultiPolygonCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "MultiPolygon")
    private static class MultiPolygonCase extends Geometry {

        @JsonValue
        private MultiPolygon multiPolygon;

        MultiPolygonCase(MultiPolygon multiPolygon) {
            this.multiPolygon = multiPolygon;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.multiPolygon(this.multiPolygon);
        }

        @JsonCreator
        private MultiPolygonCase(JsonNode jsonNode) throws IOException {
            this.multiPolygon = ApiHelper.deserialize(jsonNode,
                MultiPolygon.class);
        }

        @Override
        public String toString() {
            return multiPolygon.toString();
        }
    }

    /**
     * This is a custom deserializer class for Geometry.
     */
    protected static class GeometryDeserializer
            extends JsonDeserializer<Geometry> {

        private String discriminator = "type";
        private List<Map<String, Class<? extends Geometry>>> registry =
                Arrays.asList(Collections.singletonMap("LineString", LineStringCase.class),
                        Collections.singletonMap("Polygon", PolygonCase.class),
                        Collections.singletonMap("MultiLineString", MultiLineStringCase.class),
                        Collections.singletonMap("MultiPolygon", MultiPolygonCase.class));

        @Override
        public Geometry deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            return ApiHelper.deserialize(jp, ctxt, discriminator, registry, null, true);
        }
    }

}
