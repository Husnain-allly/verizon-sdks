/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for NodeLLmD64B type.
 */
public class NodeLLmD64B {
    private int lon;
    private int lat;

    /**
     * Default constructor.
     */
    public NodeLLmD64B() {
    }

    /**
     * Initialization constructor.
     * @param  lon  int value for lon.
     * @param  lat  int value for lat.
     */
    public NodeLLmD64B(
            int lon,
            int lat) {
        this.lon = lon;
        this.lat = lat;
    }

    /**
     * Getter for Lon.
     * The geographic longitude of an object, expressed in 1/10th integer microdegrees, as a 32-bit
     * value, and with reference to the horizontal datum then in use. The value 1800000001 shall be
     * used when unavailable.
     * @return Returns the int
     */
    @JsonGetter("lon")
    public int getLon() {
        return lon;
    }

    /**
     * Setter for Lon.
     * The geographic longitude of an object, expressed in 1/10th integer microdegrees, as a 32-bit
     * value, and with reference to the horizontal datum then in use. The value 1800000001 shall be
     * used when unavailable.
     * @param lon Value for int
     */
    @JsonSetter("lon")
    public void setLon(int lon) {
        this.lon = lon;
    }

    /**
     * Getter for Lat.
     * The geographic latitude of an object, expressed in 1/10th integer microdegrees, as a 31 bit
     * value, and with reference to the horizontal datum then in use. The value 900000001 shall be
     * used when unavailable.
     * @return Returns the int
     */
    @JsonGetter("lat")
    public int getLat() {
        return lat;
    }

    /**
     * Setter for Lat.
     * The geographic latitude of an object, expressed in 1/10th integer microdegrees, as a 31 bit
     * value, and with reference to the horizontal datum then in use. The value 900000001 shall be
     * used when unavailable.
     * @param lat Value for int
     */
    @JsonSetter("lat")
    public void setLat(int lat) {
        this.lat = lat;
    }

    /**
     * Converts this NodeLLmD64B into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "NodeLLmD64B [" + "lon=" + lon + ", lat=" + lat + "]";
    }

    /**
     * Builds a new {@link NodeLLmD64B.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link NodeLLmD64B.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(lon, lat);
        return builder;
    }

    /**
     * Class to build instances of {@link NodeLLmD64B}.
     */
    public static class Builder {
        private int lon;
        private int lat;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  lon  int value for lon.
         * @param  lat  int value for lat.
         */
        public Builder(int lon, int lat) {
            this.lon = lon;
            this.lat = lat;
        }

        /**
         * Setter for lon.
         * @param  lon  int value for lon.
         * @return Builder
         */
        public Builder lon(int lon) {
            this.lon = lon;
            return this;
        }

        /**
         * Setter for lat.
         * @param  lat  int value for lat.
         * @return Builder
         */
        public Builder lat(int lat) {
            this.lat = lat;
            return this;
        }

        /**
         * Builds a new {@link NodeLLmD64B} object using the set fields.
         * @return {@link NodeLLmD64B}
         */
        public NodeLLmD64B build() {
            return new NodeLLmD64B(lon, lat);
        }
    }
}
