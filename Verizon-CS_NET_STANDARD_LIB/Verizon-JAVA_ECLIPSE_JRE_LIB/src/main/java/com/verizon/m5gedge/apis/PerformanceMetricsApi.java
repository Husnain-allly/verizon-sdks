/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.apis;

import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.Server;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.exceptions.EdgePerformanceResultException;
import com.verizon.m5gedge.http.request.HttpMethod;
import com.verizon.m5gedge.http.response.ApiResponse;
import com.verizon.m5gedge.models.MecPerformanceMetrics;
import com.verizon.m5gedge.models.QueryMecPerformanceMetricsRequest;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class PerformanceMetricsApi extends BaseApi {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public PerformanceMetricsApi(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Query the most recent data for Key Performance Indicators (KPIs) like network availability,
     * MEC hostnames and more.
     * @param  body  Optional parameter:
     * @return    Returns the MecPerformanceMetrics wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<MecPerformanceMetrics> queryMecPerformanceMetrics(
            final QueryMecPerformanceMetricsRequest body) throws ApiException, IOException {
        return prepareQueryMecPerformanceMetricsRequest(body).execute();
    }

    /**
     * Query the most recent data for Key Performance Indicators (KPIs) like network availability,
     * MEC hostnames and more.
     * @param  body  Optional parameter:
     * @return    Returns the MecPerformanceMetrics wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<MecPerformanceMetrics>> queryMecPerformanceMetricsAsync(
            final QueryMecPerformanceMetricsRequest body) {
        try {
            return prepareQueryMecPerformanceMetricsRequest(body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for queryMecPerformanceMetrics.
     */
    private ApiCall<ApiResponse<MecPerformanceMetrics>, ApiException> prepareQueryMecPerformanceMetricsRequest(
            final QueryMecPerformanceMetricsRequest body) {
        return new ApiCall.Builder<ApiResponse<MecPerformanceMetrics>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.PERFORMANCE.value())
                        .path("/performance/device/network/metrics")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, MecPerformanceMetrics.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Request.",
                                (reason, context) -> new EdgePerformanceResultException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Unauthorized request.",
                                (reason, context) -> new EdgePerformanceResultException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Request forbidden.",
                                (reason, context) -> new EdgePerformanceResultException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Resource Not Found.",
                                (reason, context) -> new EdgePerformanceResultException(reason, context)))
                        .localErrorCase("405",
                                 ErrorCase.setReason("Method Not Allowed.",
                                (reason, context) -> new EdgePerformanceResultException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.setReason("Service Unavailable.",
                                (reason, context) -> new EdgePerformanceResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}