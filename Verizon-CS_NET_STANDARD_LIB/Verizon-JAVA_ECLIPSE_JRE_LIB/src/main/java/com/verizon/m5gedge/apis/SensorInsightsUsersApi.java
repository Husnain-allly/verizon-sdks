/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.apis;

import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.Server;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.exceptions.M400ManagementErrorException;
import com.verizon.m5gedge.exceptions.M403ManagementErrorException;
import com.verizon.m5gedge.exceptions.M404ManagementErrorException;
import com.verizon.m5gedge.exceptions.M500ManagementErrorException;
import com.verizon.m5gedge.exceptions.ManagementErrorException;
import com.verizon.m5gedge.http.request.HttpMethod;
import com.verizon.m5gedge.http.response.ApiResponse;
import com.verizon.m5gedge.models.DtoCreateUserRequest;
import com.verizon.m5gedge.models.DtoDeleteUserRequest;
import com.verizon.m5gedge.models.DtoListUserRequest;
import com.verizon.m5gedge.models.DtoUpdateUserRequest;
import com.verizon.m5gedge.models.ResourceUser;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class SensorInsightsUsersApi extends BaseApi {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public SensorInsightsUsersApi(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * @param  body  Required parameter: Create a user profile
     * @return    Returns the ResourceUser wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<ResourceUser> sensorInsightsCreateUserRequest(
            final DtoCreateUserRequest body) throws ApiException, IOException {
        return prepareSensorInsightsCreateUserRequestRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Create a user profile
     * @return    Returns the ResourceUser wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<ResourceUser>> sensorInsightsCreateUserRequestAsync(
            final DtoCreateUserRequest body) {
        try {
            return prepareSensorInsightsCreateUserRequestRequest(body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for sensorInsightsCreateUserRequest.
     */
    private ApiCall<ApiResponse<ResourceUser>, ApiException> prepareSensorInsightsCreateUserRequestRequest(
            final DtoCreateUserRequest body) {
        return new ApiCall.Builder<ApiResponse<ResourceUser>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/dm/v1/users")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, ResourceUser.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Request",
                                (reason, context) -> new M400ManagementErrorException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("UnAuthorized",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden",
                                (reason, context) -> new M403ManagementErrorException(reason, context)))
                        .localErrorCase("406",
                                 ErrorCase.setReason("Not Acceptable",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("415",
                                 ErrorCase.setReason("Unsupported media type",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("Too many requests",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal server error.",
                                (reason, context) -> new M500ManagementErrorException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Unexpected error",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  deleterequestpayload  Required parameter: Payload for the delete user request.
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> sensorInsightsDeleteUser(
            final DtoDeleteUserRequest deleterequestpayload) throws ApiException, IOException {
        return prepareSensorInsightsDeleteUserRequest(deleterequestpayload).execute();
    }

    /**
     * @param  deleterequestpayload  Required parameter: Payload for the delete user request.
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> sensorInsightsDeleteUserAsync(
            final DtoDeleteUserRequest deleterequestpayload) {
        try {
            return prepareSensorInsightsDeleteUserRequest(deleterequestpayload).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for sensorInsightsDeleteUser.
     */
    private ApiCall<ApiResponse<Void>, ApiException> prepareSensorInsightsDeleteUserRequest(
            final DtoDeleteUserRequest deleterequestpayload) {
        return new ApiCall.Builder<ApiResponse<Void>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/dm/v1/users")
                        .queryParam(param -> param.key("deleterequestpayload")
                                .value(deleterequestpayload))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Request",
                                (reason, context) -> new M400ManagementErrorException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("UnAuthorized",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden",
                                (reason, context) -> new M403ManagementErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Not Found",
                                (reason, context) -> new M404ManagementErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Partially update a user profile
     * @return    Returns the ResourceUser wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<ResourceUser> sensorInsightsUpdateUserRequest(
            final DtoUpdateUserRequest body) throws ApiException, IOException {
        return prepareSensorInsightsUpdateUserRequestRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Partially update a user profile
     * @return    Returns the ResourceUser wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<ResourceUser>> sensorInsightsUpdateUserRequestAsync(
            final DtoUpdateUserRequest body) {
        try {
            return prepareSensorInsightsUpdateUserRequestRequest(body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for sensorInsightsUpdateUserRequest.
     */
    private ApiCall<ApiResponse<ResourceUser>, ApiException> prepareSensorInsightsUpdateUserRequestRequest(
            final DtoUpdateUserRequest body) {
        return new ApiCall.Builder<ApiResponse<ResourceUser>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/dm/v1/users")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, ResourceUser.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Request",
                                (reason, context) -> new M400ManagementErrorException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("UnAuthorized",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden",
                                (reason, context) -> new M403ManagementErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Not Found",
                                (reason, context) -> new M404ManagementErrorException(reason, context)))
                        .localErrorCase("406",
                                 ErrorCase.setReason("Not Acceptable",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("415",
                                 ErrorCase.setReason("Unsupported media type",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("Too many requests",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal server error.",
                                (reason, context) -> new M500ManagementErrorException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Unexpected error",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: A summary of user profile records on an account
     * @return    Returns the List of ResourceUser wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<List<ResourceUser>> sensorInsightsListUserRequest(
            final DtoListUserRequest body) throws ApiException, IOException {
        return prepareSensorInsightsListUserRequestRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: A summary of user profile records on an account
     * @return    Returns the List of ResourceUser wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<List<ResourceUser>>> sensorInsightsListUserRequestAsync(
            final DtoListUserRequest body) {
        try {
            return prepareSensorInsightsListUserRequestRequest(body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for sensorInsightsListUserRequest.
     */
    private ApiCall<ApiResponse<List<ResourceUser>>, ApiException> prepareSensorInsightsListUserRequestRequest(
            final DtoListUserRequest body) {
        return new ApiCall.Builder<ApiResponse<List<ResourceUser>>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/dm/v1/users/actions/query")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        ResourceUser[].class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Request",
                                (reason, context) -> new M400ManagementErrorException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("UnAuthorized",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden",
                                (reason, context) -> new M403ManagementErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Not Found",
                                (reason, context) -> new M404ManagementErrorException(reason, context)))
                        .localErrorCase("406",
                                 ErrorCase.setReason("Not Acceptable",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("415",
                                 ErrorCase.setReason("Unsupported media type",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("Too many requests",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal server error.",
                                (reason, context) -> new M500ManagementErrorException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Unexpected error",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}