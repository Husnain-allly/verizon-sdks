/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.UUID;

/**
 * This is a model class for ClientPersistenceResponse type.
 */
public class ClientPersistenceResponse {
    private UUID deviceId;
    private Certificate certificate;
    private EtxClientType clientType;
    private ClientSubtype clientSubtype;
    private String vendorId;

    /**
     * Default constructor.
     */
    public ClientPersistenceResponse() {
    }

    /**
     * Initialization constructor.
     * @param  deviceId  UUID value for deviceId.
     * @param  certificate  Certificate value for certificate.
     * @param  clientType  EtxClientType value for clientType.
     * @param  clientSubtype  ClientSubtype value for clientSubtype.
     * @param  vendorId  String value for vendorId.
     */
    public ClientPersistenceResponse(
            UUID deviceId,
            Certificate certificate,
            EtxClientType clientType,
            ClientSubtype clientSubtype,
            String vendorId) {
        this.deviceId = deviceId;
        this.certificate = certificate;
        this.clientType = clientType;
        this.clientSubtype = clientSubtype;
        this.vendorId = vendorId;
    }

    /**
     * Getter for DeviceId.
     * The generated ID (UUID v4) for the device. It can be used as: - the MQTT Client ID when
     * connecting to the Message Exchange system - a parameter when asking for the connection
     * endpoint - a parameter when finishing the device registration - a parameter when
     * unregistering the device
     * @return Returns the UUID
     */
    @JsonGetter("DeviceID")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public UUID getDeviceId() {
        return deviceId;
    }

    /**
     * Setter for DeviceId.
     * The generated ID (UUID v4) for the device. It can be used as: - the MQTT Client ID when
     * connecting to the Message Exchange system - a parameter when asking for the connection
     * endpoint - a parameter when finishing the device registration - a parameter when
     * unregistering the device
     * @param deviceId Value for UUID
     */
    @JsonSetter("DeviceID")
    public void setDeviceId(UUID deviceId) {
        this.deviceId = deviceId;
    }

    /**
     * Getter for Certificate.
     * Structure for the credentials required to connect to the ETX MQTT Message Exchange.
     * @return Returns the Certificate
     */
    @JsonGetter("Certificate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Certificate getCertificate() {
        return certificate;
    }

    /**
     * Setter for Certificate.
     * Structure for the credentials required to connect to the ETX MQTT Message Exchange.
     * @param certificate Value for Certificate
     */
    @JsonSetter("Certificate")
    public void setCertificate(Certificate certificate) {
        this.certificate = certificate;
    }

    /**
     * Getter for ClientType.
     * The type of the client that is to be registered. This is one of the major traffic participant
     * groups considered in V2X communication. The system uses this value to define which topics the
     * client will be able to publish and subscribe to. Values: - **Vehicle** - Vehicle with an
     * enclosure around the passengers. (Subtypes: PassengerCar, Truck, Bus, EmergencyVehicle,
     * SchoolBus, MaintenanceVehicle) - **VulnerableRoadUser** - Traffic participants without a
     * protecting enclosure. (Subtypes: Motorcycle, Bicycle, Pedestrian, Scooter) -
     * **TrafficLightController** - A Traffic light controller system. (Subtypes: NA) -
     * **InfrastructureSensor** - Sensors that are deployed in the infrastructure. (Subtypes:
     * RoadSideUnit, Camera, Lidar, Radar, InductiveLoop, MagneticSensor) - **OnboardSensor** -
     * Sensors that are onboard on a vehicle(Subtypes: Camera, Lidar, Radar) - **Software** - A
     * software system or application. (Subtypes: Platform, Application, NA)
     * @return Returns the EtxClientType
     */
    @JsonGetter("ClientType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public EtxClientType getClientType() {
        return clientType;
    }

    /**
     * Setter for ClientType.
     * The type of the client that is to be registered. This is one of the major traffic participant
     * groups considered in V2X communication. The system uses this value to define which topics the
     * client will be able to publish and subscribe to. Values: - **Vehicle** - Vehicle with an
     * enclosure around the passengers. (Subtypes: PassengerCar, Truck, Bus, EmergencyVehicle,
     * SchoolBus, MaintenanceVehicle) - **VulnerableRoadUser** - Traffic participants without a
     * protecting enclosure. (Subtypes: Motorcycle, Bicycle, Pedestrian, Scooter) -
     * **TrafficLightController** - A Traffic light controller system. (Subtypes: NA) -
     * **InfrastructureSensor** - Sensors that are deployed in the infrastructure. (Subtypes:
     * RoadSideUnit, Camera, Lidar, Radar, InductiveLoop, MagneticSensor) - **OnboardSensor** -
     * Sensors that are onboard on a vehicle(Subtypes: Camera, Lidar, Radar) - **Software** - A
     * software system or application. (Subtypes: Platform, Application, NA)
     * @param clientType Value for EtxClientType
     */
    @JsonSetter("ClientType")
    public void setClientType(EtxClientType clientType) {
        this.clientType = clientType;
    }

    /**
     * Getter for ClientSubtype.
     * The subtype or subgroup of the client type. This further specifies the client type. For
     * example it will specify if the client is a passenger car or a truck. See the ClientType
     * description for the supported Subtypes for each client type.
     * @return Returns the ClientSubtype
     */
    @JsonGetter("ClientSubtype")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ClientSubtype getClientSubtype() {
        return clientSubtype;
    }

    /**
     * Setter for ClientSubtype.
     * The subtype or subgroup of the client type. This further specifies the client type. For
     * example it will specify if the client is a passenger car or a truck. See the ClientType
     * description for the supported Subtypes for each client type.
     * @param clientSubtype Value for ClientSubtype
     */
    @JsonSetter("ClientSubtype")
    public void setClientSubtype(ClientSubtype clientSubtype) {
        this.clientSubtype = clientSubtype;
    }

    /**
     * Getter for VendorId.
     * The ID the vendor wants its devices to be registered under. E.g. Verizon, GM, Ford, etc.
     * @return Returns the String
     */
    @JsonGetter("VendorID")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getVendorId() {
        return vendorId;
    }

    /**
     * Setter for VendorId.
     * The ID the vendor wants its devices to be registered under. E.g. Verizon, GM, Ford, etc.
     * @param vendorId Value for String
     */
    @JsonSetter("VendorID")
    public void setVendorId(String vendorId) {
        this.vendorId = vendorId;
    }

    /**
     * Converts this ClientPersistenceResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ClientPersistenceResponse [" + "deviceId=" + deviceId + ", certificate="
                + certificate + ", clientType=" + clientType + ", clientSubtype=" + clientSubtype
                + ", vendorId=" + vendorId + "]";
    }

    /**
     * Builds a new {@link ClientPersistenceResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ClientPersistenceResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .deviceId(getDeviceId())
                .certificate(getCertificate())
                .clientType(getClientType())
                .clientSubtype(getClientSubtype())
                .vendorId(getVendorId());
        return builder;
    }

    /**
     * Class to build instances of {@link ClientPersistenceResponse}.
     */
    public static class Builder {
        private UUID deviceId;
        private Certificate certificate;
        private EtxClientType clientType;
        private ClientSubtype clientSubtype;
        private String vendorId;



        /**
         * Setter for deviceId.
         * @param  deviceId  UUID value for deviceId.
         * @return Builder
         */
        public Builder deviceId(UUID deviceId) {
            this.deviceId = deviceId;
            return this;
        }

        /**
         * Setter for certificate.
         * @param  certificate  Certificate value for certificate.
         * @return Builder
         */
        public Builder certificate(Certificate certificate) {
            this.certificate = certificate;
            return this;
        }

        /**
         * Setter for clientType.
         * @param  clientType  EtxClientType value for clientType.
         * @return Builder
         */
        public Builder clientType(EtxClientType clientType) {
            this.clientType = clientType;
            return this;
        }

        /**
         * Setter for clientSubtype.
         * @param  clientSubtype  ClientSubtype value for clientSubtype.
         * @return Builder
         */
        public Builder clientSubtype(ClientSubtype clientSubtype) {
            this.clientSubtype = clientSubtype;
            return this;
        }

        /**
         * Setter for vendorId.
         * @param  vendorId  String value for vendorId.
         * @return Builder
         */
        public Builder vendorId(String vendorId) {
            this.vendorId = vendorId;
            return this;
        }

        /**
         * Builds a new {@link ClientPersistenceResponse} object using the set fields.
         * @return {@link ClientPersistenceResponse}
         */
        public ClientPersistenceResponse build() {
            return new ClientPersistenceResponse(deviceId, certificate, clientType, clientSubtype,
                    vendorId);
        }
    }
}
