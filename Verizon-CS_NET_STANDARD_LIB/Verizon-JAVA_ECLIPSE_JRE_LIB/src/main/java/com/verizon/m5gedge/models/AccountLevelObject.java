/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.verizon.m5gedge.models.containers.AccountLevelObjectCondition;
import io.apimatic.core.types.AdditionalProperties;
import io.apimatic.core.utilities.ConversionHelper;
import java.util.Map;

/**
 * This is a model class for AccountLevelObject type.
 */
public class AccountLevelObject {
    private AccountLevelFilter filterCriteria;
    private AccountLevelObjectCondition condition;
    private AccountLevelAction action;
    private AdditionalProperties<Object> additionalProperties = 
            new AdditionalProperties<Object>(this.getClass());

    /**
     * Default constructor.
     */
    public AccountLevelObject() {
    }

    /**
     * Initialization constructor.
     * @param  filterCriteria  AccountLevelFilter value for filterCriteria.
     * @param  condition  AccountLevelObjectCondition value for condition.
     * @param  action  AccountLevelAction value for action.
     */
    public AccountLevelObject(
            AccountLevelFilter filterCriteria,
            AccountLevelObjectCondition condition,
            AccountLevelAction action) {
        this.filterCriteria = filterCriteria;
        this.condition = condition;
        this.action = action;
    }

    /**
     * Getter for FilterCriteria.
     * @return Returns the AccountLevelFilter
     */
    @JsonGetter("filterCriteria")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AccountLevelFilter getFilterCriteria() {
        return filterCriteria;
    }

    /**
     * Setter for FilterCriteria.
     * @param filterCriteria Value for AccountLevelFilter
     */
    @JsonSetter("filterCriteria")
    public void setFilterCriteria(AccountLevelFilter filterCriteria) {
        this.filterCriteria = filterCriteria;
    }

    /**
     * Getter for Condition.
     * @return Returns the AccountLevelObjectCondition
     */
    @JsonGetter("condition")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AccountLevelObjectCondition getCondition() {
        return condition;
    }

    /**
     * Setter for Condition.
     * @param condition Value for AccountLevelObjectCondition
     */
    @JsonSetter("condition")
    public void setCondition(AccountLevelObjectCondition condition) {
        this.condition = condition;
    }

    /**
     * Getter for Action.
     * The action taken when trigger conditions are met
     * @return Returns the AccountLevelAction
     */
    @JsonGetter("action")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AccountLevelAction getAction() {
        return action;
    }

    /**
     * Setter for Action.
     * The action taken when trigger conditions are met
     * @param action Value for AccountLevelAction
     */
    @JsonSetter("action")
    public void setAction(AccountLevelAction action) {
        this.action = action;
    }

    /**
     * Hidden method for the serialization of additional properties.
     * @return The map of additionally set properties.
     */
    @JsonAnyGetter
    private Map<String, Object> getAdditionalProperties() {
        return additionalProperties.getAdditionalProperties();
    }

    /**
     * Hidden method for the de-serialization of additional properties.
     * @param name The name of the additional property.
     * @param value The Object value of the additional property.
     */
    @JsonAnySetter
    private void setAdditionalProperties(String name, Object value) {
        additionalProperties.setAdditionalProperty(name,
                ConversionHelper.convertToSimpleType(value,
                        x -> x),
                true);
    }

    /**
     * Getter for the value of additional properties based on provided property name.
     * @param name The name of the additional property.
     * @return Either the Object property value or null if not exist.
     */
    
    public Object getAdditionalProperty(String name) {
        return additionalProperties.getAdditionalProperty(name);
    }

    /**
     * Converts this AccountLevelObject into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "AccountLevelObject [" + "filterCriteria=" + filterCriteria + ", condition="
                + condition + ", action=" + action + ", additionalProperties="
                + additionalProperties + "]";
    }

    /**
     * Builds a new {@link AccountLevelObject.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link AccountLevelObject.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .filterCriteria(getFilterCriteria())
                .condition(getCondition())
                .action(getAction());
        builder.additionalProperties = additionalProperties;
        return builder;
    }

    /**
     * Class to build instances of {@link AccountLevelObject}.
     */
    public static class Builder {
        private AccountLevelFilter filterCriteria;
        private AccountLevelObjectCondition condition;
        private AccountLevelAction action;
        private AdditionalProperties<Object> additionalProperties =
                new AdditionalProperties<Object>();



        /**
         * Setter for filterCriteria.
         * @param  filterCriteria  AccountLevelFilter value for filterCriteria.
         * @return Builder
         */
        public Builder filterCriteria(AccountLevelFilter filterCriteria) {
            this.filterCriteria = filterCriteria;
            return this;
        }

        /**
         * Setter for condition.
         * @param  condition  AccountLevelObjectCondition value for condition.
         * @return Builder
         */
        public Builder condition(AccountLevelObjectCondition condition) {
            this.condition = condition;
            return this;
        }

        /**
         * Setter for action.
         * @param  action  AccountLevelAction value for action.
         * @return Builder
         */
        public Builder action(AccountLevelAction action) {
            this.action = action;
            return this;
        }

        /**
         * Setter for additional property that are not in model fields.
         * @param name The name of the additional property.
         * @param value The Object value of the additional property.
         * @return Builder.
         */
        public Builder additionalProperty(String name, Object value) {
            this.additionalProperties.setAdditionalProperty(name, value);
            return this;
        }

        /**
         * Builds a new {@link AccountLevelObject} object using the set fields.
         * @return {@link AccountLevelObject}
         */
        public AccountLevelObject build() {
            AccountLevelObject model =
                    new AccountLevelObject(filterCriteria, condition, action);
            model.additionalProperties = additionalProperties;
            return model;
        }
    }
}
