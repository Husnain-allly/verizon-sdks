/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.AdditionalProperties;
import io.apimatic.core.utilities.ConversionHelper;
import java.util.Map;

/**
 * This is a model class for RbsHighPrecisionTiltConfig type.
 */
public class RbsHighPrecisionTiltConfig {
    private Mode mode;
    private PeriodicReporting periodicReporting;
    private Integer holdTime;
    private Integer angleAway;
    private Integer angleToward;
    private Tscore tscore;
    private AdditionalProperties<Object> additionalProperties = 
            new AdditionalProperties<Object>(this.getClass());

    /**
     * Default constructor.
     */
    public RbsHighPrecisionTiltConfig() {
    }

    /**
     * Initialization constructor.
     * @param  mode  Mode value for mode.
     * @param  periodicReporting  PeriodicReporting value for periodicReporting.
     * @param  holdTime  Integer value for holdTime.
     * @param  angleAway  Integer value for angleAway.
     * @param  angleToward  Integer value for angleToward.
     * @param  tscore  Tscore value for tscore.
     */
    public RbsHighPrecisionTiltConfig(
            Mode mode,
            PeriodicReporting periodicReporting,
            Integer holdTime,
            Integer angleAway,
            Integer angleToward,
            Tscore tscore) {
        this.mode = mode;
        this.periodicReporting = periodicReporting;
        this.holdTime = holdTime;
        this.angleAway = angleAway;
        this.angleToward = angleToward;
        this.tscore = tscore;
    }

    /**
     * Getter for Mode.
     * the reporting mode of the tilt sensor
     * @return Returns the Mode
     */
    @JsonGetter("mode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Mode getMode() {
        return mode;
    }

    /**
     * Setter for Mode.
     * the reporting mode of the tilt sensor
     * @param mode Value for Mode
     */
    @JsonSetter("mode")
    public void setMode(Mode mode) {
        this.mode = mode;
    }

    /**
     * Getter for PeriodicReporting.
     * The units and values of the time interval for the sensor to send a report
     * @return Returns the PeriodicReporting
     */
    @JsonGetter("periodic-reporting")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PeriodicReporting getPeriodicReporting() {
        return periodicReporting;
    }

    /**
     * Setter for PeriodicReporting.
     * The units and values of the time interval for the sensor to send a report
     * @param periodicReporting Value for PeriodicReporting
     */
    @JsonSetter("periodic-reporting")
    public void setPeriodicReporting(PeriodicReporting periodicReporting) {
        this.periodicReporting = periodicReporting;
    }

    /**
     * Getter for HoldTime.
     * The time the threshold condition exists, in milliseconds, to recognize an event
     * @return Returns the Integer
     */
    @JsonGetter("hold-time")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getHoldTime() {
        return holdTime;
    }

    /**
     * Setter for HoldTime.
     * The time the threshold condition exists, in milliseconds, to recognize an event
     * @param holdTime Value for Integer
     */
    @JsonSetter("hold-time")
    public void setHoldTime(Integer holdTime) {
        this.holdTime = holdTime;
    }

    /**
     * Getter for AngleAway.
     * the threshold value, from verticle, to recognize an event
     * @return Returns the Integer
     */
    @JsonGetter("angle-away")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getAngleAway() {
        return angleAway;
    }

    /**
     * Setter for AngleAway.
     * the threshold value, from verticle, to recognize an event
     * @param angleAway Value for Integer
     */
    @JsonSetter("angle-away")
    public void setAngleAway(Integer angleAway) {
        this.angleAway = angleAway;
    }

    /**
     * Getter for AngleToward.
     * the threshold value, moving towards verticle, to recognize an event
     * @return Returns the Integer
     */
    @JsonGetter("angle-toward")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getAngleToward() {
        return angleToward;
    }

    /**
     * Setter for AngleToward.
     * the threshold value, moving towards verticle, to recognize an event
     * @param angleToward Value for Integer
     */
    @JsonSetter("angle-toward")
    public void setAngleToward(Integer angleToward) {
        this.angleToward = angleToward;
    }

    /**
     * Getter for Tscore.
     * @return Returns the Tscore
     */
    @JsonGetter("tscore")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Tscore getTscore() {
        return tscore;
    }

    /**
     * Setter for Tscore.
     * @param tscore Value for Tscore
     */
    @JsonSetter("tscore")
    public void setTscore(Tscore tscore) {
        this.tscore = tscore;
    }

    /**
     * Hidden method for the serialization of additional properties.
     * @return The map of additionally set properties.
     */
    @JsonAnyGetter
    private Map<String, Object> getAdditionalProperties() {
        return additionalProperties.getAdditionalProperties();
    }

    /**
     * Hidden method for the de-serialization of additional properties.
     * @param name The name of the additional property.
     * @param value The Object value of the additional property.
     */
    @JsonAnySetter
    private void setAdditionalProperties(String name, Object value) {
        additionalProperties.setAdditionalProperty(name,
                ConversionHelper.convertToSimpleType(value,
                        x -> x),
                true);
    }

    /**
     * Getter for the value of additional properties based on provided property name.
     * @param name The name of the additional property.
     * @return Either the Object property value or null if not exist.
     */
    
    public Object getAdditionalProperty(String name) {
        return additionalProperties.getAdditionalProperty(name);
    }

    /**
     * Converts this RbsHighPrecisionTiltConfig into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "RbsHighPrecisionTiltConfig [" + "mode=" + mode + ", periodicReporting="
                + periodicReporting + ", holdTime=" + holdTime + ", angleAway=" + angleAway
                + ", angleToward=" + angleToward + ", tscore=" + tscore + ", additionalProperties="
                + additionalProperties + "]";
    }

    /**
     * Builds a new {@link RbsHighPrecisionTiltConfig.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link RbsHighPrecisionTiltConfig.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .mode(getMode())
                .periodicReporting(getPeriodicReporting())
                .holdTime(getHoldTime())
                .angleAway(getAngleAway())
                .angleToward(getAngleToward())
                .tscore(getTscore());
        builder.additionalProperties = additionalProperties;
        return builder;
    }

    /**
     * Class to build instances of {@link RbsHighPrecisionTiltConfig}.
     */
    public static class Builder {
        private Mode mode;
        private PeriodicReporting periodicReporting;
        private Integer holdTime;
        private Integer angleAway;
        private Integer angleToward;
        private Tscore tscore;
        private AdditionalProperties<Object> additionalProperties =
                new AdditionalProperties<Object>();



        /**
         * Setter for mode.
         * @param  mode  Mode value for mode.
         * @return Builder
         */
        public Builder mode(Mode mode) {
            this.mode = mode;
            return this;
        }

        /**
         * Setter for periodicReporting.
         * @param  periodicReporting  PeriodicReporting value for periodicReporting.
         * @return Builder
         */
        public Builder periodicReporting(PeriodicReporting periodicReporting) {
            this.periodicReporting = periodicReporting;
            return this;
        }

        /**
         * Setter for holdTime.
         * @param  holdTime  Integer value for holdTime.
         * @return Builder
         */
        public Builder holdTime(Integer holdTime) {
            this.holdTime = holdTime;
            return this;
        }

        /**
         * Setter for angleAway.
         * @param  angleAway  Integer value for angleAway.
         * @return Builder
         */
        public Builder angleAway(Integer angleAway) {
            this.angleAway = angleAway;
            return this;
        }

        /**
         * Setter for angleToward.
         * @param  angleToward  Integer value for angleToward.
         * @return Builder
         */
        public Builder angleToward(Integer angleToward) {
            this.angleToward = angleToward;
            return this;
        }

        /**
         * Setter for tscore.
         * @param  tscore  Tscore value for tscore.
         * @return Builder
         */
        public Builder tscore(Tscore tscore) {
            this.tscore = tscore;
            return this;
        }

        /**
         * Setter for additional property that are not in model fields.
         * @param name The name of the additional property.
         * @param value The Object value of the additional property.
         * @return Builder.
         */
        public Builder additionalProperty(String name, Object value) {
            this.additionalProperties.setAdditionalProperty(name, value);
            return this;
        }

        /**
         * Builds a new {@link RbsHighPrecisionTiltConfig} object using the set fields.
         * @return {@link RbsHighPrecisionTiltConfig}
         */
        public RbsHighPrecisionTiltConfig build() {
            RbsHighPrecisionTiltConfig model =
                    new RbsHighPrecisionTiltConfig(mode, periodicReporting, holdTime, angleAway,
                            angleToward, tscore);
            model.additionalProperties = additionalProperties;
            return model;
        }
    }
}
