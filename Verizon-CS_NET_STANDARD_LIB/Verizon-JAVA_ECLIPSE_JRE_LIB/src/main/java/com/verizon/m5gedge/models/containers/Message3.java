/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.models.Message;
import com.verizon.m5gedge.models.Message1;
import com.verizon.m5gedge.models.Message2;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;

/**
 * This is a container class for one-of types.
 */
@JsonDeserialize(using = Message3.Message3Deserializer.class)
public abstract class Message3 {
    
    /**
     * This is Message case.
     * @param message Message value for message.
     * @return The MessageCase object.
     */
    public static Message3 fromMessage(Message message) {
        return message == null ? null : new MessageCase(message);
    }

    /**
     * This is Message1 case.
     * @param message1 Message1 value for message1.
     * @return The Message1Case object.
     */
    public static Message3 fromMessage1(Message1 message1) {
        return message1 == null ? null : new Message1Case(message1);
    }

    /**
     * This is Message2 case.
     * @param message2 Message2 value for message2.
     * @return The Message2Case object.
     */
    public static Message3 fromMessage2(Message2 message2) {
        return message2 == null ? null : new Message2Case(message2);
    }

    /**
     * Method to match from the provided one-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The one-of type cases callback.
     * @return The one-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for one-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R message(Message message);

        R message1(Message1 message1);

        R message2(Message2 message2);
    }

    /**
     * This is a implementation class for MessageCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "Message")
    private static class MessageCase extends Message3 {

        @JsonValue
        private Message message;

        MessageCase(Message message) {
            this.message = message;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.message(this.message);
        }

        @JsonCreator
        private MessageCase(JsonNode jsonNode) throws IOException {
            this.message = ApiHelper.deserialize(jsonNode,
                Message.class);
        }

        @Override
        public String toString() {
            return message.toString();
        }
    }

    /**
     * This is a implementation class for Message1Case.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "Message1")
    private static class Message1Case extends Message3 {

        @JsonValue
        private Message1 message1;

        Message1Case(Message1 message1) {
            this.message1 = message1;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.message1(this.message1);
        }

        @JsonCreator
        private Message1Case(JsonNode jsonNode) throws IOException {
            this.message1 = ApiHelper.deserialize(jsonNode,
                Message1.class);
        }

        @Override
        public String toString() {
            return message1.toString();
        }
    }

    /**
     * This is a implementation class for Message2Case.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "Message2")
    private static class Message2Case extends Message3 {

        @JsonValue
        private Message2 message2;

        Message2Case(Message2 message2) {
            this.message2 = message2;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.message2(this.message2);
        }

        @JsonCreator
        private Message2Case(JsonNode jsonNode) throws IOException {
            this.message2 = ApiHelper.deserialize(jsonNode,
                Message2.class);
        }

        @Override
        public String toString() {
            return message2.toString();
        }
    }

    /**
     * This is a custom deserializer class for Message3.
     */
    protected static class Message3Deserializer
            extends JsonDeserializer<Message3> {

        @Override
        public Message3 deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(MessageCase.class, Message1Case.class,
                    Message2Case.class), true);
        }
    }

}
