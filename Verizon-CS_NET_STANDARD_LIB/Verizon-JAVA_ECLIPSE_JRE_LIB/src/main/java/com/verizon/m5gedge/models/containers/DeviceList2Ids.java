/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.models.DeviceId2;
import com.verizon.m5gedge.models.EsimDeviceId;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;

/**
 * This is a container class for any-of types.
 */
@JsonDeserialize(using = DeviceList2Ids.DeviceList2IdsDeserializer.class)
public abstract class DeviceList2Ids {
    
    /**
     * This is eSIMDeviceId case.
     * @param esimDeviceId EsimDeviceId value for esimDeviceId.
     * @return The EsimDeviceIdCase object.
     */
    public static DeviceList2Ids fromEsimDeviceId(EsimDeviceId esimDeviceId) {
        return esimDeviceId == null ? null : new EsimDeviceIdCase(esimDeviceId);
    }

    /**
     * This is DeviceId2 case.
     * @param deviceId2 DeviceId2 value for deviceId2.
     * @return The DeviceId2Case object.
     */
    public static DeviceList2Ids fromDeviceId2(DeviceId2 deviceId2) {
        return deviceId2 == null ? null : new DeviceId2Case(deviceId2);
    }

    /**
     * Method to match from the provided any-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The any-of type cases callback.
     * @return The any-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for any-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R esimDeviceId(EsimDeviceId esimDeviceId);

        R deviceId2(DeviceId2 deviceId2);
    }

    /**
     * This is a implementation class for EsimDeviceIdCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "EsimDeviceId")
    private static class EsimDeviceIdCase extends DeviceList2Ids {

        @JsonValue
        private EsimDeviceId esimDeviceId;

        EsimDeviceIdCase(EsimDeviceId esimDeviceId) {
            this.esimDeviceId = esimDeviceId;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.esimDeviceId(this.esimDeviceId);
        }

        @JsonCreator
        private EsimDeviceIdCase(JsonNode jsonNode) throws IOException {
            this.esimDeviceId = ApiHelper.deserialize(jsonNode,
                EsimDeviceId.class);
        }

        @Override
        public String toString() {
            return esimDeviceId.toString();
        }
    }

    /**
     * This is a implementation class for DeviceId2Case.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "DeviceId2")
    private static class DeviceId2Case extends DeviceList2Ids {

        @JsonValue
        private DeviceId2 deviceId2;

        DeviceId2Case(DeviceId2 deviceId2) {
            this.deviceId2 = deviceId2;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.deviceId2(this.deviceId2);
        }

        @JsonCreator
        private DeviceId2Case(JsonNode jsonNode) throws IOException {
            this.deviceId2 = ApiHelper.deserialize(jsonNode,
                DeviceId2.class);
        }

        @Override
        public String toString() {
            return deviceId2.toString();
        }
    }

    /**
     * This is a custom deserializer class for DeviceList2Ids.
     */
    protected static class DeviceList2IdsDeserializer
            extends JsonDeserializer<DeviceList2Ids> {

        @Override
        public DeviceList2Ids deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(EsimDeviceIdCase.class,
                    DeviceId2Case.class), false);
        }
    }

}
