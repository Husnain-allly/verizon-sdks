/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.AdditionalProperties;
import io.apimatic.core.utilities.ConversionHelper;
import java.util.Map;

/**
 * This is a model class for IpPool type.
 */
public class IpPool {
    private String poolName;
    private String poolType;
    private Boolean isDefaultPool;
    private AdditionalProperties<Object> additionalProperties = 
            new AdditionalProperties<Object>(this.getClass());

    /**
     * Default constructor.
     */
    public IpPool() {
    }

    /**
     * Initialization constructor.
     * @param  poolName  String value for poolName.
     * @param  poolType  String value for poolType.
     * @param  isDefaultPool  Boolean value for isDefaultPool.
     */
    public IpPool(
            String poolName,
            String poolType,
            Boolean isDefaultPool) {
        this.poolName = poolName;
        this.poolType = poolType;
        this.isDefaultPool = isDefaultPool;
    }

    /**
     * Getter for PoolName.
     * The name of the IP pool.
     * @return Returns the String
     */
    @JsonGetter("poolName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPoolName() {
        return poolName;
    }

    /**
     * Setter for PoolName.
     * The name of the IP pool.
     * @param poolName Value for String
     */
    @JsonSetter("poolName")
    public void setPoolName(String poolName) {
        this.poolName = poolName;
    }

    /**
     * Getter for PoolType.
     * The type of IP pool, such as “Static IP” or “Dynamic IP.”
     * @return Returns the String
     */
    @JsonGetter("poolType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPoolType() {
        return poolType;
    }

    /**
     * Setter for PoolType.
     * The type of IP pool, such as “Static IP” or “Dynamic IP.”
     * @param poolType Value for String
     */
    @JsonSetter("poolType")
    public void setPoolType(String poolType) {
        this.poolType = poolType;
    }

    /**
     * Getter for IsDefaultPool.
     * True if this is the default IP pool for the account.
     * @return Returns the Boolean
     */
    @JsonGetter("isDefaultPool")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsDefaultPool() {
        return isDefaultPool;
    }

    /**
     * Setter for IsDefaultPool.
     * True if this is the default IP pool for the account.
     * @param isDefaultPool Value for Boolean
     */
    @JsonSetter("isDefaultPool")
    public void setIsDefaultPool(Boolean isDefaultPool) {
        this.isDefaultPool = isDefaultPool;
    }

    /**
     * Hidden method for the serialization of additional properties.
     * @return The map of additionally set properties.
     */
    @JsonAnyGetter
    private Map<String, Object> getAdditionalProperties() {
        return additionalProperties.getAdditionalProperties();
    }

    /**
     * Hidden method for the de-serialization of additional properties.
     * @param name The name of the additional property.
     * @param value The Object value of the additional property.
     */
    @JsonAnySetter
    private void setAdditionalProperties(String name, Object value) {
        additionalProperties.setAdditionalProperty(name,
                ConversionHelper.convertToSimpleType(value,
                        x -> x),
                true);
    }

    /**
     * Getter for the value of additional properties based on provided property name.
     * @param name The name of the additional property.
     * @return Either the Object property value or null if not exist.
     */
    
    public Object getAdditionalProperty(String name) {
        return additionalProperties.getAdditionalProperty(name);
    }

    /**
     * Converts this IpPool into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "IpPool [" + "poolName=" + poolName + ", poolType=" + poolType + ", isDefaultPool="
                + isDefaultPool + ", additionalProperties=" + additionalProperties + "]";
    }

    /**
     * Builds a new {@link IpPool.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link IpPool.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .poolName(getPoolName())
                .poolType(getPoolType())
                .isDefaultPool(getIsDefaultPool());
        builder.additionalProperties = additionalProperties;
        return builder;
    }

    /**
     * Class to build instances of {@link IpPool}.
     */
    public static class Builder {
        private String poolName;
        private String poolType;
        private Boolean isDefaultPool;
        private AdditionalProperties<Object> additionalProperties =
                new AdditionalProperties<Object>();



        /**
         * Setter for poolName.
         * @param  poolName  String value for poolName.
         * @return Builder
         */
        public Builder poolName(String poolName) {
            this.poolName = poolName;
            return this;
        }

        /**
         * Setter for poolType.
         * @param  poolType  String value for poolType.
         * @return Builder
         */
        public Builder poolType(String poolType) {
            this.poolType = poolType;
            return this;
        }

        /**
         * Setter for isDefaultPool.
         * @param  isDefaultPool  Boolean value for isDefaultPool.
         * @return Builder
         */
        public Builder isDefaultPool(Boolean isDefaultPool) {
            this.isDefaultPool = isDefaultPool;
            return this;
        }

        /**
         * Setter for additional property that are not in model fields.
         * @param name The name of the additional property.
         * @param value The Object value of the additional property.
         * @return Builder.
         */
        public Builder additionalProperty(String name, Object value) {
            this.additionalProperties.setAdditionalProperty(name, value);
            return this;
        }

        /**
         * Builds a new {@link IpPool} object using the set fields.
         * @return {@link IpPool}
         */
        public IpPool build() {
            IpPool model =
                    new IpPool(poolName, poolType, isDefaultPool);
            model.additionalProperties = additionalProperties;
            return model;
        }
    }
}
