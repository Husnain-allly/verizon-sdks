/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.models.HeadingItem;
import com.verizon.m5gedge.models.SpeedItem;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;

/**
 * This is a container class for one-of types.
 */
@JsonDeserialize(using = Limits.LimitsDeserializer.class)
public abstract class Limits {
    
    /**
     * This is SpeedItem case.
     * @param speedItem SpeedItem value for speedItem.
     * @return The SpeedItemCase object.
     */
    public static Limits fromSpeedItem(SpeedItem speedItem) {
        return speedItem == null ? null : new SpeedItemCase(speedItem);
    }

    /**
     * This is HeadingItem case.
     * @param headingItem HeadingItem value for headingItem.
     * @return The HeadingItemCase object.
     */
    public static Limits fromHeadingItem(HeadingItem headingItem) {
        return headingItem == null ? null : new HeadingItemCase(headingItem);
    }

    /**
     * Method to match from the provided one-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The one-of type cases callback.
     * @return The one-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for one-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R speedItem(SpeedItem speedItem);

        R headingItem(HeadingItem headingItem);
    }

    /**
     * This is a implementation class for SpeedItemCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "SpeedItem")
    private static class SpeedItemCase extends Limits {

        @JsonValue
        private SpeedItem speedItem;

        SpeedItemCase(SpeedItem speedItem) {
            this.speedItem = speedItem;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.speedItem(this.speedItem);
        }

        @JsonCreator
        private SpeedItemCase(JsonNode jsonNode) throws IOException {
            this.speedItem = ApiHelper.deserialize(jsonNode,
                SpeedItem.class);
        }

        @Override
        public String toString() {
            return speedItem.toString();
        }
    }

    /**
     * This is a implementation class for HeadingItemCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "HeadingItem")
    private static class HeadingItemCase extends Limits {

        @JsonValue
        private HeadingItem headingItem;

        HeadingItemCase(HeadingItem headingItem) {
            this.headingItem = headingItem;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.headingItem(this.headingItem);
        }

        @JsonCreator
        private HeadingItemCase(JsonNode jsonNode) throws IOException {
            this.headingItem = ApiHelper.deserialize(jsonNode,
                HeadingItem.class);
        }

        @Override
        public String toString() {
            return headingItem.toString();
        }
    }

    /**
     * This is a custom deserializer class for Limits.
     */
    protected static class LimitsDeserializer
            extends JsonDeserializer<Limits> {

        @Override
        public Limits deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(SpeedItemCase.class,
                    HeadingItemCase.class), true);
        }
    }

}
