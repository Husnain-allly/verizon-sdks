/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.models.Content;
import com.verizon.m5gedge.models.Content1;
import com.verizon.m5gedge.models.Content2;
import com.verizon.m5gedge.models.Content3;
import com.verizon.m5gedge.models.Content4;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;

/**
 * This is a container class for one-of types.
 */
@JsonDeserialize(using = DataFrameContent.DataFrameContentDeserializer.class)
public abstract class DataFrameContent {
    
    /**
     * This is Content case.
     * @param content Content value for content.
     * @return The ContentCase object.
     */
    public static DataFrameContent fromContent(Content content) {
        return content == null ? null : new ContentCase(content);
    }

    /**
     * This is Content1 case.
     * @param content1 Content1 value for content1.
     * @return The Content1Case object.
     */
    public static DataFrameContent fromContent1(Content1 content1) {
        return content1 == null ? null : new Content1Case(content1);
    }

    /**
     * This is Content2 case.
     * @param content2 Content2 value for content2.
     * @return The Content2Case object.
     */
    public static DataFrameContent fromContent2(Content2 content2) {
        return content2 == null ? null : new Content2Case(content2);
    }

    /**
     * This is Content3 case.
     * @param content3 Content3 value for content3.
     * @return The Content3Case object.
     */
    public static DataFrameContent fromContent3(Content3 content3) {
        return content3 == null ? null : new Content3Case(content3);
    }

    /**
     * This is Content4 case.
     * @param content4 Content4 value for content4.
     * @return The Content4Case object.
     */
    public static DataFrameContent fromContent4(Content4 content4) {
        return content4 == null ? null : new Content4Case(content4);
    }

    /**
     * Method to match from the provided one-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The one-of type cases callback.
     * @return The one-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for one-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R content(Content content);

        R content1(Content1 content1);

        R content2(Content2 content2);

        R content3(Content3 content3);

        R content4(Content4 content4);
    }

    /**
     * This is a implementation class for ContentCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "Content")
    private static class ContentCase extends DataFrameContent {

        @JsonValue
        private Content content;

        ContentCase(Content content) {
            this.content = content;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.content(this.content);
        }

        @JsonCreator
        private ContentCase(JsonNode jsonNode) throws IOException {
            this.content = ApiHelper.deserialize(jsonNode,
                Content.class);
        }

        @Override
        public String toString() {
            return content.toString();
        }
    }

    /**
     * This is a implementation class for Content1Case.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "Content1")
    private static class Content1Case extends DataFrameContent {

        @JsonValue
        private Content1 content1;

        Content1Case(Content1 content1) {
            this.content1 = content1;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.content1(this.content1);
        }

        @JsonCreator
        private Content1Case(JsonNode jsonNode) throws IOException {
            this.content1 = ApiHelper.deserialize(jsonNode,
                Content1.class);
        }

        @Override
        public String toString() {
            return content1.toString();
        }
    }

    /**
     * This is a implementation class for Content2Case.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "Content2")
    private static class Content2Case extends DataFrameContent {

        @JsonValue
        private Content2 content2;

        Content2Case(Content2 content2) {
            this.content2 = content2;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.content2(this.content2);
        }

        @JsonCreator
        private Content2Case(JsonNode jsonNode) throws IOException {
            this.content2 = ApiHelper.deserialize(jsonNode,
                Content2.class);
        }

        @Override
        public String toString() {
            return content2.toString();
        }
    }

    /**
     * This is a implementation class for Content3Case.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "Content3")
    private static class Content3Case extends DataFrameContent {

        @JsonValue
        private Content3 content3;

        Content3Case(Content3 content3) {
            this.content3 = content3;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.content3(this.content3);
        }

        @JsonCreator
        private Content3Case(JsonNode jsonNode) throws IOException {
            this.content3 = ApiHelper.deserialize(jsonNode,
                Content3.class);
        }

        @Override
        public String toString() {
            return content3.toString();
        }
    }

    /**
     * This is a implementation class for Content4Case.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "Content4")
    private static class Content4Case extends DataFrameContent {

        @JsonValue
        private Content4 content4;

        Content4Case(Content4 content4) {
            this.content4 = content4;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.content4(this.content4);
        }

        @JsonCreator
        private Content4Case(JsonNode jsonNode) throws IOException {
            this.content4 = ApiHelper.deserialize(jsonNode,
                Content4.class);
        }

        @Override
        public String toString() {
            return content4.toString();
        }
    }

    /**
     * This is a custom deserializer class for DataFrameContent.
     */
    protected static class DataFrameContentDeserializer
            extends JsonDeserializer<DataFrameContent> {

        @Override
        public DataFrameContent deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(ContentCase.class, Content1Case.class,
                    Content2Case.class, Content3Case.class, Content4Case.class), true);
        }
    }

}
