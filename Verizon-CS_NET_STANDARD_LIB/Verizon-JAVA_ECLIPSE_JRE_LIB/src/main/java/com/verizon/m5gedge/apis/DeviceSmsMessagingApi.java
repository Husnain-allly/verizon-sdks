/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.apis;

import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.Server;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.exceptions.GioRestErrorResponseException;
import com.verizon.m5gedge.http.request.HttpMethod;
import com.verizon.m5gedge.http.response.ApiResponse;
import com.verizon.m5gedge.models.GioRequestResponse;
import com.verizon.m5gedge.models.GiosmsSendRequest;
import com.verizon.m5gedge.models.SmsEventHistoryRequest;
import com.verizon.m5gedge.models.SmsMessagesResponse;
import com.verizon.m5gedge.models.SuccessResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class DeviceSmsMessagingApi extends BaseApi {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public DeviceSmsMessagingApi(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Sends an SMS message to one device. Messages are queued on the M2M MC Platform and sent as
     * soon as possible, but they may be delayed due to traffic and routing considerations.
     * @param  body  Required parameter: SMS message to an indiividual device.
     * @return    Returns the GioRequestResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<GioRequestResponse> sendAnSmsMessage(
            final GiosmsSendRequest body) throws ApiException, IOException {
        return prepareSendAnSmsMessageRequest(body).execute();
    }

    /**
     * Sends an SMS message to one device. Messages are queued on the M2M MC Platform and sent as
     * soon as possible, but they may be delayed due to traffic and routing considerations.
     * @param  body  Required parameter: SMS message to an indiividual device.
     * @return    Returns the GioRequestResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<GioRequestResponse>> sendAnSmsMessageAsync(
            final GiosmsSendRequest body) {
        try {
            return prepareSendAnSmsMessageRequest(body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for sendAnSmsMessage.
     */
    private ApiCall<ApiResponse<GioRequestResponse>, ApiException> prepareSendAnSmsMessageRequest(
            final GiosmsSendRequest body) {
        return new ApiCall.Builder<ApiResponse<GioRequestResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/sms")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, GioRequestResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error response",
                                (reason, context) -> new GioRestErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Retrieves queued SMS messages sent by all M2M MC devices associated with an account.
     * @param  accountName  Required parameter: Numeric account name
     * @param  next  Optional parameter: Continue the previous query from the pageUrl in Location
     *         Header
     * @return    Returns the SmsMessagesResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<SmsMessagesResponse> getSmsMessages(
            final String accountName,
            final String next) throws ApiException, IOException {
        return prepareGetSmsMessagesRequest(accountName, next).execute();
    }

    /**
     * Retrieves queued SMS messages sent by all M2M MC devices associated with an account.
     * @param  accountName  Required parameter: Numeric account name
     * @param  next  Optional parameter: Continue the previous query from the pageUrl in Location
     *         Header
     * @return    Returns the SmsMessagesResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<SmsMessagesResponse>> getSmsMessagesAsync(
            final String accountName,
            final String next) {
        try {
            return prepareGetSmsMessagesRequest(accountName, next).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for getSmsMessages.
     */
    private ApiCall<ApiResponse<SmsMessagesResponse>, ApiException> prepareGetSmsMessagesRequest(
            final String accountName,
            final String next) {
        return new ApiCall.Builder<ApiResponse<SmsMessagesResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/sms/{accountName}/history")
                        .queryParam(param -> param.key("next")
                                .value(next).isRequired(false))
                        .templateParam(param -> param.key("accountName").value(accountName)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, SmsMessagesResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error response",
                                (reason, context) -> new GioRestErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Starts delivery of SMS messages for the specified account.
     * @param  accountName  Required parameter: Numeric account name
     * @return    Returns the SuccessResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<SuccessResponse> startSmsMessageDelivery(
            final String accountName) throws ApiException, IOException {
        return prepareStartSmsMessageDeliveryRequest(accountName).execute();
    }

    /**
     * Starts delivery of SMS messages for the specified account.
     * @param  accountName  Required parameter: Numeric account name
     * @return    Returns the SuccessResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<SuccessResponse>> startSmsMessageDeliveryAsync(
            final String accountName) {
        try {
            return prepareStartSmsMessageDeliveryRequest(accountName).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for startSmsMessageDelivery.
     */
    private ApiCall<ApiResponse<SuccessResponse>, ApiException> prepareStartSmsMessageDeliveryRequest(
            final String accountName) {
        return new ApiCall.Builder<ApiResponse<SuccessResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/sms/{accountName}/startCallbacks")
                        .templateParam(param -> param.key("accountName").value(accountName)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, SuccessResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error response",
                                (reason, context) -> new GioRestErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns a list of sms history for a given device during a specified time frame.
     * @param  body  Required parameter: Device Query
     * @return    Returns the GioRequestResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<GioRequestResponse> listSmsMessageHistory(
            final SmsEventHistoryRequest body) throws ApiException, IOException {
        return prepareListSmsMessageHistoryRequest(body).execute();
    }

    /**
     * Returns a list of sms history for a given device during a specified time frame.
     * @param  body  Required parameter: Device Query
     * @return    Returns the GioRequestResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<GioRequestResponse>> listSmsMessageHistoryAsync(
            final SmsEventHistoryRequest body) {
        try {
            return prepareListSmsMessageHistoryRequest(body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for listSmsMessageHistory.
     */
    private ApiCall<ApiResponse<GioRequestResponse>, ApiException> prepareListSmsMessageHistoryRequest(
            final SmsEventHistoryRequest body) {
        return new ApiCall.Builder<ApiResponse<GioRequestResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/sms/history/actions/list")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, GioRequestResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error response",
                                (reason, context) -> new GioRestErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}