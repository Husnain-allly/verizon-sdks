/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.apis;

import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.Server;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.exceptions.M400ManagementErrorException;
import com.verizon.m5gedge.exceptions.M403ManagementErrorException;
import com.verizon.m5gedge.exceptions.M404ManagementErrorException;
import com.verizon.m5gedge.exceptions.M500ManagementErrorException;
import com.verizon.m5gedge.exceptions.ManagementErrorException;
import com.verizon.m5gedge.http.request.HttpMethod;
import com.verizon.m5gedge.http.response.ApiResponse;
import com.verizon.m5gedge.models.DtoDeviceActionSetResponse;
import com.verizon.m5gedge.models.DtoExpandedDeviceResponse;
import com.verizon.m5gedge.models.DtoLastReportedTimeRequest;
import com.verizon.m5gedge.models.DtoLastReportedTimeResponse;
import com.verizon.m5gedge.models.DtoListDeviceExperienceHistoryRequest;
import com.verizon.m5gedge.models.DtoListDevicesRequest;
import com.verizon.m5gedge.models.DtoListNetworkExperienceHistoryRequest;
import com.verizon.m5gedge.models.DtoPatchDeviceRequest;
import com.verizon.m5gedge.models.ResourceDevice;
import com.verizon.m5gedge.models.UserDeviceExperienceHistory;
import com.verizon.m5gedge.models.UserNetworkExperienceHistory;
import com.verizon.m5gedge.models.containers.SensorInsightsDeviceActionSetRequestBody;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class SensorInsightsDevicesApi extends BaseApi {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public SensorInsightsDevicesApi(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * @param  body  Required parameter: List all device details on an account
     * @return    Returns the List of DtoExpandedDeviceResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<List<DtoExpandedDeviceResponse>> sensorInsightsListDevicesRequest(
            final DtoListDevicesRequest body) throws ApiException, IOException {
        return prepareSensorInsightsListDevicesRequestRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: List all device details on an account
     * @return    Returns the List of DtoExpandedDeviceResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<List<DtoExpandedDeviceResponse>>> sensorInsightsListDevicesRequestAsync(
            final DtoListDevicesRequest body) {
        try {
            return prepareSensorInsightsListDevicesRequestRequest(body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for sensorInsightsListDevicesRequest.
     */
    private ApiCall<ApiResponse<List<DtoExpandedDeviceResponse>>, ApiException> prepareSensorInsightsListDevicesRequestRequest(
            final DtoListDevicesRequest body) {
        return new ApiCall.Builder<ApiResponse<List<DtoExpandedDeviceResponse>>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/dm/v1/devices/actions/query")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        DtoExpandedDeviceResponse[].class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Request",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("UnAuthorized",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Not Found",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("406",
                                 ErrorCase.setReason("Not Acceptable",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("415",
                                 ErrorCase.setReason("Unsupported media type",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("Too many requests",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal server error.",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Unexpected error",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Partially update a device's details
     * @return    Returns the ResourceDevice wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<ResourceDevice> sensorInsightsPatchDeviceRequest(
            final DtoPatchDeviceRequest body) throws ApiException, IOException {
        return prepareSensorInsightsPatchDeviceRequestRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Partially update a device's details
     * @return    Returns the ResourceDevice wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<ResourceDevice>> sensorInsightsPatchDeviceRequestAsync(
            final DtoPatchDeviceRequest body) {
        try {
            return prepareSensorInsightsPatchDeviceRequestRequest(body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for sensorInsightsPatchDeviceRequest.
     */
    private ApiCall<ApiResponse<ResourceDevice>, ApiException> prepareSensorInsightsPatchDeviceRequestRequest(
            final DtoPatchDeviceRequest body) {
        return new ApiCall.Builder<ApiResponse<ResourceDevice>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/dm/v1/devices")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, ResourceDevice.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Request",
                                (reason, context) -> new M400ManagementErrorException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("UnAuthorized",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden",
                                (reason, context) -> new M403ManagementErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Not Found",
                                (reason, context) -> new M404ManagementErrorException(reason, context)))
                        .localErrorCase("406",
                                 ErrorCase.setReason("Not Acceptable",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("415",
                                 ErrorCase.setReason("Unsupported media type",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("Too many requests",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal server error.",
                                (reason, context) -> new M500ManagementErrorException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Unexpected error",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Get the last reported information for a device
     * @return    Returns the DtoLastReportedTimeResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DtoLastReportedTimeResponse> sensorInsightsLastReportedTimeRequest(
            final DtoLastReportedTimeRequest body) throws ApiException, IOException {
        return prepareSensorInsightsLastReportedTimeRequestRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Get the last reported information for a device
     * @return    Returns the DtoLastReportedTimeResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DtoLastReportedTimeResponse>> sensorInsightsLastReportedTimeRequestAsync(
            final DtoLastReportedTimeRequest body) {
        try {
            return prepareSensorInsightsLastReportedTimeRequestRequest(body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for sensorInsightsLastReportedTimeRequest.
     */
    private ApiCall<ApiResponse<DtoLastReportedTimeResponse>, ApiException> prepareSensorInsightsLastReportedTimeRequestRequest(
            final DtoLastReportedTimeRequest body) {
        return new ApiCall.Builder<ApiResponse<DtoLastReportedTimeResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/dm/v1/devices/lastreported")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DtoLastReportedTimeResponse.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Request",
                                (reason, context) -> new M400ManagementErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden",
                                (reason, context) -> new M403ManagementErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Not Found",
                                (reason, context) -> new M404ManagementErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Set device configuration
     * @return    Returns the DtoDeviceActionSetResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DtoDeviceActionSetResponse> sensorInsightsDeviceActionSetRequest(
            final SensorInsightsDeviceActionSetRequestBody body) throws ApiException, IOException {
        return prepareSensorInsightsDeviceActionSetRequestRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Set device configuration
     * @return    Returns the DtoDeviceActionSetResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DtoDeviceActionSetResponse>> sensorInsightsDeviceActionSetRequestAsync(
            final SensorInsightsDeviceActionSetRequestBody body) {
        try {
            return prepareSensorInsightsDeviceActionSetRequestRequest(body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for sensorInsightsDeviceActionSetRequest.
     */
    private ApiCall<ApiResponse<DtoDeviceActionSetResponse>, ApiException> prepareSensorInsightsDeviceActionSetRequestRequest(
            final SensorInsightsDeviceActionSetRequestBody body) {
        return new ApiCall.Builder<ApiResponse<DtoDeviceActionSetResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/dm/v1/devices/actions/set")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serializeTypeCombinator(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DtoDeviceActionSetResponse.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Request",
                                (reason, context) -> new M400ManagementErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden",
                                (reason, context) -> new M403ManagementErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Not Found",
                                (reason, context) -> new M404ManagementErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: List the device experience
     * @return    Returns the List of UserDeviceExperienceHistory wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<List<UserDeviceExperienceHistory>> sensorInsightsListDeviceExperienceHistoryRequest(
            final DtoListDeviceExperienceHistoryRequest body) throws ApiException, IOException {
        return prepareSensorInsightsListDeviceExperienceHistoryRequestRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: List the device experience
     * @return    Returns the List of UserDeviceExperienceHistory wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<List<UserDeviceExperienceHistory>>> sensorInsightsListDeviceExperienceHistoryRequestAsync(
            final DtoListDeviceExperienceHistoryRequest body) {
        try {
            return prepareSensorInsightsListDeviceExperienceHistoryRequestRequest(body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for sensorInsightsListDeviceExperienceHistoryRequest.
     */
    private ApiCall<ApiResponse<List<UserDeviceExperienceHistory>>, ApiException> prepareSensorInsightsListDeviceExperienceHistoryRequestRequest(
            final DtoListDeviceExperienceHistoryRequest body) {
        return new ApiCall.Builder<ApiResponse<List<UserDeviceExperienceHistory>>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/dm/v1/devices/experience/actions/query")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        UserDeviceExperienceHistory[].class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Request",
                                (reason, context) -> new M400ManagementErrorException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("UnAuthorized",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden",
                                (reason, context) -> new M403ManagementErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Not Found",
                                (reason, context) -> new M404ManagementErrorException(reason, context)))
                        .localErrorCase("406",
                                 ErrorCase.setReason("Not Acceptable",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("415",
                                 ErrorCase.setReason("Unsupported media type",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("Too many requests",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal server error.",
                                (reason, context) -> new M500ManagementErrorException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Unexpected error",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: List the network experience
     * @return    Returns the List of UserNetworkExperienceHistory wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<List<UserNetworkExperienceHistory>> sensorInsightsListNetworkExperienceHistoryRequest(
            final DtoListNetworkExperienceHistoryRequest body) throws ApiException, IOException {
        return prepareSensorInsightsListNetworkExperienceHistoryRequestRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: List the network experience
     * @return    Returns the List of UserNetworkExperienceHistory wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<List<UserNetworkExperienceHistory>>> sensorInsightsListNetworkExperienceHistoryRequestAsync(
            final DtoListNetworkExperienceHistoryRequest body) {
        try {
            return prepareSensorInsightsListNetworkExperienceHistoryRequestRequest(body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for sensorInsightsListNetworkExperienceHistoryRequest.
     */
    private ApiCall<ApiResponse<List<UserNetworkExperienceHistory>>, ApiException> prepareSensorInsightsListNetworkExperienceHistoryRequestRequest(
            final DtoListNetworkExperienceHistoryRequest body) {
        return new ApiCall.Builder<ApiResponse<List<UserNetworkExperienceHistory>>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/dm/v1/devices/networkexperience/actions/query")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        UserNetworkExperienceHistory[].class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Request",
                                (reason, context) -> new M400ManagementErrorException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("UnAuthorized",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden",
                                (reason, context) -> new M403ManagementErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Not Found",
                                (reason, context) -> new M404ManagementErrorException(reason, context)))
                        .localErrorCase("406",
                                 ErrorCase.setReason("Not Acceptable",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("415",
                                 ErrorCase.setReason("Unsupported media type",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("Too many requests",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal server error.",
                                (reason, context) -> new M500ManagementErrorException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Unexpected error",
                                (reason, context) -> new ManagementErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}