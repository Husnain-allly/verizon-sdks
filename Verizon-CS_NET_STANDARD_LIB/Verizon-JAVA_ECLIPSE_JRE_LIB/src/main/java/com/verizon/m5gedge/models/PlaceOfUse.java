/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.AdditionalProperties;
import io.apimatic.core.utilities.ConversionHelper;
import java.util.Map;

/**
 * This is a model class for PlaceOfUse type.
 */
public class PlaceOfUse {
    private Address address;
    private CustomerName customerName;
    private AdditionalProperties<Object> additionalProperties = 
            new AdditionalProperties<Object>(this.getClass());

    /**
     * Default constructor.
     */
    public PlaceOfUse() {
    }

    /**
     * Initialization constructor.
     * @param  address  Address value for address.
     * @param  customerName  CustomerName value for customerName.
     */
    public PlaceOfUse(
            Address address,
            CustomerName customerName) {
        this.address = address;
        this.customerName = customerName;
    }

    /**
     * Getter for Address.
     * The customer address for the line's primary place of use, for line usage taxation.
     * @return Returns the Address
     */
    @JsonGetter("address")
    public Address getAddress() {
        return address;
    }

    /**
     * Setter for Address.
     * The customer address for the line's primary place of use, for line usage taxation.
     * @param address Value for Address
     */
    @JsonSetter("address")
    public void setAddress(Address address) {
        this.address = address;
    }

    /**
     * Getter for CustomerName.
     * The customer name to be used for line usage taxation.
     * @return Returns the CustomerName
     */
    @JsonGetter("customerName")
    public CustomerName getCustomerName() {
        return customerName;
    }

    /**
     * Setter for CustomerName.
     * The customer name to be used for line usage taxation.
     * @param customerName Value for CustomerName
     */
    @JsonSetter("customerName")
    public void setCustomerName(CustomerName customerName) {
        this.customerName = customerName;
    }

    /**
     * Hidden method for the serialization of additional properties.
     * @return The map of additionally set properties.
     */
    @JsonAnyGetter
    private Map<String, Object> getAdditionalProperties() {
        return additionalProperties.getAdditionalProperties();
    }

    /**
     * Hidden method for the de-serialization of additional properties.
     * @param name The name of the additional property.
     * @param value The Object value of the additional property.
     */
    @JsonAnySetter
    private void setAdditionalProperties(String name, Object value) {
        additionalProperties.setAdditionalProperty(name,
                ConversionHelper.convertToSimpleType(value,
                        x -> x),
                true);
    }

    /**
     * Getter for the value of additional properties based on provided property name.
     * @param name The name of the additional property.
     * @return Either the Object property value or null if not exist.
     */
    
    public Object getAdditionalProperty(String name) {
        return additionalProperties.getAdditionalProperty(name);
    }

    /**
     * Converts this PlaceOfUse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "PlaceOfUse [" + "address=" + address + ", customerName=" + customerName
                + ", additionalProperties=" + additionalProperties + "]";
    }

    /**
     * Builds a new {@link PlaceOfUse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link PlaceOfUse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(address, customerName);
        builder.additionalProperties = additionalProperties;
        return builder;
    }

    /**
     * Class to build instances of {@link PlaceOfUse}.
     */
    public static class Builder {
        private Address address;
        private CustomerName customerName;
        private AdditionalProperties<Object> additionalProperties =
                new AdditionalProperties<Object>();

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  address  Address value for address.
         * @param  customerName  CustomerName value for customerName.
         */
        public Builder(Address address, CustomerName customerName) {
            this.address = address;
            this.customerName = customerName;
        }

        /**
         * Setter for address.
         * @param  address  Address value for address.
         * @return Builder
         */
        public Builder address(Address address) {
            this.address = address;
            return this;
        }

        /**
         * Setter for customerName.
         * @param  customerName  CustomerName value for customerName.
         * @return Builder
         */
        public Builder customerName(CustomerName customerName) {
            this.customerName = customerName;
            return this;
        }

        /**
         * Setter for additional property that are not in model fields.
         * @param name The name of the additional property.
         * @param value The Object value of the additional property.
         * @return Builder.
         */
        public Builder additionalProperty(String name, Object value) {
            this.additionalProperties.setAdditionalProperty(name, value);
            return this;
        }

        /**
         * Builds a new {@link PlaceOfUse} object using the set fields.
         * @return {@link PlaceOfUse}
         */
        public PlaceOfUse build() {
            PlaceOfUse model =
                    new PlaceOfUse(address, customerName);
            model.additionalProperties = additionalProperties;
            return model;
        }
    }
}
