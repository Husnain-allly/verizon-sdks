/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.models.ConditionObjectCall;
import com.verizon.m5gedge.models.ConditionType;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;

/**
 * This is a container class for any-of types.
 */
@JsonDeserialize(using = PricePlanTriggerCondition.PricePlanTriggerConditionDeserializer.class)
public abstract class PricePlanTriggerCondition {
    
    /**
     * This is conditionType case.
     * @param conditionType ConditionType value for conditionType.
     * @return The ConditionTypeCase object.
     */
    public static PricePlanTriggerCondition fromConditionType(ConditionType conditionType) {
        return conditionType == null ? null : new ConditionTypeCase(conditionType);
    }

    /**
     * This is conditionObjectCall case.
     * @param conditionObjectCall ConditionObjectCall value for conditionObjectCall.
     * @return The ConditionObjectCallCase object.
     */
    public static PricePlanTriggerCondition fromConditionObjectCall(
            ConditionObjectCall conditionObjectCall) {
        return conditionObjectCall == null ? null : new ConditionObjectCallCase(conditionObjectCall);
    }

    /**
     * Method to match from the provided any-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The any-of type cases callback.
     * @return The any-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for any-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R conditionType(ConditionType conditionType);

        R conditionObjectCall(ConditionObjectCall conditionObjectCall);
    }

    /**
     * This is a implementation class for ConditionTypeCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "ConditionType")
    private static class ConditionTypeCase extends PricePlanTriggerCondition {

        @JsonValue
        private ConditionType conditionType;

        ConditionTypeCase(ConditionType conditionType) {
            this.conditionType = conditionType;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.conditionType(this.conditionType);
        }

        @JsonCreator
        private ConditionTypeCase(JsonNode jsonNode) throws IOException {
            this.conditionType = 
                ConditionType.fromString(ApiHelper.deserialize(jsonNode, String.class));
            if (this.conditionType == null) {
                throw new IllegalArgumentException();
            }
        }

        @Override
        public String toString() {
            return conditionType.toString();
        }
    }

    /**
     * This is a implementation class for ConditionObjectCallCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "ConditionObjectCall")
    private static class ConditionObjectCallCase extends PricePlanTriggerCondition {

        @JsonValue
        private ConditionObjectCall conditionObjectCall;

        ConditionObjectCallCase(ConditionObjectCall conditionObjectCall) {
            this.conditionObjectCall = conditionObjectCall;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.conditionObjectCall(this.conditionObjectCall);
        }

        @JsonCreator
        private ConditionObjectCallCase(JsonNode jsonNode) throws IOException {
            this.conditionObjectCall = ApiHelper.deserialize(jsonNode,
                ConditionObjectCall.class);
        }

        @Override
        public String toString() {
            return conditionObjectCall.toString();
        }
    }

    /**
     * This is a custom deserializer class for PricePlanTriggerCondition.
     */
    protected static class PricePlanTriggerConditionDeserializer
            extends JsonDeserializer<PricePlanTriggerCondition> {

        @Override
        public PricePlanTriggerCondition deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(ConditionTypeCase.class,
                    ConditionObjectCallCase.class), false);
        }
    }

}
