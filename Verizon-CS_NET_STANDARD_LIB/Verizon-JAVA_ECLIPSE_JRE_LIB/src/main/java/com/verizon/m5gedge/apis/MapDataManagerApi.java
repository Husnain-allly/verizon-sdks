/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.apis;

import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.Server;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.exceptions.MapDataResponseErrorException;
import com.verizon.m5gedge.http.request.HttpMethod;
import com.verizon.m5gedge.http.response.ApiResponse;
import com.verizon.m5gedge.models.Geofence;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class MapDataManagerApi extends BaseApi {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public MapDataManagerApi(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * This endpoint allows the user to upload map messages in SAE J2735 MAP messages in ASN.1 UPER
     * or JER (JSON) formats. The MAP data message can have more than one intersections in it. Note:
     * The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and
     * Session/M2M tokens in order to call this API.
     * @param  vendorId  Required parameter: The VendorID set during the Vendor registration call.
     * @param  body  Required parameter:
     * @return    Returns the String wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<String> uploadMapDataMessage(
            final String vendorId,
            final String body) throws ApiException, IOException {
        return prepareUploadMapDataMessageRequest(vendorId, body).execute();
    }

    /**
     * This endpoint allows the user to upload map messages in SAE J2735 MAP messages in ASN.1 UPER
     * or JER (JSON) formats. The MAP data message can have more than one intersections in it. Note:
     * The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and
     * Session/M2M tokens in order to call this API.
     * @param  vendorId  Required parameter: The VendorID set during the Vendor registration call.
     * @param  body  Required parameter:
     * @return    Returns the String wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<String>> uploadMapDataMessageAsync(
            final String vendorId,
            final String body) {
        try {
            return prepareUploadMapDataMessageRequest(vendorId, body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for uploadMapDataMessage.
     */
    private ApiCall<ApiResponse<String>, ApiException> prepareUploadMapDataMessageRequest(
            final String vendorId,
            final String body) {
        return new ApiCall.Builder<ApiResponse<String>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.IMP_SERVER.value())
                        .path("/api/v2/mapdata")
                        .bodyParam(param -> param.value(body))
                        .headerParam(param -> param.key("VendorID")
                                .value(vendorId).isRequired(false))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("SessionToken")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> new String(response))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Invalid request",
                                (reason, context) -> new MapDataResponseErrorException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Unauthorized",
                                (reason, context) -> new MapDataResponseErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden Request",
                                (reason, context) -> new MapDataResponseErrorException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("Too Many Requests",
                                (reason, context) -> new MapDataResponseErrorException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.setReason("Internal server Error",
                                (reason, context) -> new MapDataResponseErrorException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Unexpected Error",
                                (reason, context) -> new MapDataResponseErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This endpoint allows user to download SAE J2735 MAP messages in ASN.1 UPER format. The area
     * for the MAP messages is needed to be defined in the query.
     * @param  vendorId  Required parameter: The VendorID set during the Vendor registration call.
     * @param  geofence  Required parameter: The area where the user wants to receive MAP data from.
     * @return    Returns the String wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<String> downloadMapDataMessage(
            final String vendorId,
            final Geofence geofence) throws ApiException, IOException {
        return prepareDownloadMapDataMessageRequest(vendorId, geofence).execute();
    }

    /**
     * This endpoint allows user to download SAE J2735 MAP messages in ASN.1 UPER format. The area
     * for the MAP messages is needed to be defined in the query.
     * @param  vendorId  Required parameter: The VendorID set during the Vendor registration call.
     * @param  geofence  Required parameter: The area where the user wants to receive MAP data from.
     * @return    Returns the String wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<String>> downloadMapDataMessageAsync(
            final String vendorId,
            final Geofence geofence) {
        try {
            return prepareDownloadMapDataMessageRequest(vendorId, geofence).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for downloadMapDataMessage.
     */
    private ApiCall<ApiResponse<String>, ApiException> prepareDownloadMapDataMessageRequest(
            final String vendorId,
            final Geofence geofence) {
        return new ApiCall.Builder<ApiResponse<String>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.IMP_SERVER.value())
                        .path("/api/v2/mapdata")
                        .queryParam(param -> param.key("Geofence")
                                .value(geofence))
                        .headerParam(param -> param.key("VendorID")
                                .value(vendorId).isRequired(false))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("SessionToken")))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> new String(response))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Invalid request",
                                (reason, context) -> new MapDataResponseErrorException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Unauthorized",
                                (reason, context) -> new MapDataResponseErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden Request",
                                (reason, context) -> new MapDataResponseErrorException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("Too Many Requests",
                                (reason, context) -> new MapDataResponseErrorException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.setReason("Internal server Error",
                                (reason, context) -> new MapDataResponseErrorException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Unexpected Error",
                                (reason, context) -> new MapDataResponseErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}