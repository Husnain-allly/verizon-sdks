/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.models.MsgId;
import com.verizon.m5gedge.models.MsgId1;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;

/**
 * This is a container class for one-of types.
 */
@JsonDeserialize(using = DataFrameMsgId.DataFrameMsgIdDeserializer.class)
public abstract class DataFrameMsgId {
    
    /**
     * This is MsgId case.
     * @param msgId MsgId value for msgId.
     * @return The MsgIdCase object.
     */
    public static DataFrameMsgId fromMsgId(MsgId msgId) {
        return msgId == null ? null : new MsgIdCase(msgId);
    }

    /**
     * This is MsgId1 case.
     * @param msgId1 MsgId1 value for msgId1.
     * @return The MsgId1Case object.
     */
    public static DataFrameMsgId fromMsgId1(MsgId1 msgId1) {
        return msgId1 == null ? null : new MsgId1Case(msgId1);
    }

    /**
     * Method to match from the provided one-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The one-of type cases callback.
     * @return The one-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for one-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R msgId(MsgId msgId);

        R msgId1(MsgId1 msgId1);
    }

    /**
     * This is a implementation class for MsgIdCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "MsgId")
    private static class MsgIdCase extends DataFrameMsgId {

        @JsonValue
        private MsgId msgId;

        MsgIdCase(MsgId msgId) {
            this.msgId = msgId;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.msgId(this.msgId);
        }

        @JsonCreator
        private MsgIdCase(JsonNode jsonNode) throws IOException {
            this.msgId = ApiHelper.deserialize(jsonNode,
                MsgId.class);
        }

        @Override
        public String toString() {
            return msgId.toString();
        }
    }

    /**
     * This is a implementation class for MsgId1Case.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "MsgId1")
    private static class MsgId1Case extends DataFrameMsgId {

        @JsonValue
        private MsgId1 msgId1;

        MsgId1Case(MsgId1 msgId1) {
            this.msgId1 = msgId1;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.msgId1(this.msgId1);
        }

        @JsonCreator
        private MsgId1Case(JsonNode jsonNode) throws IOException {
            this.msgId1 = ApiHelper.deserialize(jsonNode,
                MsgId1.class);
        }

        @Override
        public String toString() {
            return msgId1.toString();
        }
    }

    /**
     * This is a custom deserializer class for DataFrameMsgId.
     */
    protected static class DataFrameMsgIdDeserializer
            extends JsonDeserializer<DataFrameMsgId> {

        @Override
        public DataFrameMsgId deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(MsgIdCase.class,
                    MsgId1Case.class), true);
        }
    }

}
