/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "net/http"
    "verizon/errors"
    "verizon/models"
)

// ClientLoggingApi represents a controller struct.
type ClientLoggingApi struct {
    baseApi
}

// NewClientLoggingApi creates a new instance of ClientLoggingApi.
// It takes a baseController as a parameter and returns a pointer to the ClientLoggingApi.
func NewClientLoggingApi(baseApi baseApi) *ClientLoggingApi {
    clientLoggingApi := ClientLoggingApi{baseApi: baseApi}
    return &clientLoggingApi
}

// ListDevicesWithLoggingEnabled takes context, account as parameters and
// returns an models.ApiResponse with []models.DeviceLoggingStatus data and
// an error if there was an issue with the request or response.
// Returns an array of all devices in the specified account for which logging is enabled.
func (c *ClientLoggingApi) ListDevicesWithLoggingEnabled(
    ctx context.Context,
    account string) (
    models.ApiResponse[[]models.DeviceLoggingStatus],
    error) {
    req := c.prepareRequest(ctx, "GET", "/logging/%v/devices")
    req.AppendTemplateParams(account)
    req.BaseUrl("Software Management V2")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV2Result},
    })
    
    var result []models.DeviceLoggingStatus
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.DeviceLoggingStatus](decoder)
    return models.NewApiResponse(result, resp), err
}

// EnableLoggingForDevices takes context, account, body as parameters and
// returns an models.ApiResponse with []models.DeviceLoggingStatus data and
// an error if there was an issue with the request or response.
// Each customer may have a maximum of 20 devices enabled for logging.
func (c *ClientLoggingApi) EnableLoggingForDevices(
    ctx context.Context,
    account string,
    body models.DeviceLoggingRequest) (
    models.ApiResponse[[]models.DeviceLoggingStatus],
    error) {
    req := c.prepareRequest(ctx, "PUT", "/logging/%v/devices")
    req.AppendTemplateParams(account)
    req.BaseUrl("Software Management V2")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV2Result},
    })
    req.Header("Content-Type", "*/*")
    req.Json(&body)
    
    var result []models.DeviceLoggingStatus
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.DeviceLoggingStatus](decoder)
    return models.NewApiResponse(result, resp), err
}

// DisableLoggingForDevices takes context, account, deviceIds as parameters and
// returns an *Response and
// an error if there was an issue with the request or response.
// Turn logging off for a list of devices.
func (c *ClientLoggingApi) DisableLoggingForDevices(
    ctx context.Context,
    account string,
    deviceIds string) (
    *http.Response,
    error) {
    req := c.prepareRequest(ctx, "DELETE", "/logging/%v/devices")
    req.AppendTemplateParams(account)
    req.BaseUrl("Software Management V2")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV2Result},
    })
    req.QueryParam("deviceIds", deviceIds)
    
    httpCtx, err := req.Call()
    if err != nil {
        return httpCtx.Response, err
    }
    return httpCtx.Response, err
}

// EnableDeviceLogging takes context, account, deviceId as parameters and
// returns an models.ApiResponse with models.DeviceLoggingStatus data and
// an error if there was an issue with the request or response.
// Enables logging for a specific device.
func (c *ClientLoggingApi) EnableDeviceLogging(
    ctx context.Context,
    account string,
    deviceId string) (
    models.ApiResponse[models.DeviceLoggingStatus],
    error) {
    req := c.prepareRequest(ctx, "PUT", "/logging/%v/devices/%v")
    req.AppendTemplateParams(account, deviceId)
    req.BaseUrl("Software Management V2")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV2Result},
    })
    
    var result models.DeviceLoggingStatus
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceLoggingStatus](decoder)
    return models.NewApiResponse(result, resp), err
}

// DisableDeviceLogging takes context, account, deviceId as parameters and
// returns an *Response and
// an error if there was an issue with the request or response.
// Disables logging for a specific device.
func (c *ClientLoggingApi) DisableDeviceLogging(
    ctx context.Context,
    account string,
    deviceId string) (
    *http.Response,
    error) {
    req := c.prepareRequest(ctx, "DELETE", "/logging/%v/devices/%v")
    req.AppendTemplateParams(account, deviceId)
    req.BaseUrl("Software Management V2")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV2Result},
    })
    
    httpCtx, err := req.Call()
    if err != nil {
        return httpCtx.Response, err
    }
    return httpCtx.Response, err
}

// ListDeviceLogs takes context, account, deviceId as parameters and
// returns an models.ApiResponse with []models.DeviceLog data and
// an error if there was an issue with the request or response.
// Gets logs for a specific device.
func (c *ClientLoggingApi) ListDeviceLogs(
    ctx context.Context,
    account string,
    deviceId string) (
    models.ApiResponse[[]models.DeviceLog],
    error) {
    req := c.prepareRequest(ctx, "GET", "/logging/%v/devices/%v/logs")
    req.AppendTemplateParams(account, deviceId)
    req.BaseUrl("Software Management V2")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV2Result},
    })
    
    var result []models.DeviceLog
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.DeviceLog](decoder)
    return models.NewApiResponse(result, resp), err
}
