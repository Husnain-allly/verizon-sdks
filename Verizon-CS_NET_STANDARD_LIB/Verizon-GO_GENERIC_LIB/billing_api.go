/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// BillingApi represents a controller struct.
type BillingApi struct {
    baseApi
}

// NewBillingApi creates a new instance of BillingApi.
// It takes a baseController as a parameter and returns a pointer to the BillingApi.
func NewBillingApi(baseApi baseApi) *BillingApi {
    billingApi := BillingApi{baseApi: baseApi}
    return &billingApi
}

// AddAccount takes context, body as parameters and
// returns an models.ApiResponse with models.ManagedAccountsAddResponse data and
// an error if there was an issue with the request or response.
// This endpoint allows user to add managed accounts to a primary account.
func (b *BillingApi) AddAccount(
    ctx context.Context,
    body models.ManagedAccountsAddRequest) (
    models.ApiResponse[models.ManagedAccountsAddResponse],
    error) {
    req := b.prepareRequest(ctx, "POST", "/managedaccounts/actions/add")
    
    req.BaseUrl("Subscription Server")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error", Unmarshaller: errors.NewDeviceLocationResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.ManagedAccountsAddResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.ManagedAccountsAddResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// ManagedAccountAction takes context, body as parameters and
// returns an models.ApiResponse with models.ManagedAccountsProvisionResponse data and
// an error if there was an issue with the request or response.
// Activates a managed billing service relationship between a managed account and the primary account.
func (b *BillingApi) ManagedAccountAction(
    ctx context.Context,
    body models.ManagedAccountsProvisionRequest) (
    models.ApiResponse[models.ManagedAccountsProvisionResponse],
    error) {
    req := b.prepareRequest(ctx, "POST", "/managedaccounts/actions/provision")
    
    req.BaseUrl("Subscription Server")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error", Unmarshaller: errors.NewDeviceLocationResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.ManagedAccountsProvisionResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.ManagedAccountsProvisionResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// CancelManagedAccountAction takes context, body as parameters and
// returns an models.ApiResponse with models.ManagedAccountCancelResponse data and
// an error if there was an issue with the request or response.
// Deactivates a managed billing service relationship between a managed account and the primary account.
func (b *BillingApi) CancelManagedAccountAction(
    ctx context.Context,
    body models.ManagedAccountCancelRequest) (
    models.ApiResponse[models.ManagedAccountCancelResponse],
    error) {
    req := b.prepareRequest(ctx, "POST", "/managedaccounts/actions/cancel")
    
    req.BaseUrl("Subscription Server")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error", Unmarshaller: errors.NewDeviceLocationResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.ManagedAccountCancelResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.ManagedAccountCancelResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// ListManagedAccount takes context, accountName, serviceName as parameters and
// returns an models.ApiResponse with models.ManagedAccountsGetAllResponse data and
// an error if there was an issue with the request or response.
// This endpoint allows user to retrieve the list of all accounts managed by a primary account.
func (b *BillingApi) ListManagedAccount(
    ctx context.Context,
    accountName string,
    serviceName string) (
    models.ApiResponse[models.ManagedAccountsGetAllResponse],
    error) {
    req := b.prepareRequest(ctx, "GET", "/managedaccounts/%v/service/%v")
    req.AppendTemplateParams(accountName, serviceName)
    req.BaseUrl("Subscription Server")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error", Unmarshaller: errors.NewDeviceLocationResult},
    })
    
    var result models.ManagedAccountsGetAllResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.ManagedAccountsGetAllResponse](decoder)
    return models.NewApiResponse(result, resp), err
}
