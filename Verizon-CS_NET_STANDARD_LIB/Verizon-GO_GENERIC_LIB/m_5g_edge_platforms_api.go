/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// M5GEdgePlatformsApi represents a controller struct.
type M5GEdgePlatformsApi struct {
    baseApi
}

// NewM5GEdgePlatformsApi creates a new instance of M5GEdgePlatformsApi.
// It takes a baseController as a parameter and returns a pointer to the M5GEdgePlatformsApi.
func NewM5GEdgePlatformsApi(baseApi baseApi) *M5GEdgePlatformsApi {
    m5GEdgePlatformsApi := M5GEdgePlatformsApi{baseApi: baseApi}
    return &m5GEdgePlatformsApi
}

// ListMecPlatforms takes context, region, serviceProfileId, subscriberDensity, ueIdentityType, ueIdentity as parameters and
// returns an models.ApiResponse with models.ListMecPlatformsResult data and
// an error if there was an issue with the request or response.
// Returns a list of optimal MEC Platforms where you can register your deployed application. **Note:** If a query is sent with all of the parameters, it will fail with a "400" error. You can search based on the following parameter combinations - region plus Service Profile ID and subscriber density (density is optional but recommended), region plus UEIdentity(Including UEIdentity Type) or Service Profile ID plus UEIdentity(Including UEIdentity Type).
func (m *M5GEdgePlatformsApi) ListMecPlatforms(
    ctx context.Context,
    region *string,
    serviceProfileId *string,
    subscriberDensity *int,
    ueIdentityType *models.UserEquipmentIdentityType,
    ueIdentity *string) (
    models.ApiResponse[models.ListMecPlatformsResult],
    error) {
    req := m.prepareRequest(ctx, "GET", "/mecplatforms")
    
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "HTTP 400 Bad Request.", Unmarshaller: errors.NewEdgeDiscoveryResult},
        "401": {Message: "HTTP 401 Unauthorized.", Unmarshaller: errors.NewEdgeDiscoveryResult},
        "0": {Message: "HTTP 500 Internal Server Error.", Unmarshaller: errors.NewEdgeDiscoveryResult},
    })
    if region != nil {
        req.QueryParam("region", *region)
    }
    if serviceProfileId != nil {
        req.QueryParam("serviceProfileId", *serviceProfileId)
    }
    if subscriberDensity != nil {
        req.QueryParam("subscriberDensity", *subscriberDensity)
    }
    if ueIdentityType != nil {
        req.QueryParam("UEIdentityType", *ueIdentityType)
    }
    if ueIdentity != nil {
        req.QueryParam("UEIdentity", *ueIdentity)
    }
    var result models.ListMecPlatformsResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.ListMecPlatformsResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// ListRegions takes context as parameters and
// returns an models.ApiResponse with models.ListRegionsResult data and
// an error if there was an issue with the request or response.
// List the geographical regions available, based on the user's bearer token. **Note:** Country code, Metropolitan area, Area and Zone are future functionality and will currently return a "null" value.
func (m *M5GEdgePlatformsApi) ListRegions(ctx context.Context) (
    models.ApiResponse[models.ListRegionsResult],
    error) {
    req := m.prepareRequest(ctx, "GET", "/regions")
    
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "HTTP 400 Bad Request.", Unmarshaller: errors.NewEdgeDiscoveryResult},
        "401": {Message: "HTTP 401 Unauthorized.", Unmarshaller: errors.NewEdgeDiscoveryResult},
        "0": {Message: "HTTP 500 Internal Server Error.", Unmarshaller: errors.NewEdgeDiscoveryResult},
    })
    var result models.ListRegionsResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.ListRegionsResult](decoder)
    return models.NewApiResponse(result, resp), err
}
