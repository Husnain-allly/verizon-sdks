/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// UpdateTriggersApi represents a controller struct.
type UpdateTriggersApi struct {
    baseApi
}

// NewUpdateTriggersApi creates a new instance of UpdateTriggersApi.
// It takes a baseController as a parameter and returns a pointer to the UpdateTriggersApi.
func NewUpdateTriggersApi(baseApi baseApi) *UpdateTriggersApi {
    updateTriggersApi := UpdateTriggersApi{baseApi: baseApi}
    return &updateTriggersApi
}

// UpdateAllAvailableTriggers takes context, body as parameters and
// returns an models.ApiResponse with models.Success data and
// an error if there was an issue with the request or response.
// Updates the promotional triggers for pseudo-MDN.
func (u *UpdateTriggersApi) UpdateAllAvailableTriggers(
    ctx context.Context,
    body *models.RequestTrigger) (
    models.ApiResponse[models.Success],
    error) {
    req := u.prepareRequest(ctx, "PUT", "/m2m/v2/triggers")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewReadySimRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    if body != nil {
        req.Json(body)
    }
    var result models.Success
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.Success](decoder)
    return models.NewApiResponse(result, resp), err
}
