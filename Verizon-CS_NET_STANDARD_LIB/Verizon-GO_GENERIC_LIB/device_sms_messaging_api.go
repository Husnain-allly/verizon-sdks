/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// DeviceSmsMessagingApi represents a controller struct.
type DeviceSmsMessagingApi struct {
    baseApi
}

// NewDeviceSmsMessagingApi creates a new instance of DeviceSmsMessagingApi.
// It takes a baseController as a parameter and returns a pointer to the DeviceSmsMessagingApi.
func NewDeviceSmsMessagingApi(baseApi baseApi) *DeviceSmsMessagingApi {
    deviceSmsMessagingApi := DeviceSmsMessagingApi{baseApi: baseApi}
    return &deviceSmsMessagingApi
}

// SendAnSmsMessage takes context, body as parameters and
// returns an models.ApiResponse with models.GioRequestResponse data and
// an error if there was an issue with the request or response.
// Sends an SMS message to one device. Messages are queued on the M2M MC Platform and sent as soon as possible, but they may be delayed due to traffic and routing considerations.
func (d *DeviceSmsMessagingApi) SendAnSmsMessage(
    ctx context.Context,
    body models.GiosmsSendRequest) (
    models.ApiResponse[models.GioRequestResponse],
    error) {
    req := d.prepareRequest(ctx, "POST", "/m2m/v1/sms")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewGioRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.GioRequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.GioRequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// GetSmsMessages takes context, accountName, next as parameters and
// returns an models.ApiResponse with models.SmsMessagesResponse data and
// an error if there was an issue with the request or response.
// Retrieves queued SMS messages sent by all M2M MC devices associated with an account.
func (d *DeviceSmsMessagingApi) GetSmsMessages(
    ctx context.Context,
    accountName string,
    next *string) (
    models.ApiResponse[models.SmsMessagesResponse],
    error) {
    req := d.prepareRequest(ctx, "GET", "/m2m/v1/sms/%v/history")
    req.AppendTemplateParams(accountName)
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewGioRestErrorResponse},
    })
    if next != nil {
        req.QueryParam("next", *next)
    }
    
    var result models.SmsMessagesResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.SmsMessagesResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// StartSmsMessageDelivery takes context, accountName as parameters and
// returns an models.ApiResponse with models.SuccessResponse data and
// an error if there was an issue with the request or response.
// Starts delivery of SMS messages for the specified account.
func (d *DeviceSmsMessagingApi) StartSmsMessageDelivery(
    ctx context.Context,
    accountName string) (
    models.ApiResponse[models.SuccessResponse],
    error) {
    req := d.prepareRequest(ctx, "PUT", "/m2m/v1/sms/%v/startCallbacks")
    req.AppendTemplateParams(accountName)
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewGioRestErrorResponse},
    })
    
    var result models.SuccessResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.SuccessResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// ListSmsMessageHistory takes context, body as parameters and
// returns an models.ApiResponse with models.GioRequestResponse data and
// an error if there was an issue with the request or response.
// Returns a list of sms history for a given device during a specified time frame.
func (d *DeviceSmsMessagingApi) ListSmsMessageHistory(
    ctx context.Context,
    body models.SmsEventHistoryRequest) (
    models.ApiResponse[models.GioRequestResponse],
    error) {
    req := d.prepareRequest(ctx, "POST", "/m2m/v1/devices/sms/history/actions/list")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewGioRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.GioRequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.GioRequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}
