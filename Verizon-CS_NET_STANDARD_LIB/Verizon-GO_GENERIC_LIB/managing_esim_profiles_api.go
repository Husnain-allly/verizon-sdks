/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// ManagingEsimProfilesApi represents a controller struct.
type ManagingEsimProfilesApi struct {
    baseApi
}

// NewManagingEsimProfilesApi creates a new instance of ManagingEsimProfilesApi.
// It takes a baseController as a parameter and returns a pointer to the ManagingEsimProfilesApi.
func NewManagingEsimProfilesApi(baseApi baseApi) *ManagingEsimProfilesApi {
    managingEsimProfilesApi := ManagingEsimProfilesApi{baseApi: baseApi}
    return &managingEsimProfilesApi
}

// ResumeProfile takes context, body as parameters and
// returns an models.ApiResponse with models.GioRequestResponse data and
// an error if there was an issue with the request or response.
// Resume service to a device with either a lead or local profile.
func (m *ManagingEsimProfilesApi) ResumeProfile(
    ctx context.Context,
    body models.GioProfileRequest) (
    models.ApiResponse[models.GioRequestResponse],
    error) {
    req := m.prepareRequest(
      ctx,
      "POST",
      "/m2m/v1/devices/profile/actions/profile_resume",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewGioRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.GioRequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.GioRequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// ProfileSuspend takes context, body as parameters and
// returns an models.ApiResponse with models.GioRequestResponse data and
// an error if there was an issue with the request or response.
// Suspend a device's Global profile.
func (m *ManagingEsimProfilesApi) ProfileSuspend(
    ctx context.Context,
    body models.GioProfileRequest) (
    models.ApiResponse[models.GioRequestResponse],
    error) {
    req := m.prepareRequest(
      ctx,
      "POST",
      "/m2m/v1/devices/profile/actions/profile_suspend",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewGioRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.GioRequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.GioRequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// DeviceSuspend takes context, body as parameters and
// returns an models.ApiResponse with models.GioRequestResponse data and
// an error if there was an issue with the request or response.
// Suspend all service to an eUICC device, including the lead and local profile.
func (m *ManagingEsimProfilesApi) DeviceSuspend(
    ctx context.Context,
    body models.GioProfileRequest) (
    models.ApiResponse[models.GioRequestResponse],
    error) {
    req := m.prepareRequest(
      ctx,
      "POST",
      "/m2m/v1/devices/profile/actions/device_suspend",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewGioRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.GioRequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.GioRequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// SetFallback takes context, body as parameters and
// returns an models.ApiResponse with models.GioRequestResponse data and
// an error if there was an issue with the request or response.
// Enable a fallback profile to be set.
func (m *ManagingEsimProfilesApi) SetFallback(
    ctx context.Context,
    body models.FallBack) (
    models.ApiResponse[models.GioRequestResponse],
    error) {
    req := m.prepareRequest(
      ctx,
      "POST",
      "/v1/devices/profile/actions/setfallbackattribute",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewGioRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.GioRequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.GioRequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// ActivateADeviceProfile takes context, body as parameters and
// returns an models.ApiResponse with models.GioRequestResponse data and
// an error if there was an issue with the request or response.
// Activate a device with either a lead or local profile.
func (m *ManagingEsimProfilesApi) ActivateADeviceProfile(
    ctx context.Context,
    body models.GioProfileRequest) (
    models.ApiResponse[models.GioRequestResponse],
    error) {
    req := m.prepareRequest(ctx, "POST", "/m2m/v1/devices/profile/actions/activate")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewGioRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.GioRequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.GioRequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// EnableADeviceProfile takes context, body as parameters and
// returns an models.ApiResponse with models.GioRequestResponse data and
// an error if there was an issue with the request or response.
// Enable a device lead or local profile.
func (m *ManagingEsimProfilesApi) EnableADeviceProfile(
    ctx context.Context,
    body models.DeviceProfileRequest) (
    models.ApiResponse[models.GioRequestResponse],
    error) {
    req := m.prepareRequest(ctx, "POST", "/m2m/v1/devices/profile/actions/enable")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewGioRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.GioRequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.GioRequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// DeactivateADeviceProfile takes context, body as parameters and
// returns an models.ApiResponse with models.GioRequestResponse data and
// an error if there was an issue with the request or response.
// Deactivate the lead or local profile. **Note:** to reactivate the profile, use the **Activate** endpoint above.
func (m *ManagingEsimProfilesApi) DeactivateADeviceProfile(
    ctx context.Context,
    body models.GioDeactivateDeviceProfileRequest) (
    models.ApiResponse[models.GioRequestResponse],
    error) {
    req := m.prepareRequest(
      ctx,
      "POST",
      "/m2m/v1/devices/profile/actions/deactivate",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewGioRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.GioRequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.GioRequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// EnableADeviceProfileForDownload takes context, body as parameters and
// returns an models.ApiResponse with models.GioRequestResponse data and
// an error if there was an issue with the request or response.
// Enable the Global IoT Orchestration device profile for download.
func (m *ManagingEsimProfilesApi) EnableADeviceProfileForDownload(
    ctx context.Context,
    body models.DeviceProfileRequest) (
    models.ApiResponse[models.GioRequestResponse],
    error) {
    req := m.prepareRequest(
      ctx,
      "POST",
      "/m2m/v1/devices/profile/actions/download_enable",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewGioRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.GioRequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.GioRequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// DownloadADeviceProfile takes context, body as parameters and
// returns an models.ApiResponse with models.GioRequestResponse data and
// an error if there was an issue with the request or response.
// Download a Global IoT Orchestration device profile.
func (m *ManagingEsimProfilesApi) DownloadADeviceProfile(
    ctx context.Context,
    body models.DeviceProfileRequest) (
    models.ApiResponse[models.GioRequestResponse],
    error) {
    req := m.prepareRequest(ctx, "POST", "/m2m/v1/devices/profile/actions/download")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewGioRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.GioRequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.GioRequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// DeleteADeviceProfile takes context, body as parameters and
// returns an models.ApiResponse with models.GioRequestResponse data and
// an error if there was an issue with the request or response.
// Delete a device profile for Global IoT Orchestration. **Note:** the profile must be deactivated first!
func (m *ManagingEsimProfilesApi) DeleteADeviceProfile(
    ctx context.Context,
    body models.DeviceProfileRequest) (
    models.ApiResponse[models.GioRequestResponse],
    error) {
    req := m.prepareRequest(ctx, "POST", "/m2m/v1/devices/profile/actions/delete")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewGioRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.GioRequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.GioRequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}
