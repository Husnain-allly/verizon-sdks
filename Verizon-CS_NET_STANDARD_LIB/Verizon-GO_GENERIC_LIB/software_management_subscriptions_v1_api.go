/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// SoftwareManagementSubscriptionsV1Api represents a controller struct.
type SoftwareManagementSubscriptionsV1Api struct {
    baseApi
}

// NewSoftwareManagementSubscriptionsV1Api creates a new instance of SoftwareManagementSubscriptionsV1Api.
// It takes a baseController as a parameter and returns a pointer to the SoftwareManagementSubscriptionsV1Api.
func NewSoftwareManagementSubscriptionsV1Api(baseApi baseApi) *SoftwareManagementSubscriptionsV1Api {
    softwareManagementSubscriptionsV1Api := SoftwareManagementSubscriptionsV1Api{baseApi: baseApi}
    return &softwareManagementSubscriptionsV1Api
}

// GetAccountSubscriptionStatus takes context, account as parameters and
// returns an models.ApiResponse with models.V1AccountSubscription data and
// an error if there was an issue with the request or response.
// This subscriptions endpoint retrieves an account's current Software Management Service subscription status.
func (s *SoftwareManagementSubscriptionsV1Api) GetAccountSubscriptionStatus(
    ctx context.Context,
    account string) (
    models.ApiResponse[models.V1AccountSubscription],
    error) {
    req := s.prepareRequest(ctx, "GET", "/subscriptions/%v")
    req.AppendTemplateParams(account)
    req.BaseUrl("Software Management V1")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV1Result},
    })
    
    var result models.V1AccountSubscription
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.V1AccountSubscription](decoder)
    return models.NewApiResponse(result, resp), err
}

// GetAccountLicenseStatus takes context, account, startIndex as parameters and
// returns an models.ApiResponse with models.AccountLicenseInfo data and
// an error if there was an issue with the request or response.
// Returns information about an account's Software Management Services licenses and a list of licensed devices.
func (s *SoftwareManagementSubscriptionsV1Api) GetAccountLicenseStatus(
    ctx context.Context,
    account string,
    startIndex string) (
    models.ApiResponse[models.AccountLicenseInfo],
    error) {
    req := s.prepareRequest(ctx, "GET", "/licenses/%v/index/%v")
    req.AppendTemplateParams(account, startIndex)
    req.BaseUrl("Software Management V1")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV1Result},
    })
    
    var result models.AccountLicenseInfo
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.AccountLicenseInfo](decoder)
    return models.NewApiResponse(result, resp), err
}
