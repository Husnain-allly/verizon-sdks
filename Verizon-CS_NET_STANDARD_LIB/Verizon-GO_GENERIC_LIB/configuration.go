/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "os"
)

// ConfigurationOptions represents a function type that can be used to apply options to the Configuration struct.
type ConfigurationOptions func(*Configuration)

// Configuration holds configuration settings.
type Configuration struct {
    environment                 Environment
    httpConfiguration           HttpConfiguration
    thingspaceOauthCredentials  ThingspaceOauthCredentials
    vzM2MTokenCredentials       VzM2MTokenCredentials
    thingspaceOauth1Credentials ThingspaceOauth1Credentials
    sessionTokenCredentials     SessionTokenCredentials
    loggerConfiguration         LoggerConfiguration
}

// newConfiguration creates a new Configuration with the provided options.
func newConfiguration(options ...ConfigurationOptions) Configuration {
    config := Configuration{}
    
    for _, option := range options {
        option(&config)
    }
    return config
}

// cloneWithOptions provides configuration with the provided options.
func (config Configuration) cloneWithOptions(options ...ConfigurationOptions) Configuration {
    for _, option := range options {
        option(&config)
    }
    return config
}

// WithEnvironment is an option that sets the Environment in the Configuration.
func WithEnvironment(environment Environment) ConfigurationOptions {
    return func(c *Configuration) {
        c.environment = environment
    }
}

// WithHttpConfiguration is an option that sets the HttpConfiguration in the Configuration.
func WithHttpConfiguration(httpConfiguration HttpConfiguration) ConfigurationOptions {
    return func(c *Configuration) {
        c.httpConfiguration = httpConfiguration
    }
}

// WithThingspaceOauthCredentials is an option that sets the ThingspaceOauthCredentials in the Configuration.
func WithThingspaceOauthCredentials(thingspaceOauthCredentials ThingspaceOauthCredentials) ConfigurationOptions {
    return func(c *Configuration) {
        c.thingspaceOauthCredentials = thingspaceOauthCredentials
    }
}

// WithVzM2MTokenCredentials is an option that sets the VzM2MTokenCredentials in the Configuration.
func WithVzM2MTokenCredentials(vzM2MTokenCredentials VzM2MTokenCredentials) ConfigurationOptions {
    return func(c *Configuration) {
        c.vzM2MTokenCredentials = vzM2MTokenCredentials
    }
}

// WithThingspaceOauth1Credentials is an option that sets the ThingspaceOauth1Credentials in the Configuration.
func WithThingspaceOauth1Credentials(thingspaceOauth1Credentials ThingspaceOauth1Credentials) ConfigurationOptions {
    return func(c *Configuration) {
        c.thingspaceOauth1Credentials = thingspaceOauth1Credentials
    }
}

// WithSessionTokenCredentials is an option that sets the SessionTokenCredentials in the Configuration.
func WithSessionTokenCredentials(sessionTokenCredentials SessionTokenCredentials) ConfigurationOptions {
    return func(c *Configuration) {
        c.sessionTokenCredentials = sessionTokenCredentials
    }
}

// WithLoggerConfiguration is an option that sets the LoggerConfiguration in the Configuration.
func WithLoggerConfiguration(options ...LoggerOptions) ConfigurationOptions {
    return func(c *Configuration) {
        c.loggerConfiguration = NewLoggerConfiguration(options...)
    }
}

// Environment returns the environment from the Configuration.
func (c Configuration) Environment() Environment {
    return c.environment
}

// HttpConfiguration returns the httpConfiguration from the Configuration.
func (c Configuration) HttpConfiguration() HttpConfiguration {
    return c.httpConfiguration
}

// ThingspaceOauthCredentials returns the thingspaceOauthCredentials from the Configuration.
func (c Configuration) ThingspaceOauthCredentials() ThingspaceOauthCredentials {
    return c.thingspaceOauthCredentials
}

// VzM2MTokenCredentials returns the vzM2MTokenCredentials from the Configuration.
func (c Configuration) VzM2MTokenCredentials() VzM2MTokenCredentials {
    return c.vzM2MTokenCredentials
}

// ThingspaceOauth1Credentials returns the thingspaceOauth1Credentials from the Configuration.
func (c Configuration) ThingspaceOauth1Credentials() ThingspaceOauth1Credentials {
    return c.thingspaceOauth1Credentials
}

// SessionTokenCredentials returns the sessionTokenCredentials from the Configuration.
func (c Configuration) SessionTokenCredentials() SessionTokenCredentials {
    return c.sessionTokenCredentials
}

// CreateConfigurationFromEnvironment creates a new Configuration with default settings.
// It also configures various Configuration options.
func CreateConfigurationFromEnvironment(options ...ConfigurationOptions) Configuration {
    config := DefaultConfiguration()
    
    environment := os.Getenv("VERIZON_ENVIRONMENT")
    if environment != "" {
        config.environment = Environment(environment)
    }
    oauthClientId := os.Getenv("VERIZON_OAUTH_CLIENT_ID")
    if oauthClientId != "" {
        config.thingspaceOauthCredentials.oauthClientId = oauthClientId
    }
    oauthClientSecret := os.Getenv("VERIZON_OAUTH_CLIENT_SECRET")
    if oauthClientSecret != "" {
        config.thingspaceOauthCredentials.oauthClientSecret = oauthClientSecret
    }
    vzM2MToken := os.Getenv("VERIZON_VZ_M2M_TOKEN")
    if vzM2MToken != "" {
        config.vzM2MTokenCredentials.vzM2MToken = vzM2MToken
    }
    oauthClientId2 := os.Getenv("VERIZON_OAUTH_CLIENT_ID_2")
    if oauthClientId2 != "" {
        config.thingspaceOauth1Credentials.oauthClientId = oauthClientId2
    }
    oauthClientSecret2 := os.Getenv("VERIZON_OAUTH_CLIENT_SECRET_2")
    if oauthClientSecret2 != "" {
        config.thingspaceOauth1Credentials.oauthClientSecret = oauthClientSecret2
    }
    sessionToken := os.Getenv("VERIZON_SESSION_TOKEN")
    if sessionToken != "" {
        config.sessionTokenCredentials.sessionToken = sessionToken
    }
    for _, option := range options {
        option(&config)
    }
    return config
}

// Server represents available servers.
type Server string

const (
    EdgeDiscovery        Server = "Edge Discovery"
    ImpServer            Server = "IMP Server"
    Thingspace           Server = "Thingspace"
    OauthServer          Server = "OAuth Server"
    M2M                  Server = "M2M"
    DeviceLocation       Server = "Device Location"
    SubscriptionServer   Server = "Subscription Server"
    SoftwareManagementV1 Server = "Software Management V1"
    SoftwareManagementV2 Server = "Software Management V2"
    SoftwareManagementV3 Server = "Software Management V3"
    Performance          Server = "Performance"
    DeviceDiagnostics    Server = "Device Diagnostics"
    CloudConnector       Server = "Cloud Connector"
    HyperPreciseLocation Server = "Hyper Precise Location"
    Services             Server = "Services"
    QualityOfService     Server = "Quality Of Service"
)

// Environment represents available environments.
type Environment string

const (
    PRODUCTION                                           Environment = "Production"
    MOCK_SERVER_FOR_LIMITED_AVAILABILITY_SEE_QUICK_START Environment = "Mock server for limited availability, see quick start"
)

// CreateRetryConfiguration creates a new RetryConfiguration with the provided options.
func CreateRetryConfiguration(options ...RetryConfigurationOptions) RetryConfiguration {
    config := DefaultRetryConfiguration()
    
    for _, option := range options {
        option(&config)
    }
    return config
}

// CreateHttpConfiguration creates a new HttpConfiguration with the provided options.
func CreateHttpConfiguration(options ...HttpConfigurationOptions) HttpConfiguration {
    config := DefaultHttpConfiguration()
    
    for _, option := range options {
        option(&config)
    }
    return config
}

// CreateConfiguration creates a new Configuration with the provided options.
func CreateConfiguration(options ...ConfigurationOptions) Configuration {
    config := DefaultConfiguration()
    
    for _, option := range options {
        option(&config)
    }
    return config
}
