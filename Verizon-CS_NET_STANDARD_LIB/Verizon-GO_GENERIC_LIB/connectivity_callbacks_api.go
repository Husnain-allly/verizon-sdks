/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// ConnectivityCallbacksApi represents a controller struct.
type ConnectivityCallbacksApi struct {
    baseApi
}

// NewConnectivityCallbacksApi creates a new instance of ConnectivityCallbacksApi.
// It takes a baseController as a parameter and returns a pointer to the ConnectivityCallbacksApi.
func NewConnectivityCallbacksApi(baseApi baseApi) *ConnectivityCallbacksApi {
    connectivityCallbacksApi := ConnectivityCallbacksApi{baseApi: baseApi}
    return &connectivityCallbacksApi
}

// ListRegisteredCallbacks takes context, aname as parameters and
// returns an models.ApiResponse with []models.ConnectivityManagementCallback data and
// an error if there was an issue with the request or response.
// Returns the name and endpoint URL of the callback listening services registered for a given account.
func (c *ConnectivityCallbacksApi) ListRegisteredCallbacks(
    ctx context.Context,
    aname string) (
    models.ApiResponse[[]models.ConnectivityManagementCallback],
    error) {
    req := c.prepareRequest(ctx, "GET", "/m2m/v1/callbacks/%v")
    req.AppendTemplateParams(aname)
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    
    var result []models.ConnectivityManagementCallback
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.ConnectivityManagementCallback](decoder)
    return models.NewApiResponse(result, resp), err
}

// RegisterCallback takes context, aname, body as parameters and
// returns an models.ApiResponse with models.CallbackActionResult data and
// an error if there was an issue with the request or response.
// You are responsible for creating and running a listening process on your server at that URL.
func (c *ConnectivityCallbacksApi) RegisterCallback(
    ctx context.Context,
    aname string,
    body models.RegisterCallbackRequest) (
    models.ApiResponse[models.CallbackActionResult],
    error) {
    req := c.prepareRequest(ctx, "POST", "/m2m/v1/callbacks/%v")
    req.AppendTemplateParams(aname)
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    
    var result models.CallbackActionResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.CallbackActionResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// DeregisterCallback takes context, aname, sname as parameters and
// returns an models.ApiResponse with models.CallbackActionResult data and
// an error if there was an issue with the request or response.
// Stops ThingSpace from sending callback messages for the specified account and service.
func (c *ConnectivityCallbacksApi) DeregisterCallback(
    ctx context.Context,
    aname string,
    sname string) (
    models.ApiResponse[models.CallbackActionResult],
    error) {
    req := c.prepareRequest(ctx, "DELETE", "/m2m/v1/callbacks/%v/name/%v")
    req.AppendTemplateParams(aname, sname)
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    
    var result models.CallbackActionResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.CallbackActionResult](decoder)
    return models.NewApiResponse(result, resp), err
}
