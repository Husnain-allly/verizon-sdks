/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// DiagnosticsSettingsApi represents a controller struct.
type DiagnosticsSettingsApi struct {
    baseApi
}

// NewDiagnosticsSettingsApi creates a new instance of DiagnosticsSettingsApi.
// It takes a baseController as a parameter and returns a pointer to the DiagnosticsSettingsApi.
func NewDiagnosticsSettingsApi(baseApi baseApi) *DiagnosticsSettingsApi {
    diagnosticsSettingsApi := DiagnosticsSettingsApi{baseApi: baseApi}
    return &diagnosticsSettingsApi
}

// ListDiagnosticsSettings takes context, accountName, devices as parameters and
// returns an models.ApiResponse with []models.DiagnosticObservationSetting data and
// an error if there was an issue with the request or response.
// This endpoint retrieves diagnostics settings synchronously.
func (d *DiagnosticsSettingsApi) ListDiagnosticsSettings(
    ctx context.Context,
    accountName string,
    devices string) (
    models.ApiResponse[[]models.DiagnosticObservationSetting],
    error) {
    req := d.prepareRequest(ctx, "GET", "/devices/settings")
    
    req.BaseUrl("Device Diagnostics")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response.", Unmarshaller: errors.NewDeviceDiagnosticsResult},
    })
    req.QueryParam("accountName", accountName)
    req.QueryParam("devices", devices)
    var result []models.DiagnosticObservationSetting
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.DiagnosticObservationSetting](decoder)
    return models.NewApiResponse(result, resp), err
}
