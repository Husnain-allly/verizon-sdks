/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// AnomalySettingsApi represents a controller struct.
type AnomalySettingsApi struct {
    baseApi
}

// NewAnomalySettingsApi creates a new instance of AnomalySettingsApi.
// It takes a baseController as a parameter and returns a pointer to the AnomalySettingsApi.
func NewAnomalySettingsApi(baseApi baseApi) *AnomalySettingsApi {
    anomalySettingsApi := AnomalySettingsApi{baseApi: baseApi}
    return &anomalySettingsApi
}

// ActivateAnomalyDetection takes context, body as parameters and
// returns an models.ApiResponse with models.IntelligenceSuccessResult data and
// an error if there was an issue with the request or response.
// Uses the subscribed account ID to activate anomaly detection and set threshold values.
func (a *AnomalySettingsApi) ActivateAnomalyDetection(
    ctx context.Context,
    body models.AnomalyDetectionRequest) (
    models.ApiResponse[models.IntelligenceSuccessResult],
    error) {
    req := a.prepareRequest(ctx, "POST", "/m2m/v1/intelligence/anomaly/settings")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "An error occurred.", Unmarshaller: errors.NewIntelligenceResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.IntelligenceSuccessResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.IntelligenceSuccessResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// ListAnomalyDetectionSettings takes context, accountName as parameters and
// returns an models.ApiResponse with models.AnomalyDetectionSettings data and
// an error if there was an issue with the request or response.
// Retrieves the current anomaly detection settings for an account.
func (a *AnomalySettingsApi) ListAnomalyDetectionSettings(
    ctx context.Context,
    accountName string) (
    models.ApiResponse[models.AnomalyDetectionSettings],
    error) {
    req := a.prepareRequest(ctx, "GET", "/m2m/v1/intelligence/%v/anomaly/settings")
    req.AppendTemplateParams(accountName)
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "An error occurred.", Unmarshaller: errors.NewIntelligenceResult},
    })
    
    var result models.AnomalyDetectionSettings
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.AnomalyDetectionSettings](decoder)
    return models.NewApiResponse(result, resp), err
}

// ResetAnomalyDetectionParameters takes context, accountName as parameters and
// returns an models.ApiResponse with models.IntelligenceSuccessResult data and
// an error if there was an issue with the request or response.
// Resets the thresholds to zero.
func (a *AnomalySettingsApi) ResetAnomalyDetectionParameters(
    ctx context.Context,
    accountName string) (
    models.ApiResponse[models.IntelligenceSuccessResult],
    error) {
    req := a.prepareRequest(
      ctx,
      "PUT",
      "/m2m/v1/intelligence/%v/anomaly/settings/reset",
    )
    req.AppendTemplateParams(accountName)
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "An error occurred.", Unmarshaller: errors.NewIntelligenceResult},
    })
    
    var result models.IntelligenceSuccessResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.IntelligenceSuccessResult](decoder)
    return models.NewApiResponse(result, resp), err
}
