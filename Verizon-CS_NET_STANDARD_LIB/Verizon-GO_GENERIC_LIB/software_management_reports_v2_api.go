/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// SoftwareManagementReportsV2Api represents a controller struct.
type SoftwareManagementReportsV2Api struct {
    baseApi
}

// NewSoftwareManagementReportsV2Api creates a new instance of SoftwareManagementReportsV2Api.
// It takes a baseController as a parameter and returns a pointer to the SoftwareManagementReportsV2Api.
func NewSoftwareManagementReportsV2Api(baseApi baseApi) *SoftwareManagementReportsV2Api {
    softwareManagementReportsV2Api := SoftwareManagementReportsV2Api{baseApi: baseApi}
    return &softwareManagementReportsV2Api
}

// ListAvailableSoftware takes context, account, distributionType as parameters and
// returns an models.ApiResponse with []models.SoftwarePackage data and
// an error if there was an issue with the request or response.
// This endpoint allows user to list a certain type of software of an account.
func (s *SoftwareManagementReportsV2Api) ListAvailableSoftware(
    ctx context.Context,
    account string,
    distributionType *string) (
    models.ApiResponse[[]models.SoftwarePackage],
    error) {
    req := s.prepareRequest(ctx, "GET", "/software/%v")
    req.AppendTemplateParams(account)
    req.BaseUrl("Software Management V2")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV2Result},
    })
    if distributionType != nil {
        req.QueryParam("distributionType", *distributionType)
    }
    
    var result []models.SoftwarePackage
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.SoftwarePackage](decoder)
    return models.NewApiResponse(result, resp), err
}

// ListAccountDevices takes context, account, lastSeenDeviceId, distributionType as parameters and
// returns an models.ApiResponse with models.V2AccountDeviceList data and
// an error if there was an issue with the request or response.
// The device endpoint gets devices information of an account.
func (s *SoftwareManagementReportsV2Api) ListAccountDevices(
    ctx context.Context,
    account string,
    lastSeenDeviceId *string,
    distributionType *string) (
    models.ApiResponse[models.V2AccountDeviceList],
    error) {
    req := s.prepareRequest(ctx, "GET", "/devices/%v")
    req.AppendTemplateParams(account)
    req.BaseUrl("Software Management V2")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV2Result},
    })
    if lastSeenDeviceId != nil {
        req.QueryParam("lastSeenDeviceId", *lastSeenDeviceId)
    }
    if distributionType != nil {
        req.QueryParam("distributionType", *distributionType)
    }
    
    var result models.V2AccountDeviceList
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.V2AccountDeviceList](decoder)
    return models.NewApiResponse(result, resp), err
}

// GetDeviceFirmwareUpgradeHistory takes context, account, deviceId as parameters and
// returns an models.ApiResponse with []models.DeviceSoftwareUpgrade data and
// an error if there was an issue with the request or response.
// The endpoint allows user to get software upgrade history of a device based on device IMEI.
func (s *SoftwareManagementReportsV2Api) GetDeviceFirmwareUpgradeHistory(
    ctx context.Context,
    account string,
    deviceId string) (
    models.ApiResponse[[]models.DeviceSoftwareUpgrade],
    error) {
    req := s.prepareRequest(ctx, "GET", "/reports/%v/devices/%v")
    req.AppendTemplateParams(account, deviceId)
    req.BaseUrl("Software Management V2")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV2Result},
    })
    
    var result []models.DeviceSoftwareUpgrade
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.DeviceSoftwareUpgrade](decoder)
    return models.NewApiResponse(result, resp), err
}

// GetCampaignHistoryByStatus takes context, account, campaignStatus, lastSeenCampaignId as parameters and
// returns an models.ApiResponse with models.V2CampaignHistory data and
// an error if there was an issue with the request or response.
// The report endpoint allows user to get campaign history of an account for specified status.
func (s *SoftwareManagementReportsV2Api) GetCampaignHistoryByStatus(
    ctx context.Context,
    account string,
    campaignStatus string,
    lastSeenCampaignId *string) (
    models.ApiResponse[models.V2CampaignHistory],
    error) {
    req := s.prepareRequest(ctx, "GET", "/reports/%v/campaigns")
    req.AppendTemplateParams(account)
    req.BaseUrl("Software Management V2")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV2Result},
    })
    req.QueryParam("campaignStatus", campaignStatus)
    if lastSeenCampaignId != nil {
        req.QueryParam("lastSeenCampaignId", *lastSeenCampaignId)
    }
    
    var result models.V2CampaignHistory
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.V2CampaignHistory](decoder)
    return models.NewApiResponse(result, resp), err
}

// GetCampaignDeviceStatus takes context, account, campaignId, lastSeenDeviceId as parameters and
// returns an models.ApiResponse with models.V2CampaignDevice data and
// an error if there was an issue with the request or response.
// The report endpoint allows user to get the full list of device of a campaign.
func (s *SoftwareManagementReportsV2Api) GetCampaignDeviceStatus(
    ctx context.Context,
    account string,
    campaignId string,
    lastSeenDeviceId *string) (
    models.ApiResponse[models.V2CampaignDevice],
    error) {
    req := s.prepareRequest(ctx, "GET", "/reports/%v/campaigns/%v/devices")
    req.AppendTemplateParams(account, campaignId)
    req.BaseUrl("Software Management V2")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV2Result},
    })
    if lastSeenDeviceId != nil {
        req.QueryParam("lastSeenDeviceId", *lastSeenDeviceId)
    }
    
    var result models.V2CampaignDevice
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.V2CampaignDevice](decoder)
    return models.NewApiResponse(result, resp), err
}
