/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// SmsApi represents a controller struct.
type SmsApi struct {
    baseApi
}

// NewSmsApi creates a new instance of SmsApi.
// It takes a baseController as a parameter and returns a pointer to the SmsApi.
func NewSmsApi(baseApi baseApi) *SmsApi {
    smsApi := SmsApi{baseApi: baseApi}
    return &smsApi
}

// SendSmsToDevice takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceManagementResult data and
// an error if there was an issue with the request or response.
// The messages are queued on the ThingSpace Platform and sent as soon as possible, but they may be delayed due to traffic and routing considerations.
func (s *SmsApi) SendSmsToDevice(
    ctx context.Context,
    body models.SmsSendRequest) (
    models.ApiResponse[models.DeviceManagementResult],
    error) {
    req := s.prepareRequest(ctx, "POST", "/m2m/v1/sms")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DeviceManagementResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceManagementResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// ListDevicesSmsMessages takes context, aname, next as parameters and
// returns an models.ApiResponse with models.SmsMessagesQueryResult data and
// an error if there was an issue with the request or response.
// When HTTP status is 202, a URL will be returned in the Location header of the form /sms/{aname}/history?next={token}. This URL can be used to request the next set of messages.
func (s *SmsApi) ListDevicesSmsMessages(
    ctx context.Context,
    aname string,
    next *int64) (
    models.ApiResponse[models.SmsMessagesQueryResult],
    error) {
    req := s.prepareRequest(ctx, "GET", "/m2m/v1/sms/%v/history")
    req.AppendTemplateParams(aname)
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    if next != nil {
        req.QueryParam("next", *next)
    }
    
    var result models.SmsMessagesQueryResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.SmsMessagesQueryResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// StartQueuedSmsDelivery takes context, aname as parameters and
// returns an models.ApiResponse with models.ConnectivityManagementSuccessResult data and
// an error if there was an issue with the request or response.
// Tells the ThingSpace Platform to start sending mobile-originated SMS messages through the EnhancedConnectivityService callback service. SMS messages from devices are queued until they are retrieved by your application, either by callback or synchronously with GET /sms/{accountName}/history.
func (s *SmsApi) StartQueuedSmsDelivery(
    ctx context.Context,
    aname string) (
    models.ApiResponse[models.ConnectivityManagementSuccessResult],
    error) {
    req := s.prepareRequest(ctx, "PUT", "/m2m/v1/sms/%v/startCallbacks")
    req.AppendTemplateParams(aname)
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    
    var result models.ConnectivityManagementSuccessResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.ConnectivityManagementSuccessResult](decoder)
    return models.NewApiResponse(result, resp), err
}
