/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "net/http"
    "verizon/errors"
    "verizon/models"
)

// SensorInsightsSensorsApi represents a controller struct.
type SensorInsightsSensorsApi struct {
    baseApi
}

// NewSensorInsightsSensorsApi creates a new instance of SensorInsightsSensorsApi.
// It takes a baseController as a parameter and returns a pointer to the SensorInsightsSensorsApi.
func NewSensorInsightsSensorsApi(baseApi baseApi) *SensorInsightsSensorsApi {
    sensorInsightsSensorsApi := SensorInsightsSensorsApi{baseApi: baseApi}
    return &sensorInsightsSensorsApi
}

// SensorInsightsListSensorDevicesRequest takes context, body as parameters and
// returns an models.ApiResponse with []models.ResourceDevice data and
// an error if there was an issue with the request or response.
func (s *SensorInsightsSensorsApi) SensorInsightsListSensorDevicesRequest(
    ctx context.Context,
    body models.DtoListSensorDevicesRequest) (
    models.ApiResponse[[]models.ResourceDevice],
    error) {
    req := s.prepareRequest(ctx, "POST", "/dm/v1/devices/sensors/actions/query")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad Request", Unmarshaller: errors.NewM400ManagementError},
        "401": {Message: "UnAuthorized", Unmarshaller: errors.NewManagementError},
        "403": {Message: "Forbidden", Unmarshaller: errors.NewM403ManagementError},
        "404": {Message: "Not Found", Unmarshaller: errors.NewM404ManagementError},
        "406": {Message: "Not Acceptable", Unmarshaller: errors.NewManagementError},
        "415": {Message: "Unsupported media type", Unmarshaller: errors.NewManagementError},
        "429": {Message: "Too many requests", Unmarshaller: errors.NewManagementError},
        "500": {Message: "Internal server error.", Unmarshaller: errors.NewM500ManagementError},
        "0": {Message: "Unexpected error", Unmarshaller: errors.NewManagementError},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result []models.ResourceDevice
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.ResourceDevice](decoder)
    return models.NewApiResponse(result, resp), err
}

// SensorInsightsOnBoardSensorRequest takes context, body as parameters and
// returns an *Response and
// an error if there was an issue with the request or response.
func (s *SensorInsightsSensorsApi) SensorInsightsOnBoardSensorRequest(
    ctx context.Context,
    body models.DtoOnBoardSensorRequest) (
    *http.Response,
    error) {
    req := s.prepareRequest(ctx, "POST", "/dm/v1/devices/sensors/onboard")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad Request", Unmarshaller: errors.NewM400ManagementError},
        "401": {Message: "UnAuthorized", Unmarshaller: errors.NewManagementError},
        "403": {Message: "Forbidden", Unmarshaller: errors.NewM403ManagementError},
        "406": {Message: "Not Acceptable", Unmarshaller: errors.NewManagementError},
        "415": {Message: "Unsupported media type", Unmarshaller: errors.NewManagementError},
        "429": {Message: "Too many requests", Unmarshaller: errors.NewManagementError},
        "500": {Message: "Internal server error.", Unmarshaller: errors.NewM500ManagementError},
        "0": {Message: "Unexpected error", Unmarshaller: errors.NewManagementError},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    httpCtx, err := req.Call()
    if err != nil {
        return httpCtx.Response, err
    }
    return httpCtx.Response, err
}

// SensorInsightsSensorOnBoardStatusRequest takes context, body as parameters and
// returns an models.ApiResponse with models.DtoSensorOnBoardingStatusResponse data and
// an error if there was an issue with the request or response.
func (s *SensorInsightsSensorsApi) SensorInsightsSensorOnBoardStatusRequest(
    ctx context.Context,
    body models.DtoSensorOnBoardStatusRequest) (
    models.ApiResponse[models.DtoSensorOnBoardingStatusResponse],
    error) {
    req := s.prepareRequest(
      ctx,
      "POST",
      "/dm/v1/devices/sensors/onboard/status/actions/query",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad Request", Unmarshaller: errors.NewM400ManagementError},
        "401": {Message: "UnAuthorized", Unmarshaller: errors.NewManagementError},
        "403": {Message: "Forbidden", Unmarshaller: errors.NewM403ManagementError},
        "404": {Message: "Not Found", Unmarshaller: errors.NewM404ManagementError},
        "406": {Message: "Not Acceptable", Unmarshaller: errors.NewManagementError},
        "415": {Message: "Unsupported media type", Unmarshaller: errors.NewManagementError},
        "429": {Message: "Too many requests", Unmarshaller: errors.NewManagementError},
        "500": {Message: "Internal server error.", Unmarshaller: errors.NewM500ManagementError},
        "0": {Message: "Unexpected error", Unmarshaller: errors.NewManagementError},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DtoSensorOnBoardingStatusResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DtoSensorOnBoardingStatusResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// SensorInsightsOffBoardSensorRequest takes context, body as parameters and
// returns an *Response and
// an error if there was an issue with the request or response.
func (s *SensorInsightsSensorsApi) SensorInsightsOffBoardSensorRequest(
    ctx context.Context,
    body models.DtoOffBoardSensorRequest) (
    *http.Response,
    error) {
    req := s.prepareRequest(ctx, "POST", "/dm/v1/devices/sensors/offboard")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad Request", Unmarshaller: errors.NewM400ManagementError},
        "401": {Message: "UnAuthorized", Unmarshaller: errors.NewManagementError},
        "403": {Message: "Forbidden", Unmarshaller: errors.NewM403ManagementError},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    httpCtx, err := req.Call()
    if err != nil {
        return httpCtx.Response, err
    }
    return httpCtx.Response, err
}

// SensorInsightsSensorOffBoardingStatusRequest takes context, body as parameters and
// returns an models.ApiResponse with models.DtoSensorOffBoardingStatusResponse data and
// an error if there was an issue with the request or response.
func (s *SensorInsightsSensorsApi) SensorInsightsSensorOffBoardingStatusRequest(
    ctx context.Context,
    body models.DtoSensorOffBoardStatusRequest) (
    models.ApiResponse[models.DtoSensorOffBoardingStatusResponse],
    error) {
    req := s.prepareRequest(
      ctx,
      "POST",
      "/dm/v1/devices/sensors/offboard/status/actions/query",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad Request", Unmarshaller: errors.NewM400ManagementError},
        "401": {Message: "UnAuthorized", Unmarshaller: errors.NewManagementError},
        "403": {Message: "Forbidden", Unmarshaller: errors.NewM403ManagementError},
        "404": {Message: "Not Found", Unmarshaller: errors.NewM404ManagementError},
        "406": {Message: "Not Acceptable", Unmarshaller: errors.NewManagementError},
        "415": {Message: "Unsupported media type", Unmarshaller: errors.NewManagementError},
        "429": {Message: "Too many requests", Unmarshaller: errors.NewManagementError},
        "500": {Message: "Internal server error.", Unmarshaller: errors.NewM500ManagementError},
        "0": {Message: "Unexpected error", Unmarshaller: errors.NewManagementError},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DtoSensorOffBoardingStatusResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DtoSensorOffBoardingStatusResponse](decoder)
    return models.NewApiResponse(result, resp), err
}
