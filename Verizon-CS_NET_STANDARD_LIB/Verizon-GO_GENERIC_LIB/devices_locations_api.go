/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// DevicesLocationsApi represents a controller struct.
type DevicesLocationsApi struct {
    baseApi
}

// NewDevicesLocationsApi creates a new instance of DevicesLocationsApi.
// It takes a baseController as a parameter and returns a pointer to the DevicesLocationsApi.
func NewDevicesLocationsApi(baseApi baseApi) *DevicesLocationsApi {
    devicesLocationsApi := DevicesLocationsApi{baseApi: baseApi}
    return &devicesLocationsApi
}

// ListDevicesLocationsSynchronous takes context, body as parameters and
// returns an models.ApiResponse with []models.Location data and
// an error if there was an issue with the request or response.
// This locations endpoint retrieves the locations for a list of devices.
func (d *DevicesLocationsApi) ListDevicesLocationsSynchronous(
    ctx context.Context,
    body models.LocationRequest) (
    models.ApiResponse[[]models.Location],
    error) {
    req := d.prepareRequest(ctx, "POST", "/locations")
    
    req.BaseUrl("Device Location")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Unexpected error.", Unmarshaller: errors.NewDeviceLocationResult},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result []models.Location
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.Location](decoder)
    return models.NewApiResponse(result, resp), err
}

// ListDevicesLocationsAsynchronous takes context, body as parameters and
// returns an models.ApiResponse with models.SynchronousLocationRequestResult data and
// an error if there was an issue with the request or response.
// Requests the current or cached location of up to 10,000 IoT or consumer devices (phones, tablets. etc.). This request returns a synchronous transaction ID, and the location information for each device is returned asynchronously as a DeviceLocation callback message.
func (d *DevicesLocationsApi) ListDevicesLocationsAsynchronous(
    ctx context.Context,
    body models.LocationRequest) (
    models.ApiResponse[models.SynchronousLocationRequestResult],
    error) {
    req := d.prepareRequest(ctx, "POST", "/devicelocations")
    
    req.BaseUrl("Device Location")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Unexpected error.", Unmarshaller: errors.NewDeviceLocationResult},
    })
    req.Header("Content-Type", "*/*")
    req.Json(&body)
    var result models.SynchronousLocationRequestResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.SynchronousLocationRequestResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// CreateLocationReport takes context, body as parameters and
// returns an models.ApiResponse with models.AsynchronousLocationRequestResult data and
// an error if there was an issue with the request or response.
// Request an asynchronous device location report.
func (d *DevicesLocationsApi) CreateLocationReport(
    ctx context.Context,
    body models.LocationRequest) (
    models.ApiResponse[models.AsynchronousLocationRequestResult],
    error) {
    req := d.prepareRequest(ctx, "POST", "/locationreports")
    
    req.BaseUrl("Device Location")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Unexpected error.", Unmarshaller: errors.NewDeviceLocationResult},
    })
    req.Header("Content-Type", "*/*")
    req.Json(&body)
    var result models.AsynchronousLocationRequestResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.AsynchronousLocationRequestResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// RetrieveLocationReport takes context, accountName, txid, startindex as parameters and
// returns an models.ApiResponse with models.LocationReport data and
// an error if there was an issue with the request or response.
// Download a completed asynchronous device location report.
func (d *DevicesLocationsApi) RetrieveLocationReport(
    ctx context.Context,
    accountName string,
    txid string,
    startindex int) (
    models.ApiResponse[models.LocationReport],
    error) {
    req := d.prepareRequest(ctx, "GET", "/locationreports/%v/report/%v/index/%v")
    req.AppendTemplateParams(accountName, txid, startindex)
    req.BaseUrl("Device Location")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Unexpected error.", Unmarshaller: errors.NewDeviceLocationResult},
    })
    
    var result models.LocationReport
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.LocationReport](decoder)
    return models.NewApiResponse(result, resp), err
}

// GetLocationReportStatus takes context, accountName, txid as parameters and
// returns an models.ApiResponse with models.LocationReportStatus data and
// an error if there was an issue with the request or response.
// Returns the current status of a requested device location report.
func (d *DevicesLocationsApi) GetLocationReportStatus(
    ctx context.Context,
    accountName string,
    txid string) (
    models.ApiResponse[models.LocationReportStatus],
    error) {
    req := d.prepareRequest(ctx, "GET", "/locationreports/%v/report/%v/status")
    req.AppendTemplateParams(accountName, txid)
    req.BaseUrl("Device Location")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Unexpected error.", Unmarshaller: errors.NewDeviceLocationResult},
    })
    
    var result models.LocationReportStatus
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.LocationReportStatus](decoder)
    return models.NewApiResponse(result, resp), err
}

// CancelQueuedLocationReportGeneration takes context, accountName, txid as parameters and
// returns an models.ApiResponse with models.TransactionId data and
// an error if there was an issue with the request or response.
// Cancel a queued device location report.
func (d *DevicesLocationsApi) CancelQueuedLocationReportGeneration(
    ctx context.Context,
    accountName string,
    txid string) (
    models.ApiResponse[models.TransactionId],
    error) {
    req := d.prepareRequest(ctx, "DELETE", "/locationreports/%v/report/%v")
    req.AppendTemplateParams(accountName, txid)
    req.BaseUrl("Device Location")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Unexpected error.", Unmarshaller: errors.NewDeviceLocationResult},
    })
    
    var result models.TransactionId
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.TransactionId](decoder)
    return models.NewApiResponse(result, resp), err
}
