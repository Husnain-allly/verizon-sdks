/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/utilities"
    "net/http"
    "verizon/models"
)

// TargetsApi represents a controller struct.
type TargetsApi struct {
    baseApi
}

// NewTargetsApi creates a new instance of TargetsApi.
// It takes a baseController as a parameter and returns a pointer to the TargetsApi.
func NewTargetsApi(baseApi baseApi) *TargetsApi {
    targetsApi := TargetsApi{baseApi: baseApi}
    return &targetsApi
}

// QueryTarget takes context, body as parameters and
// returns an models.ApiResponse with []models.Target data and
// an error if there was an issue with the request or response.
// Search for targets by property values. Returns an array of all matching target resources.
func (t *TargetsApi) QueryTarget(
    ctx context.Context,
    body models.QueryTargetRequest) (
    models.ApiResponse[[]models.Target],
    error) {
    req := t.prepareRequest(ctx, "POST", "/targets/actions/query")
    
    req.BaseUrl("Cloud Connector")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result []models.Target
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.Target](decoder)
    return models.NewApiResponse(result, resp), err
}

// DeleteTarget takes context, body as parameters and
// returns an *Response and
// an error if there was an issue with the request or response.
// Remove a target from a ThingSpace account.
func (t *TargetsApi) DeleteTarget(
    ctx context.Context,
    body models.DeleteTargetRequest) (
    *http.Response,
    error) {
    req := t.prepareRequest(ctx, "POST", "/targets/actions/delete")
    
    req.BaseUrl("Cloud Connector")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    httpCtx, err := req.Call()
    if err != nil {
        return httpCtx.Response, err
    }
    return httpCtx.Response, err
}

// CreateTarget takes context, body as parameters and
// returns an models.ApiResponse with models.Target data and
// an error if there was an issue with the request or response.
// Define a target to receive data streams, alerts, or callbacks. After creating the target resource, use its ID in a subscription to set up a data stream.
func (t *TargetsApi) CreateTarget(
    ctx context.Context,
    body models.CreateTargetRequest) (
    models.ApiResponse[models.Target],
    error) {
    req := t.prepareRequest(ctx, "POST", "/targets")
    
    req.BaseUrl("Cloud Connector")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.Target
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.Target](decoder)
    return models.NewApiResponse(result, resp), err
}

// GenerateTargetExternalId takes context, body as parameters and
// returns an models.ApiResponse with models.GenerateExternalIdResult data and
// an error if there was an issue with the request or response.
// Create a unique string that ThingSpace will pass to AWS for increased security.
func (t *TargetsApi) GenerateTargetExternalId(
    ctx context.Context,
    body models.GenerateExternalIdRequest) (
    models.ApiResponse[models.GenerateExternalIdResult],
    error) {
    req := t.prepareRequest(ctx, "POST", "/targets/actions/newextid")
    
    req.BaseUrl("Cloud Connector")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.GenerateExternalIdResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.GenerateExternalIdResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// CreateAzureCentralIoTApplication takes context, billingaccountId, body as parameters and
// returns an models.ApiResponse with models.CreateIoTApplicationResponse data and
// an error if there was an issue with the request or response.
// Deploy a new Azure IoT Central application based on the Verizon ARM template within the specified Azure Active Directory account.
func (t *TargetsApi) CreateAzureCentralIoTApplication(
    ctx context.Context,
    billingaccountId string,
    body models.CreateIoTApplicationRequest) (
    models.ApiResponse[models.CreateIoTApplicationResponse],
    error) {
    req := t.prepareRequest(ctx, "POST", "/targets/actions/newaic")
    
    req.BaseUrl("Cloud Connector")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.Header("BillingaccountID", billingaccountId)
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.CreateIoTApplicationResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.CreateIoTApplicationResponse](decoder)
    return models.NewApiResponse(result, resp), err
}
