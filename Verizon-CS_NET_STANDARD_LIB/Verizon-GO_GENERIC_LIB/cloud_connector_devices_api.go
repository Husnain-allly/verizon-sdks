/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/utilities"
    "net/http"
    "verizon/models"
)

// CloudConnectorDevicesApi represents a controller struct.
type CloudConnectorDevicesApi struct {
    baseApi
}

// NewCloudConnectorDevicesApi creates a new instance of CloudConnectorDevicesApi.
// It takes a baseController as a parameter and returns a pointer to the CloudConnectorDevicesApi.
func NewCloudConnectorDevicesApi(baseApi baseApi) *CloudConnectorDevicesApi {
    cloudConnectorDevicesApi := CloudConnectorDevicesApi{baseApi: baseApi}
    return &cloudConnectorDevicesApi
}

// UpdateDevicesConfigurationValue takes context, body as parameters and
// returns an models.ApiResponse with models.ChangeConfigurationResponse data and
// an error if there was an issue with the request or response.
// Change configuration values on a device, such as setting how often a device records and reports sensor readings.
func (c *CloudConnectorDevicesApi) UpdateDevicesConfigurationValue(
    ctx context.Context,
    body models.ChangeConfigurationRequest) (
    models.ApiResponse[models.ChangeConfigurationResponse],
    error) {
    req := c.prepareRequest(ctx, "POST", "/devices/configuration/actions/set")
    
    req.BaseUrl("Cloud Connector")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.ChangeConfigurationResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.ChangeConfigurationResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// FindDeviceByPropertyValues takes context, body as parameters and
// returns an models.ApiResponse with models.FindDeviceByPropertyResponseList data and
// an error if there was an issue with the request or response.
// Find devices by property values. Returns an array of all matching device resources.
func (c *CloudConnectorDevicesApi) FindDeviceByPropertyValues(
    ctx context.Context,
    body models.QuerySubscriptionRequest) (
    models.ApiResponse[models.FindDeviceByPropertyResponseList],
    error) {
    req := c.prepareRequest(ctx, "POST", "/devices/actions/query")
    
    req.BaseUrl("Cloud Connector")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.FindDeviceByPropertyResponseList
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.FindDeviceByPropertyResponseList](decoder)
    return models.NewApiResponse(result, resp), err
}

// SearchDevicesResourcesByPropertyValues takes context, body as parameters and
// returns an models.ApiResponse with models.SearchDeviceByPropertyResponseList data and
// an error if there was an issue with the request or response.
// Search for devices by property values. Returns an array of all matching device resources.
func (c *CloudConnectorDevicesApi) SearchDevicesResourcesByPropertyValues(
    ctx context.Context,
    body models.QuerySubscriptionRequest) (
    models.ApiResponse[models.SearchDeviceByPropertyResponseList],
    error) {
    req := c.prepareRequest(ctx, "POST", "/devices/actions/search")
    
    req.BaseUrl("Cloud Connector")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.SearchDeviceByPropertyResponseList
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.SearchDeviceByPropertyResponseList](decoder)
    return models.NewApiResponse(result, resp), err
}

// SearchDeviceEventHistory takes context, body as parameters and
// returns an models.ApiResponse with models.SearchDeviceEventHistoryResponseList data and
// an error if there was an issue with the request or response.
// Search device event history to find events that match criteria.Sensor readings, configuration changes, and other device data are all stored as events.
func (c *CloudConnectorDevicesApi) SearchDeviceEventHistory(
    ctx context.Context,
    body models.SearchDeviceEventHistoryRequest) (
    models.ApiResponse[models.SearchDeviceEventHistoryResponseList],
    error) {
    req := c.prepareRequest(ctx, "POST", "/devices/fields/actions/history/search")
    
    req.BaseUrl("Cloud Connector")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.SearchDeviceEventHistoryResponseList
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.SearchDeviceEventHistoryResponseList](decoder)
    return models.NewApiResponse(result, resp), err
}

// SearchSensorReadings takes context, fieldname, body as parameters and
// returns an models.ApiResponse with models.SearchSensorHistoryResponseList data and
// an error if there was an issue with the request or response.
// Returns the readings of a specified sensor, with the most recent reading first. Sensor readings are stored as events; this request an array of events.
func (c *CloudConnectorDevicesApi) SearchSensorReadings(
    ctx context.Context,
    fieldname string,
    body models.SearchSensorHistoryRequest) (
    models.ApiResponse[models.SearchSensorHistoryResponseList],
    error) {
    req := c.prepareRequest(ctx, "POST", "/devices/fields/%v/actions/history")
    req.AppendTemplateParams(fieldname)
    req.BaseUrl("Cloud Connector")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    
    var result models.SearchSensorHistoryResponseList
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.SearchSensorHistoryResponseList](decoder)
    return models.NewApiResponse(result, resp), err
}

// DeleteDeviceFromAccount takes context, body as parameters and
// returns an *Response and
// an error if there was an issue with the request or response.
// Remove a device from a ThingSpace account.
func (c *CloudConnectorDevicesApi) DeleteDeviceFromAccount(
    ctx context.Context,
    body models.RemoveDeviceRequest) (
    *http.Response,
    error) {
    req := c.prepareRequest(ctx, "POST", "/devices/actions/delete")
    
    req.BaseUrl("Cloud Connector")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    httpCtx, err := req.Call()
    if err != nil {
        return httpCtx.Response, err
    }
    return httpCtx.Response, err
}
