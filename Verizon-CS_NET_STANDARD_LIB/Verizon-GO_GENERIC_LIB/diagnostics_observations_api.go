/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// DiagnosticsObservationsApi represents a controller struct.
type DiagnosticsObservationsApi struct {
    baseApi
}

// NewDiagnosticsObservationsApi creates a new instance of DiagnosticsObservationsApi.
// It takes a baseController as a parameter and returns a pointer to the DiagnosticsObservationsApi.
func NewDiagnosticsObservationsApi(baseApi baseApi) *DiagnosticsObservationsApi {
    diagnosticsObservationsApi := DiagnosticsObservationsApi{baseApi: baseApi}
    return &diagnosticsObservationsApi
}

// StartDiagnosticsObservation takes context, body as parameters and
// returns an models.ApiResponse with models.DiagnosticsObservationResult data and
// an error if there was an issue with the request or response.
// This endpoint allows the user to start or change observe diagnostics.
func (d *DiagnosticsObservationsApi) StartDiagnosticsObservation(
    ctx context.Context,
    body models.ObservationRequest) (
    models.ApiResponse[models.DiagnosticsObservationResult],
    error) {
    req := d.prepareRequest(ctx, "POST", "/devices/attributes/actions/observe")
    
    req.BaseUrl("Device Diagnostics")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response.", Unmarshaller: errors.NewDeviceDiagnosticsResult},
    })
    req.Header("Content-Type", "*/*")
    req.Json(&body)
    var result models.DiagnosticsObservationResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DiagnosticsObservationResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// StopDiagnosticsObservation takes context, transactionId, accountName as parameters and
// returns an models.ApiResponse with models.DiagnosticsObservationResult data and
// an error if there was an issue with the request or response.
// This endpoint allows the user to stop or reset observe diagnostics.
func (d *DiagnosticsObservationsApi) StopDiagnosticsObservation(
    ctx context.Context,
    transactionId string,
    accountName string) (
    models.ApiResponse[models.DiagnosticsObservationResult],
    error) {
    req := d.prepareRequest(ctx, "DELETE", "/devices/attributes/actions/observe")
    
    req.BaseUrl("Device Diagnostics")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response.", Unmarshaller: errors.NewDeviceDiagnosticsResult},
    })
    req.QueryParam("transactionId", transactionId)
    req.QueryParam("accountName", accountName)
    var result models.DiagnosticsObservationResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DiagnosticsObservationResult](decoder)
    return models.NewApiResponse(result, resp), err
}
