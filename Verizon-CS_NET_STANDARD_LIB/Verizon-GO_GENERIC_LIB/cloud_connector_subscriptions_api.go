/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/utilities"
    "net/http"
    "verizon/models"
)

// CloudConnectorSubscriptionsApi represents a controller struct.
type CloudConnectorSubscriptionsApi struct {
    baseApi
}

// NewCloudConnectorSubscriptionsApi creates a new instance of CloudConnectorSubscriptionsApi.
// It takes a baseController as a parameter and returns a pointer to the CloudConnectorSubscriptionsApi.
func NewCloudConnectorSubscriptionsApi(baseApi baseApi) *CloudConnectorSubscriptionsApi {
    cloudConnectorSubscriptionsApi := CloudConnectorSubscriptionsApi{baseApi: baseApi}
    return &cloudConnectorSubscriptionsApi
}

// CreateSubscription takes context, body as parameters and
// returns an models.ApiResponse with models.Subscription data and
// an error if there was an issue with the request or response.
// Create a subscription to define a streaming channel that sends data from devices in the account to an endpoint defined in a target resource.
func (c *CloudConnectorSubscriptionsApi) CreateSubscription(
    ctx context.Context,
    body models.CreateSubscriptionRequest) (
    models.ApiResponse[models.Subscription],
    error) {
    req := c.prepareRequest(ctx, "POST", "/subscriptions")
    
    req.BaseUrl("Cloud Connector")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.Subscription
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.Subscription](decoder)
    return models.NewApiResponse(result, resp), err
}

// QuerySubscription takes context, body as parameters and
// returns an models.ApiResponse with []models.Subscription data and
// an error if there was an issue with the request or response.
// Search for subscriptions by property values. Returns an array of all matching subscription resources.
func (c *CloudConnectorSubscriptionsApi) QuerySubscription(
    ctx context.Context,
    body models.QuerySubscriptionRequest) (
    models.ApiResponse[[]models.Subscription],
    error) {
    req := c.prepareRequest(ctx, "POST", "/subscriptions/actions/query")
    
    req.BaseUrl("Cloud Connector")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result []models.Subscription
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.Subscription](decoder)
    return models.NewApiResponse(result, resp), err
}

// DeleteSubscription takes context, body as parameters and
// returns an *Response and
// an error if there was an issue with the request or response.
// Remove a subscription from a ThingSpace account.
func (c *CloudConnectorSubscriptionsApi) DeleteSubscription(
    ctx context.Context,
    body models.DeleteSubscriptionRequest) (
    *http.Response,
    error) {
    req := c.prepareRequest(ctx, "POST", "/subscriptions/actions/delete")
    
    req.BaseUrl("Cloud Connector")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    httpCtx, err := req.Call()
    if err != nil {
        return httpCtx.Response, err
    }
    return httpCtx.Response, err
}
