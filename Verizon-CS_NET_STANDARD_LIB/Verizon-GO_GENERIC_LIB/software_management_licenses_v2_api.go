/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// SoftwareManagementLicensesV2Api represents a controller struct.
type SoftwareManagementLicensesV2Api struct {
    baseApi
}

// NewSoftwareManagementLicensesV2Api creates a new instance of SoftwareManagementLicensesV2Api.
// It takes a baseController as a parameter and returns a pointer to the SoftwareManagementLicensesV2Api.
func NewSoftwareManagementLicensesV2Api(baseApi baseApi) *SoftwareManagementLicensesV2Api {
    softwareManagementLicensesV2Api := SoftwareManagementLicensesV2Api{baseApi: baseApi}
    return &softwareManagementLicensesV2Api
}

// GetAccountLicenseStatus takes context, account, lastSeenDeviceId as parameters and
// returns an models.ApiResponse with models.V2LicenseSummary data and
// an error if there was an issue with the request or response.
// The endpoint allows user to list license usage.
func (s *SoftwareManagementLicensesV2Api) GetAccountLicenseStatus(
    ctx context.Context,
    account string,
    lastSeenDeviceId *string) (
    models.ApiResponse[models.V2LicenseSummary],
    error) {
    req := s.prepareRequest(ctx, "GET", "/licenses/%v")
    req.AppendTemplateParams(account)
    req.BaseUrl("Software Management V2")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV2Result},
    })
    if lastSeenDeviceId != nil {
        req.QueryParam("lastSeenDeviceId", *lastSeenDeviceId)
    }
    
    var result models.V2LicenseSummary
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.V2LicenseSummary](decoder)
    return models.NewApiResponse(result, resp), err
}

// AssignLicensesToDevices takes context, account, body as parameters and
// returns an models.ApiResponse with models.V2LicensesAssignedRemovedResult data and
// an error if there was an issue with the request or response.
// Deprecated: AssignLicensesToDevices is deprecated
// This endpoint allows user to assign licenses to a list of devices.
func (s *SoftwareManagementLicensesV2Api) AssignLicensesToDevices(
    ctx context.Context,
    account string,
    body models.V2LicenseImei) (
    models.ApiResponse[models.V2LicensesAssignedRemovedResult],
    error) {
    req := s.prepareRequest(ctx, "POST", "/licenses/%v/assign")
    req.AppendTemplateParams(account)
    req.BaseUrl("Software Management V2")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV2Result},
    })
    req.Header("Content-Type", "*/*")
    req.Json(&body)
    
    var result models.V2LicensesAssignedRemovedResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.V2LicensesAssignedRemovedResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// RemoveLicensesFromDevices takes context, account, body as parameters and
// returns an models.ApiResponse with models.V2LicensesAssignedRemovedResult data and
// an error if there was an issue with the request or response.
// Deprecated: RemoveLicensesFromDevices is deprecated
// This endpoint allows user to remove licenses from a list of devices.
func (s *SoftwareManagementLicensesV2Api) RemoveLicensesFromDevices(
    ctx context.Context,
    account string,
    body models.V2LicenseImei) (
    models.ApiResponse[models.V2LicensesAssignedRemovedResult],
    error) {
    req := s.prepareRequest(ctx, "POST", "/licenses/%v/remove")
    req.AppendTemplateParams(account)
    req.BaseUrl("Software Management V2")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV2Result},
    })
    req.Header("Content-Type", "*/*")
    req.Json(&body)
    
    var result models.V2LicensesAssignedRemovedResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.V2LicensesAssignedRemovedResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// ListLicensesToRemove takes context, account, startIndex as parameters and
// returns an models.ApiResponse with models.V2ListOfLicensesToRemove data and
// an error if there was an issue with the request or response.
// Deprecated: ListLicensesToRemove is deprecated
// The license cancel endpoint allows user to list registered license cancellation candidate devices.
func (s *SoftwareManagementLicensesV2Api) ListLicensesToRemove(
    ctx context.Context,
    account string,
    startIndex *string) (
    models.ApiResponse[models.V2ListOfLicensesToRemove],
    error) {
    req := s.prepareRequest(ctx, "GET", "/licenses/%v/cancel")
    req.AppendTemplateParams(account)
    req.BaseUrl("Software Management V2")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV2Result},
    })
    if startIndex != nil {
        req.QueryParam("startIndex", *startIndex)
    }
    
    var result models.V2ListOfLicensesToRemove
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.V2ListOfLicensesToRemove](decoder)
    return models.NewApiResponse(result, resp), err
}

// CreateListOfLicensesToRemove takes context, account, body as parameters and
// returns an models.ApiResponse with models.V2ListOfLicensesToRemoveResult data and
// an error if there was an issue with the request or response.
// Deprecated: CreateListOfLicensesToRemove is deprecated
// The license cancel endpoint allows user to create a list of license cancellation candidate devices.
func (s *SoftwareManagementLicensesV2Api) CreateListOfLicensesToRemove(
    ctx context.Context,
    account string,
    body models.V2ListOfLicensesToRemoveRequest) (
    models.ApiResponse[models.V2ListOfLicensesToRemoveResult],
    error) {
    req := s.prepareRequest(ctx, "POST", "/licenses/%v/cancel")
    req.AppendTemplateParams(account)
    req.BaseUrl("Software Management V2")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV2Result},
    })
    req.Header("Content-Type", "*/*")
    req.Json(&body)
    
    var result models.V2ListOfLicensesToRemoveResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.V2ListOfLicensesToRemoveResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// DeleteListOfLicensesToRemove takes context, account as parameters and
// returns an models.ApiResponse with models.FotaV2SuccessResult data and
// an error if there was an issue with the request or response.
// Deprecated: DeleteListOfLicensesToRemove is deprecated
// This endpoint allows user to delete a created cancel candidate device list.
func (s *SoftwareManagementLicensesV2Api) DeleteListOfLicensesToRemove(
    ctx context.Context,
    account string) (
    models.ApiResponse[models.FotaV2SuccessResult],
    error) {
    req := s.prepareRequest(ctx, "DELETE", "/licenses/%v/cancel")
    req.AppendTemplateParams(account)
    req.BaseUrl("Software Management V2")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV2Result},
    })
    
    var result models.FotaV2SuccessResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.FotaV2SuccessResult](decoder)
    return models.NewApiResponse(result, resp), err
}
