/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// CampaignsV2Api represents a controller struct.
type CampaignsV2Api struct {
    baseApi
}

// NewCampaignsV2Api creates a new instance of CampaignsV2Api.
// It takes a baseController as a parameter and returns a pointer to the CampaignsV2Api.
func NewCampaignsV2Api(baseApi baseApi) *CampaignsV2Api {
    campaignsV2Api := CampaignsV2Api{baseApi: baseApi}
    return &campaignsV2Api
}

// ScheduleCampaignFirmwareUpgrade takes context, account, body as parameters and
// returns an models.ApiResponse with models.CampaignSoftware data and
// an error if there was an issue with the request or response.
// This endpoint allows user to schedule a software upgrade.
func (c *CampaignsV2Api) ScheduleCampaignFirmwareUpgrade(
    ctx context.Context,
    account string,
    body models.CampaignSoftwareUpgrade) (
    models.ApiResponse[models.CampaignSoftware],
    error) {
    req := c.prepareRequest(ctx, "POST", "/campaigns/%v")
    req.AppendTemplateParams(account)
    req.BaseUrl("Software Management V2")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV2Result},
    })
    req.Header("Content-Type", "*/*")
    req.Json(&body)
    
    var result models.CampaignSoftware
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.CampaignSoftware](decoder)
    return models.NewApiResponse(result, resp), err
}

// GetCampaignInformation takes context, account, campaignId as parameters and
// returns an models.ApiResponse with models.CampaignSoftware data and
// an error if there was an issue with the request or response.
// This endpoint allows user to get information of a software upgrade.
func (c *CampaignsV2Api) GetCampaignInformation(
    ctx context.Context,
    account string,
    campaignId string) (
    models.ApiResponse[models.CampaignSoftware],
    error) {
    req := c.prepareRequest(ctx, "GET", "/campaigns/%v/%v")
    req.AppendTemplateParams(account, campaignId)
    req.BaseUrl("Software Management V2")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV2Result},
    })
    
    var result models.CampaignSoftware
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.CampaignSoftware](decoder)
    return models.NewApiResponse(result, resp), err
}

// UpdateCampaignFirmwareDevices takes context, account, campaignId, body as parameters and
// returns an models.ApiResponse with models.V2AddOrRemoveDeviceResult data and
// an error if there was an issue with the request or response.
// This endpoint allows user to Add or Remove devices to an existing software upgrade.
func (c *CampaignsV2Api) UpdateCampaignFirmwareDevices(
    ctx context.Context,
    account string,
    campaignId string,
    body models.V2AddOrRemoveDeviceRequest) (
    models.ApiResponse[models.V2AddOrRemoveDeviceResult],
    error) {
    req := c.prepareRequest(ctx, "PUT", "/campaigns/%v/%v")
    req.AppendTemplateParams(account, campaignId)
    req.BaseUrl("Software Management V2")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV2Result},
    })
    req.Header("Content-Type", "*/*")
    req.Json(&body)
    
    var result models.V2AddOrRemoveDeviceResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.V2AddOrRemoveDeviceResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// CancelCampaign takes context, account, campaignId as parameters and
// returns an models.ApiResponse with models.FotaV2SuccessResult data and
// an error if there was an issue with the request or response.
// This endpoint allows user to cancel software upgrade. A software upgrade already started can not be cancelled.
func (c *CampaignsV2Api) CancelCampaign(
    ctx context.Context,
    account string,
    campaignId string) (
    models.ApiResponse[models.FotaV2SuccessResult],
    error) {
    req := c.prepareRequest(ctx, "DELETE", "/campaigns/%v/%v")
    req.AppendTemplateParams(account, campaignId)
    req.BaseUrl("Software Management V2")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV2Result},
    })
    
    var result models.FotaV2SuccessResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.FotaV2SuccessResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// UpdateCampaignDates takes context, account, campaignId, body as parameters and
// returns an models.ApiResponse with models.CampaignSoftware data and
// an error if there was an issue with the request or response.
// This endpoint allows user to change campaign dates and time windows. Fields which need to remain unchanged should be also provided.
func (c *CampaignsV2Api) UpdateCampaignDates(
    ctx context.Context,
    account string,
    campaignId string,
    body models.V2ChangeCampaignDatesRequest) (
    models.ApiResponse[models.CampaignSoftware],
    error) {
    req := c.prepareRequest(ctx, "PUT", "/campaigns/%v/%v/dates")
    req.AppendTemplateParams(account, campaignId)
    req.BaseUrl("Software Management V2")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV2Result},
    })
    req.Header("Content-Type", "*/*")
    req.Json(&body)
    
    var result models.CampaignSoftware
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.CampaignSoftware](decoder)
    return models.NewApiResponse(result, resp), err
}

// ScheduleFileUpgrade takes context, acc, body as parameters and
// returns an models.ApiResponse with models.UploadAndScheduleFileResponse data and
// an error if there was an issue with the request or response.
// You can upload configuration files and schedule them in a campaign to devices.
func (c *CampaignsV2Api) ScheduleFileUpgrade(
    ctx context.Context,
    acc string,
    body models.UploadAndScheduleFileRequest) (
    models.ApiResponse[models.UploadAndScheduleFileResponse],
    error) {
    req := c.prepareRequest(ctx, "POST", "/campaigns/files/%v")
    req.AppendTemplateParams(acc)
    req.BaseUrl("Software Management V2")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV2Result},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    
    var result models.UploadAndScheduleFileResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.UploadAndScheduleFileResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// ScheduleSwUpgradeHttpDevices takes context, acc, body as parameters and
// returns an models.ApiResponse with models.UploadAndScheduleFileResponse data and
// an error if there was an issue with the request or response.
// Campaign time windows for downloading and installing software are available as long as the device OEM supports this.
func (c *CampaignsV2Api) ScheduleSwUpgradeHttpDevices(
    ctx context.Context,
    acc string,
    body models.SchedulesSoftwareUpgradeRequest) (
    models.ApiResponse[models.UploadAndScheduleFileResponse],
    error) {
    req := c.prepareRequest(ctx, "POST", "/campaigns/software/%v")
    req.AppendTemplateParams(acc)
    req.BaseUrl("Software Management V2")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV2Result},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    
    var result models.UploadAndScheduleFileResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.UploadAndScheduleFileResponse](decoder)
    return models.NewApiResponse(result, resp), err
}
