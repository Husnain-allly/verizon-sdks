/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// AccountRequestsApi represents a controller struct.
type AccountRequestsApi struct {
    baseApi
}

// NewAccountRequestsApi creates a new instance of AccountRequestsApi.
// It takes a baseController as a parameter and returns a pointer to the AccountRequestsApi.
func NewAccountRequestsApi(baseApi baseApi) *AccountRequestsApi {
    accountRequestsApi := AccountRequestsApi{baseApi: baseApi}
    return &accountRequestsApi
}

// GetCurrentAsynchronousRequestStatus takes context, aname, requestId as parameters and
// returns an models.ApiResponse with models.AsynchronousRequestResult data and
// an error if there was an issue with the request or response.
// Returns the current status of an asynchronous request that was made for a single device.
func (a *AccountRequestsApi) GetCurrentAsynchronousRequestStatus(
    ctx context.Context,
    aname string,
    requestId string) (
    models.ApiResponse[models.AsynchronousRequestResult],
    error) {
    req := a.prepareRequest(ctx, "GET", "/m2m/v1/accounts/%v/requests/%v/status")
    req.AppendTemplateParams(aname, requestId)
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    
    var result models.AsynchronousRequestResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.AsynchronousRequestResult](decoder)
    return models.NewApiResponse(result, resp), err
}
