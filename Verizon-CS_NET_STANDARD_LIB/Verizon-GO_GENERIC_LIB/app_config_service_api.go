/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "net/http"
    "verizon/errors"
    "verizon/models"
)

// AppConfigServiceApi represents a controller struct.
type AppConfigServiceApi struct {
    baseApi
}

// NewAppConfigServiceApi creates a new instance of AppConfigServiceApi.
// It takes a baseController as a parameter and returns a pointer to the AppConfigServiceApi.
func NewAppConfigServiceApi(baseApi baseApi) *AppConfigServiceApi {
    appConfigServiceApi := AppConfigServiceApi{baseApi: baseApi}
    return &appConfigServiceApi
}

// GetConfigurationList takes context, vendorId as parameters and
// returns an models.ApiResponse with []models.ConfigurationListItem data and
// an error if there was an issue with the request or response.
// This endpoint fetches and returns the list of configurations defined by the Vendor. The list contains the configurations' identifier, name, description, and active flag. The vendor ID is provided when the configuration is created through the POST request.
// Note: The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and Session/M2M tokens in order to call this API.
func (a *AppConfigServiceApi) GetConfigurationList(
    ctx context.Context,
    vendorId string) (
    models.ApiResponse[[]models.ConfigurationListItem],
    error) {
    req := a.prepareRequest(
      ctx,
      "GET",
      "/api/v1/application/configurations/geofence/ids",
    )
    
    req.BaseUrl("IMP Server")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("SessionToken"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "403": {Message: "Forbidden", Unmarshaller: errors.NewAppConfigResponseError},
        "404": {Message: "Configuration not found", Unmarshaller: errors.NewAppConfigResponseError},
        "429": {Message: "Too many requests", Unmarshaller: errors.NewAppConfigResponseError},
        "0": {Message: "unexpected error", Unmarshaller: errors.NewAppConfigResponseError},
    })
    req.Header("VendorID", vendorId)
    var result []models.ConfigurationListItem
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.ConfigurationListItem](decoder)
    return models.NewApiResponse(result, resp), err
}

// GetConfiguration takes context, id, vendorId as parameters and
// returns an models.ApiResponse with models.GeoFenceConfigurationResponse data and
// an error if there was an issue with the request or response.
// This endpoint fetches and returns a specific configuration's details. The configuration ID parameter, which was provided when the configuration was created through the POST request, is need to retrieve the configuration details.
// Note: The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and Session/M2M tokens in order to call this API.
func (a *AppConfigServiceApi) GetConfiguration(
    ctx context.Context,
    id string,
    vendorId string) (
    models.ApiResponse[models.GeoFenceConfigurationResponse],
    error) {
    req := a.prepareRequest(
      ctx,
      "GET",
      "/api/v1/application/configurations/geofence",
    )
    
    req.BaseUrl("IMP Server")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("SessionToken"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "403": {Message: "Forbidden", Unmarshaller: errors.NewAppConfigResponseError},
        "404": {Message: "Configuration not found", Unmarshaller: errors.NewAppConfigResponseError},
        "429": {Message: "Too many requests", Unmarshaller: errors.NewAppConfigResponseError},
        "0": {Message: "unexpected error", Unmarshaller: errors.NewAppConfigResponseError},
    })
    req.Header("VendorID", vendorId)
    req.QueryParam("id", id)
    var result models.GeoFenceConfigurationResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.GeoFenceConfigurationResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// CreateConfiguration takes context, vendorId, body as parameters and
// returns an models.ApiResponse with models.GeoFenceConfigurationResponse data and
// an error if there was an issue with the request or response.
// This endpoint creates a new configuration in the system. The data for the new configuration should be provided as JSON in the body of the POST request. The system will return with a unique ID for the configuration, which is needed for any further manipulation (update or delete) of the configuration.
// Note: The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and Session/M2M tokens in order to call this API.
func (a *AppConfigServiceApi) CreateConfiguration(
    ctx context.Context,
    vendorId string,
    body models.GeoFenceConfigurationRequest) (
    models.ApiResponse[models.GeoFenceConfigurationResponse],
    error) {
    req := a.prepareRequest(
      ctx,
      "POST",
      "/api/v1/application/configurations/geofence",
    )
    
    req.BaseUrl("IMP Server")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("SessionToken"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Invalid configuration", Unmarshaller: errors.NewAppConfigResponseError},
        "403": {Message: "Forbidden", Unmarshaller: errors.NewAppConfigResponseError},
        "429": {Message: "Too many requests", Unmarshaller: errors.NewAppConfigResponseError},
        "0": {Message: "unexpected error", Unmarshaller: errors.NewAppConfigResponseError},
    })
    req.Header("VendorID", vendorId)
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.GeoFenceConfigurationResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.GeoFenceConfigurationResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// UpdateConfiguration takes context, vendorId, id, body as parameters and
// returns an *Response and
// an error if there was an issue with the request or response.
// This endpoint updates an existing configuration. Similar to POST, the updated data for the configuration should be provided as JSON in the body of the PUT request. The configuration ID parameter, which was provided by the POST (create) operation, is required to do any updates on the configuration.
// Note: The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and Session/M2M tokens in order to call this API.
func (a *AppConfigServiceApi) UpdateConfiguration(
    ctx context.Context,
    vendorId string,
    id string,
    body models.GeoFenceConfigurationUpdateRequest) (
    *http.Response,
    error) {
    req := a.prepareRequest(
      ctx,
      "PUT",
      "/api/v1/application/configurations/geofence",
    )
    
    req.BaseUrl("IMP Server")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("SessionToken"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Invalid configuration", Unmarshaller: errors.NewAppConfigResponseError},
        "403": {Message: "Forbidden", Unmarshaller: errors.NewAppConfigResponseError},
        "404": {Message: "Configuration not found", Unmarshaller: errors.NewAppConfigResponseError},
        "429": {Message: "Too many requests", Unmarshaller: errors.NewAppConfigResponseError},
        "0": {Message: "unexpected error", Unmarshaller: errors.NewAppConfigResponseError},
    })
    req.Header("VendorID", vendorId)
    req.Header("Content-Type", "application/json")
    req.QueryParam("id", id)
    req.Json(&body)
    httpCtx, err := req.Call()
    if err != nil {
        return httpCtx.Response, err
    }
    return httpCtx.Response, err
}

// DeleteConfiguration takes context, vendorId, id as parameters and
// returns an *Response and
// an error if there was an issue with the request or response.
// This endpoint deletes a specific configuration from the system. It requires the configuration ID parameter, which was provided by the POST (create) operation.
// Note: The user needs to authenticate with their ThingSpace credentials using the Access/Bearer and Session/M2M tokens in order to call this API.
func (a *AppConfigServiceApi) DeleteConfiguration(
    ctx context.Context,
    vendorId string,
    id string) (
    *http.Response,
    error) {
    req := a.prepareRequest(
      ctx,
      "DELETE",
      "/api/v1/application/configurations/geofence",
    )
    
    req.BaseUrl("IMP Server")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("SessionToken"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "403": {Message: "Forbidden", Unmarshaller: errors.NewAppConfigResponseError},
        "429": {Message: "Too many requests", Unmarshaller: errors.NewAppConfigResponseError},
        "0": {Message: "unexpected error", Unmarshaller: errors.NewAppConfigResponseError},
    })
    req.Header("VendorID", vendorId)
    req.QueryParam("id", id)
    httpCtx, err := req.Call()
    if err != nil {
        return httpCtx.Response, err
    }
    return httpCtx.Response, err
}
