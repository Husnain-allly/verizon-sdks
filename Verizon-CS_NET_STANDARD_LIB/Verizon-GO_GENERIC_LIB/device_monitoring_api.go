/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// DeviceMonitoringApi represents a controller struct.
type DeviceMonitoringApi struct {
    baseApi
}

// NewDeviceMonitoringApi creates a new instance of DeviceMonitoringApi.
// It takes a baseController as a parameter and returns a pointer to the DeviceMonitoringApi.
func NewDeviceMonitoringApi(baseApi baseApi) *DeviceMonitoringApi {
    deviceMonitoringApi := DeviceMonitoringApi{baseApi: baseApi}
    return &deviceMonitoringApi
}

// DeviceReachability takes context, body as parameters and
// returns an models.ApiResponse with models.RequestResponse data and
// an error if there was an issue with the request or response.
func (d *DeviceMonitoringApi) DeviceReachability(
    ctx context.Context,
    body models.NotificationReportRequest) (
    models.ApiResponse[models.RequestResponse],
    error) {
    req := d.prepareRequest(
      ctx,
      "POST",
      "/m2m/v1/diagnostics/basic/devicereachability",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error Response", Unmarshaller: errors.NewRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.RequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.RequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// StopDeviceReachability takes context, stopreachabilitypayload as parameters and
// returns an models.ApiResponse with models.RequestResponse data and
// an error if there was an issue with the request or response.
func (d *DeviceMonitoringApi) StopDeviceReachability(
    ctx context.Context,
    stopreachabilitypayload models.StopMonitorRequest) (
    models.ApiResponse[models.RequestResponse],
    error) {
    req := d.prepareRequest(
      ctx,
      "DELETE",
      "/m2m/v1/diagnostics/basic/devicereachability",
    )
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error Response", Unmarshaller: errors.NewRestErrorResponse},
    })
    req.QueryParam("stopreachabilitypayload", stopreachabilitypayload)
    var result models.RequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.RequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}
