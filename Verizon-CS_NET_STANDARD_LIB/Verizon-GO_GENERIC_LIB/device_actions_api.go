/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// DeviceActionsApi represents a controller struct.
type DeviceActionsApi struct {
    baseApi
}

// NewDeviceActionsApi creates a new instance of DeviceActionsApi.
// It takes a baseController as a parameter and returns a pointer to the DeviceActionsApi.
func NewDeviceActionsApi(baseApi baseApi) *DeviceActionsApi {
    deviceActionsApi := DeviceActionsApi{baseApi: baseApi}
    return &deviceActionsApi
}

// AggregateUsage takes context, body as parameters and
// returns an models.ApiResponse with models.GioRequestResponse data and
// an error if there was an issue with the request or response.
// Retrieve the aggregate usage for a device or a number of devices.
func (d *DeviceActionsApi) AggregateUsage(
    ctx context.Context,
    body models.AggregateUsage) (
    models.ApiResponse[models.GioRequestResponse],
    error) {
    req := d.prepareRequest(ctx, "POST", "/v1/devices/usage/actions/list/aggregate")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewGioRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.GioRequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.GioRequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// DailyUsage takes context, body as parameters and
// returns an models.ApiResponse with models.DailyUsageResponse data and
// an error if there was an issue with the request or response.
// Retrieve the daily usage for a device, for a specified period of time, segmented by day
func (d *DeviceActionsApi) DailyUsage(
    ctx context.Context,
    body models.DailyUsage) (
    models.ApiResponse[models.DailyUsageResponse],
    error) {
    req := d.prepareRequest(ctx, "POST", "/v1/devices/usage/actions/list")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewGioRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.DailyUsageResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DailyUsageResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// ServicePlanList takes context, accountName as parameters and
// returns an models.ApiResponse with models.AccountDetails data and
// an error if there was an issue with the request or response.
// Retrieve all of the service plans, features and carriers associated with the account specified.
func (d *DeviceActionsApi) ServicePlanList(
    ctx context.Context,
    accountName string) (
    models.ApiResponse[models.AccountDetails],
    error) {
    req := d.prepareRequest(ctx, "GET", "/v1/plans/%v")
    req.AppendTemplateParams(accountName)
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewGioRestErrorResponse},
    })
    
    var result models.AccountDetails
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.AccountDetails](decoder)
    return models.NewApiResponse(result, resp), err
}

// AccountInformation takes context, accountName as parameters and
// returns an models.ApiResponse with models.AccountDetails data and
// an error if there was an issue with the request or response.
// Retrieve all of the service plans, features and carriers associated with the account specified.
func (d *DeviceActionsApi) AccountInformation(
    ctx context.Context,
    accountName string) (
    models.ApiResponse[models.AccountDetails],
    error) {
    req := d.prepareRequest(ctx, "GET", "/v1/accounts/%v")
    req.AppendTemplateParams(accountName)
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewGioRestErrorResponse},
    })
    
    var result models.AccountDetails
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.AccountDetails](decoder)
    return models.NewApiResponse(result, resp), err
}

// RetrieveTheGlobalDeviceList takes context, body as parameters and
// returns an models.ApiResponse with models.GioRequestResponse data and
// an error if there was an issue with the request or response.
// Allows the profile to fetch the complete device list. This works with Verizon US and Global profiles.
func (d *DeviceActionsApi) RetrieveTheGlobalDeviceList(
    ctx context.Context,
    body models.GetDeviceListWithProfilesRequest) (
    models.ApiResponse[models.GioRequestResponse],
    error) {
    req := d.prepareRequest(ctx, "POST", "/m2m/v2/devices/actions/list")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewGioRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.GioRequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.GioRequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// RetrieveDeviceProvisioningHistory takes context, body as parameters and
// returns an models.ApiResponse with models.GioRequestResponse data and
// an error if there was an issue with the request or response.
// Retrieve the provisioning history of a specific device or devices.
func (d *DeviceActionsApi) RetrieveDeviceProvisioningHistory(
    ctx context.Context,
    body models.ProvhistoryRequest) (
    models.ApiResponse[models.GioRequestResponse],
    error) {
    req := d.prepareRequest(ctx, "POST", "/m2m/v2/devices/history/actions/list")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewGioRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.GioRequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.GioRequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// GetAsynchronousRequestStatus takes context, accountName, requestId as parameters and
// returns an models.ApiResponse with models.StatusResponse data and
// an error if there was an issue with the request or response.
// Get the status of an asynchronous request made with the Device Actions.
func (d *DeviceActionsApi) GetAsynchronousRequestStatus(
    ctx context.Context,
    accountName string,
    requestId string) (
    models.ApiResponse[models.StatusResponse],
    error) {
    req := d.prepareRequest(ctx, "GET", "/m2m/v2/accounts/%v/requests/%v/status")
    req.AppendTemplateParams(accountName, requestId)
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewGioRestErrorResponse},
    })
    
    var result models.StatusResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.StatusResponse](decoder)
    return models.NewApiResponse(result, resp), err
}
