/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// SoftwareManagementLicensesV3Api represents a controller struct.
type SoftwareManagementLicensesV3Api struct {
    baseApi
}

// NewSoftwareManagementLicensesV3Api creates a new instance of SoftwareManagementLicensesV3Api.
// It takes a baseController as a parameter and returns a pointer to the SoftwareManagementLicensesV3Api.
func NewSoftwareManagementLicensesV3Api(baseApi baseApi) *SoftwareManagementLicensesV3Api {
    softwareManagementLicensesV3Api := SoftwareManagementLicensesV3Api{baseApi: baseApi}
    return &softwareManagementLicensesV3Api
}

// GetAccountLicensesStatus takes context, acc, lastSeenDeviceId as parameters and
// returns an models.ApiResponse with models.V3LicenseSummary data and
// an error if there was an issue with the request or response.
// The endpoint allows user to list license usage.
func (s *SoftwareManagementLicensesV3Api) GetAccountLicensesStatus(
    ctx context.Context,
    acc string,
    lastSeenDeviceId *string) (
    models.ApiResponse[models.V3LicenseSummary],
    error) {
    req := s.prepareRequest(ctx, "GET", "/licenses/%v")
    req.AppendTemplateParams(acc)
    req.BaseUrl("Software Management V3")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV3Result},
    })
    if lastSeenDeviceId != nil {
        req.QueryParam("lastSeenDeviceId", *lastSeenDeviceId)
    }
    
    var result models.V3LicenseSummary
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.V3LicenseSummary](decoder)
    return models.NewApiResponse(result, resp), err
}

// AssignLicensesToDevices takes context, acc, body as parameters and
// returns an models.ApiResponse with models.V3LicenseAssignedRemovedResult data and
// an error if there was an issue with the request or response.
// This endpoint allows user to assign licenses to a list of devices.
func (s *SoftwareManagementLicensesV3Api) AssignLicensesToDevices(
    ctx context.Context,
    acc string,
    body models.V3LicenseImei) (
    models.ApiResponse[models.V3LicenseAssignedRemovedResult],
    error) {
    req := s.prepareRequest(ctx, "POST", "/licenses/%v/assign")
    req.AppendTemplateParams(acc)
    req.BaseUrl("Software Management V3")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV3Result},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    
    var result models.V3LicenseAssignedRemovedResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.V3LicenseAssignedRemovedResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// RemoveLicensesFromDevices takes context, acc, body as parameters and
// returns an models.ApiResponse with models.V3LicenseAssignedRemovedResult data and
// an error if there was an issue with the request or response.
// This endpoint allows user to remove licenses from a list of devices.
func (s *SoftwareManagementLicensesV3Api) RemoveLicensesFromDevices(
    ctx context.Context,
    acc string,
    body models.V3LicenseImei) (
    models.ApiResponse[models.V3LicenseAssignedRemovedResult],
    error) {
    req := s.prepareRequest(ctx, "POST", "/licenses/%v/remove")
    req.AppendTemplateParams(acc)
    req.BaseUrl("Software Management V3")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV3Result},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    
    var result models.V3LicenseAssignedRemovedResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.V3LicenseAssignedRemovedResult](decoder)
    return models.NewApiResponse(result, resp), err
}
