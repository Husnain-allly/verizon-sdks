/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// SoftwareManagementSubscriptionsV3Api represents a controller struct.
type SoftwareManagementSubscriptionsV3Api struct {
    baseApi
}

// NewSoftwareManagementSubscriptionsV3Api creates a new instance of SoftwareManagementSubscriptionsV3Api.
// It takes a baseController as a parameter and returns a pointer to the SoftwareManagementSubscriptionsV3Api.
func NewSoftwareManagementSubscriptionsV3Api(baseApi baseApi) *SoftwareManagementSubscriptionsV3Api {
    softwareManagementSubscriptionsV3Api := SoftwareManagementSubscriptionsV3Api{baseApi: baseApi}
    return &softwareManagementSubscriptionsV3Api
}

// GetAccountSubscriptionStatus takes context, acc as parameters and
// returns an models.ApiResponse with models.FotaV3Subscription data and
// an error if there was an issue with the request or response.
// This endpoint retrieves a FOTA subscription by account.
func (s *SoftwareManagementSubscriptionsV3Api) GetAccountSubscriptionStatus(
    ctx context.Context,
    acc string) (
    models.ApiResponse[models.FotaV3Subscription],
    error) {
    req := s.prepareRequest(ctx, "GET", "/subscriptions/%v")
    req.AppendTemplateParams(acc)
    req.BaseUrl("Software Management V3")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV3Result},
    })
    
    var result models.FotaV3Subscription
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.FotaV3Subscription](decoder)
    return models.NewApiResponse(result, resp), err
}
