/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// DiagnosticsHistoryApi represents a controller struct.
type DiagnosticsHistoryApi struct {
    baseApi
}

// NewDiagnosticsHistoryApi creates a new instance of DiagnosticsHistoryApi.
// It takes a baseController as a parameter and returns a pointer to the DiagnosticsHistoryApi.
func NewDiagnosticsHistoryApi(baseApi baseApi) *DiagnosticsHistoryApi {
    diagnosticsHistoryApi := DiagnosticsHistoryApi{baseApi: baseApi}
    return &diagnosticsHistoryApi
}

// GetDiagnosticsHistory takes context, body as parameters and
// returns an models.ApiResponse with []models.History data and
// an error if there was an issue with the request or response.
// This endpoint allows the user to get the history data.
func (d *DiagnosticsHistoryApi) GetDiagnosticsHistory(
    ctx context.Context,
    body models.HistorySearchRequest) (
    models.ApiResponse[[]models.History],
    error) {
    req := d.prepareRequest(ctx, "POST", "/history/actions/$search")
    
    req.BaseUrl("Device Diagnostics")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response.", Unmarshaller: errors.NewDeviceDiagnosticsResult},
    })
    req.Header("Content-Type", "*/*")
    req.Json(&body)
    var result []models.History
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.History](decoder)
    return models.NewApiResponse(result, resp), err
}
