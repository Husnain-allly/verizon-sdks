/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// PerformanceMetricsApi represents a controller struct.
type PerformanceMetricsApi struct {
    baseApi
}

// NewPerformanceMetricsApi creates a new instance of PerformanceMetricsApi.
// It takes a baseController as a parameter and returns a pointer to the PerformanceMetricsApi.
func NewPerformanceMetricsApi(baseApi baseApi) *PerformanceMetricsApi {
    performanceMetricsApi := PerformanceMetricsApi{baseApi: baseApi}
    return &performanceMetricsApi
}

// QueryMecPerformanceMetrics takes context, body as parameters and
// returns an models.ApiResponse with models.MecPerformanceMetrics data and
// an error if there was an issue with the request or response.
// Query the most recent data for Key Performance Indicators (KPIs) like network availability, MEC hostnames and more.
func (p *PerformanceMetricsApi) QueryMecPerformanceMetrics(
    ctx context.Context,
    body *models.QueryMecPerformanceMetricsRequest) (
    models.ApiResponse[models.MecPerformanceMetrics],
    error) {
    req := p.prepareRequest(ctx, "POST", "/performance/device/network/metrics")
    
    req.BaseUrl("Performance")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad Request.", Unmarshaller: errors.NewEdgePerformanceResult},
        "401": {Message: "Unauthorized request.", Unmarshaller: errors.NewEdgePerformanceResult},
        "403": {Message: "Request forbidden.", Unmarshaller: errors.NewEdgePerformanceResult},
        "404": {Message: "Resource Not Found.", Unmarshaller: errors.NewEdgePerformanceResult},
        "405": {Message: "Method Not Allowed.", Unmarshaller: errors.NewEdgePerformanceResult},
        "503": {Message: "Service Unavailable.", Unmarshaller: errors.NewEdgePerformanceResult},
    })
    req.Header("Content-Type", "application/json")
    if body != nil {
        req.Json(body)
    }
    var result models.MecPerformanceMetrics
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.MecPerformanceMetrics](decoder)
    return models.NewApiResponse(result, resp), err
}
