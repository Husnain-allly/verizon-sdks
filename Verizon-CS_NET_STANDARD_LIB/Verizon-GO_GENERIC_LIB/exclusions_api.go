/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// ExclusionsApi represents a controller struct.
type ExclusionsApi struct {
    baseApi
}

// NewExclusionsApi creates a new instance of ExclusionsApi.
// It takes a baseController as a parameter and returns a pointer to the ExclusionsApi.
func NewExclusionsApi(baseApi baseApi) *ExclusionsApi {
    exclusionsApi := ExclusionsApi{baseApi: baseApi}
    return &exclusionsApi
}

// DevicesLocationGetConsentAsync takes context, accountName, deviceId as parameters and
// returns an models.ApiResponse with models.GetAccountDeviceConsent data and
// an error if there was an issue with the request or response.
// Get the consent settings for the entire account or device list in an account.
func (e *ExclusionsApi) DevicesLocationGetConsentAsync(
    ctx context.Context,
    accountName string,
    deviceId *string) (
    models.ApiResponse[models.GetAccountDeviceConsent],
    error) {
    req := e.prepareRequest(ctx, "GET", "/devicelocations/action/consents")
    
    req.BaseUrl("Device Location")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Unexpected error.", Unmarshaller: errors.NewDeviceLocationResult},
    })
    req.QueryParam("accountName", accountName)
    if deviceId != nil {
        req.QueryParam("deviceId", *deviceId)
    }
    var result models.GetAccountDeviceConsent
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.GetAccountDeviceConsent](decoder)
    return models.NewApiResponse(result, resp), err
}

// DevicesLocationGiveConsentAsync takes context, body as parameters and
// returns an models.ApiResponse with models.ConsentTransactionId data and
// an error if there was an issue with the request or response.
// Create a consent record to use location services as an asynchronous request.
func (e *ExclusionsApi) DevicesLocationGiveConsentAsync(
    ctx context.Context,
    body *models.AccountConsentCreate) (
    models.ApiResponse[models.ConsentTransactionId],
    error) {
    req := e.prepareRequest(ctx, "POST", "/devicelocations/action/consents")
    
    req.BaseUrl("Device Location")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Unexpected error.", Unmarshaller: errors.NewDeviceLocationResult},
    })
    req.Header("Content-Type", "application/json")
    if body != nil {
        req.Json(body)
    }
    var result models.ConsentTransactionId
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.ConsentTransactionId](decoder)
    return models.NewApiResponse(result, resp), err
}

// DevicesLocationUpdateConsent takes context, body as parameters and
// returns an models.ApiResponse with models.ConsentTransactionId data and
// an error if there was an issue with the request or response.
// Update the location services consent record for an entire account.
func (e *ExclusionsApi) DevicesLocationUpdateConsent(
    ctx context.Context,
    body *models.AccountConsentUpdate) (
    models.ApiResponse[models.ConsentTransactionId],
    error) {
    req := e.prepareRequest(ctx, "PUT", "/devicelocations/action/consents")
    
    req.BaseUrl("Device Location")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Unexpected error.", Unmarshaller: errors.NewDeviceLocationResult},
    })
    req.Header("Content-Type", "application/json")
    if body != nil {
        req.Json(body)
    }
    var result models.ConsentTransactionId
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.ConsentTransactionId](decoder)
    return models.NewApiResponse(result, resp), err
}

// ExcludeDevices takes context, body as parameters and
// returns an models.ApiResponse with models.DeviceLocationSuccessResult data and
// an error if there was an issue with the request or response.
// This consents endpoint sets a new exclusion list.
func (e *ExclusionsApi) ExcludeDevices(
    ctx context.Context,
    body models.ConsentRequest) (
    models.ApiResponse[models.DeviceLocationSuccessResult],
    error) {
    req := e.prepareRequest(ctx, "POST", "/consents")
    
    req.BaseUrl("Device Location")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewDeviceLocationResult},
    })
    req.Header("Content-Type", "*/*")
    req.Json(&body)
    var result models.DeviceLocationSuccessResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceLocationSuccessResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// RemoveDevicesFromExclusionList takes context, accountName, deviceList as parameters and
// returns an models.ApiResponse with models.DeviceLocationSuccessResult data and
// an error if there was an issue with the request or response.
// Removes devices from the exclusion list so that they can be located with Device Location Services requests.
func (e *ExclusionsApi) RemoveDevicesFromExclusionList(
    ctx context.Context,
    accountName string,
    deviceList string) (
    models.ApiResponse[models.DeviceLocationSuccessResult],
    error) {
    req := e.prepareRequest(ctx, "DELETE", "/consents")
    
    req.BaseUrl("Device Location")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewDeviceLocationResult},
    })
    req.QueryParam("accountName", accountName)
    req.QueryParam("deviceList", deviceList)
    var result models.DeviceLocationSuccessResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceLocationSuccessResult](decoder)
    return models.NewApiResponse(result, resp), err
}

// ListExcludedDevices takes context, accountName, startIndex as parameters and
// returns an models.ApiResponse with models.DevicesConsentResult data and
// an error if there was an issue with the request or response.
// This consents endpoint retrieves a list of excluded devices in an account.
func (e *ExclusionsApi) ListExcludedDevices(
    ctx context.Context,
    accountName string,
    startIndex string) (
    models.ApiResponse[models.DevicesConsentResult],
    error) {
    req := e.prepareRequest(ctx, "GET", "/consents/%v/index/%v")
    req.AppendTemplateParams(accountName, startIndex)
    req.BaseUrl("Device Location")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewDeviceLocationResult},
    })
    
    var result models.DevicesConsentResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DevicesConsentResult](decoder)
    return models.NewApiResponse(result, resp), err
}
