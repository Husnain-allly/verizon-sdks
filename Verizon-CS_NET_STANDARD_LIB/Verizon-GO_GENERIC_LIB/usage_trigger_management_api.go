/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// UsageTriggerManagementApi represents a controller struct.
type UsageTriggerManagementApi struct {
    baseApi
}

// NewUsageTriggerManagementApi creates a new instance of UsageTriggerManagementApi.
// It takes a baseController as a parameter and returns a pointer to the UsageTriggerManagementApi.
func NewUsageTriggerManagementApi(baseApi baseApi) *UsageTriggerManagementApi {
    usageTriggerManagementApi := UsageTriggerManagementApi{baseApi: baseApi}
    return &usageTriggerManagementApi
}

// CreateNewTrigger takes context, body as parameters and
// returns an models.ApiResponse with models.UsageTriggerResponse data and
// an error if there was an issue with the request or response.
// Create a new usage trigger, which will send an alert when the number of device location service transactions reaches a specified percentage of the monthly subscription amount.
func (u *UsageTriggerManagementApi) CreateNewTrigger(
    ctx context.Context,
    body *models.UsageTriggerAddRequest) (
    models.ApiResponse[models.UsageTriggerResponse],
    error) {
    req := u.prepareRequest(ctx, "POST", "/usage/triggers")
    
    req.BaseUrl("Subscription Server")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error", Unmarshaller: errors.NewDeviceLocationResult},
    })
    req.Header("Content-Type", "application/json")
    if body != nil {
        req.Json(body)
    }
    var result models.UsageTriggerResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.UsageTriggerResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// UpdateTrigger takes context, triggerId, body as parameters and
// returns an models.ApiResponse with models.UsageTriggerResponse data and
// an error if there was an issue with the request or response.
// Update an existing usage trigger
func (u *UsageTriggerManagementApi) UpdateTrigger(
    ctx context.Context,
    triggerId string,
    body *models.UsageTriggerUpdateRequest) (
    models.ApiResponse[models.UsageTriggerResponse],
    error) {
    req := u.prepareRequest(ctx, "POST", "/usage/triggers/%v")
    req.AppendTemplateParams(triggerId)
    req.BaseUrl("Subscription Server")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error", Unmarshaller: errors.NewDeviceLocationResult},
    })
    req.Header("Content-Type", "application/json")
    if body != nil {
        req.Json(body)
    }
    
    var result models.UsageTriggerResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.UsageTriggerResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// DeleteTrigger takes context, accountName, triggerId as parameters and
// returns an models.ApiResponse with models.DeviceLocationSuccessResult data and
// an error if there was an issue with the request or response.
// eletes the specified usage trigger from the given account
func (u *UsageTriggerManagementApi) DeleteTrigger(
    ctx context.Context,
    accountName string,
    triggerId string) (
    models.ApiResponse[models.DeviceLocationSuccessResult],
    error) {
    req := u.prepareRequest(ctx, "DELETE", "/usage/accounts/%v/triggers/%v")
    req.AppendTemplateParams(accountName, triggerId)
    req.BaseUrl("Subscription Server")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error", Unmarshaller: errors.NewDeviceLocationResult},
    })
    
    var result models.DeviceLocationSuccessResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.DeviceLocationSuccessResult](decoder)
    return models.NewApiResponse(result, resp), err
}
