/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "net/http"
    "verizon/errors"
    "verizon/models"
)

// ConfigurationFilesApi represents a controller struct.
type ConfigurationFilesApi struct {
    baseApi
}

// NewConfigurationFilesApi creates a new instance of ConfigurationFilesApi.
// It takes a baseController as a parameter and returns a pointer to the ConfigurationFilesApi.
func NewConfigurationFilesApi(baseApi baseApi) *ConfigurationFilesApi {
    configurationFilesApi := ConfigurationFilesApi{baseApi: baseApi}
    return &configurationFilesApi
}

// GetListOfFiles takes context, acc, distributionType as parameters and
// returns an models.ApiResponse with models.RetrievesAvailableFilesResponseList data and
// an error if there was an issue with the request or response.
// You can retrieve a list of configuration or supplementary of files for an account.
func (c *ConfigurationFilesApi) GetListOfFiles(
    ctx context.Context,
    acc string,
    distributionType string) (
    models.ApiResponse[models.RetrievesAvailableFilesResponseList],
    error) {
    req := c.prepareRequest(ctx, "GET", "/files/%v")
    req.AppendTemplateParams(acc)
    req.BaseUrl("Software Management V2")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV2Result},
    })
    req.QueryParam("distributionType", distributionType)
    
    var result models.RetrievesAvailableFilesResponseList
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.RetrievesAvailableFilesResponseList](decoder)
    return models.NewApiResponse(result, resp), err
}

// UploadConfigFile takes context, acc, fileupload, fileVersion, make, model, localTargetPath as parameters and
// returns an models.ApiResponse with models.UploadConfigurationFilesResponse data and
// an error if there was an issue with the request or response.
// Uploads a configuration/supplementary file for an account. ThingSpace generates a fileName after the upload and is returned in the response.
func (c *ConfigurationFilesApi) UploadConfigFile(
    ctx context.Context,
    acc string,
    fileupload *models.FileWrapper,
    fileVersion *string,
    make *string,
    model *string,
    localTargetPath *string) (
    models.ApiResponse[models.UploadConfigurationFilesResponse],
    error) {
    req := c.prepareRequest(ctx, "POST", "/files/%v")
    req.AppendTemplateParams(acc)
    req.BaseUrl("Software Management V2")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Unexpected error.", Unmarshaller: errors.NewFotaV2Result},
    })
    formFields := []https.FormParam{}
    if fileupload != nil {
        fileuploadParam := https.FormParam{Key: "fileupload", Value: *fileupload, Headers: http.Header{}}
        formFields = append(formFields, fileuploadParam)
    }
    if fileVersion != nil {
        fileVersionParam := https.FormParam{Key: "fileVersion", Value: *fileVersion, Headers: http.Header{}}
        formFields = append(formFields, fileVersionParam)
    }
    if make != nil {
        makeParam := https.FormParam{Key: "make", Value: *make, Headers: http.Header{}}
        formFields = append(formFields, makeParam)
    }
    if model != nil {
        modelParam := https.FormParam{Key: "model", Value: *model, Headers: http.Header{}}
        formFields = append(formFields, modelParam)
    }
    if localTargetPath != nil {
        localTargetPathParam := https.FormParam{Key: "localTargetPath", Value: *localTargetPath, Headers: http.Header{}}
        formFields = append(formFields, localTargetPathParam)
    }
    req.FormData(formFields)
    
    var result models.UploadConfigurationFilesResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.UploadConfigurationFilesResponse](decoder)
    return models.NewApiResponse(result, resp), err
}
