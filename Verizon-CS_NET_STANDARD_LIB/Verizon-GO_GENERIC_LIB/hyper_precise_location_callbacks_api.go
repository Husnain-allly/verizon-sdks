/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "net/http"
    "verizon/errors"
    "verizon/models"
)

// HyperPreciseLocationCallbacksApi represents a controller struct.
type HyperPreciseLocationCallbacksApi struct {
    baseApi
}

// NewHyperPreciseLocationCallbacksApi creates a new instance of HyperPreciseLocationCallbacksApi.
// It takes a baseController as a parameter and returns a pointer to the HyperPreciseLocationCallbacksApi.
func NewHyperPreciseLocationCallbacksApi(baseApi baseApi) *HyperPreciseLocationCallbacksApi {
    hyperPreciseLocationCallbacksApi := HyperPreciseLocationCallbacksApi{baseApi: baseApi}
    return &hyperPreciseLocationCallbacksApi
}

// ListRegisteredCallbacks takes context, accountNumber as parameters and
// returns an models.ApiResponse with []models.CallbackCreated data and
// an error if there was an issue with the request or response.
// Find registered callback listener for account by account number.
func (h *HyperPreciseLocationCallbacksApi) ListRegisteredCallbacks(
    ctx context.Context,
    accountNumber string) (
    models.ApiResponse[[]models.CallbackCreated],
    error) {
    req := h.prepareRequest(ctx, "GET", "/callbacks")
    
    req.BaseUrl("Hyper Precise Location")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad request.", Unmarshaller: errors.NewHyperPreciseLocationResult},
        "401": {Message: "Unauthorized request. Access token is missing or invalid.", Unmarshaller: errors.NewHyperPreciseLocationResult},
        "403": {Message: "Forbidden request.", Unmarshaller: errors.NewHyperPreciseLocationResult},
        "404": {Message: "Bad request. Not found.", Unmarshaller: errors.NewHyperPreciseLocationResult},
        "409": {Message: "Bad request. Conflict state.", Unmarshaller: errors.NewHyperPreciseLocationResult},
        "500": {Message: "Internal Server Error.", Unmarshaller: errors.NewHyperPreciseLocationResult},
    })
    req.QueryParam("accountNumber", accountNumber)
    var result []models.CallbackCreated
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[[]models.CallbackCreated](decoder)
    return models.NewApiResponse(result, resp), err
}

// RegisterCallback takes context, accountNumber, body as parameters and
// returns an models.ApiResponse with models.CallbackRegistered data and
// an error if there was an issue with the request or response.
// Registers a URL at which an account receives asynchronous responses and other messages from a ThingSpace Platform callback service. The messages are REST messages. You are responsible for creating and running a listening process on your server at that URL to receive and parse the messages.
func (h *HyperPreciseLocationCallbacksApi) RegisterCallback(
    ctx context.Context,
    accountNumber string,
    body models.HyperPreciseLocationCallback) (
    models.ApiResponse[models.CallbackRegistered],
    error) {
    req := h.prepareRequest(ctx, "POST", "/callbacks")
    
    req.BaseUrl("Hyper Precise Location")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad request.", Unmarshaller: errors.NewHyperPreciseLocationResult},
        "401": {Message: "Unauthorized request. Access token is missing or invalid.", Unmarshaller: errors.NewHyperPreciseLocationResult},
        "403": {Message: "Forbidden request.", Unmarshaller: errors.NewHyperPreciseLocationResult},
        "404": {Message: "Bad request. Not found.", Unmarshaller: errors.NewHyperPreciseLocationResult},
        "409": {Message: "Bad request. Conflict state.", Unmarshaller: errors.NewHyperPreciseLocationResult},
        "500": {Message: "Internal Server Error.", Unmarshaller: errors.NewHyperPreciseLocationResult},
    })
    req.Header("Content-Type", "application/json")
    req.QueryParam("accountNumber", accountNumber)
    req.Json(&body)
    var result models.CallbackRegistered
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.CallbackRegistered](decoder)
    return models.NewApiResponse(result, resp), err
}

// DeregisterCallback takes context, accountNumber, service as parameters and
// returns an *Response and
// an error if there was an issue with the request or response.
// Stops ThingSpace from sending callback messages for the specified account and listener name.
func (h *HyperPreciseLocationCallbacksApi) DeregisterCallback(
    ctx context.Context,
    accountNumber string,
    service string) (
    *http.Response,
    error) {
    req := h.prepareRequest(ctx, "DELETE", "/callbacks")
    
    req.BaseUrl("Hyper Precise Location")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad request.", Unmarshaller: errors.NewHyperPreciseLocationResult},
        "401": {Message: "Unauthorized request. Access token is missing or invalid.", Unmarshaller: errors.NewHyperPreciseLocationResult},
        "403": {Message: "Forbidden request.", Unmarshaller: errors.NewHyperPreciseLocationResult},
        "404": {Message: "Bad request. Not found.", Unmarshaller: errors.NewHyperPreciseLocationResult},
        "409": {Message: "Bad request. Conflict state.", Unmarshaller: errors.NewHyperPreciseLocationResult},
        "500": {Message: "Internal Server Error.", Unmarshaller: errors.NewHyperPreciseLocationResult},
    })
    req.QueryParam("accountNumber", accountNumber)
    req.QueryParam("service", service)
    httpCtx, err := req.Call()
    if err != nil {
        return httpCtx.Response, err
    }
    return httpCtx.Response, err
}
