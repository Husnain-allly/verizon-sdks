/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// DeviceMismatchListResult represents a DeviceMismatchListResult struct.
// Response to list of all 4G devices with an ICCID (SIM) that was not activated with the expected IMEI (hardware) during a specified time frame.
type DeviceMismatchListResult struct {
    // A list of specific devices that you want to check, specified by ICCID or MDN.
    Devices              []MismatchedDevice     `json:"devices,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceMismatchListResult,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceMismatchListResult) String() string {
    return fmt.Sprintf(
    	"DeviceMismatchListResult[Devices=%v, AdditionalProperties=%v]",
    	d.Devices, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceMismatchListResult.
// It customizes the JSON marshaling process for DeviceMismatchListResult objects.
func (d DeviceMismatchListResult) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "devices"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceMismatchListResult object to a map representation for JSON marshaling.
func (d DeviceMismatchListResult) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    if d.Devices != nil {
        structMap["devices"] = d.Devices
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceMismatchListResult.
// It customizes the JSON unmarshaling process for DeviceMismatchListResult objects.
func (d *DeviceMismatchListResult) UnmarshalJSON(input []byte) error {
    var temp tempDeviceMismatchListResult
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "devices")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.Devices = temp.Devices
    return nil
}

// tempDeviceMismatchListResult is a temporary struct used for validating the fields of DeviceMismatchListResult.
type tempDeviceMismatchListResult  struct {
    Devices []MismatchedDevice `json:"devices,omitempty"`
}
