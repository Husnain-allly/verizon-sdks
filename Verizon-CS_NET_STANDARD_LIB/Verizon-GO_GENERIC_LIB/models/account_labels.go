/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// AccountLabels represents a AccountLabels struct.
// Maximum of 2,000 objects are allowed in the array.
type AccountLabels struct {
    Devices              []DeviceList           `json:"devices"`
    Label                []DeviceLabels         `json:"label,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for AccountLabels,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a AccountLabels) String() string {
    return fmt.Sprintf(
    	"AccountLabels[Devices=%v, Label=%v, AdditionalProperties=%v]",
    	a.Devices, a.Label, a.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for AccountLabels.
// It customizes the JSON marshaling process for AccountLabels objects.
func (a AccountLabels) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(a.AdditionalProperties,
        "devices", "label"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(a.toMap())
}

// toMap converts the AccountLabels object to a map representation for JSON marshaling.
func (a AccountLabels) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, a.AdditionalProperties)
    structMap["devices"] = a.Devices
    if a.Label != nil {
        structMap["label"] = a.Label
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for AccountLabels.
// It customizes the JSON unmarshaling process for AccountLabels objects.
func (a *AccountLabels) UnmarshalJSON(input []byte) error {
    var temp tempAccountLabels
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "devices", "label")
    if err != nil {
    	return err
    }
    a.AdditionalProperties = additionalProperties
    
    a.Devices = *temp.Devices
    a.Label = temp.Label
    return nil
}

// tempAccountLabels is a temporary struct used for validating the fields of AccountLabels.
type tempAccountLabels  struct {
    Devices *[]DeviceList  `json:"devices"`
    Label   []DeviceLabels `json:"label,omitempty"`
}

func (a *tempAccountLabels) validate() error {
    var errs []string
    if a.Devices == nil {
        errs = append(errs, "required field `devices` is missing for type `AccountLabels`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
