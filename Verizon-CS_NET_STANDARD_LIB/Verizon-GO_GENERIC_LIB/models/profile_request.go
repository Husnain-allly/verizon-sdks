/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// ProfileRequest represents a ProfileRequest struct.
type ProfileRequest struct {
    AccountName       string                            `json:"accountName"`
    Devices           []DeviceList                      `json:"devices"`
    CarrierName       *string                           `json:"carrierName,omitempty"`
    ServicePlan       *string                           `json:"servicePlan,omitempty"`
    MdnZipCode        *string                           `json:"mdnZipCode,omitempty"`
    PrimaryPlaceOfUse []ProfileRequestPrimaryPlaceOfUse `json:"primaryPlaceOfUse,omitempty"`
    SmsrOid           *string                           `json:"smsrOid,omitempty"`
    // The name of the pool of IP addresses assigned to the profile.
    CarrierIpPoolName *string                           `json:"carrierIpPoolName,omitempty"`
}

// String implements the fmt.Stringer interface for ProfileRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (p ProfileRequest) String() string {
    return fmt.Sprintf(
    	"ProfileRequest[AccountName=%v, Devices=%v, CarrierName=%v, ServicePlan=%v, MdnZipCode=%v, PrimaryPlaceOfUse=%v, SmsrOid=%v, CarrierIpPoolName=%v]",
    	p.AccountName, p.Devices, p.CarrierName, p.ServicePlan, p.MdnZipCode, p.PrimaryPlaceOfUse, p.SmsrOid, p.CarrierIpPoolName)
}

// MarshalJSON implements the json.Marshaler interface for ProfileRequest.
// It customizes the JSON marshaling process for ProfileRequest objects.
func (p ProfileRequest) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(p.toMap())
}

// toMap converts the ProfileRequest object to a map representation for JSON marshaling.
func (p ProfileRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["accountName"] = p.AccountName
    structMap["devices"] = p.Devices
    if p.CarrierName != nil {
        structMap["carrierName"] = p.CarrierName
    }
    if p.ServicePlan != nil {
        structMap["servicePlan"] = p.ServicePlan
    }
    if p.MdnZipCode != nil {
        structMap["mdnZipCode"] = p.MdnZipCode
    }
    if p.PrimaryPlaceOfUse != nil {
        structMap["primaryPlaceOfUse"] = p.PrimaryPlaceOfUse
    }
    if p.SmsrOid != nil {
        structMap["smsrOid"] = p.SmsrOid
    }
    if p.CarrierIpPoolName != nil {
        structMap["carrierIpPoolName"] = p.CarrierIpPoolName
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ProfileRequest.
// It customizes the JSON unmarshaling process for ProfileRequest objects.
func (p *ProfileRequest) UnmarshalJSON(input []byte) error {
    var temp tempProfileRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    p.AccountName = *temp.AccountName
    p.Devices = *temp.Devices
    p.CarrierName = temp.CarrierName
    p.ServicePlan = temp.ServicePlan
    p.MdnZipCode = temp.MdnZipCode
    p.PrimaryPlaceOfUse = temp.PrimaryPlaceOfUse
    p.SmsrOid = temp.SmsrOid
    p.CarrierIpPoolName = temp.CarrierIpPoolName
    return nil
}

// tempProfileRequest is a temporary struct used for validating the fields of ProfileRequest.
type tempProfileRequest  struct {
    AccountName       *string                           `json:"accountName"`
    Devices           *[]DeviceList                     `json:"devices"`
    CarrierName       *string                           `json:"carrierName,omitempty"`
    ServicePlan       *string                           `json:"servicePlan,omitempty"`
    MdnZipCode        *string                           `json:"mdnZipCode,omitempty"`
    PrimaryPlaceOfUse []ProfileRequestPrimaryPlaceOfUse `json:"primaryPlaceOfUse,omitempty"`
    SmsrOid           *string                           `json:"smsrOid,omitempty"`
    CarrierIpPoolName *string                           `json:"carrierIpPoolName,omitempty"`
}

func (p *tempProfileRequest) validate() error {
    var errs []string
    if p.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `ProfileRequest`")
    }
    if p.Devices == nil {
        errs = append(errs, "required field `devices` is missing for type `ProfileRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
