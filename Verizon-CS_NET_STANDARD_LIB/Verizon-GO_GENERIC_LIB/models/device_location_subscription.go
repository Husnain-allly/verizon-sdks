/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// DeviceLocationSubscription represents a DeviceLocationSubscription struct.
type DeviceLocationSubscription struct {
    // Account identifier in "##########-#####".
    AccountName          *string                `json:"accountName,omitempty"`
    // Location service license type.
    LocType              *string                `json:"locType,omitempty"`
    // The number of billable location requests allowed per billing cycle.
    MaxAllowance         *string                `json:"maxAllowance,omitempty"`
    // Location service purchase time.
    PurchaseTime         *string                `json:"purchaseTime,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceLocationSubscription,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceLocationSubscription) String() string {
    return fmt.Sprintf(
    	"DeviceLocationSubscription[AccountName=%v, LocType=%v, MaxAllowance=%v, PurchaseTime=%v, AdditionalProperties=%v]",
    	d.AccountName, d.LocType, d.MaxAllowance, d.PurchaseTime, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceLocationSubscription.
// It customizes the JSON marshaling process for DeviceLocationSubscription objects.
func (d DeviceLocationSubscription) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "accountName", "locType", "maxAllowance", "purchaseTime"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceLocationSubscription object to a map representation for JSON marshaling.
func (d DeviceLocationSubscription) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    if d.AccountName != nil {
        structMap["accountName"] = d.AccountName
    }
    if d.LocType != nil {
        structMap["locType"] = d.LocType
    }
    if d.MaxAllowance != nil {
        structMap["maxAllowance"] = d.MaxAllowance
    }
    if d.PurchaseTime != nil {
        structMap["purchaseTime"] = d.PurchaseTime
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceLocationSubscription.
// It customizes the JSON unmarshaling process for DeviceLocationSubscription objects.
func (d *DeviceLocationSubscription) UnmarshalJSON(input []byte) error {
    var temp tempDeviceLocationSubscription
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "locType", "maxAllowance", "purchaseTime")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.AccountName = temp.AccountName
    d.LocType = temp.LocType
    d.MaxAllowance = temp.MaxAllowance
    d.PurchaseTime = temp.PurchaseTime
    return nil
}

// tempDeviceLocationSubscription is a temporary struct used for validating the fields of DeviceLocationSubscription.
type tempDeviceLocationSubscription  struct {
    AccountName  *string `json:"accountName,omitempty"`
    LocType      *string `json:"locType,omitempty"`
    MaxAllowance *string `json:"maxAllowance,omitempty"`
    PurchaseTime *string `json:"purchaseTime,omitempty"`
}
