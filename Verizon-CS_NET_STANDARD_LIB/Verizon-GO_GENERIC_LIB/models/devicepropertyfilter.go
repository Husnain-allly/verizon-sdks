/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// Devicepropertyfilter represents a Devicepropertyfilter struct.
type Devicepropertyfilter struct {
    MSelection           *Devicepropertyselection `json:"$selection,omitempty"`
    MQuerytotalcount     *bool                    `json:"$querytotalcount,omitempty"`
    AdditionalProperties map[string]interface{}   `json:"_"`
}

// String implements the fmt.Stringer interface for Devicepropertyfilter,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d Devicepropertyfilter) String() string {
    return fmt.Sprintf(
    	"Devicepropertyfilter[MSelection=%v, MQuerytotalcount=%v, AdditionalProperties=%v]",
    	d.MSelection, d.MQuerytotalcount, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for Devicepropertyfilter.
// It customizes the JSON marshaling process for Devicepropertyfilter objects.
func (d Devicepropertyfilter) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "$selection", "$querytotalcount"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the Devicepropertyfilter object to a map representation for JSON marshaling.
func (d Devicepropertyfilter) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    if d.MSelection != nil {
        structMap["$selection"] = d.MSelection.toMap()
    }
    if d.MQuerytotalcount != nil {
        structMap["$querytotalcount"] = d.MQuerytotalcount
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Devicepropertyfilter.
// It customizes the JSON unmarshaling process for Devicepropertyfilter objects.
func (d *Devicepropertyfilter) UnmarshalJSON(input []byte) error {
    var temp tempDevicepropertyfilter
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "$selection", "$querytotalcount")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.MSelection = temp.MSelection
    d.MQuerytotalcount = temp.MQuerytotalcount
    return nil
}

// tempDevicepropertyfilter is a temporary struct used for validating the fields of Devicepropertyfilter.
type tempDevicepropertyfilter  struct {
    MSelection       *Devicepropertyselection `json:"$selection,omitempty"`
    MQuerytotalcount *bool                    `json:"$querytotalcount,omitempty"`
}
