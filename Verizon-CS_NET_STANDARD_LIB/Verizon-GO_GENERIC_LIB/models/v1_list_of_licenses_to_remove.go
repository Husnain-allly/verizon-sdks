/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
    "log"
    "time"
)

// V1ListOfLicensesToRemove represents a V1ListOfLicensesToRemove struct.
// List of cancellation candidate devices.
type V1ListOfLicensesToRemove struct {
    // The total number of devices on the list.
    Count                *int                   `json:"count,omitempty"`
    // True if there are more devices to retrieve.
    HasMoreData          *bool                  `json:"hasMoreData,omitempty"`
    // The date and time that the list was last updated.
    UpdateTime           *time.Time             `json:"updateTime,omitempty"`
    // The IMEIs of the devices.
    DeviceList           []string               `json:"deviceList,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for V1ListOfLicensesToRemove,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (v V1ListOfLicensesToRemove) String() string {
    return fmt.Sprintf(
    	"V1ListOfLicensesToRemove[Count=%v, HasMoreData=%v, UpdateTime=%v, DeviceList=%v, AdditionalProperties=%v]",
    	v.Count, v.HasMoreData, v.UpdateTime, v.DeviceList, v.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for V1ListOfLicensesToRemove.
// It customizes the JSON marshaling process for V1ListOfLicensesToRemove objects.
func (v V1ListOfLicensesToRemove) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(v.AdditionalProperties,
        "count", "hasMoreData", "updateTime", "deviceList"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(v.toMap())
}

// toMap converts the V1ListOfLicensesToRemove object to a map representation for JSON marshaling.
func (v V1ListOfLicensesToRemove) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, v.AdditionalProperties)
    if v.Count != nil {
        structMap["count"] = v.Count
    }
    if v.HasMoreData != nil {
        structMap["hasMoreData"] = v.HasMoreData
    }
    if v.UpdateTime != nil {
        structMap["updateTime"] = v.UpdateTime.Format(time.RFC3339)
    }
    if v.DeviceList != nil {
        structMap["deviceList"] = v.DeviceList
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for V1ListOfLicensesToRemove.
// It customizes the JSON unmarshaling process for V1ListOfLicensesToRemove objects.
func (v *V1ListOfLicensesToRemove) UnmarshalJSON(input []byte) error {
    var temp tempV1ListOfLicensesToRemove
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "count", "hasMoreData", "updateTime", "deviceList")
    if err != nil {
    	return err
    }
    v.AdditionalProperties = additionalProperties
    
    v.Count = temp.Count
    v.HasMoreData = temp.HasMoreData
    if temp.UpdateTime != nil {
        UpdateTimeVal, err := time.Parse(time.RFC3339, *temp.UpdateTime)
        if err != nil {
            log.Fatalf("Cannot Parse updateTime as % s format.", time.RFC3339)
        }
        v.UpdateTime = &UpdateTimeVal
    }
    v.DeviceList = temp.DeviceList
    return nil
}

// tempV1ListOfLicensesToRemove is a temporary struct used for validating the fields of V1ListOfLicensesToRemove.
type tempV1ListOfLicensesToRemove  struct {
    Count       *int     `json:"count,omitempty"`
    HasMoreData *bool    `json:"hasMoreData,omitempty"`
    UpdateTime  *string  `json:"updateTime,omitempty"`
    DeviceList  []string `json:"deviceList,omitempty"`
}
