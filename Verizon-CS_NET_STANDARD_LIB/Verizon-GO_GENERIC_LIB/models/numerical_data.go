/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// NumericalData represents a NumericalData struct.
// Describes value and unit of time.
type NumericalData struct {
    // Numerical value.
    Value                *int                   `json:"value,omitempty"`
    // Unit of time.
    Unit                 *NumericalDataUnit     `json:"unit,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for NumericalData,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (n NumericalData) String() string {
    return fmt.Sprintf(
    	"NumericalData[Value=%v, Unit=%v, AdditionalProperties=%v]",
    	n.Value, n.Unit, n.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for NumericalData.
// It customizes the JSON marshaling process for NumericalData objects.
func (n NumericalData) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(n.AdditionalProperties,
        "value", "unit"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(n.toMap())
}

// toMap converts the NumericalData object to a map representation for JSON marshaling.
func (n NumericalData) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, n.AdditionalProperties)
    if n.Value != nil {
        structMap["value"] = n.Value
    }
    if n.Unit != nil {
        structMap["unit"] = n.Unit
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for NumericalData.
// It customizes the JSON unmarshaling process for NumericalData objects.
func (n *NumericalData) UnmarshalJSON(input []byte) error {
    var temp tempNumericalData
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "value", "unit")
    if err != nil {
    	return err
    }
    n.AdditionalProperties = additionalProperties
    
    n.Value = temp.Value
    n.Unit = temp.Unit
    return nil
}

// tempNumericalData is a temporary struct used for validating the fields of NumericalData.
type tempNumericalData  struct {
    Value *int               `json:"value,omitempty"`
    Unit  *NumericalDataUnit `json:"unit,omitempty"`
}
