/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// TriggerType1 represents a TriggerType1 struct.
// Trigger details.
type TriggerType1 struct {
    // Trigger name.
    Name                  *string                `json:"name,omitempty"`
    // This is the value to use in the request body to detect anomalous behaivior. The values in this table will only be relevant when this parameter is set to this value.
    TriggerCategory       *string                `json:"triggerCategory,omitempty"`
    // Account name.
    AccountName           *string                `json:"accountName,omitempty"`
    // The details of the UsageAnomaly trigger.
    AnomalyTriggerRequest *AnomalyTriggerRequest `json:"anomalyTriggerRequest,omitempty"`
    // The notification details of the trigger.
    Notification          *TriggerNotification   `json:"notification,omitempty"`
}

// String implements the fmt.Stringer interface for TriggerType1,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (t TriggerType1) String() string {
    return fmt.Sprintf(
    	"TriggerType1[Name=%v, TriggerCategory=%v, AccountName=%v, AnomalyTriggerRequest=%v, Notification=%v]",
    	t.Name, t.TriggerCategory, t.AccountName, t.AnomalyTriggerRequest, t.Notification)
}

// MarshalJSON implements the json.Marshaler interface for TriggerType1.
// It customizes the JSON marshaling process for TriggerType1 objects.
func (t TriggerType1) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(t.toMap())
}

// toMap converts the TriggerType1 object to a map representation for JSON marshaling.
func (t TriggerType1) toMap() map[string]any {
    structMap := make(map[string]any)
    if t.Name != nil {
        structMap["name"] = t.Name
    }
    if t.TriggerCategory != nil {
        structMap["triggerCategory"] = t.TriggerCategory
    }
    if t.AccountName != nil {
        structMap["accountName"] = t.AccountName
    }
    if t.AnomalyTriggerRequest != nil {
        structMap["anomalyTriggerRequest"] = t.AnomalyTriggerRequest.toMap()
    }
    if t.Notification != nil {
        structMap["notification"] = t.Notification.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for TriggerType1.
// It customizes the JSON unmarshaling process for TriggerType1 objects.
func (t *TriggerType1) UnmarshalJSON(input []byte) error {
    var temp tempTriggerType1
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    
    t.Name = temp.Name
    t.TriggerCategory = temp.TriggerCategory
    t.AccountName = temp.AccountName
    t.AnomalyTriggerRequest = temp.AnomalyTriggerRequest
    t.Notification = temp.Notification
    return nil
}

// tempTriggerType1 is a temporary struct used for validating the fields of TriggerType1.
type tempTriggerType1  struct {
    Name                  *string                `json:"name,omitempty"`
    TriggerCategory       *string                `json:"triggerCategory,omitempty"`
    AccountName           *string                `json:"accountName,omitempty"`
    AnomalyTriggerRequest *AnomalyTriggerRequest `json:"anomalyTriggerRequest,omitempty"`
    Notification          *TriggerNotification   `json:"notification,omitempty"`
}
