/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// Geofence represents a Geofence struct.
type Geofence struct {
    Type        string      `json:"type"`
    Coordinates [][]float64 `json:"coordinates"`
}

// String implements the fmt.Stringer interface for Geofence,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (g Geofence) String() string {
    return fmt.Sprintf(
    	"Geofence[Type=%v, Coordinates=%v]",
    	g.Type, g.Coordinates)
}

// MarshalJSON implements the json.Marshaler interface for Geofence.
// It customizes the JSON marshaling process for Geofence objects.
func (g Geofence) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(g.toMap())
}

// toMap converts the Geofence object to a map representation for JSON marshaling.
func (g Geofence) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["type"] = g.Type
    structMap["coordinates"] = g.Coordinates
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Geofence.
// It customizes the JSON unmarshaling process for Geofence objects.
func (g *Geofence) UnmarshalJSON(input []byte) error {
    var temp tempGeofence
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    g.Type = *temp.Type
    g.Coordinates = *temp.Coordinates
    return nil
}

// tempGeofence is a temporary struct used for validating the fields of Geofence.
type tempGeofence  struct {
    Type        *string      `json:"type"`
    Coordinates *[][]float64 `json:"coordinates"`
}

func (g *tempGeofence) validate() error {
    var errs []string
    if g.Type == nil {
        errs = append(errs, "required field `type` is missing for type `Geofence`")
    }
    if g.Coordinates == nil {
        errs = append(errs, "required field `coordinates` is missing for type `Geofence`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
