/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// ResponseToUsageQuery represents a ResponseToUsageQuery struct.
type ResponseToUsageQuery struct {
    Hasmoredata          *bool                  `json:"hasmoredata,omitempty"`
    DeviceId             *ReadySimDeviceId      `json:"deviceId,omitempty"`
    UsageHistory         []UsageHistory         `json:"usageHistory,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for ResponseToUsageQuery,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (r ResponseToUsageQuery) String() string {
    return fmt.Sprintf(
    	"ResponseToUsageQuery[Hasmoredata=%v, DeviceId=%v, UsageHistory=%v, AdditionalProperties=%v]",
    	r.Hasmoredata, r.DeviceId, r.UsageHistory, r.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for ResponseToUsageQuery.
// It customizes the JSON marshaling process for ResponseToUsageQuery objects.
func (r ResponseToUsageQuery) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(r.AdditionalProperties,
        "hasmoredata", "deviceId", "usageHistory"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(r.toMap())
}

// toMap converts the ResponseToUsageQuery object to a map representation for JSON marshaling.
func (r ResponseToUsageQuery) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, r.AdditionalProperties)
    if r.Hasmoredata != nil {
        structMap["hasmoredata"] = r.Hasmoredata
    }
    if r.DeviceId != nil {
        structMap["deviceId"] = r.DeviceId.toMap()
    }
    if r.UsageHistory != nil {
        structMap["usageHistory"] = r.UsageHistory
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ResponseToUsageQuery.
// It customizes the JSON unmarshaling process for ResponseToUsageQuery objects.
func (r *ResponseToUsageQuery) UnmarshalJSON(input []byte) error {
    var temp tempResponseToUsageQuery
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "hasmoredata", "deviceId", "usageHistory")
    if err != nil {
    	return err
    }
    r.AdditionalProperties = additionalProperties
    
    r.Hasmoredata = temp.Hasmoredata
    r.DeviceId = temp.DeviceId
    r.UsageHistory = temp.UsageHistory
    return nil
}

// tempResponseToUsageQuery is a temporary struct used for validating the fields of ResponseToUsageQuery.
type tempResponseToUsageQuery  struct {
    Hasmoredata  *bool             `json:"hasmoredata,omitempty"`
    DeviceId     *ReadySimDeviceId `json:"deviceId,omitempty"`
    UsageHistory []UsageHistory    `json:"usageHistory,omitempty"`
}
