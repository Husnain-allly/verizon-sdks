/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
    "log"
    "time"
)

// GioSmsMessage represents a GioSmsMessage struct.
type GioSmsMessage struct {
    DeviceIds            []GioDeviceId          `json:"deviceIds,omitempty"`
    Message              *string                `json:"message,omitempty"`
    Timestamp            *time.Time             `json:"timestamp,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for GioSmsMessage,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (g GioSmsMessage) String() string {
    return fmt.Sprintf(
    	"GioSmsMessage[DeviceIds=%v, Message=%v, Timestamp=%v, AdditionalProperties=%v]",
    	g.DeviceIds, g.Message, g.Timestamp, g.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for GioSmsMessage.
// It customizes the JSON marshaling process for GioSmsMessage objects.
func (g GioSmsMessage) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(g.AdditionalProperties,
        "deviceIds", "message", "timestamp"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(g.toMap())
}

// toMap converts the GioSmsMessage object to a map representation for JSON marshaling.
func (g GioSmsMessage) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, g.AdditionalProperties)
    if g.DeviceIds != nil {
        structMap["deviceIds"] = g.DeviceIds
    }
    if g.Message != nil {
        structMap["message"] = g.Message
    }
    if g.Timestamp != nil {
        structMap["timestamp"] = g.Timestamp.Format(time.RFC3339)
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for GioSmsMessage.
// It customizes the JSON unmarshaling process for GioSmsMessage objects.
func (g *GioSmsMessage) UnmarshalJSON(input []byte) error {
    var temp tempGioSmsMessage
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceIds", "message", "timestamp")
    if err != nil {
    	return err
    }
    g.AdditionalProperties = additionalProperties
    
    g.DeviceIds = temp.DeviceIds
    g.Message = temp.Message
    if temp.Timestamp != nil {
        TimestampVal, err := time.Parse(time.RFC3339, *temp.Timestamp)
        if err != nil {
            log.Fatalf("Cannot Parse timestamp as % s format.", time.RFC3339)
        }
        g.Timestamp = &TimestampVal
    }
    return nil
}

// tempGioSmsMessage is a temporary struct used for validating the fields of GioSmsMessage.
type tempGioSmsMessage  struct {
    DeviceIds []GioDeviceId `json:"deviceIds,omitempty"`
    Message   *string       `json:"message,omitempty"`
    Timestamp *string       `json:"timestamp,omitempty"`
}
