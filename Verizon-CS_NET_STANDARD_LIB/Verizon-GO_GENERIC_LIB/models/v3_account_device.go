/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// V3AccountDevice represents a V3AccountDevice struct.
// Device information.
type V3AccountDevice struct {
    // Device identifier.
    DeviceId             string                 `json:"deviceId"`
    // MDN.
    Mdn                  string                 `json:"mdn"`
    // Device model.
    Model                string                 `json:"model"`
    // Device make.
    Make                 string                 `json:"make"`
    // Device firmware version.
    Firmware             string                 `json:"firmware"`
    // Value=true if the device software can be upgraded over the air using the Software Management Services API.
    FotaEligible         bool                   `json:"fotaEligible"`
    // Device status.
    Status               string                 `json:"status"`
    // License assigned device.
    LicenseAssigned      bool                   `json:"licenseAssigned"`
    // Firmware protocol. Valid values include: LWM2M, OMADM, HTTP or NONE.
    Protocol             string                 `json:"protocol"`
    // List of sofware.
    SoftwareList         []V3SoftwareInfo       `json:"softwareList"`
    // List of files.
    FileList             []V3SoftwareInfo       `json:"fileList,omitempty"`
    // The date and time of when the device is created.
    CreateTime           *string                `json:"createTime,omitempty"`
    // The date and time of when the device firmware or software is updated.
    UpgradeTime          *string                `json:"upgradeTime,omitempty"`
    // The date and time of when the device is updated.
    UpdateTime           *string                `json:"updateTime,omitempty"`
    // The date and time of when the device is refreshed.
    RefreshTime          *string                `json:"refreshTime,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for V3AccountDevice,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (v V3AccountDevice) String() string {
    return fmt.Sprintf(
    	"V3AccountDevice[DeviceId=%v, Mdn=%v, Model=%v, Make=%v, Firmware=%v, FotaEligible=%v, Status=%v, LicenseAssigned=%v, Protocol=%v, SoftwareList=%v, FileList=%v, CreateTime=%v, UpgradeTime=%v, UpdateTime=%v, RefreshTime=%v, AdditionalProperties=%v]",
    	v.DeviceId, v.Mdn, v.Model, v.Make, v.Firmware, v.FotaEligible, v.Status, v.LicenseAssigned, v.Protocol, v.SoftwareList, v.FileList, v.CreateTime, v.UpgradeTime, v.UpdateTime, v.RefreshTime, v.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for V3AccountDevice.
// It customizes the JSON marshaling process for V3AccountDevice objects.
func (v V3AccountDevice) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(v.AdditionalProperties,
        "deviceId", "mdn", "model", "make", "firmware", "fotaEligible", "status", "licenseAssigned", "protocol", "softwareList", "fileList", "createTime", "upgradeTime", "updateTime", "refreshTime"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(v.toMap())
}

// toMap converts the V3AccountDevice object to a map representation for JSON marshaling.
func (v V3AccountDevice) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, v.AdditionalProperties)
    structMap["deviceId"] = v.DeviceId
    structMap["mdn"] = v.Mdn
    structMap["model"] = v.Model
    structMap["make"] = v.Make
    structMap["firmware"] = v.Firmware
    structMap["fotaEligible"] = v.FotaEligible
    structMap["status"] = v.Status
    structMap["licenseAssigned"] = v.LicenseAssigned
    structMap["protocol"] = v.Protocol
    structMap["softwareList"] = v.SoftwareList
    if v.FileList != nil {
        structMap["fileList"] = v.FileList
    }
    if v.CreateTime != nil {
        structMap["createTime"] = v.CreateTime
    }
    if v.UpgradeTime != nil {
        structMap["upgradeTime"] = v.UpgradeTime
    }
    if v.UpdateTime != nil {
        structMap["updateTime"] = v.UpdateTime
    }
    if v.RefreshTime != nil {
        structMap["refreshTime"] = v.RefreshTime
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for V3AccountDevice.
// It customizes the JSON unmarshaling process for V3AccountDevice objects.
func (v *V3AccountDevice) UnmarshalJSON(input []byte) error {
    var temp tempV3AccountDevice
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceId", "mdn", "model", "make", "firmware", "fotaEligible", "status", "licenseAssigned", "protocol", "softwareList", "fileList", "createTime", "upgradeTime", "updateTime", "refreshTime")
    if err != nil {
    	return err
    }
    v.AdditionalProperties = additionalProperties
    
    v.DeviceId = *temp.DeviceId
    v.Mdn = *temp.Mdn
    v.Model = *temp.Model
    v.Make = *temp.Make
    v.Firmware = *temp.Firmware
    v.FotaEligible = *temp.FotaEligible
    v.Status = *temp.Status
    v.LicenseAssigned = *temp.LicenseAssigned
    v.Protocol = *temp.Protocol
    v.SoftwareList = *temp.SoftwareList
    v.FileList = temp.FileList
    v.CreateTime = temp.CreateTime
    v.UpgradeTime = temp.UpgradeTime
    v.UpdateTime = temp.UpdateTime
    v.RefreshTime = temp.RefreshTime
    return nil
}

// tempV3AccountDevice is a temporary struct used for validating the fields of V3AccountDevice.
type tempV3AccountDevice  struct {
    DeviceId        *string           `json:"deviceId"`
    Mdn             *string           `json:"mdn"`
    Model           *string           `json:"model"`
    Make            *string           `json:"make"`
    Firmware        *string           `json:"firmware"`
    FotaEligible    *bool             `json:"fotaEligible"`
    Status          *string           `json:"status"`
    LicenseAssigned *bool             `json:"licenseAssigned"`
    Protocol        *string           `json:"protocol"`
    SoftwareList    *[]V3SoftwareInfo `json:"softwareList"`
    FileList        []V3SoftwareInfo  `json:"fileList,omitempty"`
    CreateTime      *string           `json:"createTime,omitempty"`
    UpgradeTime     *string           `json:"upgradeTime,omitempty"`
    UpdateTime      *string           `json:"updateTime,omitempty"`
    RefreshTime     *string           `json:"refreshTime,omitempty"`
}

func (v *tempV3AccountDevice) validate() error {
    var errs []string
    if v.DeviceId == nil {
        errs = append(errs, "required field `deviceId` is missing for type `V3AccountDevice`")
    }
    if v.Mdn == nil {
        errs = append(errs, "required field `mdn` is missing for type `V3AccountDevice`")
    }
    if v.Model == nil {
        errs = append(errs, "required field `model` is missing for type `V3AccountDevice`")
    }
    if v.Make == nil {
        errs = append(errs, "required field `make` is missing for type `V3AccountDevice`")
    }
    if v.Firmware == nil {
        errs = append(errs, "required field `firmware` is missing for type `V3AccountDevice`")
    }
    if v.FotaEligible == nil {
        errs = append(errs, "required field `fotaEligible` is missing for type `V3AccountDevice`")
    }
    if v.Status == nil {
        errs = append(errs, "required field `status` is missing for type `V3AccountDevice`")
    }
    if v.LicenseAssigned == nil {
        errs = append(errs, "required field `licenseAssigned` is missing for type `V3AccountDevice`")
    }
    if v.Protocol == nil {
        errs = append(errs, "required field `protocol` is missing for type `V3AccountDevice`")
    }
    if v.SoftwareList == nil {
        errs = append(errs, "required field `softwareList` is missing for type `V3AccountDevice`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
