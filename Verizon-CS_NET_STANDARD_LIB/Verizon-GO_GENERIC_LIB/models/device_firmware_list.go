/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// DeviceFirmwareList represents a DeviceFirmwareList struct.
// Device Firmware Information.
type DeviceFirmwareList struct {
    // Account name.
    AccountName              string                  `json:"accountName"`
    // List of device & firmware.
    DeviceFirmwarVersionList []DeviceFirmwareVersion `json:"deviceFirmwarVersionList,omitempty"`
    AdditionalProperties     map[string]interface{}  `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceFirmwareList,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceFirmwareList) String() string {
    return fmt.Sprintf(
    	"DeviceFirmwareList[AccountName=%v, DeviceFirmwarVersionList=%v, AdditionalProperties=%v]",
    	d.AccountName, d.DeviceFirmwarVersionList, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceFirmwareList.
// It customizes the JSON marshaling process for DeviceFirmwareList objects.
func (d DeviceFirmwareList) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "accountName", "deviceFirmwarVersionList"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceFirmwareList object to a map representation for JSON marshaling.
func (d DeviceFirmwareList) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    structMap["accountName"] = d.AccountName
    if d.DeviceFirmwarVersionList != nil {
        structMap["deviceFirmwarVersionList"] = d.DeviceFirmwarVersionList
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceFirmwareList.
// It customizes the JSON unmarshaling process for DeviceFirmwareList objects.
func (d *DeviceFirmwareList) UnmarshalJSON(input []byte) error {
    var temp tempDeviceFirmwareList
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "deviceFirmwarVersionList")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.AccountName = *temp.AccountName
    d.DeviceFirmwarVersionList = temp.DeviceFirmwarVersionList
    return nil
}

// tempDeviceFirmwareList is a temporary struct used for validating the fields of DeviceFirmwareList.
type tempDeviceFirmwareList  struct {
    AccountName              *string                 `json:"accountName"`
    DeviceFirmwarVersionList []DeviceFirmwareVersion `json:"deviceFirmwarVersionList,omitempty"`
}

func (d *tempDeviceFirmwareList) validate() error {
    var errs []string
    if d.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `DeviceFirmwareList`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
