/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// DailyUsage represents a DailyUsage struct.
type DailyUsage struct {
    DeviceId             *GioDeviceId           `json:"deviceId,omitempty"`
    // The start date of the time period queried as "$datetime"
    Earliest             *string                `json:"earliest,omitempty"`
    // The end date of the time period being queried as "$datetime"
    Latest               *string                `json:"latest,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DailyUsage,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DailyUsage) String() string {
    return fmt.Sprintf(
    	"DailyUsage[DeviceId=%v, Earliest=%v, Latest=%v, AdditionalProperties=%v]",
    	d.DeviceId, d.Earliest, d.Latest, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DailyUsage.
// It customizes the JSON marshaling process for DailyUsage objects.
func (d DailyUsage) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "deviceId", "earliest", "latest"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DailyUsage object to a map representation for JSON marshaling.
func (d DailyUsage) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    if d.DeviceId != nil {
        structMap["deviceId"] = d.DeviceId.toMap()
    }
    if d.Earliest != nil {
        structMap["earliest"] = d.Earliest
    }
    if d.Latest != nil {
        structMap["latest"] = d.Latest
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DailyUsage.
// It customizes the JSON unmarshaling process for DailyUsage objects.
func (d *DailyUsage) UnmarshalJSON(input []byte) error {
    var temp tempDailyUsage
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceId", "earliest", "latest")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.DeviceId = temp.DeviceId
    d.Earliest = temp.Earliest
    d.Latest = temp.Latest
    return nil
}

// tempDailyUsage is a temporary struct used for validating the fields of DailyUsage.
type tempDailyUsage  struct {
    DeviceId *GioDeviceId `json:"deviceId,omitempty"`
    Earliest *string      `json:"earliest,omitempty"`
    Latest   *string      `json:"latest,omitempty"`
}
