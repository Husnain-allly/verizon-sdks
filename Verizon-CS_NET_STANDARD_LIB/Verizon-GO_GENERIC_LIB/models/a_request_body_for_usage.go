/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
    "log"
    "time"
)

// ARequestBodyForUsage represents a ARequestBodyForUsage struct.
type ARequestBodyForUsage struct {
    DeviceId             []ReadySimDeviceId     `json:"deviceId,omitempty"`
    StartTime            *time.Time             `json:"startTime,omitempty"`
    EndTime              *time.Time             `json:"endTime,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for ARequestBodyForUsage,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a ARequestBodyForUsage) String() string {
    return fmt.Sprintf(
    	"ARequestBodyForUsage[DeviceId=%v, StartTime=%v, EndTime=%v, AdditionalProperties=%v]",
    	a.DeviceId, a.StartTime, a.EndTime, a.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for ARequestBodyForUsage.
// It customizes the JSON marshaling process for ARequestBodyForUsage objects.
func (a ARequestBodyForUsage) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(a.AdditionalProperties,
        "deviceId", "startTime", "endTime"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(a.toMap())
}

// toMap converts the ARequestBodyForUsage object to a map representation for JSON marshaling.
func (a ARequestBodyForUsage) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, a.AdditionalProperties)
    if a.DeviceId != nil {
        structMap["deviceId"] = a.DeviceId
    }
    if a.StartTime != nil {
        structMap["startTime"] = a.StartTime.Format(time.RFC3339)
    }
    if a.EndTime != nil {
        structMap["endTime"] = a.EndTime.Format(time.RFC3339)
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ARequestBodyForUsage.
// It customizes the JSON unmarshaling process for ARequestBodyForUsage objects.
func (a *ARequestBodyForUsage) UnmarshalJSON(input []byte) error {
    var temp tempARequestBodyForUsage
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceId", "startTime", "endTime")
    if err != nil {
    	return err
    }
    a.AdditionalProperties = additionalProperties
    
    a.DeviceId = temp.DeviceId
    if temp.StartTime != nil {
        StartTimeVal, err := time.Parse(time.RFC3339, *temp.StartTime)
        if err != nil {
            log.Fatalf("Cannot Parse startTime as % s format.", time.RFC3339)
        }
        a.StartTime = &StartTimeVal
    }
    if temp.EndTime != nil {
        EndTimeVal, err := time.Parse(time.RFC3339, *temp.EndTime)
        if err != nil {
            log.Fatalf("Cannot Parse endTime as % s format.", time.RFC3339)
        }
        a.EndTime = &EndTimeVal
    }
    return nil
}

// tempARequestBodyForUsage is a temporary struct used for validating the fields of ARequestBodyForUsage.
type tempARequestBodyForUsage  struct {
    DeviceId  []ReadySimDeviceId `json:"deviceId,omitempty"`
    StartTime *string            `json:"startTime,omitempty"`
    EndTime   *string            `json:"endTime,omitempty"`
}
