/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// ConsentTransactionId represents a ConsentTransactionId struct.
// The transaction ID of the request that you want to cancel, from the POST /devicelocations synchronus response.
type ConsentTransactionId struct {
    TransactionId        *string                `json:"transactionId,omitempty"`
    Status               *string                `json:"status,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for ConsentTransactionId,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c ConsentTransactionId) String() string {
    return fmt.Sprintf(
    	"ConsentTransactionId[TransactionId=%v, Status=%v, AdditionalProperties=%v]",
    	c.TransactionId, c.Status, c.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for ConsentTransactionId.
// It customizes the JSON marshaling process for ConsentTransactionId objects.
func (c ConsentTransactionId) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(c.AdditionalProperties,
        "transactionId", "status"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(c.toMap())
}

// toMap converts the ConsentTransactionId object to a map representation for JSON marshaling.
func (c ConsentTransactionId) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, c.AdditionalProperties)
    if c.TransactionId != nil {
        structMap["transactionId"] = c.TransactionId
    }
    if c.Status != nil {
        structMap["status"] = c.Status
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ConsentTransactionId.
// It customizes the JSON unmarshaling process for ConsentTransactionId objects.
func (c *ConsentTransactionId) UnmarshalJSON(input []byte) error {
    var temp tempConsentTransactionId
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "transactionId", "status")
    if err != nil {
    	return err
    }
    c.AdditionalProperties = additionalProperties
    
    c.TransactionId = temp.TransactionId
    c.Status = temp.Status
    return nil
}

// tempConsentTransactionId is a temporary struct used for validating the fields of ConsentTransactionId.
type tempConsentTransactionId  struct {
    TransactionId *string `json:"transactionId,omitempty"`
    Status        *string `json:"status,omitempty"`
}
