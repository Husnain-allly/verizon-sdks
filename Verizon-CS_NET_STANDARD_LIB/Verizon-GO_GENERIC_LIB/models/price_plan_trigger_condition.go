/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
)

// PricePlanTriggerCondition represents a PricePlanTriggerCondition struct.
// This is a container for any-of cases.
type PricePlanTriggerCondition struct {
    value                 any
    isConditionType       bool
    isConditionObjectCall bool
}

// String implements the fmt.Stringer interface for PricePlanTriggerCondition,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (p PricePlanTriggerCondition) String() string {
    return fmt.Sprintf("%v", p.value)
}

// MarshalJSON implements the json.Marshaler interface for PricePlanTriggerCondition.
// It customizes the JSON marshaling process for PricePlanTriggerCondition objects.
func (p PricePlanTriggerCondition) MarshalJSON() (
    []byte,
    error) {
    if p.value == nil {
        return nil, errors.New("No underlying type is set. Please use any of the `models.PricePlanTriggerConditionContainer.From*` functions to initialize the PricePlanTriggerCondition object.")
    }
    return json.Marshal(p.toMap())
}

// toMap converts the PricePlanTriggerCondition object to a map representation for JSON marshaling.
func (p *PricePlanTriggerCondition) toMap() any {
    switch obj := p.value.(type) {
    case *ConditionType:
        return *obj
    case *ConditionObjectCall:
        return obj.toMap()
    }
    return nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for PricePlanTriggerCondition.
// It customizes the JSON unmarshaling process for PricePlanTriggerCondition objects.
func (p *PricePlanTriggerCondition) UnmarshalJSON(input []byte) error {
    result, err := UnmarshallAnyOf(input,
        NewTypeHolder(new(ConditionType), false, &p.isConditionType),
        NewTypeHolder(&ConditionObjectCall{}, false, &p.isConditionObjectCall),
    )
    
    p.value = result
    return err
}

func (p *PricePlanTriggerCondition) AsConditionType() (
    *ConditionType,
    bool) {
    if !p.isConditionType {
        return nil, false
    }
    return p.value.(*ConditionType), true
}

func (p *PricePlanTriggerCondition) AsConditionObjectCall() (
    *ConditionObjectCall,
    bool) {
    if !p.isConditionObjectCall {
        return nil, false
    }
    return p.value.(*ConditionObjectCall), true
}

// internalPricePlanTriggerCondition represents a pricePlanTriggerCondition struct.
// This is a container for any-of cases.
type internalPricePlanTriggerCondition struct {}

var PricePlanTriggerConditionContainer internalPricePlanTriggerCondition

// The internalPricePlanTriggerCondition instance, wrapping the provided ConditionType value.
func (p *internalPricePlanTriggerCondition) FromConditionType(val ConditionType) PricePlanTriggerCondition {
    return PricePlanTriggerCondition{value: &val}
}

// The internalPricePlanTriggerCondition instance, wrapping the provided ConditionObjectCall value.
func (p *internalPricePlanTriggerCondition) FromConditionObjectCall(val ConditionObjectCall) PricePlanTriggerCondition {
    return PricePlanTriggerCondition{value: &val}
}
