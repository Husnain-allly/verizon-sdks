/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// IErrorMessage represents a IErrorMessage struct.
// Error message.
type IErrorMessage struct {
    // Error Code.
    ErrorCode            *ErrorResponseCode     `json:"errorCode,omitempty"`
    // Details and additional information about the error code.
    ErrorMessage         *string                `json:"errorMessage,omitempty"`
    // HTML error code and description.
    HttpStatusCode       *HttpStatusCode        `json:"httpStatusCode,omitempty"`
    // More detail and information about the HTML error code.
    DetailErrorMessage   *string                `json:"detailErrorMessage,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for IErrorMessage,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (i IErrorMessage) String() string {
    return fmt.Sprintf(
    	"IErrorMessage[ErrorCode=%v, ErrorMessage=%v, HttpStatusCode=%v, DetailErrorMessage=%v, AdditionalProperties=%v]",
    	i.ErrorCode, i.ErrorMessage, i.HttpStatusCode, i.DetailErrorMessage, i.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for IErrorMessage.
// It customizes the JSON marshaling process for IErrorMessage objects.
func (i IErrorMessage) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(i.AdditionalProperties,
        "errorCode", "errorMessage", "httpStatusCode", "detailErrorMessage"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(i.toMap())
}

// toMap converts the IErrorMessage object to a map representation for JSON marshaling.
func (i IErrorMessage) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, i.AdditionalProperties)
    if i.ErrorCode != nil {
        structMap["errorCode"] = i.ErrorCode
    }
    if i.ErrorMessage != nil {
        structMap["errorMessage"] = i.ErrorMessage
    }
    if i.HttpStatusCode != nil {
        structMap["httpStatusCode"] = i.HttpStatusCode
    }
    if i.DetailErrorMessage != nil {
        structMap["detailErrorMessage"] = i.DetailErrorMessage
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for IErrorMessage.
// It customizes the JSON unmarshaling process for IErrorMessage objects.
func (i *IErrorMessage) UnmarshalJSON(input []byte) error {
    var temp tempIErrorMessage
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "errorCode", "errorMessage", "httpStatusCode", "detailErrorMessage")
    if err != nil {
    	return err
    }
    i.AdditionalProperties = additionalProperties
    
    i.ErrorCode = temp.ErrorCode
    i.ErrorMessage = temp.ErrorMessage
    i.HttpStatusCode = temp.HttpStatusCode
    i.DetailErrorMessage = temp.DetailErrorMessage
    return nil
}

// tempIErrorMessage is a temporary struct used for validating the fields of IErrorMessage.
type tempIErrorMessage  struct {
    ErrorCode          *ErrorResponseCode `json:"errorCode,omitempty"`
    ErrorMessage       *string            `json:"errorMessage,omitempty"`
    HttpStatusCode     *HttpStatusCode    `json:"httpStatusCode,omitempty"`
    DetailErrorMessage *string            `json:"detailErrorMessage,omitempty"`
}
