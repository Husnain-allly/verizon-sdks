/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
)

// EsimGlobalDeviceListDeviceFilter represents a EsimGlobalDeviceListDeviceFilter struct.
// This is Array of a container for any-of cases.
type EsimGlobalDeviceListDeviceFilter struct {
    value          any
    isEsimDeviceId bool
    isDeviceId2    bool
}

// String implements the fmt.Stringer interface for EsimGlobalDeviceListDeviceFilter,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (e EsimGlobalDeviceListDeviceFilter) String() string {
    return fmt.Sprintf("%v", e.value)
}

// MarshalJSON implements the json.Marshaler interface for EsimGlobalDeviceListDeviceFilter.
// It customizes the JSON marshaling process for EsimGlobalDeviceListDeviceFilter objects.
func (e EsimGlobalDeviceListDeviceFilter) MarshalJSON() (
    []byte,
    error) {
    if e.value == nil {
        return nil, errors.New("No underlying type is set. Please use any of the `models.EsimGlobalDeviceListDeviceFilterContainer.From*` functions to initialize the EsimGlobalDeviceListDeviceFilter object.")
    }
    return json.Marshal(e.toMap())
}

// toMap converts the EsimGlobalDeviceListDeviceFilter object to a map representation for JSON marshaling.
func (e *EsimGlobalDeviceListDeviceFilter) toMap() any {
    switch obj := e.value.(type) {
    case *EsimDeviceId:
        return obj.toMap()
    case *DeviceId2:
        return obj.toMap()
    }
    return nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for EsimGlobalDeviceListDeviceFilter.
// It customizes the JSON unmarshaling process for EsimGlobalDeviceListDeviceFilter objects.
func (e *EsimGlobalDeviceListDeviceFilter) UnmarshalJSON(input []byte) error {
    result, err := UnmarshallAnyOf(input,
        NewTypeHolder(&EsimDeviceId{}, false, &e.isEsimDeviceId),
        NewTypeHolder(&DeviceId2{}, false, &e.isDeviceId2),
    )
    
    e.value = result
    return err
}

func (e *EsimGlobalDeviceListDeviceFilter) AsEsimDeviceId() (
    *EsimDeviceId,
    bool) {
    if !e.isEsimDeviceId {
        return nil, false
    }
    return e.value.(*EsimDeviceId), true
}

func (e *EsimGlobalDeviceListDeviceFilter) AsDeviceId2() (
    *DeviceId2,
    bool) {
    if !e.isDeviceId2 {
        return nil, false
    }
    return e.value.(*DeviceId2), true
}

// internalEsimGlobalDeviceListDeviceFilter represents a esimGlobalDeviceListDeviceFilter struct.
// This is Array of a container for any-of cases.
type internalEsimGlobalDeviceListDeviceFilter struct {}

var EsimGlobalDeviceListDeviceFilterContainer internalEsimGlobalDeviceListDeviceFilter

// The internalEsimGlobalDeviceListDeviceFilter instance, wrapping the provided EsimDeviceId value.
func (e *internalEsimGlobalDeviceListDeviceFilter) FromEsimDeviceId(val EsimDeviceId) EsimGlobalDeviceListDeviceFilter {
    return EsimGlobalDeviceListDeviceFilter{value: &val}
}

// The internalEsimGlobalDeviceListDeviceFilter instance, wrapping the provided DeviceId2 value.
func (e *internalEsimGlobalDeviceListDeviceFilter) FromDeviceId2(val DeviceId2) EsimGlobalDeviceListDeviceFilter {
    return EsimGlobalDeviceListDeviceFilter{value: &val}
}
