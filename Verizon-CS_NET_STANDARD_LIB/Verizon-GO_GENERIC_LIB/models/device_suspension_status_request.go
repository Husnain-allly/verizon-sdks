/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// DeviceSuspensionStatusRequest represents a DeviceSuspensionStatusRequest struct.
// Request to return service suspension information about one or more devices.
type DeviceSuspensionStatusRequest struct {
    // The devices that you want to include in the request, specified by device identifier. You only need to provide one identifier per device.
    DeviceIds            []DeviceId                  `json:"deviceIds,omitempty"`
    // Filter for devices without account.
    Filter               *DeviceFilterWithoutAccount `json:"filter,omitempty"`
    // The name of a billing account.
    AccountName          *string                     `json:"accountName,omitempty"`
    AdditionalProperties map[string]interface{}      `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceSuspensionStatusRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceSuspensionStatusRequest) String() string {
    return fmt.Sprintf(
    	"DeviceSuspensionStatusRequest[DeviceIds=%v, Filter=%v, AccountName=%v, AdditionalProperties=%v]",
    	d.DeviceIds, d.Filter, d.AccountName, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceSuspensionStatusRequest.
// It customizes the JSON marshaling process for DeviceSuspensionStatusRequest objects.
func (d DeviceSuspensionStatusRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "deviceIds", "filter", "accountName"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceSuspensionStatusRequest object to a map representation for JSON marshaling.
func (d DeviceSuspensionStatusRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    if d.DeviceIds != nil {
        structMap["deviceIds"] = d.DeviceIds
    }
    if d.Filter != nil {
        structMap["filter"] = d.Filter.toMap()
    }
    if d.AccountName != nil {
        structMap["accountName"] = d.AccountName
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceSuspensionStatusRequest.
// It customizes the JSON unmarshaling process for DeviceSuspensionStatusRequest objects.
func (d *DeviceSuspensionStatusRequest) UnmarshalJSON(input []byte) error {
    var temp tempDeviceSuspensionStatusRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceIds", "filter", "accountName")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.DeviceIds = temp.DeviceIds
    d.Filter = temp.Filter
    d.AccountName = temp.AccountName
    return nil
}

// tempDeviceSuspensionStatusRequest is a temporary struct used for validating the fields of DeviceSuspensionStatusRequest.
type tempDeviceSuspensionStatusRequest  struct {
    DeviceIds   []DeviceId                  `json:"deviceIds,omitempty"`
    Filter      *DeviceFilterWithoutAccount `json:"filter,omitempty"`
    AccountName *string                     `json:"accountName,omitempty"`
}
