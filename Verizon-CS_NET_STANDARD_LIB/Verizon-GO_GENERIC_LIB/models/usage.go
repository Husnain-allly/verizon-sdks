/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// Usage represents a Usage struct.
// The daily network data usage of a single device during a specified time period.
type Usage struct {
    // The number of bytes that the device sent or received on the report date.
    BytesUsed            *int64                 `json:"bytesUsed,omitempty"`
    // The number of mobile-originated and mobile-terminated SMS messages on the report date.
    ExtendedAttributes   []CustomFields         `json:"extendedAttributes,omitempty"`
    // The list of service plans associated with the device/account.
    ServicePlan          *string                `json:"servicePlan,omitempty"`
    // The number of SMS messages that were sent or received on the report date.
    SmsUsed              *int                   `json:"smsUsed,omitempty"`
    // The source of the information for the reported usage.
    Source               *string                `json:"source,omitempty"`
    // The date of the recorded usage.
    Timestamp            *string                `json:"timestamp,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for Usage,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (u Usage) String() string {
    return fmt.Sprintf(
    	"Usage[BytesUsed=%v, ExtendedAttributes=%v, ServicePlan=%v, SmsUsed=%v, Source=%v, Timestamp=%v, AdditionalProperties=%v]",
    	u.BytesUsed, u.ExtendedAttributes, u.ServicePlan, u.SmsUsed, u.Source, u.Timestamp, u.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for Usage.
// It customizes the JSON marshaling process for Usage objects.
func (u Usage) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(u.AdditionalProperties,
        "bytesUsed", "extendedAttributes", "servicePlan", "smsUsed", "source", "timestamp"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(u.toMap())
}

// toMap converts the Usage object to a map representation for JSON marshaling.
func (u Usage) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, u.AdditionalProperties)
    if u.BytesUsed != nil {
        structMap["bytesUsed"] = u.BytesUsed
    }
    if u.ExtendedAttributes != nil {
        structMap["extendedAttributes"] = u.ExtendedAttributes
    }
    if u.ServicePlan != nil {
        structMap["servicePlan"] = u.ServicePlan
    }
    if u.SmsUsed != nil {
        structMap["smsUsed"] = u.SmsUsed
    }
    if u.Source != nil {
        structMap["source"] = u.Source
    }
    if u.Timestamp != nil {
        structMap["timestamp"] = u.Timestamp
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Usage.
// It customizes the JSON unmarshaling process for Usage objects.
func (u *Usage) UnmarshalJSON(input []byte) error {
    var temp tempUsage
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "bytesUsed", "extendedAttributes", "servicePlan", "smsUsed", "source", "timestamp")
    if err != nil {
    	return err
    }
    u.AdditionalProperties = additionalProperties
    
    u.BytesUsed = temp.BytesUsed
    u.ExtendedAttributes = temp.ExtendedAttributes
    u.ServicePlan = temp.ServicePlan
    u.SmsUsed = temp.SmsUsed
    u.Source = temp.Source
    u.Timestamp = temp.Timestamp
    return nil
}

// tempUsage is a temporary struct used for validating the fields of Usage.
type tempUsage  struct {
    BytesUsed          *int64         `json:"bytesUsed,omitempty"`
    ExtendedAttributes []CustomFields `json:"extendedAttributes,omitempty"`
    ServicePlan        *string        `json:"servicePlan,omitempty"`
    SmsUsed            *int           `json:"smsUsed,omitempty"`
    Source             *string        `json:"source,omitempty"`
    Timestamp          *string        `json:"timestamp,omitempty"`
}
