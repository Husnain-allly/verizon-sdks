/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// V3LicenseDevice represents a V3LicenseDevice struct.
// Device IMEI.
type V3LicenseDevice struct {
    // Device IMEI.
    DeviceId             string                 `json:"deviceId"`
    // License assignment time.
    AssignmentTime       *string                `json:"assignmentTime,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for V3LicenseDevice,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (v V3LicenseDevice) String() string {
    return fmt.Sprintf(
    	"V3LicenseDevice[DeviceId=%v, AssignmentTime=%v, AdditionalProperties=%v]",
    	v.DeviceId, v.AssignmentTime, v.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for V3LicenseDevice.
// It customizes the JSON marshaling process for V3LicenseDevice objects.
func (v V3LicenseDevice) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(v.AdditionalProperties,
        "deviceId", "assignmentTime"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(v.toMap())
}

// toMap converts the V3LicenseDevice object to a map representation for JSON marshaling.
func (v V3LicenseDevice) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, v.AdditionalProperties)
    structMap["deviceId"] = v.DeviceId
    if v.AssignmentTime != nil {
        structMap["assignmentTime"] = v.AssignmentTime
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for V3LicenseDevice.
// It customizes the JSON unmarshaling process for V3LicenseDevice objects.
func (v *V3LicenseDevice) UnmarshalJSON(input []byte) error {
    var temp tempV3LicenseDevice
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceId", "assignmentTime")
    if err != nil {
    	return err
    }
    v.AdditionalProperties = additionalProperties
    
    v.DeviceId = *temp.DeviceId
    v.AssignmentTime = temp.AssignmentTime
    return nil
}

// tempV3LicenseDevice is a temporary struct used for validating the fields of V3LicenseDevice.
type tempV3LicenseDevice  struct {
    DeviceId       *string `json:"deviceId"`
    AssignmentTime *string `json:"assignmentTime,omitempty"`
}

func (v *tempV3LicenseDevice) validate() error {
    var errs []string
    if v.DeviceId == nil {
        errs = append(errs, "required field `deviceId` is missing for type `V3LicenseDevice`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
