/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
)

// ClientType is a string enum.
// The category of application client.
type ClientType string

// MarshalJSON implements the json.Marshaler interface for ClientType.
// It customizes the JSON marshaling process for ClientType objects.
func (e ClientType) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for ClientType")
}

// UnmarshalJSON implements the json.Unmarshaler interface for ClientType.
// It customizes the JSON unmarshaling process for ClientType objects.
func (e *ClientType) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = ClientType(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to ClientType")
    }
    return nil
}

// Checks whether the value is actually a member of ClientType.
func (e ClientType) isValid() bool {
    switch e {
    case ClientType_V2X,
        ClientType_Computervision,
        ClientType_Machinelearning,
        ClientType_Iot,
        ClientType_Gaming,
        ClientType_Ar,
        ClientType_Vr,
        ClientType_Analytics,
        ClientType_Robotics:
        return true
    }
    return false
}

const (
    ClientType_V2X             ClientType = "V2X"
    ClientType_Computervision  ClientType = "ComputerVision"
    ClientType_Machinelearning ClientType = "MachineLearning"
    ClientType_Iot             ClientType = "IoT"
    ClientType_Gaming          ClientType = "Gaming"
    ClientType_Ar              ClientType = "AR"
    ClientType_Vr              ClientType = "VR"
    ClientType_Analytics       ClientType = "Analytics"
    ClientType_Robotics        ClientType = "Robotics"
)

// MecPlatformStatus is a string enum.
// Status of the MEC Platform (default is 'unknown')
type MecPlatformStatus string

// MarshalJSON implements the json.Marshaler interface for MecPlatformStatus.
// It customizes the JSON marshaling process for MecPlatformStatus objects.
func (e MecPlatformStatus) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for MecPlatformStatus")
}

// UnmarshalJSON implements the json.Unmarshaler interface for MecPlatformStatus.
// It customizes the JSON unmarshaling process for MecPlatformStatus objects.
func (e *MecPlatformStatus) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = MecPlatformStatus(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to MecPlatformStatus")
    }
    return nil
}

// Checks whether the value is actually a member of MecPlatformStatus.
func (e MecPlatformStatus) isValid() bool {
    switch e {
    case MecPlatformStatus_Active,
        MecPlatformStatus_Inactive,
        MecPlatformStatus_Unknown:
        return true
    }
    return false
}

const (
    MecPlatformStatus_Active   MecPlatformStatus = "Active"
    MecPlatformStatus_Inactive MecPlatformStatus = "Inactive"
    MecPlatformStatus_Unknown  MecPlatformStatus = "unknown"
)

// UserEquipmentIdentityType is a string enum.
// Type of User Equipment identifier used in `UEIdentity`.
type UserEquipmentIdentityType string

// MarshalJSON implements the json.Marshaler interface for UserEquipmentIdentityType.
// It customizes the JSON marshaling process for UserEquipmentIdentityType objects.
func (e UserEquipmentIdentityType) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for UserEquipmentIdentityType")
}

// UnmarshalJSON implements the json.Unmarshaler interface for UserEquipmentIdentityType.
// It customizes the JSON unmarshaling process for UserEquipmentIdentityType objects.
func (e *UserEquipmentIdentityType) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = UserEquipmentIdentityType(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to UserEquipmentIdentityType")
    }
    return nil
}

// Checks whether the value is actually a member of UserEquipmentIdentityType.
func (e UserEquipmentIdentityType) isValid() bool {
    switch e {
    case UserEquipmentIdentityType_Ipaddress:
        return true
    }
    return false
}

const (
    UserEquipmentIdentityType_Ipaddress UserEquipmentIdentityType = "IPAddress"
)

// RequestStatus is a string enum.
// The current status of the callback response.
type RequestStatus string

// MarshalJSON implements the json.Marshaler interface for RequestStatus.
// It customizes the JSON marshaling process for RequestStatus objects.
func (e RequestStatus) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for RequestStatus")
}

// UnmarshalJSON implements the json.Unmarshaler interface for RequestStatus.
// It customizes the JSON unmarshaling process for RequestStatus objects.
func (e *RequestStatus) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = RequestStatus(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to RequestStatus")
    }
    return nil
}

// Checks whether the value is actually a member of RequestStatus.
func (e RequestStatus) isValid() bool {
    switch e {
    case RequestStatus_Pending,
        RequestStatus_Success,
        RequestStatus_Failure:
        return true
    }
    return false
}

const (
    RequestStatus_Pending RequestStatus = "Pending"
    RequestStatus_Success RequestStatus = "Success"
    RequestStatus_Failure RequestStatus = "Failure"
)

// AccuracyMode is a string enum.
// Accurary, currently only 0-coarse supported.
type AccuracyMode string

// MarshalJSON implements the json.Marshaler interface for AccuracyMode.
// It customizes the JSON marshaling process for AccuracyMode objects.
func (e AccuracyMode) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for AccuracyMode")
}

// UnmarshalJSON implements the json.Unmarshaler interface for AccuracyMode.
// It customizes the JSON unmarshaling process for AccuracyMode objects.
func (e *AccuracyMode) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = AccuracyMode(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to AccuracyMode")
    }
    return nil
}

// Checks whether the value is actually a member of AccuracyMode.
func (e AccuracyMode) isValid() bool {
    switch e {
    case AccuracyMode_Enum0:
        return true
    }
    return false
}

const (
    AccuracyMode_Enum0 AccuracyMode = "0"
)

// CacheMode is a string enum.
// Location cache mode.
type CacheMode string

// MarshalJSON implements the json.Marshaler interface for CacheMode.
// It customizes the JSON marshaling process for CacheMode objects.
func (e CacheMode) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for CacheMode")
}

// UnmarshalJSON implements the json.Unmarshaler interface for CacheMode.
// It customizes the JSON unmarshaling process for CacheMode objects.
func (e *CacheMode) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = CacheMode(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to CacheMode")
    }
    return nil
}

// Checks whether the value is actually a member of CacheMode.
func (e CacheMode) isValid() bool {
    switch e {
    case CacheMode_Enum0,
        CacheMode_Enum1,
        CacheMode_Enum2:
        return true
    }
    return false
}

const (
    CacheMode_Enum0 CacheMode = "0"
    CacheMode_Enum1 CacheMode = "1"
    CacheMode_Enum2 CacheMode = "2"
)

// CallbackServiceName is a string enum.
// The name of the callback service.
type CallbackServiceName string

// MarshalJSON implements the json.Marshaler interface for CallbackServiceName.
// It customizes the JSON marshaling process for CallbackServiceName objects.
func (e CallbackServiceName) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for CallbackServiceName")
}

// UnmarshalJSON implements the json.Unmarshaler interface for CallbackServiceName.
// It customizes the JSON unmarshaling process for CallbackServiceName objects.
func (e *CallbackServiceName) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = CallbackServiceName(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to CallbackServiceName")
    }
    return nil
}

// Checks whether the value is actually a member of CallbackServiceName.
func (e CallbackServiceName) isValid() bool {
    switch e {
    case CallbackServiceName_Location,
        CallbackServiceName_Devicelocation:
        return true
    }
    return false
}

const (
    CallbackServiceName_Location       CallbackServiceName = "Location"
    CallbackServiceName_Devicelocation CallbackServiceName = "DeviceLocation"
)

// ReportStatus is a string enum.
// Status of the report.
type ReportStatus string

// MarshalJSON implements the json.Marshaler interface for ReportStatus.
// It customizes the JSON marshaling process for ReportStatus objects.
func (e ReportStatus) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for ReportStatus")
}

// UnmarshalJSON implements the json.Unmarshaler interface for ReportStatus.
// It customizes the JSON unmarshaling process for ReportStatus objects.
func (e *ReportStatus) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = ReportStatus(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to ReportStatus")
    }
    return nil
}

// Checks whether the value is actually a member of ReportStatus.
func (e ReportStatus) isValid() bool {
    switch e {
    case ReportStatus_Queued,
        ReportStatus_Inprogress,
        ReportStatus_Completed:
        return true
    }
    return false
}

const (
    ReportStatus_Queued     ReportStatus = "QUEUED"
    ReportStatus_Inprogress ReportStatus = "INPROGRESS"
    ReportStatus_Completed  ReportStatus = "COMPLETED"
)

// ServiceName is a string enum.
// Service name
type ServiceName string

// MarshalJSON implements the json.Marshaler interface for ServiceName.
// It customizes the JSON marshaling process for ServiceName objects.
func (e ServiceName) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for ServiceName")
}

// UnmarshalJSON implements the json.Unmarshaler interface for ServiceName.
// It customizes the JSON unmarshaling process for ServiceName objects.
func (e *ServiceName) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = ServiceName(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to ServiceName")
    }
    return nil
}

// Checks whether the value is actually a member of ServiceName.
func (e ServiceName) isValid() bool {
    switch e {
    case ServiceName_Location,
        ServiceName_Fota:
        return true
    }
    return false
}

const (
    ServiceName_Location ServiceName = "Location"
    ServiceName_Fota     ServiceName = "fota"
)

// CallbackService is a string enum.
// Callback type. Must be 'Fota' for Software Management Services API.
type CallbackService string

// MarshalJSON implements the json.Marshaler interface for CallbackService.
// It customizes the JSON marshaling process for CallbackService objects.
func (e CallbackService) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for CallbackService")
}

// UnmarshalJSON implements the json.Unmarshaler interface for CallbackService.
// It customizes the JSON unmarshaling process for CallbackService objects.
func (e *CallbackService) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = CallbackService(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to CallbackService")
    }
    return nil
}

// Checks whether the value is actually a member of CallbackService.
func (e CallbackService) isValid() bool {
    switch e {
    case CallbackService_Fota:
        return true
    }
    return false
}

const (
    CallbackService_Fota CallbackService = "Fota"
)

// UpgradeStatus is a string enum.
// The status of the upgrades that you want to retrieve.
type UpgradeStatus string

// MarshalJSON implements the json.Marshaler interface for UpgradeStatus.
// It customizes the JSON marshaling process for UpgradeStatus objects.
func (e UpgradeStatus) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for UpgradeStatus")
}

// UnmarshalJSON implements the json.Unmarshaler interface for UpgradeStatus.
// It customizes the JSON unmarshaling process for UpgradeStatus objects.
func (e *UpgradeStatus) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = UpgradeStatus(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to UpgradeStatus")
    }
    return nil
}

// Checks whether the value is actually a member of UpgradeStatus.
func (e UpgradeStatus) isValid() bool {
    switch e {
    case UpgradeStatus_Requestpending,
        UpgradeStatus_Queued,
        UpgradeStatus_Requestfailed,
        UpgradeStatus_Inprogress,
        UpgradeStatus_Finished,
        UpgradeStatus_Upgradefailed:
        return true
    }
    return false
}

const (
    UpgradeStatus_Requestpending UpgradeStatus = "RequestPending"
    UpgradeStatus_Queued         UpgradeStatus = "Queued"
    UpgradeStatus_Requestfailed  UpgradeStatus = "RequestFailed"
    UpgradeStatus_Inprogress     UpgradeStatus = "InProgress"
    UpgradeStatus_Finished       UpgradeStatus = "Finished"
    UpgradeStatus_Upgradefailed  UpgradeStatus = "UpgradeFailed"
)

// FirmwareTypeList is a string enum.
// Possible values are `append` or `remove`
type FirmwareTypeList string

// MarshalJSON implements the json.Marshaler interface for FirmwareTypeList.
// It customizes the JSON marshaling process for FirmwareTypeList objects.
func (e FirmwareTypeList) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for FirmwareTypeList")
}

// UnmarshalJSON implements the json.Unmarshaler interface for FirmwareTypeList.
// It customizes the JSON unmarshaling process for FirmwareTypeList objects.
func (e *FirmwareTypeList) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = FirmwareTypeList(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to FirmwareTypeList")
    }
    return nil
}

// Checks whether the value is actually a member of FirmwareTypeList.
func (e FirmwareTypeList) isValid() bool {
    switch e {
    case FirmwareTypeList_Append,
        FirmwareTypeList_Remove:
        return true
    }
    return false
}

const (
    FirmwareTypeList_Append FirmwareTypeList = "append"
    FirmwareTypeList_Remove FirmwareTypeList = "remove"
)

// CampaignStatus is a string enum.
// Current status of the campaign.
type CampaignStatus string

// MarshalJSON implements the json.Marshaler interface for CampaignStatus.
// It customizes the JSON marshaling process for CampaignStatus objects.
func (e CampaignStatus) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for CampaignStatus")
}

// UnmarshalJSON implements the json.Unmarshaler interface for CampaignStatus.
// It customizes the JSON unmarshaling process for CampaignStatus objects.
func (e *CampaignStatus) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = CampaignStatus(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to CampaignStatus")
    }
    return nil
}

// Checks whether the value is actually a member of CampaignStatus.
func (e CampaignStatus) isValid() bool {
    switch e {
    case CampaignStatus_Campaignrequestpending,
        CampaignStatus_Campaignrequestfailed,
        CampaignStatus_Campaignrequestqueued,
        CampaignStatus_Campaigncancelled,
        CampaignStatus_Campaignaborted,
        CampaignStatus_Campaignfailed,
        CampaignStatus_Campaignscheduled,
        CampaignStatus_Campaignended:
        return true
    }
    return false
}

const (
    CampaignStatus_Campaignrequestpending CampaignStatus = "CampaignRequestPending"
    CampaignStatus_Campaignrequestfailed  CampaignStatus = "CampaignRequestFailed"
    CampaignStatus_Campaignrequestqueued  CampaignStatus = "CampaignRequestQueued"
    CampaignStatus_Campaigncancelled      CampaignStatus = "CampaignCancelled"
    CampaignStatus_Campaignaborted        CampaignStatus = "CampaignAborted"
    CampaignStatus_Campaignfailed         CampaignStatus = "CampaignFailed"
    CampaignStatus_Campaignscheduled      CampaignStatus = "CampaignScheduled"
    CampaignStatus_Campaignended          CampaignStatus = "CampaignEnded"
)

// CampaignMetaInfoProtocol is a string enum.
// Firmware protocol. Valid values include: LWM2M, OMD-DM.
type CampaignMetaInfoProtocol string

// MarshalJSON implements the json.Marshaler interface for CampaignMetaInfoProtocol.
// It customizes the JSON marshaling process for CampaignMetaInfoProtocol objects.
func (e CampaignMetaInfoProtocol) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for CampaignMetaInfoProtocol")
}

// UnmarshalJSON implements the json.Unmarshaler interface for CampaignMetaInfoProtocol.
// It customizes the JSON unmarshaling process for CampaignMetaInfoProtocol objects.
func (e *CampaignMetaInfoProtocol) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = CampaignMetaInfoProtocol(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to CampaignMetaInfoProtocol")
    }
    return nil
}

// Checks whether the value is actually a member of CampaignMetaInfoProtocol.
func (e CampaignMetaInfoProtocol) isValid() bool {
    switch e {
    case CampaignMetaInfoProtocol_LwM2M,
        CampaignMetaInfoProtocol_Omddm:
        return true
    }
    return false
}

const (
    CampaignMetaInfoProtocol_LwM2M CampaignMetaInfoProtocol = "LWM2M"
    CampaignMetaInfoProtocol_Omddm CampaignMetaInfoProtocol = "OMD-DM"
)

// DevicesProtocol is a string enum.
// Firmware protocol. Valid values include: LWM2M, OMADM, HTTP.
type DevicesProtocol string

// MarshalJSON implements the json.Marshaler interface for DevicesProtocol.
// It customizes the JSON marshaling process for DevicesProtocol objects.
func (e DevicesProtocol) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for DevicesProtocol")
}

// UnmarshalJSON implements the json.Unmarshaler interface for DevicesProtocol.
// It customizes the JSON unmarshaling process for DevicesProtocol objects.
func (e *DevicesProtocol) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = DevicesProtocol(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to DevicesProtocol")
    }
    return nil
}

// Checks whether the value is actually a member of DevicesProtocol.
func (e DevicesProtocol) isValid() bool {
    switch e {
    case DevicesProtocol_LwM2M,
        DevicesProtocol_Omdadm,
        DevicesProtocol_Http:
        return true
    }
    return false
}

const (
    DevicesProtocol_LwM2M  DevicesProtocol = "LWM2M"
    DevicesProtocol_Omdadm DevicesProtocol = "OMDADM"
    DevicesProtocol_Http   DevicesProtocol = "HTTP"
)

// FirmwareProtocol is a string enum.
// Firmware protocol. Valid values include: LWM2M, OMD-DM, all.
type FirmwareProtocol string

// MarshalJSON implements the json.Marshaler interface for FirmwareProtocol.
// It customizes the JSON marshaling process for FirmwareProtocol objects.
func (e FirmwareProtocol) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for FirmwareProtocol")
}

// UnmarshalJSON implements the json.Unmarshaler interface for FirmwareProtocol.
// It customizes the JSON unmarshaling process for FirmwareProtocol objects.
func (e *FirmwareProtocol) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = FirmwareProtocol(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to FirmwareProtocol")
    }
    return nil
}

// Checks whether the value is actually a member of FirmwareProtocol.
func (e FirmwareProtocol) isValid() bool {
    switch e {
    case FirmwareProtocol_LwM2M,
        FirmwareProtocol_Omddm,
        FirmwareProtocol_All:
        return true
    }
    return false
}

const (
    FirmwareProtocol_LwM2M FirmwareProtocol = "LWM2M"
    FirmwareProtocol_Omddm FirmwareProtocol = "OMD-DM"
    FirmwareProtocol_All   FirmwareProtocol = "all"
)

// AttributeIdentifier is a string enum.
// Attribute identifier.
type AttributeIdentifier string

// MarshalJSON implements the json.Marshaler interface for AttributeIdentifier.
// It customizes the JSON marshaling process for AttributeIdentifier objects.
func (e AttributeIdentifier) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for AttributeIdentifier")
}

// UnmarshalJSON implements the json.Unmarshaler interface for AttributeIdentifier.
// It customizes the JSON unmarshaling process for AttributeIdentifier objects.
func (e *AttributeIdentifier) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = AttributeIdentifier(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to AttributeIdentifier")
    }
    return nil
}

// Checks whether the value is actually a member of AttributeIdentifier.
func (e AttributeIdentifier) isValid() bool {
    switch e {
    case AttributeIdentifier_NetworkBearer,
        AttributeIdentifier_RadioSignalStrength,
        AttributeIdentifier_LinkQuality,
        AttributeIdentifier_CellId,
        AttributeIdentifier_Manufacturer:
        return true
    }
    return false
}

const (
    AttributeIdentifier_NetworkBearer       AttributeIdentifier = "NETWORK_BEARER"
    AttributeIdentifier_RadioSignalStrength AttributeIdentifier = "RADIO_SIGNAL_STRENGTH"
    AttributeIdentifier_LinkQuality         AttributeIdentifier = "LINK_QUALITY"
    AttributeIdentifier_CellId              AttributeIdentifier = "CELL_ID"
    AttributeIdentifier_Manufacturer        AttributeIdentifier = "MANUFACTURER"
)

// NumericalDataUnit is a string enum.
// Unit of time.
type NumericalDataUnit string

// MarshalJSON implements the json.Marshaler interface for NumericalDataUnit.
// It customizes the JSON marshaling process for NumericalDataUnit objects.
func (e NumericalDataUnit) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for NumericalDataUnit")
}

// UnmarshalJSON implements the json.Unmarshaler interface for NumericalDataUnit.
// It customizes the JSON unmarshaling process for NumericalDataUnit objects.
func (e *NumericalDataUnit) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = NumericalDataUnit(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to NumericalDataUnit")
    }
    return nil
}

// Checks whether the value is actually a member of NumericalDataUnit.
func (e NumericalDataUnit) isValid() bool {
    switch e {
    case NumericalDataUnit_Second,
        NumericalDataUnit_Minute,
        NumericalDataUnit_Hour,
        NumericalDataUnit_Day:
        return true
    }
    return false
}

const (
    NumericalDataUnit_Second NumericalDataUnit = "SECOND"
    NumericalDataUnit_Minute NumericalDataUnit = "MINUTE"
    NumericalDataUnit_Hour   NumericalDataUnit = "HOUR"
    NumericalDataUnit_Day    NumericalDataUnit = "DAY"
)

// ErrorResponseCode is a string enum.
// Error Code.
type ErrorResponseCode string

// MarshalJSON implements the json.Marshaler interface for ErrorResponseCode.
// It customizes the JSON marshaling process for ErrorResponseCode objects.
func (e ErrorResponseCode) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for ErrorResponseCode")
}

// UnmarshalJSON implements the json.Unmarshaler interface for ErrorResponseCode.
// It customizes the JSON unmarshaling process for ErrorResponseCode objects.
func (e *ErrorResponseCode) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = ErrorResponseCode(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to ErrorResponseCode")
    }
    return nil
}

// Checks whether the value is actually a member of ErrorResponseCode.
func (e ErrorResponseCode) isValid() bool {
    switch e {
    case ErrorResponseCode_InvalidAccess,
        ErrorResponseCode_InvalidParameter,
        ErrorResponseCode_InternalError,
        ErrorResponseCode_Success:
        return true
    }
    return false
}

const (
    ErrorResponseCode_InvalidAccess    ErrorResponseCode = "INVALID_ACCESS"
    ErrorResponseCode_InvalidParameter ErrorResponseCode = "INVALID_PARAMETER"
    ErrorResponseCode_InternalError    ErrorResponseCode = "INTERNAL_ERROR"
    ErrorResponseCode_Success          ErrorResponseCode = "SUCCESS"
)

// ResponseCode is a string enum.
// Possible response codes.
type ResponseCode string

// MarshalJSON implements the json.Marshaler interface for ResponseCode.
// It customizes the JSON marshaling process for ResponseCode objects.
func (e ResponseCode) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for ResponseCode")
}

// UnmarshalJSON implements the json.Unmarshaler interface for ResponseCode.
// It customizes the JSON unmarshaling process for ResponseCode objects.
func (e *ResponseCode) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = ResponseCode(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to ResponseCode")
    }
    return nil
}

// Checks whether the value is actually a member of ResponseCode.
func (e ResponseCode) isValid() bool {
    switch e {
    case ResponseCode_InvalidAccess,
        ResponseCode_InvalidParameter,
        ResponseCode_InternalError,
        ResponseCode_Success:
        return true
    }
    return false
}

const (
    ResponseCode_InvalidAccess    ResponseCode = "INVALID_ACCESS"
    ResponseCode_InvalidParameter ResponseCode = "INVALID_PARAMETER"
    ResponseCode_InternalError    ResponseCode = "INTERNAL_ERROR"
    ResponseCode_Success          ResponseCode = "SUCCESS"
)

// HttpStatusCode is a string enum.
// HTML error code and description.
type HttpStatusCode string

// MarshalJSON implements the json.Marshaler interface for HttpStatusCode.
// It customizes the JSON marshaling process for HttpStatusCode objects.
func (e HttpStatusCode) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for HttpStatusCode")
}

// UnmarshalJSON implements the json.Unmarshaler interface for HttpStatusCode.
// It customizes the JSON unmarshaling process for HttpStatusCode objects.
func (e *HttpStatusCode) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = HttpStatusCode(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to HttpStatusCode")
    }
    return nil
}

// Checks whether the value is actually a member of HttpStatusCode.
func (e HttpStatusCode) isValid() bool {
    switch e {
    case HttpStatusCode_Enum100Continue,
        HttpStatusCode_Enum101SwitchingProtocols,
        HttpStatusCode_Enum102Processing,
        HttpStatusCode_Enum103Checkpoint,
        HttpStatusCode_Enum200Ok,
        HttpStatusCode_Enum201Created,
        HttpStatusCode_Enum202Accepted,
        HttpStatusCode_Enum203NonAuthoritativeInformation,
        HttpStatusCode_Enum204NoContent,
        HttpStatusCode_Enum205ResetContent,
        HttpStatusCode_Enum206PartialContent,
        HttpStatusCode_Enum207MultiStatus,
        HttpStatusCode_Enum208AlreadyReported,
        HttpStatusCode_Enum226ImUsed,
        HttpStatusCode_Enum300MultipleChoices,
        HttpStatusCode_Enum301MovedPermanently,
        HttpStatusCode_Enum302Found,
        HttpStatusCode_Enum302MovedTemporarily,
        HttpStatusCode_Enum303SeeOther,
        HttpStatusCode_Enum304NotModified,
        HttpStatusCode_Enum305UseProxy,
        HttpStatusCode_Enum307TemporaryRedirect,
        HttpStatusCode_Enum308PermanentRedirect,
        HttpStatusCode_Enum400BadRequest,
        HttpStatusCode_Enum401Unauthorized,
        HttpStatusCode_Enum402PaymentRequired,
        HttpStatusCode_Enum403Forbidden,
        HttpStatusCode_Enum404NotFound,
        HttpStatusCode_Enum405MethodNotAllowed,
        HttpStatusCode_Enum406NotAcceptable,
        HttpStatusCode_Enum407ProxyAuthenticationRequired,
        HttpStatusCode_Enum408RequestTimeout,
        HttpStatusCode_Enum409Conflict,
        HttpStatusCode_Enum410Gone,
        HttpStatusCode_Enum411LengthRequired,
        HttpStatusCode_Enum412PreconditionFailed,
        HttpStatusCode_Enum413PayloadTooLarge,
        HttpStatusCode_Enum413RequestEntityTooLarge,
        HttpStatusCode_Enum414UriTooLong,
        HttpStatusCode_Enum414RequestUriTooLong,
        HttpStatusCode_Enum415UnsupportedMediaType,
        HttpStatusCode_Enum416RequestedRangeNotSatisfiable,
        HttpStatusCode_Enum417ExpectationFailed,
        HttpStatusCode_Enum418IAmATeapot,
        HttpStatusCode_Enum419InsufficientSpaceOnResource,
        HttpStatusCode_Enum420MethodFailure,
        HttpStatusCode_Enum421DestinationLocked,
        HttpStatusCode_Enum422UnprocessableEntity,
        HttpStatusCode_Enum423Locked,
        HttpStatusCode_Enum424FailedDependency,
        HttpStatusCode_Enum425TooEarly,
        HttpStatusCode_Enum426UpgradeRequired,
        HttpStatusCode_Enum428PreconditionRequired,
        HttpStatusCode_Enum429TooManyRequests,
        HttpStatusCode_Enum431RequestHeaderFieldsTooLarge,
        HttpStatusCode_Enum451UnavailableForLegalReasons,
        HttpStatusCode_Enum500InternalServerError,
        HttpStatusCode_Enum501NotImplemented,
        HttpStatusCode_Enum502BadGateway,
        HttpStatusCode_Enum503ServiceUnavailable,
        HttpStatusCode_Enum504GatewayTimeout,
        HttpStatusCode_Enum505HttpVersionNotSupported,
        HttpStatusCode_Enum506VariantAlsoNegotiates,
        HttpStatusCode_Enum507InsufficientStorage,
        HttpStatusCode_Enum508LoopDetected,
        HttpStatusCode_Enum509BandwidthLimitExceeded,
        HttpStatusCode_Enum510NotExtended,
        HttpStatusCode_Enum511NetworkAuthenticationRequired:
        return true
    }
    return false
}

const (
    HttpStatusCode_Enum100Continue                      HttpStatusCode = "100 CONTINUE"
    HttpStatusCode_Enum101SwitchingProtocols            HttpStatusCode = "101 SWITCHING_PROTOCOLS"
    HttpStatusCode_Enum102Processing                    HttpStatusCode = "102 PROCESSING"
    HttpStatusCode_Enum103Checkpoint                    HttpStatusCode = "103 CHECKPOINT"
    HttpStatusCode_Enum200Ok                            HttpStatusCode = "200 OK"
    HttpStatusCode_Enum201Created                       HttpStatusCode = "201 CREATED"
    HttpStatusCode_Enum202Accepted                      HttpStatusCode = "202 ACCEPTED"
    HttpStatusCode_Enum203NonAuthoritativeInformation   HttpStatusCode = "203 NON_AUTHORITATIVE_INFORMATION"
    HttpStatusCode_Enum204NoContent                     HttpStatusCode = "204 NO_CONTENT"
    HttpStatusCode_Enum205ResetContent                  HttpStatusCode = "205 RESET_CONTENT"
    HttpStatusCode_Enum206PartialContent                HttpStatusCode = "206 PARTIAL_CONTENT"
    HttpStatusCode_Enum207MultiStatus                   HttpStatusCode = "207 MULTI_STATUS"
    HttpStatusCode_Enum208AlreadyReported               HttpStatusCode = "208 ALREADY_REPORTED"
    HttpStatusCode_Enum226ImUsed                        HttpStatusCode = "226 IM_USED"
    HttpStatusCode_Enum300MultipleChoices               HttpStatusCode = "300 MULTIPLE_CHOICES"
    HttpStatusCode_Enum301MovedPermanently              HttpStatusCode = "301 MOVED_PERMANENTLY"
    HttpStatusCode_Enum302Found                         HttpStatusCode = "302 FOUND"
    HttpStatusCode_Enum302MovedTemporarily              HttpStatusCode = "302 MOVED_TEMPORARILY"
    HttpStatusCode_Enum303SeeOther                      HttpStatusCode = "303 SEE_OTHER"
    HttpStatusCode_Enum304NotModified                   HttpStatusCode = "304 NOT_MODIFIED"
    HttpStatusCode_Enum305UseProxy                      HttpStatusCode = "305 USE_PROXY"
    HttpStatusCode_Enum307TemporaryRedirect             HttpStatusCode = "307 TEMPORARY_REDIRECT"
    HttpStatusCode_Enum308PermanentRedirect             HttpStatusCode = "308 PERMANENT_REDIRECT"
    HttpStatusCode_Enum400BadRequest                    HttpStatusCode = "400 BAD_REQUEST"
    HttpStatusCode_Enum401Unauthorized                  HttpStatusCode = "401 UNAUTHORIZED"
    HttpStatusCode_Enum402PaymentRequired               HttpStatusCode = "402 PAYMENT_REQUIRED"
    HttpStatusCode_Enum403Forbidden                     HttpStatusCode = "403 FORBIDDEN"
    HttpStatusCode_Enum404NotFound                      HttpStatusCode = "404 NOT_FOUND"
    HttpStatusCode_Enum405MethodNotAllowed              HttpStatusCode = "405 METHOD_NOT_ALLOWED"
    HttpStatusCode_Enum406NotAcceptable                 HttpStatusCode = "406 NOT_ACCEPTABLE"
    HttpStatusCode_Enum407ProxyAuthenticationRequired   HttpStatusCode = "407 PROXY_AUTHENTICATION_REQUIRED"
    HttpStatusCode_Enum408RequestTimeout                HttpStatusCode = "408 REQUEST_TIMEOUT"
    HttpStatusCode_Enum409Conflict                      HttpStatusCode = "409 CONFLICT"
    HttpStatusCode_Enum410Gone                          HttpStatusCode = "410 GONE"
    HttpStatusCode_Enum411LengthRequired                HttpStatusCode = "411 LENGTH_REQUIRED"
    HttpStatusCode_Enum412PreconditionFailed            HttpStatusCode = "412 PRECONDITION_FAILED"
    HttpStatusCode_Enum413PayloadTooLarge               HttpStatusCode = "413 PAYLOAD_TOO_LARGE"
    HttpStatusCode_Enum413RequestEntityTooLarge         HttpStatusCode = "413 REQUEST_ENTITY_TOO_LARGE"
    HttpStatusCode_Enum414UriTooLong                    HttpStatusCode = "414 URI_TOO_LONG"
    HttpStatusCode_Enum414RequestUriTooLong             HttpStatusCode = "414 REQUEST_URI_TOO_LONG"
    HttpStatusCode_Enum415UnsupportedMediaType          HttpStatusCode = "415 UNSUPPORTED_MEDIA_TYPE"
    HttpStatusCode_Enum416RequestedRangeNotSatisfiable  HttpStatusCode = "416 REQUESTED_RANGE_NOT_SATISFIABLE"
    HttpStatusCode_Enum417ExpectationFailed             HttpStatusCode = "417 EXPECTATION_FAILED"
    HttpStatusCode_Enum418IAmATeapot                    HttpStatusCode = "418 I_AM_A_TEAPOT"
    HttpStatusCode_Enum419InsufficientSpaceOnResource   HttpStatusCode = "419 INSUFFICIENT_SPACE_ON_RESOURCE"
    HttpStatusCode_Enum420MethodFailure                 HttpStatusCode = "420 METHOD_FAILURE"
    HttpStatusCode_Enum421DestinationLocked             HttpStatusCode = "421 DESTINATION_LOCKED"
    HttpStatusCode_Enum422UnprocessableEntity           HttpStatusCode = "422 UNPROCESSABLE_ENTITY"
    HttpStatusCode_Enum423Locked                        HttpStatusCode = "423 LOCKED"
    HttpStatusCode_Enum424FailedDependency              HttpStatusCode = "424 FAILED_DEPENDENCY"
    HttpStatusCode_Enum425TooEarly                      HttpStatusCode = "425 TOO_EARLY"
    HttpStatusCode_Enum426UpgradeRequired               HttpStatusCode = "426 UPGRADE_REQUIRED"
    HttpStatusCode_Enum428PreconditionRequired          HttpStatusCode = "428 PRECONDITION_REQUIRED"
    HttpStatusCode_Enum429TooManyRequests               HttpStatusCode = "429 TOO_MANY_REQUESTS"
    HttpStatusCode_Enum431RequestHeaderFieldsTooLarge   HttpStatusCode = "431 REQUEST_HEADER_FIELDS_TOO_LARGE"
    HttpStatusCode_Enum451UnavailableForLegalReasons    HttpStatusCode = "451 UNAVAILABLE_FOR_LEGAL_REASONS"
    HttpStatusCode_Enum500InternalServerError           HttpStatusCode = "500 INTERNAL_SERVER_ERROR"
    HttpStatusCode_Enum501NotImplemented                HttpStatusCode = "501 NOT_IMPLEMENTED"
    HttpStatusCode_Enum502BadGateway                    HttpStatusCode = "502 BAD_GATEWAY"
    HttpStatusCode_Enum503ServiceUnavailable            HttpStatusCode = "503 SERVICE_UNAVAILABLE"
    HttpStatusCode_Enum504GatewayTimeout                HttpStatusCode = "504 GATEWAY_TIMEOUT"
    HttpStatusCode_Enum505HttpVersionNotSupported       HttpStatusCode = "505 HTTP_VERSION_NOT_SUPPORTED"
    HttpStatusCode_Enum506VariantAlsoNegotiates         HttpStatusCode = "506 VARIANT_ALSO_NEGOTIATES"
    HttpStatusCode_Enum507InsufficientStorage           HttpStatusCode = "507 INSUFFICIENT_STORAGE"
    HttpStatusCode_Enum508LoopDetected                  HttpStatusCode = "508 LOOP_DETECTED"
    HttpStatusCode_Enum509BandwidthLimitExceeded        HttpStatusCode = "509 BANDWIDTH_LIMIT_EXCEEDED"
    HttpStatusCode_Enum510NotExtended                   HttpStatusCode = "510 NOT_EXTENDED"
    HttpStatusCode_Enum511NetworkAuthenticationRequired HttpStatusCode = "511 NETWORK_AUTHENTICATION_REQUIRED"
)

// AggregatedReportCallbackStatus is a string enum.
// QUEUED or COMPLETED. Requests for IoT devices with cacheMode=0 (cached) have status=COMPLETED; all other requests are QUEUED.
type AggregatedReportCallbackStatus string

// MarshalJSON implements the json.Marshaler interface for AggregatedReportCallbackStatus.
// It customizes the JSON marshaling process for AggregatedReportCallbackStatus objects.
func (e AggregatedReportCallbackStatus) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for AggregatedReportCallbackStatus")
}

// UnmarshalJSON implements the json.Unmarshaler interface for AggregatedReportCallbackStatus.
// It customizes the JSON unmarshaling process for AggregatedReportCallbackStatus objects.
func (e *AggregatedReportCallbackStatus) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = AggregatedReportCallbackStatus(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to AggregatedReportCallbackStatus")
    }
    return nil
}

// Checks whether the value is actually a member of AggregatedReportCallbackStatus.
func (e AggregatedReportCallbackStatus) isValid() bool {
    switch e {
    case AggregatedReportCallbackStatus_Queued,
        AggregatedReportCallbackStatus_Completed:
        return true
    }
    return false
}

const (
    AggregatedReportCallbackStatus_Queued    AggregatedReportCallbackStatus = "QUEUED"
    AggregatedReportCallbackStatus_Completed AggregatedReportCallbackStatus = "COMPLETED"
)

// CycleType is a string enum.
type CycleType string

// MarshalJSON implements the json.Marshaler interface for CycleType.
// It customizes the JSON marshaling process for CycleType objects.
func (e CycleType) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for CycleType")
}

// UnmarshalJSON implements the json.Unmarshaler interface for CycleType.
// It customizes the JSON unmarshaling process for CycleType objects.
func (e *CycleType) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = CycleType(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to CycleType")
    }
    return nil
}

// Checks whether the value is actually a member of CycleType.
func (e CycleType) isValid() bool {
    switch e {
    case CycleType_Cycleone,
        CycleType_Cycletwo:
        return true
    }
    return false
}

const (
    CycleType_Cycleone CycleType = "cycleone"
    CycleType_Cycletwo CycleType = "cycletwo"
)

// ProfileStatusFilter is a string enum.
// The last status of the device's profile as a filter.
type ProfileStatusFilter string

// MarshalJSON implements the json.Marshaler interface for ProfileStatusFilter.
// It customizes the JSON marshaling process for ProfileStatusFilter objects.
func (e ProfileStatusFilter) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for ProfileStatusFilter")
}

// UnmarshalJSON implements the json.Unmarshaler interface for ProfileStatusFilter.
// It customizes the JSON unmarshaling process for ProfileStatusFilter objects.
func (e *ProfileStatusFilter) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = ProfileStatusFilter(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to ProfileStatusFilter")
    }
    return nil
}

// Checks whether the value is actually a member of ProfileStatusFilter.
func (e ProfileStatusFilter) isValid() bool {
    switch e {
    case ProfileStatusFilter_Enable,
        ProfileStatusFilter_Disable,
        ProfileStatusFilter_DownloadDisable,
        ProfileStatusFilter_DownloadEnable,
        ProfileStatusFilter_NotDownloaded,
        ProfileStatusFilter_Unknown,
        ProfileStatusFilter_Delete:
        return true
    }
    return false
}

const (
    ProfileStatusFilter_Enable          ProfileStatusFilter = "ENABLE"
    ProfileStatusFilter_Disable         ProfileStatusFilter = "DISABLE"
    ProfileStatusFilter_DownloadDisable ProfileStatusFilter = "DOWNLOAD_DISABLE"
    ProfileStatusFilter_DownloadEnable  ProfileStatusFilter = "DOWNLOAD_ENABLE"
    ProfileStatusFilter_NotDownloaded   ProfileStatusFilter = "NOT_DOWNLOADED"
    ProfileStatusFilter_Unknown         ProfileStatusFilter = "UNKNOWN"
    ProfileStatusFilter_Delete          ProfileStatusFilter = "DELETE"
)

// ProvisioningStatusFilter is a string enum.
// The last status of the device as a list filter.
type ProvisioningStatusFilter string

// MarshalJSON implements the json.Marshaler interface for ProvisioningStatusFilter.
// It customizes the JSON marshaling process for ProvisioningStatusFilter objects.
func (e ProvisioningStatusFilter) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for ProvisioningStatusFilter")
}

// UnmarshalJSON implements the json.Unmarshaler interface for ProvisioningStatusFilter.
// It customizes the JSON unmarshaling process for ProvisioningStatusFilter objects.
func (e *ProvisioningStatusFilter) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = ProvisioningStatusFilter(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to ProvisioningStatusFilter")
    }
    return nil
}

// Checks whether the value is actually a member of ProvisioningStatusFilter.
func (e ProvisioningStatusFilter) isValid() bool {
    switch e {
    case ProvisioningStatusFilter_Unknown,
        ProvisioningStatusFilter_Deactivated,
        ProvisioningStatusFilter_Activated,
        ProvisioningStatusFilter_Deactive,
        ProvisioningStatusFilter_Active,
        ProvisioningStatusFilter_Suspend,
        ProvisioningStatusFilter_PendingActivation,
        ProvisioningStatusFilter_PendingDeactivation,
        ProvisioningStatusFilter_PreActive,
        ProvisioningStatusFilter_ActivationReady,
        ProvisioningStatusFilter_Inventory,
        ProvisioningStatusFilter_Purged,
        ProvisioningStatusFilter_Replaced,
        ProvisioningStatusFilter_Retired,
        ProvisioningStatusFilter_TestReady:
        return true
    }
    return false
}

const (
    ProvisioningStatusFilter_Unknown             ProvisioningStatusFilter = "UNKNOWN"
    ProvisioningStatusFilter_Deactivated         ProvisioningStatusFilter = "DEACTIVATED"
    ProvisioningStatusFilter_Activated           ProvisioningStatusFilter = "ACTIVATED"
    ProvisioningStatusFilter_Deactive            ProvisioningStatusFilter = "DEACTIVE"
    ProvisioningStatusFilter_Active              ProvisioningStatusFilter = "ACTIVE"
    ProvisioningStatusFilter_Suspend             ProvisioningStatusFilter = "SUSPEND"
    ProvisioningStatusFilter_PendingActivation   ProvisioningStatusFilter = "PENDING_ACTIVATION"
    ProvisioningStatusFilter_PendingDeactivation ProvisioningStatusFilter = "PENDING_DEACTIVATION"
    ProvisioningStatusFilter_PreActive           ProvisioningStatusFilter = "PRE_ACTIVE"
    ProvisioningStatusFilter_ActivationReady     ProvisioningStatusFilter = "ACTIVATION_READY"
    ProvisioningStatusFilter_Inventory           ProvisioningStatusFilter = "INVENTORY"
    ProvisioningStatusFilter_Purged              ProvisioningStatusFilter = "PURGED"
    ProvisioningStatusFilter_Replaced            ProvisioningStatusFilter = "REPLACED"
    ProvisioningStatusFilter_Retired             ProvisioningStatusFilter = "RETIRED"
    ProvisioningStatusFilter_TestReady           ProvisioningStatusFilter = "TEST_READY"
)

// Active is a string enum.
// A flag to indicate of the trigger is active, true, or not, false
type Active string

// MarshalJSON implements the json.Marshaler interface for Active.
// It customizes the JSON marshaling process for Active objects.
func (e Active) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for Active")
}

// UnmarshalJSON implements the json.Unmarshaler interface for Active.
// It customizes the JSON unmarshaling process for Active objects.
func (e *Active) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = Active(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to Active")
    }
    return nil
}

// Checks whether the value is actually a member of Active.
func (e Active) isValid() bool {
    switch e {
    case Active_True,
        Active_False:
        return true
    }
    return false
}

const (
    Active_True  Active = "true"
    Active_False Active = "false"
)

// ThresholdUnit is a string enum.
// The units of the threshold. This can be KB, Kilobits, MB, Megabits, or GB, Gigabits
type ThresholdUnit string

// MarshalJSON implements the json.Marshaler interface for ThresholdUnit.
// It customizes the JSON marshaling process for ThresholdUnit objects.
func (e ThresholdUnit) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for ThresholdUnit")
}

// UnmarshalJSON implements the json.Unmarshaler interface for ThresholdUnit.
// It customizes the JSON unmarshaling process for ThresholdUnit objects.
func (e *ThresholdUnit) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = ThresholdUnit(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to ThresholdUnit")
    }
    return nil
}

// Checks whether the value is actually a member of ThresholdUnit.
func (e ThresholdUnit) isValid() bool {
    switch e {
    case ThresholdUnit_Kb,
        ThresholdUnit_Mb,
        ThresholdUnit_Gb:
        return true
    }
    return false
}

const (
    ThresholdUnit_Kb ThresholdUnit = "KB"
    ThresholdUnit_Mb ThresholdUnit = "MB"
    ThresholdUnit_Gb ThresholdUnit = "GB"
)

// TriggerCategory is a string enum.
// The type of trigger being created or modified
type TriggerCategory string

// MarshalJSON implements the json.Marshaler interface for TriggerCategory.
// It customizes the JSON marshaling process for TriggerCategory objects.
func (e TriggerCategory) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for TriggerCategory")
}

// UnmarshalJSON implements the json.Unmarshaler interface for TriggerCategory.
// It customizes the JSON unmarshaling process for TriggerCategory objects.
func (e *TriggerCategory) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = TriggerCategory(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to TriggerCategory")
    }
    return nil
}

// Checks whether the value is actually a member of TriggerCategory.
func (e TriggerCategory) isValid() bool {
    switch e {
    case TriggerCategory_Accountusage,
        TriggerCategory_Devicegroupusage,
        TriggerCategory_Priceplandatausage:
        return true
    }
    return false
}

const (
    TriggerCategory_Accountusage       TriggerCategory = "AccountUsage"
    TriggerCategory_Devicegroupusage   TriggerCategory = "DeviceGroupUsage"
    TriggerCategory_Priceplandatausage TriggerCategory = "PricePlanDataUsage"
)

// ConditionType is a string enum.
// The condition type being monitored
type ConditionType string

// MarshalJSON implements the json.Marshaler interface for ConditionType.
// It customizes the JSON marshaling process for ConditionType objects.
func (e ConditionType) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for ConditionType")
}

// UnmarshalJSON implements the json.Unmarshaler interface for ConditionType.
// It customizes the JSON unmarshaling process for ConditionType objects.
func (e *ConditionType) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = ConditionType(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to ConditionType")
    }
    return nil
}

// Checks whether the value is actually a member of ConditionType.
func (e ConditionType) isValid() bool {
    switch e {
    case ConditionType_Individual,
        ConditionType_Aging,
        ConditionType_Usageallowance:
        return true
    }
    return false
}

const (
    ConditionType_Individual     ConditionType = "Individual"
    ConditionType_Aging          ConditionType = "Aging"
    ConditionType_Usageallowance ConditionType = "UsageAllowance"
)

// AccountLevelAction is a string enum.
// The action taken when trigger conditions are met
type AccountLevelAction string

// MarshalJSON implements the json.Marshaler interface for AccountLevelAction.
// It customizes the JSON marshaling process for AccountLevelAction objects.
func (e AccountLevelAction) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for AccountLevelAction")
}

// UnmarshalJSON implements the json.Unmarshaler interface for AccountLevelAction.
// It customizes the JSON unmarshaling process for AccountLevelAction objects.
func (e *AccountLevelAction) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = AccountLevelAction(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to AccountLevelAction")
    }
    return nil
}

// Checks whether the value is actually a member of AccountLevelAction.
func (e AccountLevelAction) isValid() bool {
    switch e {
    case AccountLevelAction_Notify,
        AccountLevelAction_Suspend,
        AccountLevelAction_Changepriceplan:
        return true
    }
    return false
}

const (
    AccountLevelAction_Notify          AccountLevelAction = "notify"
    AccountLevelAction_Suspend         AccountLevelAction = "suspend"
    AccountLevelAction_Changepriceplan AccountLevelAction = "changePricePlan"
)

// Comparitor is a string enum.
// The boolean of the comparison. `gt` is Greater Than, `lt` is Less Than and `eq` is Equal To
type Comparitor string

// MarshalJSON implements the json.Marshaler interface for Comparitor.
// It customizes the JSON marshaling process for Comparitor objects.
func (e Comparitor) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for Comparitor")
}

// UnmarshalJSON implements the json.Unmarshaler interface for Comparitor.
// It customizes the JSON unmarshaling process for Comparitor objects.
func (e *Comparitor) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = Comparitor(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to Comparitor")
    }
    return nil
}

// Checks whether the value is actually a member of Comparitor.
func (e Comparitor) isValid() bool {
    switch e {
    case Comparitor_Gt,
        Comparitor_Lt,
        Comparitor_Eq:
        return true
    }
    return false
}

const (
    Comparitor_Gt Comparitor = "gt"
    Comparitor_Lt Comparitor = "lt"
    Comparitor_Eq Comparitor = "eq"
)

// ConditionAction is a string enum.
// The action taken when trigger conditions are met
type ConditionAction string

// MarshalJSON implements the json.Marshaler interface for ConditionAction.
// It customizes the JSON marshaling process for ConditionAction objects.
func (e ConditionAction) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for ConditionAction")
}

// UnmarshalJSON implements the json.Unmarshaler interface for ConditionAction.
// It customizes the JSON unmarshaling process for ConditionAction objects.
func (e *ConditionAction) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = ConditionAction(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to ConditionAction")
    }
    return nil
}

// Checks whether the value is actually a member of ConditionAction.
func (e ConditionAction) isValid() bool {
    switch e {
    case ConditionAction_Notify,
        ConditionAction_Suspend,
        ConditionAction_Changepriceplan:
        return true
    }
    return false
}

const (
    ConditionAction_Notify          ConditionAction = "notify"
    ConditionAction_Suspend         ConditionAction = "suspend"
    ConditionAction_Changepriceplan ConditionAction = "changePricePlan"
)

// RulesCycleType is a string enum.
// The interval to monitor for the threshold. This can be Daily, Weekly or Monthly
type RulesCycleType string

// MarshalJSON implements the json.Marshaler interface for RulesCycleType.
// It customizes the JSON marshaling process for RulesCycleType objects.
func (e RulesCycleType) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for RulesCycleType")
}

// UnmarshalJSON implements the json.Unmarshaler interface for RulesCycleType.
// It customizes the JSON unmarshaling process for RulesCycleType objects.
func (e *RulesCycleType) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = RulesCycleType(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to RulesCycleType")
    }
    return nil
}

// Checks whether the value is actually a member of RulesCycleType.
func (e RulesCycleType) isValid() bool {
    switch e {
    case RulesCycleType_Daily,
        RulesCycleType_Weekly,
        RulesCycleType_Monthly:
        return true
    }
    return false
}

const (
    RulesCycleType_Daily   RulesCycleType = "Daily"
    RulesCycleType_Weekly  RulesCycleType = "Weekly"
    RulesCycleType_Monthly RulesCycleType = "Monthly"
)

// Mode is a string enum.
// the reporting mode of the tilt sensor
type Mode string

// MarshalJSON implements the json.Marshaler interface for Mode.
// It customizes the JSON marshaling process for Mode objects.
func (e Mode) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for Mode")
}

// UnmarshalJSON implements the json.Unmarshaler interface for Mode.
// It customizes the JSON unmarshaling process for Mode objects.
func (e *Mode) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = Mode(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to Mode")
    }
    return nil
}

// Checks whether the value is actually a member of Mode.
func (e Mode) isValid() bool {
    switch e {
    case Mode_Reportonchange:
        return true
    }
    return false
}

const (
    Mode_Reportonchange Mode = "reportOnChange"
)

// Unit is a string enum.
type Unit string

// MarshalJSON implements the json.Marshaler interface for Unit.
// It customizes the JSON marshaling process for Unit objects.
func (e Unit) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for Unit")
}

// UnmarshalJSON implements the json.Unmarshaler interface for Unit.
// It customizes the JSON unmarshaling process for Unit objects.
func (e *Unit) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = Unit(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to Unit")
    }
    return nil
}

// Checks whether the value is actually a member of Unit.
func (e Unit) isValid() bool {
    switch e {
    case Unit_Minutes,
        Unit_Hours:
        return true
    }
    return false
}

const (
    Unit_Minutes Unit = "minutes"
    Unit_Hours   Unit = "hours"
)

// TriggerCondition is a string enum.
// The following options are supported as Trigger TriggerConditions:
// - enter: The message is triggered when the road user enters the geofence. For polygons and multi-polygons only. In case of multi-polygons the message is triggered when the road user enters any of the polygons.
// - leave: The message is triggered when the road user leaves the geofence. For polygons and multi-polygons only. In case of multi-polygons the message is triggered when the road user leaves any of the polygons.
// - inside: The message is triggered when the road user is inside the geofence. For polygons and multi-polygons only. In case of multi-polygons the message is triggered when the road user is inside any of the polygons.
// - crossing: The message is triggered when the road user crosses the geofence. For lines and multi-lines only. In case of multi-lines the message is triggered when the road user crosses any of the lines.
type TriggerCondition string

// MarshalJSON implements the json.Marshaler interface for TriggerCondition.
// It customizes the JSON marshaling process for TriggerCondition objects.
func (e TriggerCondition) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for TriggerCondition")
}

// UnmarshalJSON implements the json.Unmarshaler interface for TriggerCondition.
// It customizes the JSON unmarshaling process for TriggerCondition objects.
func (e *TriggerCondition) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = TriggerCondition(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to TriggerCondition")
    }
    return nil
}

// Checks whether the value is actually a member of TriggerCondition.
func (e TriggerCondition) isValid() bool {
    switch e {
    case TriggerCondition_Enter,
        TriggerCondition_Leave,
        TriggerCondition_Inside,
        TriggerCondition_Crossing:
        return true
    }
    return false
}

const (
    TriggerCondition_Enter    TriggerCondition = "enter"
    TriggerCondition_Leave    TriggerCondition = "leave"
    TriggerCondition_Inside   TriggerCondition = "inside"
    TriggerCondition_Crossing TriggerCondition = "crossing"
)

// DistributionTypes is a string enum.
// The distribution types:
// - Targeted: Generate targeted messages to the road users that are affected by the zone rules
// - Broadcast: Broadcast messages to regions based on the Geofence.
type DistributionTypes string

// MarshalJSON implements the json.Marshaler interface for DistributionTypes.
// It customizes the JSON marshaling process for DistributionTypes objects.
func (e DistributionTypes) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for DistributionTypes")
}

// UnmarshalJSON implements the json.Unmarshaler interface for DistributionTypes.
// It customizes the JSON unmarshaling process for DistributionTypes objects.
func (e *DistributionTypes) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = DistributionTypes(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to DistributionTypes")
    }
    return nil
}

// Checks whether the value is actually a member of DistributionTypes.
func (e DistributionTypes) isValid() bool {
    switch e {
    case DistributionTypes_Targeted,
        DistributionTypes_Broadcast:
        return true
    }
    return false
}

const (
    DistributionTypes_Targeted  DistributionTypes = "Targeted"
    DistributionTypes_Broadcast DistributionTypes = "Broadcast"
)

// RoadUserTypes is a string enum.
// The road user types:
// - Vehicle: Vehicles with a metal box. Example: Car, Truck, Bus, etc.
// - VulnerableRoadUser: Road users without protective housing. Example: Pedestrian, Cyclist, Motorcyclist, etc.
type RoadUserTypes string

// MarshalJSON implements the json.Marshaler interface for RoadUserTypes.
// It customizes the JSON marshaling process for RoadUserTypes objects.
func (e RoadUserTypes) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for RoadUserTypes")
}

// UnmarshalJSON implements the json.Unmarshaler interface for RoadUserTypes.
// It customizes the JSON unmarshaling process for RoadUserTypes objects.
func (e *RoadUserTypes) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = RoadUserTypes(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to RoadUserTypes")
    }
    return nil
}

// Checks whether the value is actually a member of RoadUserTypes.
func (e RoadUserTypes) isValid() bool {
    switch e {
    case RoadUserTypes_Vulnerableroaduser,
        RoadUserTypes_Vehicle:
        return true
    }
    return false
}

const (
    RoadUserTypes_Vulnerableroaduser RoadUserTypes = "VulnerableRoadUser"
    RoadUserTypes_Vehicle            RoadUserTypes = "Vehicle"
)

// FeatureCollectionType is a string enum.
type FeatureCollectionType string

// MarshalJSON implements the json.Marshaler interface for FeatureCollectionType.
// It customizes the JSON marshaling process for FeatureCollectionType objects.
func (e FeatureCollectionType) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for FeatureCollectionType")
}

// UnmarshalJSON implements the json.Unmarshaler interface for FeatureCollectionType.
// It customizes the JSON unmarshaling process for FeatureCollectionType objects.
func (e *FeatureCollectionType) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = FeatureCollectionType(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to FeatureCollectionType")
    }
    return nil
}

// Checks whether the value is actually a member of FeatureCollectionType.
func (e FeatureCollectionType) isValid() bool {
    switch e {
    case FeatureCollectionType_Featurecollection:
        return true
    }
    return false
}

const (
    FeatureCollectionType_Featurecollection FeatureCollectionType = "FeatureCollection"
)

// FeatureType is a string enum.
type FeatureType string

// MarshalJSON implements the json.Marshaler interface for FeatureType.
// It customizes the JSON marshaling process for FeatureType objects.
func (e FeatureType) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for FeatureType")
}

// UnmarshalJSON implements the json.Unmarshaler interface for FeatureType.
// It customizes the JSON unmarshaling process for FeatureType objects.
func (e *FeatureType) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = FeatureType(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to FeatureType")
    }
    return nil
}

// Checks whether the value is actually a member of FeatureType.
func (e FeatureType) isValid() bool {
    switch e {
    case FeatureType_Feature:
        return true
    }
    return false
}

const (
    FeatureType_Feature FeatureType = "Feature"
)

// FrameType is a string enum.
// The frameType data element provides the type of message to follow in the rest of the message frame structure. The following frame types are supported:
// - unknown
// - advisory
// - roadSignage
// - commercialSignage
type FrameType string

// MarshalJSON implements the json.Marshaler interface for FrameType.
// It customizes the JSON marshaling process for FrameType objects.
func (e FrameType) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for FrameType")
}

// UnmarshalJSON implements the json.Unmarshaler interface for FrameType.
// It customizes the JSON unmarshaling process for FrameType objects.
func (e *FrameType) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = FrameType(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to FrameType")
    }
    return nil
}

// Checks whether the value is actually a member of FrameType.
func (e FrameType) isValid() bool {
    switch e {
    case FrameType_Unknown,
        FrameType_Advisory,
        FrameType_Roadsignage,
        FrameType_Commercialsignage:
        return true
    }
    return false
}

const (
    FrameType_Unknown           FrameType = "unknown"
    FrameType_Advisory          FrameType = "advisory"
    FrameType_Roadsignage       FrameType = "roadSignage"
    FrameType_Commercialsignage FrameType = "commercialSignage"
)

// LineStringType is a string enum.
type LineStringType string

// MarshalJSON implements the json.Marshaler interface for LineStringType.
// It customizes the JSON marshaling process for LineStringType objects.
func (e LineStringType) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for LineStringType")
}

// UnmarshalJSON implements the json.Unmarshaler interface for LineStringType.
// It customizes the JSON unmarshaling process for LineStringType objects.
func (e *LineStringType) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = LineStringType(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to LineStringType")
    }
    return nil
}

// Checks whether the value is actually a member of LineStringType.
func (e LineStringType) isValid() bool {
    switch e {
    case LineStringType_Linestring:
        return true
    }
    return false
}

const (
    LineStringType_Linestring LineStringType = "LineString"
)

// MultiLineStringType is a string enum.
type MultiLineStringType string

// MarshalJSON implements the json.Marshaler interface for MultiLineStringType.
// It customizes the JSON marshaling process for MultiLineStringType objects.
func (e MultiLineStringType) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for MultiLineStringType")
}

// UnmarshalJSON implements the json.Unmarshaler interface for MultiLineStringType.
// It customizes the JSON unmarshaling process for MultiLineStringType objects.
func (e *MultiLineStringType) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = MultiLineStringType(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to MultiLineStringType")
    }
    return nil
}

// Checks whether the value is actually a member of MultiLineStringType.
func (e MultiLineStringType) isValid() bool {
    switch e {
    case MultiLineStringType_Multilinestring:
        return true
    }
    return false
}

const (
    MultiLineStringType_Multilinestring MultiLineStringType = "MultiLineString"
)

// MultiPolygonType is a string enum.
type MultiPolygonType string

// MarshalJSON implements the json.Marshaler interface for MultiPolygonType.
// It customizes the JSON marshaling process for MultiPolygonType objects.
func (e MultiPolygonType) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for MultiPolygonType")
}

// UnmarshalJSON implements the json.Unmarshaler interface for MultiPolygonType.
// It customizes the JSON unmarshaling process for MultiPolygonType objects.
func (e *MultiPolygonType) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = MultiPolygonType(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to MultiPolygonType")
    }
    return nil
}

// Checks whether the value is actually a member of MultiPolygonType.
func (e MultiPolygonType) isValid() bool {
    switch e {
    case MultiPolygonType_Multipolygon:
        return true
    }
    return false
}

const (
    MultiPolygonType_Multipolygon MultiPolygonType = "MultiPolygon"
)

// PolygonType is a string enum.
type PolygonType string

// MarshalJSON implements the json.Marshaler interface for PolygonType.
// It customizes the JSON marshaling process for PolygonType objects.
func (e PolygonType) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for PolygonType")
}

// UnmarshalJSON implements the json.Unmarshaler interface for PolygonType.
// It customizes the JSON unmarshaling process for PolygonType objects.
func (e *PolygonType) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = PolygonType(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to PolygonType")
    }
    return nil
}

// Checks whether the value is actually a member of PolygonType.
func (e PolygonType) isValid() bool {
    switch e {
    case PolygonType_Polygon:
        return true
    }
    return false
}

const (
    PolygonType_Polygon PolygonType = "Polygon"
)

// EtxClientType is a string enum.
// The type of the client that is to be registered. This is one of the major traffic participant groups considered in V2X communication. The system uses this value to define which topics the client will be able to publish and subscribe to.
// Values:
// - **Vehicle** - Vehicle with an enclosure around the passengers. (Subtypes: PassengerCar, Truck, Bus, EmergencyVehicle, SchoolBus, MaintenanceVehicle)
// - **VulnerableRoadUser** - Traffic participants without a protecting enclosure. (Subtypes: Motorcycle, Bicycle, Pedestrian, Scooter)
// - **TrafficLightController** - A Traffic light controller system. (Subtypes: NA)
// - **InfrastructureSensor** - Sensors that are deployed in the infrastructure. (Subtypes: RoadSideUnit, Camera, Lidar, Radar, InductiveLoop, MagneticSensor)
// - **OnboardSensor** - Sensors that are onboard on a vehicle(Subtypes: Camera, Lidar, Radar)
// - **Software** - A software system or application. (Subtypes: Platform, Application, NA)
type EtxClientType string

// MarshalJSON implements the json.Marshaler interface for EtxClientType.
// It customizes the JSON marshaling process for EtxClientType objects.
func (e EtxClientType) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for EtxClientType")
}

// UnmarshalJSON implements the json.Unmarshaler interface for EtxClientType.
// It customizes the JSON unmarshaling process for EtxClientType objects.
func (e *EtxClientType) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = EtxClientType(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to EtxClientType")
    }
    return nil
}

// Checks whether the value is actually a member of EtxClientType.
func (e EtxClientType) isValid() bool {
    switch e {
    case EtxClientType_Vehicle,
        EtxClientType_Vulnerableroaduser,
        EtxClientType_Trafficlightcontroller,
        EtxClientType_Infrastructuresensor,
        EtxClientType_Onboardsensor,
        EtxClientType_Software:
        return true
    }
    return false
}

const (
    EtxClientType_Vehicle                EtxClientType = "Vehicle"
    EtxClientType_Vulnerableroaduser     EtxClientType = "VulnerableRoadUser"
    EtxClientType_Trafficlightcontroller EtxClientType = "TrafficLightController"
    EtxClientType_Infrastructuresensor   EtxClientType = "InfrastructureSensor"
    EtxClientType_Onboardsensor          EtxClientType = "OnboardSensor"
    EtxClientType_Software               EtxClientType = "Software"
)

// ClientSubtype is a string enum.
// The subtype or subgroup of the client type. This further specifies the client type. For example it will specify if the client is a passenger car or a truck. See the ClientType description for the supported Subtypes for each client type.
type ClientSubtype string

// MarshalJSON implements the json.Marshaler interface for ClientSubtype.
// It customizes the JSON marshaling process for ClientSubtype objects.
func (e ClientSubtype) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for ClientSubtype")
}

// UnmarshalJSON implements the json.Unmarshaler interface for ClientSubtype.
// It customizes the JSON unmarshaling process for ClientSubtype objects.
func (e *ClientSubtype) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = ClientSubtype(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to ClientSubtype")
    }
    return nil
}

// Checks whether the value is actually a member of ClientSubtype.
func (e ClientSubtype) isValid() bool {
    switch e {
    case ClientSubtype_Passengercar,
        ClientSubtype_Truck,
        ClientSubtype_Bus,
        ClientSubtype_Emergencyvehicle,
        ClientSubtype_Schoolbus,
        ClientSubtype_Maintenancevehicle,
        ClientSubtype_Pedestrian,
        ClientSubtype_Bicycle,
        ClientSubtype_Scooter,
        ClientSubtype_Motorcycle,
        ClientSubtype_Roadsideunit,
        ClientSubtype_Camera,
        ClientSubtype_Lidar,
        ClientSubtype_Radar,
        ClientSubtype_Inductiveloop,
        ClientSubtype_Magneticsensor,
        ClientSubtype_Platform,
        ClientSubtype_Application,
        ClientSubtype_Na:
        return true
    }
    return false
}

const (
    ClientSubtype_Passengercar       ClientSubtype = "PassengerCar"
    ClientSubtype_Truck              ClientSubtype = "Truck"
    ClientSubtype_Bus                ClientSubtype = "Bus"
    ClientSubtype_Emergencyvehicle   ClientSubtype = "EmergencyVehicle"
    ClientSubtype_Schoolbus          ClientSubtype = "SchoolBus"
    ClientSubtype_Maintenancevehicle ClientSubtype = "MaintenanceVehicle"
    ClientSubtype_Pedestrian         ClientSubtype = "Pedestrian"
    ClientSubtype_Bicycle            ClientSubtype = "Bicycle"
    ClientSubtype_Scooter            ClientSubtype = "Scooter"
    ClientSubtype_Motorcycle         ClientSubtype = "Motorcycle"
    ClientSubtype_Roadsideunit       ClientSubtype = "RoadSideUnit"
    ClientSubtype_Camera             ClientSubtype = "Camera"
    ClientSubtype_Lidar              ClientSubtype = "Lidar"
    ClientSubtype_Radar              ClientSubtype = "Radar"
    ClientSubtype_Inductiveloop      ClientSubtype = "InductiveLoop"
    ClientSubtype_Magneticsensor     ClientSubtype = "MagneticSensor"
    ClientSubtype_Platform           ClientSubtype = "Platform"
    ClientSubtype_Application        ClientSubtype = "Application"
    ClientSubtype_Na                 ClientSubtype = "NA"
)

// EtxNetworkType is a string enum.
// The type of the device's network connection at the time of the request. If the device is on the Verizon cellular network it should use the "VZ" value otherwise the "non-VZ" value.
// Devices on the Verizon network can directly access the ETX Message Exchange on the MEC (Mobile Edge Compute server)
type EtxNetworkType string

// MarshalJSON implements the json.Marshaler interface for EtxNetworkType.
// It customizes the JSON marshaling process for EtxNetworkType objects.
func (e EtxNetworkType) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for EtxNetworkType")
}

// UnmarshalJSON implements the json.Unmarshaler interface for EtxNetworkType.
// It customizes the JSON unmarshaling process for EtxNetworkType objects.
func (e *EtxNetworkType) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = EtxNetworkType(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to EtxNetworkType")
    }
    return nil
}

// Checks whether the value is actually a member of EtxNetworkType.
func (e EtxNetworkType) isValid() bool {
    switch e {
    case EtxNetworkType_Vz,
        EtxNetworkType_Nonvz:
        return true
    }
    return false
}

const (
    EtxNetworkType_Vz    EtxNetworkType = "VZ"
    EtxNetworkType_Nonvz EtxNetworkType = "non-VZ"
)

// OauthProviderError is a string enum.
// OAuth 2 Authorization error codes
type OauthProviderError string

// MarshalJSON implements the json.Marshaler interface for OauthProviderError.
// It customizes the JSON marshaling process for OauthProviderError objects.
func (e OauthProviderError) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for OauthProviderError")
}

// UnmarshalJSON implements the json.Unmarshaler interface for OauthProviderError.
// It customizes the JSON unmarshaling process for OauthProviderError objects.
func (e *OauthProviderError) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = OauthProviderError(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to OauthProviderError")
    }
    return nil
}

// Checks whether the value is actually a member of OauthProviderError.
func (e OauthProviderError) isValid() bool {
    switch e {
    case OauthProviderError_InvalidRequest,
        OauthProviderError_InvalidClient,
        OauthProviderError_InvalidGrant,
        OauthProviderError_UnauthorizedClient,
        OauthProviderError_UnsupportedGrantType,
        OauthProviderError_InvalidScope:
        return true
    }
    return false
}

const (
    OauthProviderError_InvalidRequest       OauthProviderError = "invalid_request"
    OauthProviderError_InvalidClient        OauthProviderError = "invalid_client"
    OauthProviderError_InvalidGrant         OauthProviderError = "invalid_grant"
    OauthProviderError_UnauthorizedClient   OauthProviderError = "unauthorized_client"
    OauthProviderError_UnsupportedGrantType OauthProviderError = "unsupported_grant_type"
    OauthProviderError_InvalidScope         OauthProviderError = "invalid_scope"
)

// OauthScopeThingspaceOauth is a string enum.
// OAuth 2 scopes supported by the API
type OauthScopeThingspaceOauth string

// MarshalJSON implements the json.Marshaler interface for OauthScopeThingspaceOauth.
// It customizes the JSON marshaling process for OauthScopeThingspaceOauth objects.
func (e OauthScopeThingspaceOauth) MarshalJSON() (
    []byte,
    error) {
    if e.isValid() {
        return []byte(fmt.Sprintf("\"%v\"", e)), nil
    }
    return nil, errors.New("the provided enum value is not allowed for OauthScopeThingspaceOauth")
}

// UnmarshalJSON implements the json.Unmarshaler interface for OauthScopeThingspaceOauth.
// It customizes the JSON unmarshaling process for OauthScopeThingspaceOauth objects.
func (e *OauthScopeThingspaceOauth) UnmarshalJSON(input []byte) error {
    var enumValue string
    err := json.Unmarshal(input, &enumValue)
    if err != nil {
        return err
    }
    *e = OauthScopeThingspaceOauth(enumValue)
    if !e.isValid() {
        return errors.New("the value " + string(input) + " cannot be unmarshalled to OauthScopeThingspaceOauth")
    }
    return nil
}

// Checks whether the value is actually a member of OauthScopeThingspaceOauth.
func (e OauthScopeThingspaceOauth) isValid() bool {
    switch e {
    case OauthScopeThingspaceOauth_Discoveryread,
        OauthScopeThingspaceOauth_Serviceprofileread,
        OauthScopeThingspaceOauth_Serviceprofilewrite,
        OauthScopeThingspaceOauth_Serviceregistryread,
        OauthScopeThingspaceOauth_Serviceregistrywrite,
        OauthScopeThingspaceOauth_TsMecFullaccess,
        OauthScopeThingspaceOauth_TsMecLimitaccess,
        OauthScopeThingspaceOauth_TsApplicationRo,
        OauthScopeThingspaceOauth_Edgediscoveryread,
        OauthScopeThingspaceOauth_Edgeserviceprofileread,
        OauthScopeThingspaceOauth_Edgeserviceprofilewrite,
        OauthScopeThingspaceOauth_Edgeserviceregistryread,
        OauthScopeThingspaceOauth_Edgeserviceregistrywrite,
        OauthScopeThingspaceOauth_Read,
        OauthScopeThingspaceOauth_Write:
        return true
    }
    return false
}

const (
    OauthScopeThingspaceOauth_Discoveryread            OauthScopeThingspaceOauth = "discovery:read"
    OauthScopeThingspaceOauth_Serviceprofileread       OauthScopeThingspaceOauth = "serviceprofile:read"
    OauthScopeThingspaceOauth_Serviceprofilewrite      OauthScopeThingspaceOauth = "serviceprofile:write"
    OauthScopeThingspaceOauth_Serviceregistryread      OauthScopeThingspaceOauth = "serviceregistry:read"
    OauthScopeThingspaceOauth_Serviceregistrywrite     OauthScopeThingspaceOauth = "serviceregistry:write"
    OauthScopeThingspaceOauth_TsMecFullaccess          OauthScopeThingspaceOauth = "ts.mec.fullaccess"
    OauthScopeThingspaceOauth_TsMecLimitaccess         OauthScopeThingspaceOauth = "ts.mec.limitaccess"
    OauthScopeThingspaceOauth_TsApplicationRo          OauthScopeThingspaceOauth = "ts.application.ro"
    OauthScopeThingspaceOauth_Edgediscoveryread        OauthScopeThingspaceOauth = "edge:discovery:read"
    OauthScopeThingspaceOauth_Edgeserviceprofileread   OauthScopeThingspaceOauth = "edge:serviceprofile:read"
    OauthScopeThingspaceOauth_Edgeserviceprofilewrite  OauthScopeThingspaceOauth = "edge:serviceprofile:write"
    OauthScopeThingspaceOauth_Edgeserviceregistryread  OauthScopeThingspaceOauth = "edge:serviceregistry:read"
    OauthScopeThingspaceOauth_Edgeserviceregistrywrite OauthScopeThingspaceOauth = "edge:serviceregistry:write"
    OauthScopeThingspaceOauth_Read                     OauthScopeThingspaceOauth = "read"
    OauthScopeThingspaceOauth_Write                    OauthScopeThingspaceOauth = "write"
)
