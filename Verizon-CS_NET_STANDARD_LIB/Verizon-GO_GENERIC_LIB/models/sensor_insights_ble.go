/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// SensorInsightsBle represents a SensorInsightsBle struct.
// Property objects for Bluetooth Low-Energy (BLE) devices
type SensorInsightsBle struct {
    // The data mode the sensor is using
    DataMode             *int                   `json:"dataMode,omitempty"`
    // The numeric manufacturer ID
    ManufacturerId       *int                   `json:"manufacturerId,omitempty"`
    // How frequently the device can be scanned
    MaxNumScan           *int                   `json:"maxNumScan,omitempty"`
    // The minimum signal strength needed for the sensor to transmit (in Decibels or dB)
    MinSigStr            *int                   `json:"minSigStr,omitempty"`
    // The ammount of time to monitor the sensor and varies by device
    MonitorPeriod        *int                   `json:"monitorPeriod,omitempty"`
    // Values for the manufacturer and these vary by device
    MoreManufId          []interface{}          `json:"moreManufId,omitempty"`
    // The operation mode
    OpMode               *int                   `json:"opMode,omitempty"`
    // The ammount of time between sensor readings and reports
    ReportOffset         *int                   `json:"reportOffset,omitempty"`
    // The ammount of time between reports
    ReportPeriod         *int                   `json:"reportPeriod,omitempty"`
    // The report type
    ReportType           *int                   `json:"reportType,omitempty"`
    // The ammount of time the sensor is queried for data
    ScanDuration         *int                   `json:"scanDuration,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for SensorInsightsBle,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (s SensorInsightsBle) String() string {
    return fmt.Sprintf(
    	"SensorInsightsBle[DataMode=%v, ManufacturerId=%v, MaxNumScan=%v, MinSigStr=%v, MonitorPeriod=%v, MoreManufId=%v, OpMode=%v, ReportOffset=%v, ReportPeriod=%v, ReportType=%v, ScanDuration=%v, AdditionalProperties=%v]",
    	s.DataMode, s.ManufacturerId, s.MaxNumScan, s.MinSigStr, s.MonitorPeriod, s.MoreManufId, s.OpMode, s.ReportOffset, s.ReportPeriod, s.ReportType, s.ScanDuration, s.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for SensorInsightsBle.
// It customizes the JSON marshaling process for SensorInsightsBle objects.
func (s SensorInsightsBle) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(s.AdditionalProperties,
        "dataMode", "manufacturerId", "maxNumScan", "minSigStr", "monitorPeriod", "moreManufId", "opMode", "reportOffset", "reportPeriod", "reportType", "scanDuration"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(s.toMap())
}

// toMap converts the SensorInsightsBle object to a map representation for JSON marshaling.
func (s SensorInsightsBle) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, s.AdditionalProperties)
    if s.DataMode != nil {
        structMap["dataMode"] = s.DataMode
    }
    if s.ManufacturerId != nil {
        structMap["manufacturerId"] = s.ManufacturerId
    }
    if s.MaxNumScan != nil {
        structMap["maxNumScan"] = s.MaxNumScan
    }
    if s.MinSigStr != nil {
        structMap["minSigStr"] = s.MinSigStr
    }
    if s.MonitorPeriod != nil {
        structMap["monitorPeriod"] = s.MonitorPeriod
    }
    if s.MoreManufId != nil {
        structMap["moreManufId"] = s.MoreManufId
    }
    if s.OpMode != nil {
        structMap["opMode"] = s.OpMode
    }
    if s.ReportOffset != nil {
        structMap["reportOffset"] = s.ReportOffset
    }
    if s.ReportPeriod != nil {
        structMap["reportPeriod"] = s.ReportPeriod
    }
    if s.ReportType != nil {
        structMap["reportType"] = s.ReportType
    }
    if s.ScanDuration != nil {
        structMap["scanDuration"] = s.ScanDuration
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for SensorInsightsBle.
// It customizes the JSON unmarshaling process for SensorInsightsBle objects.
func (s *SensorInsightsBle) UnmarshalJSON(input []byte) error {
    var temp tempSensorInsightsBle
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "dataMode", "manufacturerId", "maxNumScan", "minSigStr", "monitorPeriod", "moreManufId", "opMode", "reportOffset", "reportPeriod", "reportType", "scanDuration")
    if err != nil {
    	return err
    }
    s.AdditionalProperties = additionalProperties
    
    s.DataMode = temp.DataMode
    s.ManufacturerId = temp.ManufacturerId
    s.MaxNumScan = temp.MaxNumScan
    s.MinSigStr = temp.MinSigStr
    s.MonitorPeriod = temp.MonitorPeriod
    s.MoreManufId = temp.MoreManufId
    s.OpMode = temp.OpMode
    s.ReportOffset = temp.ReportOffset
    s.ReportPeriod = temp.ReportPeriod
    s.ReportType = temp.ReportType
    s.ScanDuration = temp.ScanDuration
    return nil
}

// tempSensorInsightsBle is a temporary struct used for validating the fields of SensorInsightsBle.
type tempSensorInsightsBle  struct {
    DataMode       *int          `json:"dataMode,omitempty"`
    ManufacturerId *int          `json:"manufacturerId,omitempty"`
    MaxNumScan     *int          `json:"maxNumScan,omitempty"`
    MinSigStr      *int          `json:"minSigStr,omitempty"`
    MonitorPeriod  *int          `json:"monitorPeriod,omitempty"`
    MoreManufId    []interface{} `json:"moreManufId,omitempty"`
    OpMode         *int          `json:"opMode,omitempty"`
    ReportOffset   *int          `json:"reportOffset,omitempty"`
    ReportPeriod   *int          `json:"reportPeriod,omitempty"`
    ReportType     *int          `json:"reportType,omitempty"`
    ScanDuration   *int          `json:"scanDuration,omitempty"`
}
