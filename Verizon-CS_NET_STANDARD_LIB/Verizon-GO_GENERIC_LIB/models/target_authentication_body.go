/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// TargetAuthenticationBody represents a TargetAuthenticationBody struct.
type TargetAuthenticationBody struct {
    // Authentication grant type.
    GrantType            *string                          `json:"grant_type,omitempty"`
    // Refresh token.
    RefreshToken         *string                          `json:"refresh_token,omitempty"`
    // Authentication scopes.
    Scope                *string                          `json:"scope,omitempty"`
    // Authentication headers.
    Headers              *TargetAuthenticationBodyHeaders `json:"headers,omitempty"`
    // Host information.
    Host                 *TargetAuthenticationBodyHost    `json:"host,omitempty"`
    AdditionalProperties map[string]interface{}           `json:"_"`
}

// String implements the fmt.Stringer interface for TargetAuthenticationBody,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (t TargetAuthenticationBody) String() string {
    return fmt.Sprintf(
    	"TargetAuthenticationBody[GrantType=%v, RefreshToken=%v, Scope=%v, Headers=%v, Host=%v, AdditionalProperties=%v]",
    	t.GrantType, t.RefreshToken, t.Scope, t.Headers, t.Host, t.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for TargetAuthenticationBody.
// It customizes the JSON marshaling process for TargetAuthenticationBody objects.
func (t TargetAuthenticationBody) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(t.AdditionalProperties,
        "grant_type", "refresh_token", "scope", "headers", "host"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(t.toMap())
}

// toMap converts the TargetAuthenticationBody object to a map representation for JSON marshaling.
func (t TargetAuthenticationBody) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, t.AdditionalProperties)
    if t.GrantType != nil {
        structMap["grant_type"] = t.GrantType
    }
    if t.RefreshToken != nil {
        structMap["refresh_token"] = t.RefreshToken
    }
    if t.Scope != nil {
        structMap["scope"] = t.Scope
    }
    if t.Headers != nil {
        structMap["headers"] = t.Headers.toMap()
    }
    if t.Host != nil {
        structMap["host"] = t.Host.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for TargetAuthenticationBody.
// It customizes the JSON unmarshaling process for TargetAuthenticationBody objects.
func (t *TargetAuthenticationBody) UnmarshalJSON(input []byte) error {
    var temp tempTargetAuthenticationBody
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "grant_type", "refresh_token", "scope", "headers", "host")
    if err != nil {
    	return err
    }
    t.AdditionalProperties = additionalProperties
    
    t.GrantType = temp.GrantType
    t.RefreshToken = temp.RefreshToken
    t.Scope = temp.Scope
    t.Headers = temp.Headers
    t.Host = temp.Host
    return nil
}

// tempTargetAuthenticationBody is a temporary struct used for validating the fields of TargetAuthenticationBody.
type tempTargetAuthenticationBody  struct {
    GrantType    *string                          `json:"grant_type,omitempty"`
    RefreshToken *string                          `json:"refresh_token,omitempty"`
    Scope        *string                          `json:"scope,omitempty"`
    Headers      *TargetAuthenticationBodyHeaders `json:"headers,omitempty"`
    Host         *TargetAuthenticationBodyHost    `json:"host,omitempty"`
}
