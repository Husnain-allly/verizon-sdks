/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// Generic represents a Generic struct.
// Custom message which is defined by the user and can support "any" message type or format.
// **Note:** ETX prefers the j2735 or the j2735_gr encoding and only vendor specific message types are allowed to be published in different message formats.
type Generic struct {
    // The type of message. This can be any of the standard V2X messages specified in the SAE J2735 standard (e.g. BSM, PSM, RSA, TIM, MAP, SPAT, etc.), or it can be a vendor specific message type that is not defined by the standard.
    MessageType   string `json:"messageType"`
    // The encoding of the message (e.g. j2735, protobuf, json, Avro, etc.). If the message is encapsulated within a GeoRoutedMsg protocol buffer wrapper, append _gr to the message format (e.g. j2735 => j2735_gr).
    // **Note:** ETX prefers the j2735 or the j2735_gr encoding and only vendor specific message types are allowed to be published in different message formats.
    MessageFormat string `json:"messageFormat"`
    // The base64 encoded message.
    Payload       string `json:"payload"`
}

// String implements the fmt.Stringer interface for Generic,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (g Generic) String() string {
    return fmt.Sprintf(
    	"Generic[MessageType=%v, MessageFormat=%v, Payload=%v]",
    	g.MessageType, g.MessageFormat, g.Payload)
}

// MarshalJSON implements the json.Marshaler interface for Generic.
// It customizes the JSON marshaling process for Generic objects.
func (g Generic) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(g.toMap())
}

// toMap converts the Generic object to a map representation for JSON marshaling.
func (g Generic) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["messageType"] = g.MessageType
    structMap["messageFormat"] = g.MessageFormat
    structMap["payload"] = g.Payload
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Generic.
// It customizes the JSON unmarshaling process for Generic objects.
func (g *Generic) UnmarshalJSON(input []byte) error {
    var temp tempGeneric
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    g.MessageType = *temp.MessageType
    g.MessageFormat = *temp.MessageFormat
    g.Payload = *temp.Payload
    return nil
}

// tempGeneric is a temporary struct used for validating the fields of Generic.
type tempGeneric  struct {
    MessageType   *string `json:"messageType"`
    MessageFormat *string `json:"messageFormat"`
    Payload       *string `json:"payload"`
}

func (g *tempGeneric) validate() error {
    var errs []string
    if g.MessageType == nil {
        errs = append(errs, "required field `messageType` is missing for type `Generic`")
    }
    if g.MessageFormat == nil {
        errs = append(errs, "required field `messageFormat` is missing for type `Generic`")
    }
    if g.Payload == nil {
        errs = append(errs, "required field `payload` is missing for type `Generic`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
