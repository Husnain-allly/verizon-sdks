/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// ApiResponseCode represents a ApiResponseCode struct.
// ResponseCode and/or a message indicating success or failure of the request.
type ApiResponseCode struct {
    // Possible response codes.
    ResponseCode         ResponseCode           `json:"responseCode"`
    // More details about the responseCode received.
    Message              string                 `json:"message"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for ApiResponseCode,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a ApiResponseCode) String() string {
    return fmt.Sprintf(
    	"ApiResponseCode[ResponseCode=%v, Message=%v, AdditionalProperties=%v]",
    	a.ResponseCode, a.Message, a.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for ApiResponseCode.
// It customizes the JSON marshaling process for ApiResponseCode objects.
func (a ApiResponseCode) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(a.AdditionalProperties,
        "responseCode", "message"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(a.toMap())
}

// toMap converts the ApiResponseCode object to a map representation for JSON marshaling.
func (a ApiResponseCode) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, a.AdditionalProperties)
    structMap["responseCode"] = a.ResponseCode
    structMap["message"] = a.Message
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ApiResponseCode.
// It customizes the JSON unmarshaling process for ApiResponseCode objects.
func (a *ApiResponseCode) UnmarshalJSON(input []byte) error {
    var temp tempApiResponseCode
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "responseCode", "message")
    if err != nil {
    	return err
    }
    a.AdditionalProperties = additionalProperties
    
    a.ResponseCode = *temp.ResponseCode
    a.Message = *temp.Message
    return nil
}

// tempApiResponseCode is a temporary struct used for validating the fields of ApiResponseCode.
type tempApiResponseCode  struct {
    ResponseCode *ResponseCode `json:"responseCode"`
    Message      *string       `json:"message"`
}

func (a *tempApiResponseCode) validate() error {
    var errs []string
    if a.ResponseCode == nil {
        errs = append(errs, "required field `responseCode` is missing for type `ApiResponseCode`")
    }
    if a.Message == nil {
        errs = append(errs, "required field `message` is missing for type `ApiResponseCode`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
