/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// GetDeviceListWithProfilesRequest represents a GetDeviceListWithProfilesRequest struct.
type GetDeviceListWithProfilesRequest struct {
    AccountName              string        `json:"accountName"`
    ProvisioningStatusFilter *string       `json:"provisioningStatusFilter,omitempty"`
    ProfileStatusFilter      *string       `json:"profileStatusFilter,omitempty"`
    CarrierNameFilter        *string       `json:"carrierNameFilter,omitempty"`
    DeviceFilter             []GioDeviceId `json:"deviceFilter,omitempty"`
}

// String implements the fmt.Stringer interface for GetDeviceListWithProfilesRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (g GetDeviceListWithProfilesRequest) String() string {
    return fmt.Sprintf(
    	"GetDeviceListWithProfilesRequest[AccountName=%v, ProvisioningStatusFilter=%v, ProfileStatusFilter=%v, CarrierNameFilter=%v, DeviceFilter=%v]",
    	g.AccountName, g.ProvisioningStatusFilter, g.ProfileStatusFilter, g.CarrierNameFilter, g.DeviceFilter)
}

// MarshalJSON implements the json.Marshaler interface for GetDeviceListWithProfilesRequest.
// It customizes the JSON marshaling process for GetDeviceListWithProfilesRequest objects.
func (g GetDeviceListWithProfilesRequest) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(g.toMap())
}

// toMap converts the GetDeviceListWithProfilesRequest object to a map representation for JSON marshaling.
func (g GetDeviceListWithProfilesRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["accountName"] = g.AccountName
    if g.ProvisioningStatusFilter != nil {
        structMap["provisioningStatusFilter"] = g.ProvisioningStatusFilter
    }
    if g.ProfileStatusFilter != nil {
        structMap["profileStatusFilter"] = g.ProfileStatusFilter
    }
    if g.CarrierNameFilter != nil {
        structMap["carrierNameFilter"] = g.CarrierNameFilter
    }
    if g.DeviceFilter != nil {
        structMap["deviceFilter"] = g.DeviceFilter
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for GetDeviceListWithProfilesRequest.
// It customizes the JSON unmarshaling process for GetDeviceListWithProfilesRequest objects.
func (g *GetDeviceListWithProfilesRequest) UnmarshalJSON(input []byte) error {
    var temp tempGetDeviceListWithProfilesRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    g.AccountName = *temp.AccountName
    g.ProvisioningStatusFilter = temp.ProvisioningStatusFilter
    g.ProfileStatusFilter = temp.ProfileStatusFilter
    g.CarrierNameFilter = temp.CarrierNameFilter
    g.DeviceFilter = temp.DeviceFilter
    return nil
}

// tempGetDeviceListWithProfilesRequest is a temporary struct used for validating the fields of GetDeviceListWithProfilesRequest.
type tempGetDeviceListWithProfilesRequest  struct {
    AccountName              *string       `json:"accountName"`
    ProvisioningStatusFilter *string       `json:"provisioningStatusFilter,omitempty"`
    ProfileStatusFilter      *string       `json:"profileStatusFilter,omitempty"`
    CarrierNameFilter        *string       `json:"carrierNameFilter,omitempty"`
    DeviceFilter             []GioDeviceId `json:"deviceFilter,omitempty"`
}

func (g *tempGetDeviceListWithProfilesRequest) validate() error {
    var errs []string
    if g.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `GetDeviceListWithProfilesRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
