/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// TheIDresourceandDeviceId represents a TheIDresourceandDeviceId struct.
type TheIDresourceandDeviceId struct {
    // UUID of the user record, assigned at creation
    Id                   *string                `json:"id,omitempty"`
    // This is a UUID value of the device created when the device is onboarded
    Deviceid             *string                `json:"deviceid,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for TheIDresourceandDeviceId,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (t TheIDresourceandDeviceId) String() string {
    return fmt.Sprintf(
    	"TheIDresourceandDeviceId[Id=%v, Deviceid=%v, AdditionalProperties=%v]",
    	t.Id, t.Deviceid, t.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for TheIDresourceandDeviceId.
// It customizes the JSON marshaling process for TheIDresourceandDeviceId objects.
func (t TheIDresourceandDeviceId) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(t.AdditionalProperties,
        "id", "deviceid"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(t.toMap())
}

// toMap converts the TheIDresourceandDeviceId object to a map representation for JSON marshaling.
func (t TheIDresourceandDeviceId) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, t.AdditionalProperties)
    if t.Id != nil {
        structMap["id"] = t.Id
    }
    if t.Deviceid != nil {
        structMap["deviceid"] = t.Deviceid
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for TheIDresourceandDeviceId.
// It customizes the JSON unmarshaling process for TheIDresourceandDeviceId objects.
func (t *TheIDresourceandDeviceId) UnmarshalJSON(input []byte) error {
    var temp tempTheIDresourceandDeviceId
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "id", "deviceid")
    if err != nil {
    	return err
    }
    t.AdditionalProperties = additionalProperties
    
    t.Id = temp.Id
    t.Deviceid = temp.Deviceid
    return nil
}

// tempTheIDresourceandDeviceId is a temporary struct used for validating the fields of TheIDresourceandDeviceId.
type tempTheIDresourceandDeviceId  struct {
    Id       *string `json:"id,omitempty"`
    Deviceid *string `json:"deviceid,omitempty"`
}
