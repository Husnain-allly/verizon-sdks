/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// ConnectionResponse represents a ConnectionResponse struct.
// response for /clients/connection
type ConnectionResponse struct {
    MqttUrl string `json:"MqttURL"`
}

// String implements the fmt.Stringer interface for ConnectionResponse,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c ConnectionResponse) String() string {
    return fmt.Sprintf(
    	"ConnectionResponse[MqttUrl=%v]",
    	c.MqttUrl)
}

// MarshalJSON implements the json.Marshaler interface for ConnectionResponse.
// It customizes the JSON marshaling process for ConnectionResponse objects.
func (c ConnectionResponse) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(c.toMap())
}

// toMap converts the ConnectionResponse object to a map representation for JSON marshaling.
func (c ConnectionResponse) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["MqttURL"] = c.MqttUrl
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ConnectionResponse.
// It customizes the JSON unmarshaling process for ConnectionResponse objects.
func (c *ConnectionResponse) UnmarshalJSON(input []byte) error {
    var temp tempConnectionResponse
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    c.MqttUrl = *temp.MqttUrl
    return nil
}

// tempConnectionResponse is a temporary struct used for validating the fields of ConnectionResponse.
type tempConnectionResponse  struct {
    MqttUrl *string `json:"MqttURL"`
}

func (c *tempConnectionResponse) validate() error {
    var errs []string
    if c.MqttUrl == nil {
        errs = append(errs, "required field `MqttURL` is missing for type `ConnectionResponse`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
