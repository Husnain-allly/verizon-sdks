/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
)

// SensorInsightsDeviceActionSetRequestBody represents a SensorInsightsDeviceActionSetRequestBody struct.
// This is a container for any-of cases.
type SensorInsightsDeviceActionSetRequestBody struct {
    value                       any
    isDtoDeviceActionSetRequest bool
    isDtoDeviceCommand          bool
}

// String implements the fmt.Stringer interface for SensorInsightsDeviceActionSetRequestBody,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (s SensorInsightsDeviceActionSetRequestBody) String() string {
    return fmt.Sprintf("%v", s.value)
}

// MarshalJSON implements the json.Marshaler interface for SensorInsightsDeviceActionSetRequestBody.
// It customizes the JSON marshaling process for SensorInsightsDeviceActionSetRequestBody objects.
func (s SensorInsightsDeviceActionSetRequestBody) MarshalJSON() (
    []byte,
    error) {
    if s.value == nil {
        return nil, errors.New("No underlying type is set. Please use any of the `models.SensorInsightsDeviceActionSetRequestBodyContainer.From*` functions to initialize the SensorInsightsDeviceActionSetRequestBody object.")
    }
    return json.Marshal(s.toMap())
}

// toMap converts the SensorInsightsDeviceActionSetRequestBody object to a map representation for JSON marshaling.
func (s *SensorInsightsDeviceActionSetRequestBody) toMap() any {
    switch obj := s.value.(type) {
    case *DtoDeviceActionSetRequest:
        return obj.toMap()
    case *DtoDeviceCommand:
        return obj.toMap()
    }
    return nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for SensorInsightsDeviceActionSetRequestBody.
// It customizes the JSON unmarshaling process for SensorInsightsDeviceActionSetRequestBody objects.
func (s *SensorInsightsDeviceActionSetRequestBody) UnmarshalJSON(input []byte) error {
    result, err := UnmarshallAnyOf(input,
        NewTypeHolder(&DtoDeviceActionSetRequest{}, false, &s.isDtoDeviceActionSetRequest),
        NewTypeHolder(&DtoDeviceCommand{}, false, &s.isDtoDeviceCommand),
    )
    
    s.value = result
    return err
}

func (s *SensorInsightsDeviceActionSetRequestBody) AsDtoDeviceActionSetRequest() (
    *DtoDeviceActionSetRequest,
    bool) {
    if !s.isDtoDeviceActionSetRequest {
        return nil, false
    }
    return s.value.(*DtoDeviceActionSetRequest), true
}

func (s *SensorInsightsDeviceActionSetRequestBody) AsDtoDeviceCommand() (
    *DtoDeviceCommand,
    bool) {
    if !s.isDtoDeviceCommand {
        return nil, false
    }
    return s.value.(*DtoDeviceCommand), true
}

// internalSensorInsightsDeviceActionSetRequestBody represents a sensorInsightsDeviceActionSetRequestBody struct.
// This is a container for any-of cases.
type internalSensorInsightsDeviceActionSetRequestBody struct {}

var SensorInsightsDeviceActionSetRequestBodyContainer internalSensorInsightsDeviceActionSetRequestBody

// The internalSensorInsightsDeviceActionSetRequestBody instance, wrapping the provided DtoDeviceActionSetRequest value.
func (s *internalSensorInsightsDeviceActionSetRequestBody) FromDtoDeviceActionSetRequest(val DtoDeviceActionSetRequest) SensorInsightsDeviceActionSetRequestBody {
    return SensorInsightsDeviceActionSetRequestBody{value: &val}
}

// The internalSensorInsightsDeviceActionSetRequestBody instance, wrapping the provided DtoDeviceCommand value.
func (s *internalSensorInsightsDeviceActionSetRequestBody) FromDtoDeviceCommand(val DtoDeviceCommand) SensorInsightsDeviceActionSetRequestBody {
    return SensorInsightsDeviceActionSetRequestBody{value: &val}
}
