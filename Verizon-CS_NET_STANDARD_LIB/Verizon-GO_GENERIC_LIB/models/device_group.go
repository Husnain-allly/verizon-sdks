/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// DeviceGroup represents a DeviceGroup struct.
// Returns a list of all device groups in a specified account.
type DeviceGroup struct {
    // The description of the device group.
    Description          *string                `json:"description,omitempty"`
    // Any extended attributes for the device group, as Key and Value pairs.
    ExtendedAttributes   []CustomFields         `json:"extendedAttributes,omitempty"`
    // Identifies the default device group.
    IsDefaultGroup       *bool                  `json:"isDefaultGroup,omitempty"`
    // The name of the device group.
    Name                 *string                `json:"name,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceGroup,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceGroup) String() string {
    return fmt.Sprintf(
    	"DeviceGroup[Description=%v, ExtendedAttributes=%v, IsDefaultGroup=%v, Name=%v, AdditionalProperties=%v]",
    	d.Description, d.ExtendedAttributes, d.IsDefaultGroup, d.Name, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceGroup.
// It customizes the JSON marshaling process for DeviceGroup objects.
func (d DeviceGroup) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "description", "extendedAttributes", "isDefaultGroup", "name"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceGroup object to a map representation for JSON marshaling.
func (d DeviceGroup) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    if d.Description != nil {
        structMap["description"] = d.Description
    }
    if d.ExtendedAttributes != nil {
        structMap["extendedAttributes"] = d.ExtendedAttributes
    }
    if d.IsDefaultGroup != nil {
        structMap["isDefaultGroup"] = d.IsDefaultGroup
    }
    if d.Name != nil {
        structMap["name"] = d.Name
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceGroup.
// It customizes the JSON unmarshaling process for DeviceGroup objects.
func (d *DeviceGroup) UnmarshalJSON(input []byte) error {
    var temp tempDeviceGroup
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "description", "extendedAttributes", "isDefaultGroup", "name")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.Description = temp.Description
    d.ExtendedAttributes = temp.ExtendedAttributes
    d.IsDefaultGroup = temp.IsDefaultGroup
    d.Name = temp.Name
    return nil
}

// tempDeviceGroup is a temporary struct used for validating the fields of DeviceGroup.
type tempDeviceGroup  struct {
    Description        *string        `json:"description,omitempty"`
    ExtendedAttributes []CustomFields `json:"extendedAttributes,omitempty"`
    IsDefaultGroup     *bool          `json:"isDefaultGroup,omitempty"`
    Name               *string        `json:"name,omitempty"`
}
