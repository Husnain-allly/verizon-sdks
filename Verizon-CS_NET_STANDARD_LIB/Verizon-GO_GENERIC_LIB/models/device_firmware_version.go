/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// DeviceFirmwareVersion represents a DeviceFirmwareVersion struct.
// Device and firmware information.
type DeviceFirmwareVersion struct {
    Status                    *string                `json:"status,omitempty"`
    Reason                    *string                `json:"reason,omitempty"`
    // Device IMEI.
    DeviceId                  string                 `json:"deviceId"`
    // Device Firmware Version.
    FirmwareVersion           string                 `json:"firmwareVersion"`
    FirmwareVersionUpdateTime *time.Time             `json:"firmwareVersionUpdateTime,omitempty"`
    AdditionalProperties      map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceFirmwareVersion,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceFirmwareVersion) String() string {
    return fmt.Sprintf(
    	"DeviceFirmwareVersion[Status=%v, Reason=%v, DeviceId=%v, FirmwareVersion=%v, FirmwareVersionUpdateTime=%v, AdditionalProperties=%v]",
    	d.Status, d.Reason, d.DeviceId, d.FirmwareVersion, d.FirmwareVersionUpdateTime, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceFirmwareVersion.
// It customizes the JSON marshaling process for DeviceFirmwareVersion objects.
func (d DeviceFirmwareVersion) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "status", "reason", "deviceId", "firmwareVersion", "firmwareVersionUpdateTime"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceFirmwareVersion object to a map representation for JSON marshaling.
func (d DeviceFirmwareVersion) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    if d.Status != nil {
        structMap["status"] = d.Status
    }
    if d.Reason != nil {
        structMap["reason"] = d.Reason
    }
    structMap["deviceId"] = d.DeviceId
    structMap["firmwareVersion"] = d.FirmwareVersion
    if d.FirmwareVersionUpdateTime != nil {
        structMap["firmwareVersionUpdateTime"] = d.FirmwareVersionUpdateTime.Format(time.RFC3339)
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceFirmwareVersion.
// It customizes the JSON unmarshaling process for DeviceFirmwareVersion objects.
func (d *DeviceFirmwareVersion) UnmarshalJSON(input []byte) error {
    var temp tempDeviceFirmwareVersion
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "status", "reason", "deviceId", "firmwareVersion", "firmwareVersionUpdateTime")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.Status = temp.Status
    d.Reason = temp.Reason
    d.DeviceId = *temp.DeviceId
    d.FirmwareVersion = *temp.FirmwareVersion
    if temp.FirmwareVersionUpdateTime != nil {
        FirmwareVersionUpdateTimeVal, err := time.Parse(time.RFC3339, *temp.FirmwareVersionUpdateTime)
        if err != nil {
            log.Fatalf("Cannot Parse firmwareVersionUpdateTime as % s format.", time.RFC3339)
        }
        d.FirmwareVersionUpdateTime = &FirmwareVersionUpdateTimeVal
    }
    return nil
}

// tempDeviceFirmwareVersion is a temporary struct used for validating the fields of DeviceFirmwareVersion.
type tempDeviceFirmwareVersion  struct {
    Status                    *string `json:"status,omitempty"`
    Reason                    *string `json:"reason,omitempty"`
    DeviceId                  *string `json:"deviceId"`
    FirmwareVersion           *string `json:"firmwareVersion"`
    FirmwareVersionUpdateTime *string `json:"firmwareVersionUpdateTime,omitempty"`
}

func (d *tempDeviceFirmwareVersion) validate() error {
    var errs []string
    if d.DeviceId == nil {
        errs = append(errs, "required field `deviceId` is missing for type `DeviceFirmwareVersion`")
    }
    if d.FirmwareVersion == nil {
        errs = append(errs, "required field `firmwareVersion` is missing for type `DeviceFirmwareVersion`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
