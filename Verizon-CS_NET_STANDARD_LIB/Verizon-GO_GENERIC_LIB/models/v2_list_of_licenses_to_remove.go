/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// V2ListOfLicensesToRemove represents a V2ListOfLicensesToRemove struct.
// A list of license cancellation candidate devices.
type V2ListOfLicensesToRemove struct {
    // Cancellation candidate devices count.
    Count                int                    `json:"count"`
    // Flag to indicat more devices.
    HasMoreData          bool                   `json:"hasMoreData"`
    // Last update time.
    UpdateTime           string                 `json:"updateTime"`
    // Device IMEI list.
    DeviceList           []string               `json:"deviceList"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for V2ListOfLicensesToRemove,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (v V2ListOfLicensesToRemove) String() string {
    return fmt.Sprintf(
    	"V2ListOfLicensesToRemove[Count=%v, HasMoreData=%v, UpdateTime=%v, DeviceList=%v, AdditionalProperties=%v]",
    	v.Count, v.HasMoreData, v.UpdateTime, v.DeviceList, v.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for V2ListOfLicensesToRemove.
// It customizes the JSON marshaling process for V2ListOfLicensesToRemove objects.
func (v V2ListOfLicensesToRemove) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(v.AdditionalProperties,
        "count", "hasMoreData", "updateTime", "deviceList"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(v.toMap())
}

// toMap converts the V2ListOfLicensesToRemove object to a map representation for JSON marshaling.
func (v V2ListOfLicensesToRemove) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, v.AdditionalProperties)
    structMap["count"] = v.Count
    structMap["hasMoreData"] = v.HasMoreData
    structMap["updateTime"] = v.UpdateTime
    structMap["deviceList"] = v.DeviceList
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for V2ListOfLicensesToRemove.
// It customizes the JSON unmarshaling process for V2ListOfLicensesToRemove objects.
func (v *V2ListOfLicensesToRemove) UnmarshalJSON(input []byte) error {
    var temp tempV2ListOfLicensesToRemove
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "count", "hasMoreData", "updateTime", "deviceList")
    if err != nil {
    	return err
    }
    v.AdditionalProperties = additionalProperties
    
    v.Count = *temp.Count
    v.HasMoreData = *temp.HasMoreData
    v.UpdateTime = *temp.UpdateTime
    v.DeviceList = *temp.DeviceList
    return nil
}

// tempV2ListOfLicensesToRemove is a temporary struct used for validating the fields of V2ListOfLicensesToRemove.
type tempV2ListOfLicensesToRemove  struct {
    Count       *int      `json:"count"`
    HasMoreData *bool     `json:"hasMoreData"`
    UpdateTime  *string   `json:"updateTime"`
    DeviceList  *[]string `json:"deviceList"`
}

func (v *tempV2ListOfLicensesToRemove) validate() error {
    var errs []string
    if v.Count == nil {
        errs = append(errs, "required field `count` is missing for type `V2ListOfLicensesToRemove`")
    }
    if v.HasMoreData == nil {
        errs = append(errs, "required field `hasMoreData` is missing for type `V2ListOfLicensesToRemove`")
    }
    if v.UpdateTime == nil {
        errs = append(errs, "required field `updateTime` is missing for type `V2ListOfLicensesToRemove`")
    }
    if v.DeviceList == nil {
        errs = append(errs, "required field `deviceList` is missing for type `V2ListOfLicensesToRemove`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
