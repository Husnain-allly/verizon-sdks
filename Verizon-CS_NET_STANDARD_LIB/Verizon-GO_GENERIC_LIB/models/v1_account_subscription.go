/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// V1AccountSubscription represents a V1AccountSubscription struct.
// Account subscription information.
type V1AccountSubscription struct {
    // Account identifier in "##########-#####".
    AccountName          *string                `json:"accountName,omitempty"`
    // Subscription models used by the account.
    PurchaseType         *string                `json:"purchaseType,omitempty"`
    // Number of monthly licenses in an MRC subscription.
    LicenseCount         *int                   `json:"licenseCount,omitempty"`
    // Number of licenses currently assigned to devices.
    LicenseUsedCount     *int                   `json:"licenseUsedCount,omitempty"`
    // The date and time of when the subscription was last updated.
    UpdateTime           *string                `json:"updateTime,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for V1AccountSubscription,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (v V1AccountSubscription) String() string {
    return fmt.Sprintf(
    	"V1AccountSubscription[AccountName=%v, PurchaseType=%v, LicenseCount=%v, LicenseUsedCount=%v, UpdateTime=%v, AdditionalProperties=%v]",
    	v.AccountName, v.PurchaseType, v.LicenseCount, v.LicenseUsedCount, v.UpdateTime, v.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for V1AccountSubscription.
// It customizes the JSON marshaling process for V1AccountSubscription objects.
func (v V1AccountSubscription) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(v.AdditionalProperties,
        "accountName", "purchaseType", "licenseCount", "licenseUsedCount", "updateTime"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(v.toMap())
}

// toMap converts the V1AccountSubscription object to a map representation for JSON marshaling.
func (v V1AccountSubscription) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, v.AdditionalProperties)
    if v.AccountName != nil {
        structMap["accountName"] = v.AccountName
    }
    if v.PurchaseType != nil {
        structMap["purchaseType"] = v.PurchaseType
    }
    if v.LicenseCount != nil {
        structMap["licenseCount"] = v.LicenseCount
    }
    if v.LicenseUsedCount != nil {
        structMap["licenseUsedCount"] = v.LicenseUsedCount
    }
    if v.UpdateTime != nil {
        structMap["updateTime"] = v.UpdateTime
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for V1AccountSubscription.
// It customizes the JSON unmarshaling process for V1AccountSubscription objects.
func (v *V1AccountSubscription) UnmarshalJSON(input []byte) error {
    var temp tempV1AccountSubscription
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "purchaseType", "licenseCount", "licenseUsedCount", "updateTime")
    if err != nil {
    	return err
    }
    v.AdditionalProperties = additionalProperties
    
    v.AccountName = temp.AccountName
    v.PurchaseType = temp.PurchaseType
    v.LicenseCount = temp.LicenseCount
    v.LicenseUsedCount = temp.LicenseUsedCount
    v.UpdateTime = temp.UpdateTime
    return nil
}

// tempV1AccountSubscription is a temporary struct used for validating the fields of V1AccountSubscription.
type tempV1AccountSubscription  struct {
    AccountName      *string `json:"accountName,omitempty"`
    PurchaseType     *string `json:"purchaseType,omitempty"`
    LicenseCount     *int    `json:"licenseCount,omitempty"`
    LicenseUsedCount *int    `json:"licenseUsedCount,omitempty"`
    UpdateTime       *string `json:"updateTime,omitempty"`
}
