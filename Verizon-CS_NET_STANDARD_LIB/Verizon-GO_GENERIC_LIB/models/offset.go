/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// Offset represents a Offset struct.
// The sequence of node offsets then describes a path or polygon in the Lat-Long system.
type Offset struct {
    // The NodeListLL data structure provides the sequence of signed offset node point values for determining the latitude and longitude. Each LL point is referred to as a node point.
    Ll NodeListLl `json:"ll"`
}

// String implements the fmt.Stringer interface for Offset,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (o Offset) String() string {
    return fmt.Sprintf(
    	"Offset[Ll=%v]",
    	o.Ll)
}

// MarshalJSON implements the json.Marshaler interface for Offset.
// It customizes the JSON marshaling process for Offset objects.
func (o Offset) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(o.toMap())
}

// toMap converts the Offset object to a map representation for JSON marshaling.
func (o Offset) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["ll"] = o.Ll.toMap()
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Offset.
// It customizes the JSON unmarshaling process for Offset objects.
func (o *Offset) UnmarshalJSON(input []byte) error {
    var temp tempOffset
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    o.Ll = *temp.Ll
    return nil
}

// tempOffset is a temporary struct used for validating the fields of Offset.
type tempOffset  struct {
    Ll *NodeListLl `json:"ll"`
}

func (o *tempOffset) validate() error {
    var errs []string
    if o.Ll == nil {
        errs = append(errs, "required field `ll` is missing for type `Offset`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
