/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// V3AccountDeviceList represents a V3AccountDeviceList struct.
// Array of devices.
type V3AccountDeviceList struct {
    // Account name.
    AccountName          string                 `json:"accountName"`
    // Has more device flag?
    HasMoreData          bool                   `json:"hasMoreData"`
    // Last seen device identifier.
    LastSeenDeviceId     *string                `json:"lastSeenDeviceId,omitempty"`
    // Maximum page size.
    MaxPageSize          int                    `json:"maxPageSize"`
    // Account device list.
    DeviceList           []V3AccountDevice      `json:"deviceList"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for V3AccountDeviceList,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (v V3AccountDeviceList) String() string {
    return fmt.Sprintf(
    	"V3AccountDeviceList[AccountName=%v, HasMoreData=%v, LastSeenDeviceId=%v, MaxPageSize=%v, DeviceList=%v, AdditionalProperties=%v]",
    	v.AccountName, v.HasMoreData, v.LastSeenDeviceId, v.MaxPageSize, v.DeviceList, v.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for V3AccountDeviceList.
// It customizes the JSON marshaling process for V3AccountDeviceList objects.
func (v V3AccountDeviceList) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(v.AdditionalProperties,
        "accountName", "hasMoreData", "lastSeenDeviceId", "maxPageSize", "deviceList"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(v.toMap())
}

// toMap converts the V3AccountDeviceList object to a map representation for JSON marshaling.
func (v V3AccountDeviceList) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, v.AdditionalProperties)
    structMap["accountName"] = v.AccountName
    structMap["hasMoreData"] = v.HasMoreData
    if v.LastSeenDeviceId != nil {
        structMap["lastSeenDeviceId"] = v.LastSeenDeviceId
    }
    structMap["maxPageSize"] = v.MaxPageSize
    structMap["deviceList"] = v.DeviceList
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for V3AccountDeviceList.
// It customizes the JSON unmarshaling process for V3AccountDeviceList objects.
func (v *V3AccountDeviceList) UnmarshalJSON(input []byte) error {
    var temp tempV3AccountDeviceList
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "hasMoreData", "lastSeenDeviceId", "maxPageSize", "deviceList")
    if err != nil {
    	return err
    }
    v.AdditionalProperties = additionalProperties
    
    v.AccountName = *temp.AccountName
    v.HasMoreData = *temp.HasMoreData
    v.LastSeenDeviceId = temp.LastSeenDeviceId
    v.MaxPageSize = *temp.MaxPageSize
    v.DeviceList = *temp.DeviceList
    return nil
}

// tempV3AccountDeviceList is a temporary struct used for validating the fields of V3AccountDeviceList.
type tempV3AccountDeviceList  struct {
    AccountName      *string            `json:"accountName"`
    HasMoreData      *bool              `json:"hasMoreData"`
    LastSeenDeviceId *string            `json:"lastSeenDeviceId,omitempty"`
    MaxPageSize      *int               `json:"maxPageSize"`
    DeviceList       *[]V3AccountDevice `json:"deviceList"`
}

func (v *tempV3AccountDeviceList) validate() error {
    var errs []string
    if v.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `V3AccountDeviceList`")
    }
    if v.HasMoreData == nil {
        errs = append(errs, "required field `hasMoreData` is missing for type `V3AccountDeviceList`")
    }
    if v.MaxPageSize == nil {
        errs = append(errs, "required field `maxPageSize` is missing for type `V3AccountDeviceList`")
    }
    if v.DeviceList == nil {
        errs = append(errs, "required field `deviceList` is missing for type `V3AccountDeviceList`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
