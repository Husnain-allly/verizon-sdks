/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// Speed represents a Speed struct.
type Speed struct {
    // The minimum required speed in m/s.
    Min float64 `json:"min"`
    // The maximum acceptable speed in m/s
    Max float64 `json:"max"`
}

// String implements the fmt.Stringer interface for Speed,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (s Speed) String() string {
    return fmt.Sprintf(
    	"Speed[Min=%v, Max=%v]",
    	s.Min, s.Max)
}

// MarshalJSON implements the json.Marshaler interface for Speed.
// It customizes the JSON marshaling process for Speed objects.
func (s Speed) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(s.toMap())
}

// toMap converts the Speed object to a map representation for JSON marshaling.
func (s Speed) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["min"] = s.Min
    structMap["max"] = s.Max
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Speed.
// It customizes the JSON unmarshaling process for Speed objects.
func (s *Speed) UnmarshalJSON(input []byte) error {
    var temp tempSpeed
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    s.Min = *temp.Min
    s.Max = *temp.Max
    return nil
}

// tempSpeed is a temporary struct used for validating the fields of Speed.
type tempSpeed  struct {
    Min *float64 `json:"min"`
    Max *float64 `json:"max"`
}

func (s *tempSpeed) validate() error {
    var errs []string
    if s.Min == nil {
        errs = append(errs, "required field `min` is missing for type `Speed`")
    }
    if s.Max == nil {
        errs = append(errs, "required field `max` is missing for type `Speed`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
