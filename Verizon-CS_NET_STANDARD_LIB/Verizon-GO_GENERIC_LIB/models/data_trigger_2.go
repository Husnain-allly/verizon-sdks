/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// DataTrigger2 represents a DataTrigger2 struct.
type DataTrigger2 struct {
    DeviceGroup          *DeviceGroupFilterCriteria `json:"deviceGroup,omitempty"`
    // The condition type being monitored
    ConditionType        *ConditionType             `json:"conditionType,omitempty"`
    // The boolean of the comparison. `gt` is Greater Than, `lt` is Less Than and `eq` is Equal To
    Comparitor           *Comparitor                `json:"comparitor,omitempty"`
    // The threshold value the trigger monitors for
    Threshold            *int                       `json:"threshold,omitempty"`
    // The units of the threshold. This can be KB, Kilobits, MB, Megabits, or GB, Gigabits
    ThresholdUnit        *ThresholdUnit             `json:"thresholdUnit,omitempty"`
    // The interval to monitor for the threshold. This can be Daily, Weekly or Monthly
    CycleType            *RulesCycleType            `json:"cycleType,omitempty"`
    AllowanceThreshold   *AllowanceThreshold        `json:"allowanceThreshold,omitempty"`
    Action               *Actionobject              `json:"action,omitempty"`
    AdditionalProperties map[string]interface{}     `json:"_"`
}

// String implements the fmt.Stringer interface for DataTrigger2,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DataTrigger2) String() string {
    return fmt.Sprintf(
    	"DataTrigger2[DeviceGroup=%v, ConditionType=%v, Comparitor=%v, Threshold=%v, ThresholdUnit=%v, CycleType=%v, AllowanceThreshold=%v, Action=%v, AdditionalProperties=%v]",
    	d.DeviceGroup, d.ConditionType, d.Comparitor, d.Threshold, d.ThresholdUnit, d.CycleType, d.AllowanceThreshold, d.Action, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DataTrigger2.
// It customizes the JSON marshaling process for DataTrigger2 objects.
func (d DataTrigger2) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "deviceGroup", "conditionType", "comparitor", "threshold", "thresholdUnit", "cycleType", "allowanceThreshold", "action"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DataTrigger2 object to a map representation for JSON marshaling.
func (d DataTrigger2) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    if d.DeviceGroup != nil {
        structMap["deviceGroup"] = d.DeviceGroup.toMap()
    }
    if d.ConditionType != nil {
        structMap["conditionType"] = d.ConditionType
    }
    if d.Comparitor != nil {
        structMap["comparitor"] = d.Comparitor
    }
    if d.Threshold != nil {
        structMap["threshold"] = d.Threshold
    }
    if d.ThresholdUnit != nil {
        structMap["thresholdUnit"] = d.ThresholdUnit
    }
    if d.CycleType != nil {
        structMap["cycleType"] = d.CycleType
    }
    if d.AllowanceThreshold != nil {
        structMap["allowanceThreshold"] = d.AllowanceThreshold.toMap()
    }
    if d.Action != nil {
        structMap["action"] = d.Action.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DataTrigger2.
// It customizes the JSON unmarshaling process for DataTrigger2 objects.
func (d *DataTrigger2) UnmarshalJSON(input []byte) error {
    var temp tempDataTrigger2
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceGroup", "conditionType", "comparitor", "threshold", "thresholdUnit", "cycleType", "allowanceThreshold", "action")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.DeviceGroup = temp.DeviceGroup
    d.ConditionType = temp.ConditionType
    d.Comparitor = temp.Comparitor
    d.Threshold = temp.Threshold
    d.ThresholdUnit = temp.ThresholdUnit
    d.CycleType = temp.CycleType
    d.AllowanceThreshold = temp.AllowanceThreshold
    d.Action = temp.Action
    return nil
}

// tempDataTrigger2 is a temporary struct used for validating the fields of DataTrigger2.
type tempDataTrigger2  struct {
    DeviceGroup        *DeviceGroupFilterCriteria `json:"deviceGroup,omitempty"`
    ConditionType      *ConditionType             `json:"conditionType,omitempty"`
    Comparitor         *Comparitor                `json:"comparitor,omitempty"`
    Threshold          *int                       `json:"threshold,omitempty"`
    ThresholdUnit      *ThresholdUnit             `json:"thresholdUnit,omitempty"`
    CycleType          *RulesCycleType            `json:"cycleType,omitempty"`
    AllowanceThreshold *AllowanceThreshold        `json:"allowanceThreshold,omitempty"`
    Action             *Actionobject              `json:"action,omitempty"`
}
