/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// RoadSignId represents a RoadSignId struct.
// It provide a precise location of one or more roadside signs.
type RoadSignId struct {
    // It provides a precise location in the WGS-84 coordinate system, from which short offsets may be used to create additional data using a flat earth projection centered on this location.
    Position  Position `json:"position"`
    ViewAngle string   `json:"viewAngle"`
}

// String implements the fmt.Stringer interface for RoadSignId,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (r RoadSignId) String() string {
    return fmt.Sprintf(
    	"RoadSignId[Position=%v, ViewAngle=%v]",
    	r.Position, r.ViewAngle)
}

// MarshalJSON implements the json.Marshaler interface for RoadSignId.
// It customizes the JSON marshaling process for RoadSignId objects.
func (r RoadSignId) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(r.toMap())
}

// toMap converts the RoadSignId object to a map representation for JSON marshaling.
func (r RoadSignId) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["position"] = r.Position.toMap()
    structMap["viewAngle"] = r.ViewAngle
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for RoadSignId.
// It customizes the JSON unmarshaling process for RoadSignId objects.
func (r *RoadSignId) UnmarshalJSON(input []byte) error {
    var temp tempRoadSignId
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    r.Position = *temp.Position
    r.ViewAngle = *temp.ViewAngle
    return nil
}

// tempRoadSignId is a temporary struct used for validating the fields of RoadSignId.
type tempRoadSignId  struct {
    Position  *Position `json:"position"`
    ViewAngle *string   `json:"viewAngle"`
}

func (r *tempRoadSignId) validate() error {
    var errs []string
    if r.Position == nil {
        errs = append(errs, "required field `position` is missing for type `RoadSignID`")
    }
    if r.ViewAngle == nil {
        errs = append(errs, "required field `viewAngle` is missing for type `RoadSignID`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
