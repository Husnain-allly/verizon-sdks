/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// QosDeviceInfo represents a QosDeviceInfo struct.
type QosDeviceInfo struct {
    DeviceId             QosDeviceId            `json:"deviceId"`
    DeviceIPv6Addr       *string                `json:"deviceIPv6Addr,omitempty"`
    FlowInfo             []FlowInfo             `json:"flowInfo"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for QosDeviceInfo,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (q QosDeviceInfo) String() string {
    return fmt.Sprintf(
    	"QosDeviceInfo[DeviceId=%v, DeviceIPv6Addr=%v, FlowInfo=%v, AdditionalProperties=%v]",
    	q.DeviceId, q.DeviceIPv6Addr, q.FlowInfo, q.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for QosDeviceInfo.
// It customizes the JSON marshaling process for QosDeviceInfo objects.
func (q QosDeviceInfo) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(q.AdditionalProperties,
        "deviceId", "deviceIPv6Addr", "flowInfo"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(q.toMap())
}

// toMap converts the QosDeviceInfo object to a map representation for JSON marshaling.
func (q QosDeviceInfo) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, q.AdditionalProperties)
    structMap["deviceId"] = q.DeviceId.toMap()
    if q.DeviceIPv6Addr != nil {
        structMap["deviceIPv6Addr"] = q.DeviceIPv6Addr
    }
    structMap["flowInfo"] = q.FlowInfo
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for QosDeviceInfo.
// It customizes the JSON unmarshaling process for QosDeviceInfo objects.
func (q *QosDeviceInfo) UnmarshalJSON(input []byte) error {
    var temp tempQosDeviceInfo
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceId", "deviceIPv6Addr", "flowInfo")
    if err != nil {
    	return err
    }
    q.AdditionalProperties = additionalProperties
    
    q.DeviceId = *temp.DeviceId
    q.DeviceIPv6Addr = temp.DeviceIPv6Addr
    q.FlowInfo = *temp.FlowInfo
    return nil
}

// tempQosDeviceInfo is a temporary struct used for validating the fields of QosDeviceInfo.
type tempQosDeviceInfo  struct {
    DeviceId       *QosDeviceId `json:"deviceId"`
    DeviceIPv6Addr *string      `json:"deviceIPv6Addr,omitempty"`
    FlowInfo       *[]FlowInfo  `json:"flowInfo"`
}

func (q *tempQosDeviceInfo) validate() error {
    var errs []string
    if q.DeviceId == nil {
        errs = append(errs, "required field `deviceId` is missing for type `QOSdeviceInfo`")
    }
    if q.FlowInfo == nil {
        errs = append(errs, "required field `flowInfo` is missing for type `QOSdeviceInfo`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
