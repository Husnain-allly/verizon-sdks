/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
    "github.com/google/uuid"
)

// ClientPersistenceResponse represents a ClientPersistenceResponse struct.
// Response for /v2/clients/registration. It provides a generated device ID and the certificates needed to connect the ETX Message Exchange.
type ClientPersistenceResponse struct {
    // The generated ID (UUID v4) for the device. It can be used as:
    // - the MQTT Client ID when connecting to the Message Exchange system
    // - a parameter when asking for the connection endpoint
    // - a parameter when finishing the device registration
    // - a parameter when unregistering the device
    DeviceId      *uuid.UUID     `json:"DeviceID,omitempty"`
    // Structure for the credentials required to connect to the ETX MQTT Message Exchange.
    Certificate   *Certificate   `json:"Certificate,omitempty"`
    // The type of the client that is to be registered. This is one of the major traffic participant groups considered in V2X communication. The system uses this value to define which topics the client will be able to publish and subscribe to.
    // Values:
    // - **Vehicle** - Vehicle with an enclosure around the passengers. (Subtypes: PassengerCar, Truck, Bus, EmergencyVehicle, SchoolBus, MaintenanceVehicle)
    // - **VulnerableRoadUser** - Traffic participants without a protecting enclosure. (Subtypes: Motorcycle, Bicycle, Pedestrian, Scooter)
    // - **TrafficLightController** - A Traffic light controller system. (Subtypes: NA)
    // - **InfrastructureSensor** - Sensors that are deployed in the infrastructure. (Subtypes: RoadSideUnit, Camera, Lidar, Radar, InductiveLoop, MagneticSensor)
    // - **OnboardSensor** - Sensors that are onboard on a vehicle(Subtypes: Camera, Lidar, Radar)
    // - **Software** - A software system or application. (Subtypes: Platform, Application, NA)
    ClientType    *EtxClientType `json:"ClientType,omitempty"`
    // The subtype or subgroup of the client type. This further specifies the client type. For example it will specify if the client is a passenger car or a truck. See the ClientType description for the supported Subtypes for each client type.
    ClientSubtype *ClientSubtype `json:"ClientSubtype,omitempty"`
    // The ID the vendor wants its devices to be registered under. E.g. Verizon, GM, Ford, etc.
    VendorId      *string        `json:"VendorID,omitempty"`
}

// String implements the fmt.Stringer interface for ClientPersistenceResponse,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c ClientPersistenceResponse) String() string {
    return fmt.Sprintf(
    	"ClientPersistenceResponse[DeviceId=%v, Certificate=%v, ClientType=%v, ClientSubtype=%v, VendorId=%v]",
    	c.DeviceId, c.Certificate, c.ClientType, c.ClientSubtype, c.VendorId)
}

// MarshalJSON implements the json.Marshaler interface for ClientPersistenceResponse.
// It customizes the JSON marshaling process for ClientPersistenceResponse objects.
func (c ClientPersistenceResponse) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(c.toMap())
}

// toMap converts the ClientPersistenceResponse object to a map representation for JSON marshaling.
func (c ClientPersistenceResponse) toMap() map[string]any {
    structMap := make(map[string]any)
    if c.DeviceId != nil {
        structMap["DeviceID"] = c.DeviceId
    }
    if c.Certificate != nil {
        structMap["Certificate"] = c.Certificate.toMap()
    }
    if c.ClientType != nil {
        structMap["ClientType"] = c.ClientType
    }
    if c.ClientSubtype != nil {
        structMap["ClientSubtype"] = c.ClientSubtype
    }
    if c.VendorId != nil {
        structMap["VendorID"] = c.VendorId
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ClientPersistenceResponse.
// It customizes the JSON unmarshaling process for ClientPersistenceResponse objects.
func (c *ClientPersistenceResponse) UnmarshalJSON(input []byte) error {
    var temp tempClientPersistenceResponse
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    
    c.DeviceId = temp.DeviceId
    c.Certificate = temp.Certificate
    c.ClientType = temp.ClientType
    c.ClientSubtype = temp.ClientSubtype
    c.VendorId = temp.VendorId
    return nil
}

// tempClientPersistenceResponse is a temporary struct used for validating the fields of ClientPersistenceResponse.
type tempClientPersistenceResponse  struct {
    DeviceId      *uuid.UUID     `json:"DeviceID,omitempty"`
    Certificate   *Certificate   `json:"Certificate,omitempty"`
    ClientType    *EtxClientType `json:"ClientType,omitempty"`
    ClientSubtype *ClientSubtype `json:"ClientSubtype,omitempty"`
    VendorId      *string        `json:"VendorID,omitempty"`
}
