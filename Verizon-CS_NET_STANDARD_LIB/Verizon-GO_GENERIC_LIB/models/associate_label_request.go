/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// AssociateLabelRequest represents a AssociateLabelRequest struct.
type AssociateLabelRequest struct {
    // The name of a billing account. An account name is usually numeric, and must include any leading zeros.
    AccountName          string                 `json:"accountName"`
    // Maximum of 2,000 objects are allowed in the array.
    Labels               AccountLabels          `json:"labels"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for AssociateLabelRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a AssociateLabelRequest) String() string {
    return fmt.Sprintf(
    	"AssociateLabelRequest[AccountName=%v, Labels=%v, AdditionalProperties=%v]",
    	a.AccountName, a.Labels, a.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for AssociateLabelRequest.
// It customizes the JSON marshaling process for AssociateLabelRequest objects.
func (a AssociateLabelRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(a.AdditionalProperties,
        "accountName", "labels"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(a.toMap())
}

// toMap converts the AssociateLabelRequest object to a map representation for JSON marshaling.
func (a AssociateLabelRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, a.AdditionalProperties)
    structMap["accountName"] = a.AccountName
    structMap["labels"] = a.Labels.toMap()
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for AssociateLabelRequest.
// It customizes the JSON unmarshaling process for AssociateLabelRequest objects.
func (a *AssociateLabelRequest) UnmarshalJSON(input []byte) error {
    var temp tempAssociateLabelRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "labels")
    if err != nil {
    	return err
    }
    a.AdditionalProperties = additionalProperties
    
    a.AccountName = *temp.AccountName
    a.Labels = *temp.Labels
    return nil
}

// tempAssociateLabelRequest is a temporary struct used for validating the fields of AssociateLabelRequest.
type tempAssociateLabelRequest  struct {
    AccountName *string        `json:"accountName"`
    Labels      *AccountLabels `json:"labels"`
}

func (a *tempAssociateLabelRequest) validate() error {
    var errs []string
    if a.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `AssociateLabelRequest`")
    }
    if a.Labels == nil {
        errs = append(errs, "required field `labels` is missing for type `AssociateLabelRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
