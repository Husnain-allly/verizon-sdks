/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// DeviceServiceInformation represents a DeviceServiceInformation struct.
// Device service information.
type DeviceServiceInformation struct {
    // ResponseCode and/or a message indicating success or failure of the request.
    ResponseType         *ApiResponseCode       `json:"responseType,omitempty"`
    // The International Mobile Equipment Identifier of the device.
    Imei                 string                 `json:"imei"`
    // Shows if Hyper Precise is enabled (true) or disabled (false).
    BullseyeEnable       bool                   `json:"BullseyeEnable"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceServiceInformation,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceServiceInformation) String() string {
    return fmt.Sprintf(
    	"DeviceServiceInformation[ResponseType=%v, Imei=%v, BullseyeEnable=%v, AdditionalProperties=%v]",
    	d.ResponseType, d.Imei, d.BullseyeEnable, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceServiceInformation.
// It customizes the JSON marshaling process for DeviceServiceInformation objects.
func (d DeviceServiceInformation) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "responseType", "imei", "BullseyeEnable"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceServiceInformation object to a map representation for JSON marshaling.
func (d DeviceServiceInformation) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    if d.ResponseType != nil {
        structMap["responseType"] = d.ResponseType.toMap()
    }
    structMap["imei"] = d.Imei
    structMap["BullseyeEnable"] = d.BullseyeEnable
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceServiceInformation.
// It customizes the JSON unmarshaling process for DeviceServiceInformation objects.
func (d *DeviceServiceInformation) UnmarshalJSON(input []byte) error {
    var temp tempDeviceServiceInformation
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "responseType", "imei", "BullseyeEnable")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.ResponseType = temp.ResponseType
    d.Imei = *temp.Imei
    d.BullseyeEnable = *temp.BullseyeEnable
    return nil
}

// tempDeviceServiceInformation is a temporary struct used for validating the fields of DeviceServiceInformation.
type tempDeviceServiceInformation  struct {
    ResponseType   *ApiResponseCode `json:"responseType,omitempty"`
    Imei           *string          `json:"imei"`
    BullseyeEnable *bool            `json:"BullseyeEnable"`
}

func (d *tempDeviceServiceInformation) validate() error {
    var errs []string
    if d.Imei == nil {
        errs = append(errs, "required field `imei` is missing for type `DeviceServiceInformation`")
    }
    if d.BullseyeEnable == nil {
        errs = append(errs, "required field `BullseyeEnable` is missing for type `DeviceServiceInformation`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
