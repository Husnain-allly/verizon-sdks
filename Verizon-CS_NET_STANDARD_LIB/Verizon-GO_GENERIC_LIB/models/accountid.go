/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// Accountid represents a Accountid struct.
type Accountid struct {
    // The numeric name of the account and must include leading zeroes
    AccountName          *string                `json:"accountName,omitempty"`
    MtasAccountNumber    *string                `json:"mtasAccountNumber,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for Accountid,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a Accountid) String() string {
    return fmt.Sprintf(
    	"Accountid[AccountName=%v, MtasAccountNumber=%v, AdditionalProperties=%v]",
    	a.AccountName, a.MtasAccountNumber, a.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for Accountid.
// It customizes the JSON marshaling process for Accountid objects.
func (a Accountid) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(a.AdditionalProperties,
        "accountName", "mtasAccountNumber"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(a.toMap())
}

// toMap converts the Accountid object to a map representation for JSON marshaling.
func (a Accountid) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, a.AdditionalProperties)
    if a.AccountName != nil {
        structMap["accountName"] = a.AccountName
    }
    if a.MtasAccountNumber != nil {
        structMap["mtasAccountNumber"] = a.MtasAccountNumber
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Accountid.
// It customizes the JSON unmarshaling process for Accountid objects.
func (a *Accountid) UnmarshalJSON(input []byte) error {
    var temp tempAccountid
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "mtasAccountNumber")
    if err != nil {
    	return err
    }
    a.AdditionalProperties = additionalProperties
    
    a.AccountName = temp.AccountName
    a.MtasAccountNumber = temp.MtasAccountNumber
    return nil
}

// tempAccountid is a temporary struct used for validating the fields of Accountid.
type tempAccountid  struct {
    AccountName       *string `json:"accountName,omitempty"`
    MtasAccountNumber *string `json:"mtasAccountNumber,omitempty"`
}
