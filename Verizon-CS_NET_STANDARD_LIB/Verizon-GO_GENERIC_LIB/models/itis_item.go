/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// ItisItem represents a ItisItem struct.
type ItisItem struct {
    // The ITIS Code that describes the alert/danger/hazard. All ITS standards use the same types here to explain the type of the alert/danger/hazard involved.
    // The complete set of ITIS codes can be found in Volume Two of the SAE J2540 standard. This is a set of over 1000 items which are used to encode common events and list items in ITS.
    Itis int `json:"itis"`
}

// String implements the fmt.Stringer interface for ItisItem,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (i ItisItem) String() string {
    return fmt.Sprintf(
    	"ItisItem[Itis=%v]",
    	i.Itis)
}

// MarshalJSON implements the json.Marshaler interface for ItisItem.
// It customizes the JSON marshaling process for ItisItem objects.
func (i ItisItem) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(i.toMap())
}

// toMap converts the ItisItem object to a map representation for JSON marshaling.
func (i ItisItem) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["itis"] = i.Itis
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ItisItem.
// It customizes the JSON unmarshaling process for ItisItem objects.
func (i *ItisItem) UnmarshalJSON(input []byte) error {
    var temp tempItisItem
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    i.Itis = *temp.Itis
    return nil
}

// tempItisItem is a temporary struct used for validating the fields of ItisItem.
type tempItisItem  struct {
    Itis *int `json:"itis"`
}

func (i *tempItisItem) validate() error {
    var errs []string
    if i.Itis == nil {
        errs = append(errs, "required field `itis` is missing for type `ITISItem`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
