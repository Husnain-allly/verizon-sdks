/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// V3LicenseAssignedRemovedResult represents a V3LicenseAssignedRemovedResult struct.
// License assignment/removal response.
type V3LicenseAssignedRemovedResult struct {
    // Account name.
    AccountName          string                 `json:"accountName"`
    // Total license count.
    LicCount             int                    `json:"licCount"`
    // Assigned license count.
    LicUsedCount         int                    `json:"licUsedCount"`
    // List of devices with id in IMEI.
    DeviceList           []V3DeviceStatus       `json:"deviceList"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for V3LicenseAssignedRemovedResult,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (v V3LicenseAssignedRemovedResult) String() string {
    return fmt.Sprintf(
    	"V3LicenseAssignedRemovedResult[AccountName=%v, LicCount=%v, LicUsedCount=%v, DeviceList=%v, AdditionalProperties=%v]",
    	v.AccountName, v.LicCount, v.LicUsedCount, v.DeviceList, v.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for V3LicenseAssignedRemovedResult.
// It customizes the JSON marshaling process for V3LicenseAssignedRemovedResult objects.
func (v V3LicenseAssignedRemovedResult) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(v.AdditionalProperties,
        "accountName", "licCount", "licUsedCount", "deviceList"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(v.toMap())
}

// toMap converts the V3LicenseAssignedRemovedResult object to a map representation for JSON marshaling.
func (v V3LicenseAssignedRemovedResult) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, v.AdditionalProperties)
    structMap["accountName"] = v.AccountName
    structMap["licCount"] = v.LicCount
    structMap["licUsedCount"] = v.LicUsedCount
    structMap["deviceList"] = v.DeviceList
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for V3LicenseAssignedRemovedResult.
// It customizes the JSON unmarshaling process for V3LicenseAssignedRemovedResult objects.
func (v *V3LicenseAssignedRemovedResult) UnmarshalJSON(input []byte) error {
    var temp tempV3LicenseAssignedRemovedResult
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "licCount", "licUsedCount", "deviceList")
    if err != nil {
    	return err
    }
    v.AdditionalProperties = additionalProperties
    
    v.AccountName = *temp.AccountName
    v.LicCount = *temp.LicCount
    v.LicUsedCount = *temp.LicUsedCount
    v.DeviceList = *temp.DeviceList
    return nil
}

// tempV3LicenseAssignedRemovedResult is a temporary struct used for validating the fields of V3LicenseAssignedRemovedResult.
type tempV3LicenseAssignedRemovedResult  struct {
    AccountName  *string           `json:"accountName"`
    LicCount     *int              `json:"licCount"`
    LicUsedCount *int              `json:"licUsedCount"`
    DeviceList   *[]V3DeviceStatus `json:"deviceList"`
}

func (v *tempV3LicenseAssignedRemovedResult) validate() error {
    var errs []string
    if v.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `V3LicenseAssignedRemovedResult`")
    }
    if v.LicCount == nil {
        errs = append(errs, "required field `licCount` is missing for type `V3LicenseAssignedRemovedResult`")
    }
    if v.LicUsedCount == nil {
        errs = append(errs, "required field `licUsedCount` is missing for type `V3LicenseAssignedRemovedResult`")
    }
    if v.DeviceList == nil {
        errs = append(errs, "required field `deviceList` is missing for type `V3LicenseAssignedRemovedResult`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
