/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// AddDevicesResult represents a AddDevicesResult struct.
// Contains the device identifiers and a success or failure response for each device in the request.
type AddDevicesResult struct {
    // Identifiers for the device.
    DeviceIds            []DeviceId             `json:"deviceIds,omitempty"`
    // The success message or error message for the current device.
    Response             *string                `json:"response,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for AddDevicesResult,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a AddDevicesResult) String() string {
    return fmt.Sprintf(
    	"AddDevicesResult[DeviceIds=%v, Response=%v, AdditionalProperties=%v]",
    	a.DeviceIds, a.Response, a.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for AddDevicesResult.
// It customizes the JSON marshaling process for AddDevicesResult objects.
func (a AddDevicesResult) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(a.AdditionalProperties,
        "deviceIds", "response"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(a.toMap())
}

// toMap converts the AddDevicesResult object to a map representation for JSON marshaling.
func (a AddDevicesResult) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, a.AdditionalProperties)
    if a.DeviceIds != nil {
        structMap["deviceIds"] = a.DeviceIds
    }
    if a.Response != nil {
        structMap["response"] = a.Response
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for AddDevicesResult.
// It customizes the JSON unmarshaling process for AddDevicesResult objects.
func (a *AddDevicesResult) UnmarshalJSON(input []byte) error {
    var temp tempAddDevicesResult
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceIds", "response")
    if err != nil {
    	return err
    }
    a.AdditionalProperties = additionalProperties
    
    a.DeviceIds = temp.DeviceIds
    a.Response = temp.Response
    return nil
}

// tempAddDevicesResult is a temporary struct used for validating the fields of AddDevicesResult.
type tempAddDevicesResult  struct {
    DeviceIds []DeviceId `json:"deviceIds,omitempty"`
    Response  *string    `json:"response,omitempty"`
}
