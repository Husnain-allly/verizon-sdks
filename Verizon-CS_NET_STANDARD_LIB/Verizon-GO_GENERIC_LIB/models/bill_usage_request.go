/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// BillUsageRequest represents a BillUsageRequest struct.
// Bill usage request.
type BillUsageRequest struct {
    // Account identifier.
    AccountName          string                 `json:"accountName"`
    // Start date to search for billable usage, mm-dd-yyyy.
    StartDate            string                 `json:"startDate"`
    // End date to search for billable usage, mm-dd-yyyy.
    EndDate              string                 `json:"endDate"`
    // Request usage for single or multiple accounts.
    UsageForAllAccounts  *bool                  `json:"usageForAllAccounts,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for BillUsageRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (b BillUsageRequest) String() string {
    return fmt.Sprintf(
    	"BillUsageRequest[AccountName=%v, StartDate=%v, EndDate=%v, UsageForAllAccounts=%v, AdditionalProperties=%v]",
    	b.AccountName, b.StartDate, b.EndDate, b.UsageForAllAccounts, b.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for BillUsageRequest.
// It customizes the JSON marshaling process for BillUsageRequest objects.
func (b BillUsageRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(b.AdditionalProperties,
        "accountName", "startDate", "endDate", "usageForAllAccounts"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(b.toMap())
}

// toMap converts the BillUsageRequest object to a map representation for JSON marshaling.
func (b BillUsageRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, b.AdditionalProperties)
    structMap["accountName"] = b.AccountName
    structMap["startDate"] = b.StartDate
    structMap["endDate"] = b.EndDate
    if b.UsageForAllAccounts != nil {
        structMap["usageForAllAccounts"] = b.UsageForAllAccounts
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for BillUsageRequest.
// It customizes the JSON unmarshaling process for BillUsageRequest objects.
func (b *BillUsageRequest) UnmarshalJSON(input []byte) error {
    var temp tempBillUsageRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "startDate", "endDate", "usageForAllAccounts")
    if err != nil {
    	return err
    }
    b.AdditionalProperties = additionalProperties
    
    b.AccountName = *temp.AccountName
    b.StartDate = *temp.StartDate
    b.EndDate = *temp.EndDate
    b.UsageForAllAccounts = temp.UsageForAllAccounts
    return nil
}

// tempBillUsageRequest is a temporary struct used for validating the fields of BillUsageRequest.
type tempBillUsageRequest  struct {
    AccountName         *string `json:"accountName"`
    StartDate           *string `json:"startDate"`
    EndDate             *string `json:"endDate"`
    UsageForAllAccounts *bool   `json:"usageForAllAccounts,omitempty"`
}

func (b *tempBillUsageRequest) validate() error {
    var errs []string
    if b.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `BillUsageRequest`")
    }
    if b.StartDate == nil {
        errs = append(errs, "required field `startDate` is missing for type `BillUsageRequest`")
    }
    if b.EndDate == nil {
        errs = append(errs, "required field `endDate` is missing for type `BillUsageRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
