/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// DtoDeviceCommand represents a DtoDeviceCommand struct.
type DtoDeviceCommand struct {
    // The numeric account name, which must include leading zeros
    AccountName          *string                `json:"accountName,omitempty"`
    Configuration        *Rbstiltconfig         `json:"configuration,omitempty"`
    Resourceidentifier   *DtoResourceidentifier `json:"resourceidentifier,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DtoDeviceCommand,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DtoDeviceCommand) String() string {
    return fmt.Sprintf(
    	"DtoDeviceCommand[AccountName=%v, Configuration=%v, Resourceidentifier=%v, AdditionalProperties=%v]",
    	d.AccountName, d.Configuration, d.Resourceidentifier, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DtoDeviceCommand.
// It customizes the JSON marshaling process for DtoDeviceCommand objects.
func (d DtoDeviceCommand) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "accountName", "configuration", "resourceidentifier"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DtoDeviceCommand object to a map representation for JSON marshaling.
func (d DtoDeviceCommand) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    if d.AccountName != nil {
        structMap["accountName"] = d.AccountName
    }
    if d.Configuration != nil {
        structMap["configuration"] = d.Configuration.toMap()
    }
    if d.Resourceidentifier != nil {
        structMap["resourceidentifier"] = d.Resourceidentifier.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DtoDeviceCommand.
// It customizes the JSON unmarshaling process for DtoDeviceCommand objects.
func (d *DtoDeviceCommand) UnmarshalJSON(input []byte) error {
    var temp tempDtoDeviceCommand
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "configuration", "resourceidentifier")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.AccountName = temp.AccountName
    d.Configuration = temp.Configuration
    d.Resourceidentifier = temp.Resourceidentifier
    return nil
}

// tempDtoDeviceCommand is a temporary struct used for validating the fields of DtoDeviceCommand.
type tempDtoDeviceCommand  struct {
    AccountName        *string                `json:"accountName,omitempty"`
    Configuration      *Rbstiltconfig         `json:"configuration,omitempty"`
    Resourceidentifier *DtoResourceidentifier `json:"resourceidentifier,omitempty"`
}
