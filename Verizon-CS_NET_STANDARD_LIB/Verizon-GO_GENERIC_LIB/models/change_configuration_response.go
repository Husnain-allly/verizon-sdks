/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// ChangeConfigurationResponse represents a ChangeConfigurationResponse struct.
// Change Configuration resource definition.
type ChangeConfigurationResponse struct {
    // The action requested in this event; “change” for device configuration changes.
    Action               *string                `json:"action,omitempty"`
    // The date and time of the change request.
    Createdon            *string                `json:"createdon,omitempty"`
    // The device’s ThingSpace UUID.
    Deviceid             *string                `json:"deviceid,omitempty"`
    // List of fields affected by the event.
    Fields               *Fields                `json:"fields,omitempty"`
    // foreign id
    Foreignid            *string                `json:"foreignid,omitempty"`
    // The unique ID of this ts.event.configuration event.
    Id                   *string                `json:"id,omitempty"`
    // The kind of the ThingSpace resource that is being reported
    Kind                 *string                `json:"kind,omitempty"`
    // The date and time that the event was last updated.
    Lastupdated          *string                `json:"lastupdated,omitempty"`
    // The name of the event; “SetConfigurationReq” for device configuration changes.
    Name                 *string                `json:"name,omitempty"`
    // The current status of the request. The value will be “pending” until the device wakes up and ThingSpace can send the request to the device.
    State                *string                `json:"state,omitempty"`
    // transaction id
    Transactionid        *string                `json:"transactionid,omitempty"`
    // version
    Version              *string                `json:"version,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for ChangeConfigurationResponse,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c ChangeConfigurationResponse) String() string {
    return fmt.Sprintf(
    	"ChangeConfigurationResponse[Action=%v, Createdon=%v, Deviceid=%v, Fields=%v, Foreignid=%v, Id=%v, Kind=%v, Lastupdated=%v, Name=%v, State=%v, Transactionid=%v, Version=%v, AdditionalProperties=%v]",
    	c.Action, c.Createdon, c.Deviceid, c.Fields, c.Foreignid, c.Id, c.Kind, c.Lastupdated, c.Name, c.State, c.Transactionid, c.Version, c.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for ChangeConfigurationResponse.
// It customizes the JSON marshaling process for ChangeConfigurationResponse objects.
func (c ChangeConfigurationResponse) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(c.AdditionalProperties,
        "action", "createdon", "deviceid", "fields", "foreignid", "id", "kind", "lastupdated", "name", "state", "transactionid", "version"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(c.toMap())
}

// toMap converts the ChangeConfigurationResponse object to a map representation for JSON marshaling.
func (c ChangeConfigurationResponse) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, c.AdditionalProperties)
    if c.Action != nil {
        structMap["action"] = c.Action
    }
    if c.Createdon != nil {
        structMap["createdon"] = c.Createdon
    }
    if c.Deviceid != nil {
        structMap["deviceid"] = c.Deviceid
    }
    if c.Fields != nil {
        structMap["fields"] = c.Fields.toMap()
    }
    if c.Foreignid != nil {
        structMap["foreignid"] = c.Foreignid
    }
    if c.Id != nil {
        structMap["id"] = c.Id
    }
    if c.Kind != nil {
        structMap["kind"] = c.Kind
    }
    if c.Lastupdated != nil {
        structMap["lastupdated"] = c.Lastupdated
    }
    if c.Name != nil {
        structMap["name"] = c.Name
    }
    if c.State != nil {
        structMap["state"] = c.State
    }
    if c.Transactionid != nil {
        structMap["transactionid"] = c.Transactionid
    }
    if c.Version != nil {
        structMap["version"] = c.Version
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ChangeConfigurationResponse.
// It customizes the JSON unmarshaling process for ChangeConfigurationResponse objects.
func (c *ChangeConfigurationResponse) UnmarshalJSON(input []byte) error {
    var temp tempChangeConfigurationResponse
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "action", "createdon", "deviceid", "fields", "foreignid", "id", "kind", "lastupdated", "name", "state", "transactionid", "version")
    if err != nil {
    	return err
    }
    c.AdditionalProperties = additionalProperties
    
    c.Action = temp.Action
    c.Createdon = temp.Createdon
    c.Deviceid = temp.Deviceid
    c.Fields = temp.Fields
    c.Foreignid = temp.Foreignid
    c.Id = temp.Id
    c.Kind = temp.Kind
    c.Lastupdated = temp.Lastupdated
    c.Name = temp.Name
    c.State = temp.State
    c.Transactionid = temp.Transactionid
    c.Version = temp.Version
    return nil
}

// tempChangeConfigurationResponse is a temporary struct used for validating the fields of ChangeConfigurationResponse.
type tempChangeConfigurationResponse  struct {
    Action        *string `json:"action,omitempty"`
    Createdon     *string `json:"createdon,omitempty"`
    Deviceid      *string `json:"deviceid,omitempty"`
    Fields        *Fields `json:"fields,omitempty"`
    Foreignid     *string `json:"foreignid,omitempty"`
    Id            *string `json:"id,omitempty"`
    Kind          *string `json:"kind,omitempty"`
    Lastupdated   *string `json:"lastupdated,omitempty"`
    Name          *string `json:"name,omitempty"`
    State         *string `json:"state,omitempty"`
    Transactionid *string `json:"transactionid,omitempty"`
    Version       *string `json:"version,omitempty"`
}
