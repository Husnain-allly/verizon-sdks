/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// NodeOffsetPointLl represents a NodeOffsetPointLl struct.
// The NodeOffsetPointLL data frame presents a structure to hold 64 bits sized data frames for a single node geometry path. Nodes are described in terms of latitude and longitude.
type NodeOffsetPointLl struct {
    // A 64-bit node type with lat-long values expressed in standard SAE 1/10th of a microdegree.
    NodeLatLon NodeLLmD64B `json:"nodeLatLon"`
}

// String implements the fmt.Stringer interface for NodeOffsetPointLl,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (n NodeOffsetPointLl) String() string {
    return fmt.Sprintf(
    	"NodeOffsetPointLl[NodeLatLon=%v]",
    	n.NodeLatLon)
}

// MarshalJSON implements the json.Marshaler interface for NodeOffsetPointLl.
// It customizes the JSON marshaling process for NodeOffsetPointLl objects.
func (n NodeOffsetPointLl) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(n.toMap())
}

// toMap converts the NodeOffsetPointLl object to a map representation for JSON marshaling.
func (n NodeOffsetPointLl) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["nodeLatLon"] = n.NodeLatLon.toMap()
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for NodeOffsetPointLl.
// It customizes the JSON unmarshaling process for NodeOffsetPointLl objects.
func (n *NodeOffsetPointLl) UnmarshalJSON(input []byte) error {
    var temp tempNodeOffsetPointLl
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    n.NodeLatLon = *temp.NodeLatLon
    return nil
}

// tempNodeOffsetPointLl is a temporary struct used for validating the fields of NodeOffsetPointLl.
type tempNodeOffsetPointLl  struct {
    NodeLatLon *NodeLLmD64B `json:"nodeLatLon"`
}

func (n *tempNodeOffsetPointLl) validate() error {
    var errs []string
    if n.NodeLatLon == nil {
        errs = append(errs, "required field `nodeLatLon` is missing for type `NodeOffsetPointLL`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
