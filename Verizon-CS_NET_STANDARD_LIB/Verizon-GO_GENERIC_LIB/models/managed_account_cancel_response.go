/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// ManagedAccountCancelResponse represents a ManagedAccountCancelResponse struct.
type ManagedAccountCancelResponse struct {
    // Transaction identifier
    Txid                 string                 `json:"txid"`
    // Managed account identifier
    AccountName          string                 `json:"accountName"`
    // Primary account identifier
    PaccountName         string                 `json:"paccountName"`
    // Service name
    ServiceName          ServiceName            `json:"serviceName"`
    // Deactivate/cancel status, Success or Fail
    Status               string                 `json:"status"`
    // Detailed reason
    Reason               string                 `json:"reason"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for ManagedAccountCancelResponse,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (m ManagedAccountCancelResponse) String() string {
    return fmt.Sprintf(
    	"ManagedAccountCancelResponse[Txid=%v, AccountName=%v, PaccountName=%v, ServiceName=%v, Status=%v, Reason=%v, AdditionalProperties=%v]",
    	m.Txid, m.AccountName, m.PaccountName, m.ServiceName, m.Status, m.Reason, m.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for ManagedAccountCancelResponse.
// It customizes the JSON marshaling process for ManagedAccountCancelResponse objects.
func (m ManagedAccountCancelResponse) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(m.AdditionalProperties,
        "txid", "accountName", "paccountName", "serviceName", "status", "reason"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(m.toMap())
}

// toMap converts the ManagedAccountCancelResponse object to a map representation for JSON marshaling.
func (m ManagedAccountCancelResponse) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, m.AdditionalProperties)
    structMap["txid"] = m.Txid
    structMap["accountName"] = m.AccountName
    structMap["paccountName"] = m.PaccountName
    structMap["serviceName"] = m.ServiceName
    structMap["status"] = m.Status
    structMap["reason"] = m.Reason
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ManagedAccountCancelResponse.
// It customizes the JSON unmarshaling process for ManagedAccountCancelResponse objects.
func (m *ManagedAccountCancelResponse) UnmarshalJSON(input []byte) error {
    var temp tempManagedAccountCancelResponse
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "txid", "accountName", "paccountName", "serviceName", "status", "reason")
    if err != nil {
    	return err
    }
    m.AdditionalProperties = additionalProperties
    
    m.Txid = *temp.Txid
    m.AccountName = *temp.AccountName
    m.PaccountName = *temp.PaccountName
    m.ServiceName = *temp.ServiceName
    m.Status = *temp.Status
    m.Reason = *temp.Reason
    return nil
}

// tempManagedAccountCancelResponse is a temporary struct used for validating the fields of ManagedAccountCancelResponse.
type tempManagedAccountCancelResponse  struct {
    Txid         *string      `json:"txid"`
    AccountName  *string      `json:"accountName"`
    PaccountName *string      `json:"paccountName"`
    ServiceName  *ServiceName `json:"serviceName"`
    Status       *string      `json:"status"`
    Reason       *string      `json:"reason"`
}

func (m *tempManagedAccountCancelResponse) validate() error {
    var errs []string
    if m.Txid == nil {
        errs = append(errs, "required field `txid` is missing for type `ManagedAccountCancelResponse`")
    }
    if m.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `ManagedAccountCancelResponse`")
    }
    if m.PaccountName == nil {
        errs = append(errs, "required field `paccountName` is missing for type `ManagedAccountCancelResponse`")
    }
    if m.ServiceName == nil {
        errs = append(errs, "required field `serviceName` is missing for type `ManagedAccountCancelResponse`")
    }
    if m.Status == nil {
        errs = append(errs, "required field `status` is missing for type `ManagedAccountCancelResponse`")
    }
    if m.Reason == nil {
        errs = append(errs, "required field `reason` is missing for type `ManagedAccountCancelResponse`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
