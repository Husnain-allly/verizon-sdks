/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// NodeLl represents a NodeLl struct.
// The NodeLL data frame presents a structure to hold data for a signal node point in a lane. Each selected node has a complete lat-long representation.
type NodeLl struct {
    // The NodeOffsetPointLL data frame presents a structure to hold 64 bits sized data frames for a single node geometry path. Nodes are described in terms of latitude and longitude.
    Delta NodeOffsetPointLl `json:"delta"`
}

// String implements the fmt.Stringer interface for NodeLl,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (n NodeLl) String() string {
    return fmt.Sprintf(
    	"NodeLl[Delta=%v]",
    	n.Delta)
}

// MarshalJSON implements the json.Marshaler interface for NodeLl.
// It customizes the JSON marshaling process for NodeLl objects.
func (n NodeLl) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(n.toMap())
}

// toMap converts the NodeLl object to a map representation for JSON marshaling.
func (n NodeLl) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["delta"] = n.Delta.toMap()
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for NodeLl.
// It customizes the JSON unmarshaling process for NodeLl objects.
func (n *NodeLl) UnmarshalJSON(input []byte) error {
    var temp tempNodeLl
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    n.Delta = *temp.Delta
    return nil
}

// tempNodeLl is a temporary struct used for validating the fields of NodeLl.
type tempNodeLl  struct {
    Delta *NodeOffsetPointLl `json:"delta"`
}

func (n *tempNodeLl) validate() error {
    var errs []string
    if n.Delta == nil {
        errs = append(errs, "required field `delta` is missing for type `NodeLL`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
