/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// PositionError represents a PositionError struct.
// Position error.
type PositionError struct {
    // Time location obtained.
    Time                 *string                `json:"time,omitempty"`
    // UTC offset of time.
    Utcoffset            *string                `json:"utcoffset,omitempty"`
    // Error type returned from location server.
    Type                 *string                `json:"type,omitempty"`
    // Additional information about the error.
    Info                 *string                `json:"info,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for PositionError,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (p PositionError) String() string {
    return fmt.Sprintf(
    	"PositionError[Time=%v, Utcoffset=%v, Type=%v, Info=%v, AdditionalProperties=%v]",
    	p.Time, p.Utcoffset, p.Type, p.Info, p.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for PositionError.
// It customizes the JSON marshaling process for PositionError objects.
func (p PositionError) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(p.AdditionalProperties,
        "time", "utcoffset", "type", "info"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(p.toMap())
}

// toMap converts the PositionError object to a map representation for JSON marshaling.
func (p PositionError) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, p.AdditionalProperties)
    if p.Time != nil {
        structMap["time"] = p.Time
    }
    if p.Utcoffset != nil {
        structMap["utcoffset"] = p.Utcoffset
    }
    if p.Type != nil {
        structMap["type"] = p.Type
    }
    if p.Info != nil {
        structMap["info"] = p.Info
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for PositionError.
// It customizes the JSON unmarshaling process for PositionError objects.
func (p *PositionError) UnmarshalJSON(input []byte) error {
    var temp tempPositionError
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "time", "utcoffset", "type", "info")
    if err != nil {
    	return err
    }
    p.AdditionalProperties = additionalProperties
    
    p.Time = temp.Time
    p.Utcoffset = temp.Utcoffset
    p.Type = temp.Type
    p.Info = temp.Info
    return nil
}

// tempPositionError is a temporary struct used for validating the fields of PositionError.
type tempPositionError  struct {
    Time      *string `json:"time,omitempty"`
    Utcoffset *string `json:"utcoffset,omitempty"`
    Type      *string `json:"type,omitempty"`
    Info      *string `json:"info,omitempty"`
}
