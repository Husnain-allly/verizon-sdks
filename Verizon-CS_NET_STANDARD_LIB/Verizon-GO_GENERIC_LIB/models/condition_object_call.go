/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// ConditionObjectCall represents a ConditionObjectCall struct.
type ConditionObjectCall struct {
    // The condition type being monitored
    ConditionType        *ConditionType         `json:"conditionType,omitempty"`
    // The boolean of the comparison. `gt` is Greater Than, `lt` is Less Than and `eq` is Equal To
    Comparitor           *Comparitor            `json:"comparitor,omitempty"`
    // The threshold value the trigger monitors for
    Threshold            *int                   `json:"threshold,omitempty"`
    // The units of the threshold. This can be KB, Kilobits, MB, Megabits, or GB, Gigabits
    ThresholdUnit        *ThresholdUnit         `json:"thresholdUnit,omitempty"`
    // The interval to monitor for the threshold. This can be Daily, Weekly or Monthly
    CycleType            *RulesCycleType        `json:"cycleType,omitempty"`
    AllowanceThreshold   *AllowanceThreshold    `json:"allowanceThreshold,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for ConditionObjectCall,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c ConditionObjectCall) String() string {
    return fmt.Sprintf(
    	"ConditionObjectCall[ConditionType=%v, Comparitor=%v, Threshold=%v, ThresholdUnit=%v, CycleType=%v, AllowanceThreshold=%v, AdditionalProperties=%v]",
    	c.ConditionType, c.Comparitor, c.Threshold, c.ThresholdUnit, c.CycleType, c.AllowanceThreshold, c.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for ConditionObjectCall.
// It customizes the JSON marshaling process for ConditionObjectCall objects.
func (c ConditionObjectCall) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(c.AdditionalProperties,
        "conditionType", "comparitor", "threshold", "thresholdUnit", "cycleType", "allowanceThreshold"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(c.toMap())
}

// toMap converts the ConditionObjectCall object to a map representation for JSON marshaling.
func (c ConditionObjectCall) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, c.AdditionalProperties)
    if c.ConditionType != nil {
        structMap["conditionType"] = c.ConditionType
    }
    if c.Comparitor != nil {
        structMap["comparitor"] = c.Comparitor
    }
    if c.Threshold != nil {
        structMap["threshold"] = c.Threshold
    }
    if c.ThresholdUnit != nil {
        structMap["thresholdUnit"] = c.ThresholdUnit
    }
    if c.CycleType != nil {
        structMap["cycleType"] = c.CycleType
    }
    if c.AllowanceThreshold != nil {
        structMap["allowanceThreshold"] = c.AllowanceThreshold.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ConditionObjectCall.
// It customizes the JSON unmarshaling process for ConditionObjectCall objects.
func (c *ConditionObjectCall) UnmarshalJSON(input []byte) error {
    var temp tempConditionObjectCall
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "conditionType", "comparitor", "threshold", "thresholdUnit", "cycleType", "allowanceThreshold")
    if err != nil {
    	return err
    }
    c.AdditionalProperties = additionalProperties
    
    c.ConditionType = temp.ConditionType
    c.Comparitor = temp.Comparitor
    c.Threshold = temp.Threshold
    c.ThresholdUnit = temp.ThresholdUnit
    c.CycleType = temp.CycleType
    c.AllowanceThreshold = temp.AllowanceThreshold
    return nil
}

// tempConditionObjectCall is a temporary struct used for validating the fields of ConditionObjectCall.
type tempConditionObjectCall  struct {
    ConditionType      *ConditionType      `json:"conditionType,omitempty"`
    Comparitor         *Comparitor         `json:"comparitor,omitempty"`
    Threshold          *int                `json:"threshold,omitempty"`
    ThresholdUnit      *ThresholdUnit      `json:"thresholdUnit,omitempty"`
    CycleType          *RulesCycleType     `json:"cycleType,omitempty"`
    AllowanceThreshold *AllowanceThreshold `json:"allowanceThreshold,omitempty"`
}
