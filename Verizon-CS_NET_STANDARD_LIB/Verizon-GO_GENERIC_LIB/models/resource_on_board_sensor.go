/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// ResourceOnBoardSensor represents a ResourceOnBoardSensor struct.
type ResourceOnBoardSensor struct {
    // the IEEE EUI64 address space used to identify a device. It is supplied by the device manufacturer
    Deveui      string                 `json:"deveui"`
    // global application ID in IEEE EUI64 address space that uniquely identifies the entity able to process the JoinReq frame
    Appeui      string                 `json:"appeui"`
    // an encryption key used for messages during every over the air activation
    Appkey      string                 `json:"appkey"`
    // Class of the sensor device. Valid values are Class A (A), Class B (B), and Class C (C). All LoRaWAN devices must implement Class A
    Class       string                 `json:"class"`
    // The kind of sensor device
    Kind        string                 `json:"kind"`
    Description string                 `json:"description"`
    Name        string                 `json:"name"`
    // Name/value pair, where the value is client defined.  The purpose is to keep track of current state per device action.
    Customdata  map[string]interface{} `json:"customdata,omitempty"`
}

// String implements the fmt.Stringer interface for ResourceOnBoardSensor,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (r ResourceOnBoardSensor) String() string {
    return fmt.Sprintf(
    	"ResourceOnBoardSensor[Deveui=%v, Appeui=%v, Appkey=%v, Class=%v, Kind=%v, Description=%v, Name=%v, Customdata=%v]",
    	r.Deveui, r.Appeui, r.Appkey, r.Class, r.Kind, r.Description, r.Name, r.Customdata)
}

// MarshalJSON implements the json.Marshaler interface for ResourceOnBoardSensor.
// It customizes the JSON marshaling process for ResourceOnBoardSensor objects.
func (r ResourceOnBoardSensor) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(r.toMap())
}

// toMap converts the ResourceOnBoardSensor object to a map representation for JSON marshaling.
func (r ResourceOnBoardSensor) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["deveui"] = r.Deveui
    structMap["appeui"] = r.Appeui
    structMap["appkey"] = r.Appkey
    structMap["class"] = r.Class
    structMap["kind"] = r.Kind
    structMap["description"] = r.Description
    structMap["name"] = r.Name
    if r.Customdata != nil {
        structMap["customdata"] = r.Customdata
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ResourceOnBoardSensor.
// It customizes the JSON unmarshaling process for ResourceOnBoardSensor objects.
func (r *ResourceOnBoardSensor) UnmarshalJSON(input []byte) error {
    var temp tempResourceOnBoardSensor
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    r.Deveui = *temp.Deveui
    r.Appeui = *temp.Appeui
    r.Appkey = *temp.Appkey
    r.Class = *temp.Class
    r.Kind = *temp.Kind
    r.Description = *temp.Description
    r.Name = *temp.Name
    r.Customdata = temp.Customdata
    return nil
}

// tempResourceOnBoardSensor is a temporary struct used for validating the fields of ResourceOnBoardSensor.
type tempResourceOnBoardSensor  struct {
    Deveui      *string                `json:"deveui"`
    Appeui      *string                `json:"appeui"`
    Appkey      *string                `json:"appkey"`
    Class       *string                `json:"class"`
    Kind        *string                `json:"kind"`
    Description *string                `json:"description"`
    Name        *string                `json:"name"`
    Customdata  map[string]interface{} `json:"customdata,omitempty"`
}

func (r *tempResourceOnBoardSensor) validate() error {
    var errs []string
    if r.Deveui == nil {
        errs = append(errs, "required field `deveui` is missing for type `resource.OnBoardSensor`")
    }
    if r.Appeui == nil {
        errs = append(errs, "required field `appeui` is missing for type `resource.OnBoardSensor`")
    }
    if r.Appkey == nil {
        errs = append(errs, "required field `appkey` is missing for type `resource.OnBoardSensor`")
    }
    if r.Class == nil {
        errs = append(errs, "required field `class` is missing for type `resource.OnBoardSensor`")
    }
    if r.Kind == nil {
        errs = append(errs, "required field `kind` is missing for type `resource.OnBoardSensor`")
    }
    if r.Description == nil {
        errs = append(errs, "required field `description` is missing for type `resource.OnBoardSensor`")
    }
    if r.Name == nil {
        errs = append(errs, "required field `name` is missing for type `resource.OnBoardSensor`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
