/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// DtoUserDto represents a DtoUserDto struct.
type DtoUserDto struct {
    // Contact email for the group
    Email      *string                `json:"email,omitempty"`
    // The first name in the user record
    Firstname  *string                `json:"firstname,omitempty"`
    // The last name in the user record
    Lastname   *string                `json:"lastname,omitempty"`
    // The Mobile Directory Number
    Mdn        *string                `json:"mdn,omitempty"`
    // Name/value pair, where the value is client defined.  The purpose is to keep track of current state per device action.
    Customdata map[string]interface{} `json:"customdata,omitempty"`
}

// String implements the fmt.Stringer interface for DtoUserDto,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DtoUserDto) String() string {
    return fmt.Sprintf(
    	"DtoUserDto[Email=%v, Firstname=%v, Lastname=%v, Mdn=%v, Customdata=%v]",
    	d.Email, d.Firstname, d.Lastname, d.Mdn, d.Customdata)
}

// MarshalJSON implements the json.Marshaler interface for DtoUserDto.
// It customizes the JSON marshaling process for DtoUserDto objects.
func (d DtoUserDto) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(d.toMap())
}

// toMap converts the DtoUserDto object to a map representation for JSON marshaling.
func (d DtoUserDto) toMap() map[string]any {
    structMap := make(map[string]any)
    if d.Email != nil {
        structMap["email"] = d.Email
    }
    if d.Firstname != nil {
        structMap["firstname"] = d.Firstname
    }
    if d.Lastname != nil {
        structMap["lastname"] = d.Lastname
    }
    if d.Mdn != nil {
        structMap["mdn"] = d.Mdn
    }
    if d.Customdata != nil {
        structMap["customdata"] = d.Customdata
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DtoUserDto.
// It customizes the JSON unmarshaling process for DtoUserDto objects.
func (d *DtoUserDto) UnmarshalJSON(input []byte) error {
    var temp tempDtoUserDto
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    
    d.Email = temp.Email
    d.Firstname = temp.Firstname
    d.Lastname = temp.Lastname
    d.Mdn = temp.Mdn
    d.Customdata = temp.Customdata
    return nil
}

// tempDtoUserDto is a temporary struct used for validating the fields of DtoUserDto.
type tempDtoUserDto  struct {
    Email      *string                `json:"email,omitempty"`
    Firstname  *string                `json:"firstname,omitempty"`
    Lastname   *string                `json:"lastname,omitempty"`
    Mdn        *string                `json:"mdn,omitempty"`
    Customdata map[string]interface{} `json:"customdata,omitempty"`
}
