/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// SaeAlert represents a SaeAlert struct.
type SaeAlert struct {
    // The ITIS Code that describes the alert/danger/hazard. All ITS standards use the same types here to explain the type of the alert/danger/hazard involved.
    // The complete set of ITIS codes can be found in Volume Two of the SAE J2540 standard. This is a set of over 1000 items which are used to encode common events and list items in ITS.
    TypeEvent   int   `json:"typeEvent"`
    // ITIS code set entries to further describe the event, give advice, or any other ITIS codes related to the event/danger/hazard.
    Description []int `json:"description,omitempty"`
}

// String implements the fmt.Stringer interface for SaeAlert,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (s SaeAlert) String() string {
    return fmt.Sprintf(
    	"SaeAlert[TypeEvent=%v, Description=%v]",
    	s.TypeEvent, s.Description)
}

// MarshalJSON implements the json.Marshaler interface for SaeAlert.
// It customizes the JSON marshaling process for SaeAlert objects.
func (s SaeAlert) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(s.toMap())
}

// toMap converts the SaeAlert object to a map representation for JSON marshaling.
func (s SaeAlert) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["typeEvent"] = s.TypeEvent
    if s.Description != nil {
        structMap["description"] = s.Description
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for SaeAlert.
// It customizes the JSON unmarshaling process for SaeAlert objects.
func (s *SaeAlert) UnmarshalJSON(input []byte) error {
    var temp tempSaeAlert
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    s.TypeEvent = *temp.TypeEvent
    s.Description = temp.Description
    return nil
}

// tempSaeAlert is a temporary struct used for validating the fields of SaeAlert.
type tempSaeAlert  struct {
    TypeEvent   *int  `json:"typeEvent"`
    Description []int `json:"description,omitempty"`
}

func (s *tempSaeAlert) validate() error {
    var errs []string
    if s.TypeEvent == nil {
        errs = append(errs, "required field `typeEvent` is missing for type `SaeAlert`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
