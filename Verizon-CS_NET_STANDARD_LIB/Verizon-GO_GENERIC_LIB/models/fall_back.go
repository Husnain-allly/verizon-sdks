/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// FallBack represents a FallBack struct.
type FallBack struct {
    // An array containing the `deviceId` array.
    Devices              [][]DeviceIdarray      `json:"devices,omitempty"`
    // The numeric name of the account, in the format "0000123456-00001". Leading zeros must be included.
    AccountName          *string                `json:"accountName,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for FallBack,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (f FallBack) String() string {
    return fmt.Sprintf(
    	"FallBack[Devices=%v, AccountName=%v, AdditionalProperties=%v]",
    	f.Devices, f.AccountName, f.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for FallBack.
// It customizes the JSON marshaling process for FallBack objects.
func (f FallBack) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(f.AdditionalProperties,
        "devices", "accountName"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(f.toMap())
}

// toMap converts the FallBack object to a map representation for JSON marshaling.
func (f FallBack) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, f.AdditionalProperties)
    if f.Devices != nil {
        structMap["devices"] = f.Devices
    }
    if f.AccountName != nil {
        structMap["accountName"] = f.AccountName
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for FallBack.
// It customizes the JSON unmarshaling process for FallBack objects.
func (f *FallBack) UnmarshalJSON(input []byte) error {
    var temp tempFallBack
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "devices", "accountName")
    if err != nil {
    	return err
    }
    f.AdditionalProperties = additionalProperties
    
    f.Devices = temp.Devices
    f.AccountName = temp.AccountName
    return nil
}

// tempFallBack is a temporary struct used for validating the fields of FallBack.
type tempFallBack  struct {
    Devices     [][]DeviceIdarray `json:"devices,omitempty"`
    AccountName *string           `json:"accountName,omitempty"`
}
