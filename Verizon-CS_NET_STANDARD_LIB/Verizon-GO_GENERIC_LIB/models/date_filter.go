/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// DateFilter represents a DateFilter struct.
// Filter out the dates.
type DateFilter struct {
    // Only include devices that were added after this date and time.
    Earliest             string                 `json:"earliest"`
    // Only include devices that were added before this date and time.
    Latest               string                 `json:"latest"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DateFilter,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DateFilter) String() string {
    return fmt.Sprintf(
    	"DateFilter[Earliest=%v, Latest=%v, AdditionalProperties=%v]",
    	d.Earliest, d.Latest, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DateFilter.
// It customizes the JSON marshaling process for DateFilter objects.
func (d DateFilter) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "earliest", "latest"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DateFilter object to a map representation for JSON marshaling.
func (d DateFilter) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    structMap["earliest"] = d.Earliest
    structMap["latest"] = d.Latest
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DateFilter.
// It customizes the JSON unmarshaling process for DateFilter objects.
func (d *DateFilter) UnmarshalJSON(input []byte) error {
    var temp tempDateFilter
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "earliest", "latest")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.Earliest = *temp.Earliest
    d.Latest = *temp.Latest
    return nil
}

// tempDateFilter is a temporary struct used for validating the fields of DateFilter.
type tempDateFilter  struct {
    Earliest *string `json:"earliest"`
    Latest   *string `json:"latest"`
}

func (d *tempDateFilter) validate() error {
    var errs []string
    if d.Earliest == nil {
        errs = append(errs, "required field `earliest` is missing for type `DateFilter`")
    }
    if d.Latest == nil {
        errs = append(errs, "required field `latest` is missing for type `DateFilter`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
