/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// MsgId1 represents a MsgId1 struct.
type MsgId1 struct {
    // It provide a precise location of one or more roadside signs.
    RoadSignId           RoadSignId             `json:"roadSignID"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for MsgId1,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (m MsgId1) String() string {
    return fmt.Sprintf(
    	"MsgId1[RoadSignId=%v, AdditionalProperties=%v]",
    	m.RoadSignId, m.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for MsgId1.
// It customizes the JSON marshaling process for MsgId1 objects.
func (m MsgId1) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(m.AdditionalProperties,
        "roadSignID"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(m.toMap())
}

// toMap converts the MsgId1 object to a map representation for JSON marshaling.
func (m MsgId1) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, m.AdditionalProperties)
    structMap["roadSignID"] = m.RoadSignId.toMap()
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for MsgId1.
// It customizes the JSON unmarshaling process for MsgId1 objects.
func (m *MsgId1) UnmarshalJSON(input []byte) error {
    var temp tempMsgId1
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "roadSignID")
    if err != nil {
    	return err
    }
    m.AdditionalProperties = additionalProperties
    
    m.RoadSignId = *temp.RoadSignId
    return nil
}

// tempMsgId1 is a temporary struct used for validating the fields of MsgId1.
type tempMsgId1  struct {
    RoadSignId *RoadSignId `json:"roadSignID"`
}

func (m *tempMsgId1) validate() error {
    var errs []string
    if m.RoadSignId == nil {
        errs = append(errs, "required field `roadSignID` is missing for type `MsgId1`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
