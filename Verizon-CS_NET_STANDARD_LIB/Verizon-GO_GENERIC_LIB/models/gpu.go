/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// Gpu represents a Gpu struct.
// GPU resources of a service profile.
type Gpu struct {
    // Minimum Core Clock value in megahertz.
    MinCoreClockMHz   *int `json:"minCoreClockMHz,omitempty"`
    // Minimum Memory Clock value in megahertz.
    MinMemoryClockMHz *int `json:"minMemoryClockMHz,omitempty"`
    // Minimum GPU bandwidth in GB/s.
    MinBandwidthGBs   *int `json:"minBandwidthGBs,omitempty"`
    // Minimum Floating Point Operations Per Second in Teraflops.
    MinTflops         *int `json:"minTFLOPS,omitempty"`
}

// String implements the fmt.Stringer interface for Gpu,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (g Gpu) String() string {
    return fmt.Sprintf(
    	"Gpu[MinCoreClockMHz=%v, MinMemoryClockMHz=%v, MinBandwidthGBs=%v, MinTflops=%v]",
    	g.MinCoreClockMHz, g.MinMemoryClockMHz, g.MinBandwidthGBs, g.MinTflops)
}

// MarshalJSON implements the json.Marshaler interface for Gpu.
// It customizes the JSON marshaling process for Gpu objects.
func (g Gpu) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(g.toMap())
}

// toMap converts the Gpu object to a map representation for JSON marshaling.
func (g Gpu) toMap() map[string]any {
    structMap := make(map[string]any)
    if g.MinCoreClockMHz != nil {
        structMap["minCoreClockMHz"] = g.MinCoreClockMHz
    }
    if g.MinMemoryClockMHz != nil {
        structMap["minMemoryClockMHz"] = g.MinMemoryClockMHz
    }
    if g.MinBandwidthGBs != nil {
        structMap["minBandwidthGBs"] = g.MinBandwidthGBs
    }
    if g.MinTflops != nil {
        structMap["minTFLOPS"] = g.MinTflops
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Gpu.
// It customizes the JSON unmarshaling process for Gpu objects.
func (g *Gpu) UnmarshalJSON(input []byte) error {
    var temp tempGpu
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    
    g.MinCoreClockMHz = temp.MinCoreClockMHz
    g.MinMemoryClockMHz = temp.MinMemoryClockMHz
    g.MinBandwidthGBs = temp.MinBandwidthGBs
    g.MinTflops = temp.MinTflops
    return nil
}

// tempGpu is a temporary struct used for validating the fields of Gpu.
type tempGpu  struct {
    MinCoreClockMHz   *int `json:"minCoreClockMHz,omitempty"`
    MinMemoryClockMHz *int `json:"minMemoryClockMHz,omitempty"`
    MinBandwidthGBs   *int `json:"minBandwidthGBs,omitempty"`
    MinTflops         *int `json:"minTFLOPS,omitempty"`
}
