/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// LocationRequest represents a LocationRequest struct.
// The body contains the the account name and list of devices that you want to locate, plus other options.
type LocationRequest struct {
    // Account identifier in "##########-#####".
    AccountName          string                 `json:"accountName"`
    // Device list.
    DeviceList           []DeviceInfo           `json:"deviceList"`
    // Accurary, currently only 0-coarse supported.
    AccuracyMode         *AccuracyMode          `json:"accuracyMode,omitempty"`
    // Location cache mode.
    CacheMode            *CacheMode             `json:"cacheMode,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for LocationRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (l LocationRequest) String() string {
    return fmt.Sprintf(
    	"LocationRequest[AccountName=%v, DeviceList=%v, AccuracyMode=%v, CacheMode=%v, AdditionalProperties=%v]",
    	l.AccountName, l.DeviceList, l.AccuracyMode, l.CacheMode, l.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for LocationRequest.
// It customizes the JSON marshaling process for LocationRequest objects.
func (l LocationRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(l.AdditionalProperties,
        "accountName", "deviceList", "accuracyMode", "cacheMode"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(l.toMap())
}

// toMap converts the LocationRequest object to a map representation for JSON marshaling.
func (l LocationRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, l.AdditionalProperties)
    structMap["accountName"] = l.AccountName
    structMap["deviceList"] = l.DeviceList
    if l.AccuracyMode != nil {
        structMap["accuracyMode"] = l.AccuracyMode
    }
    if l.CacheMode != nil {
        structMap["cacheMode"] = l.CacheMode
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for LocationRequest.
// It customizes the JSON unmarshaling process for LocationRequest objects.
func (l *LocationRequest) UnmarshalJSON(input []byte) error {
    var temp tempLocationRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "deviceList", "accuracyMode", "cacheMode")
    if err != nil {
    	return err
    }
    l.AdditionalProperties = additionalProperties
    
    l.AccountName = *temp.AccountName
    l.DeviceList = *temp.DeviceList
    l.AccuracyMode = temp.AccuracyMode
    l.CacheMode = temp.CacheMode
    return nil
}

// tempLocationRequest is a temporary struct used for validating the fields of LocationRequest.
type tempLocationRequest  struct {
    AccountName  *string       `json:"accountName"`
    DeviceList   *[]DeviceInfo `json:"deviceList"`
    AccuracyMode *AccuracyMode `json:"accuracyMode,omitempty"`
    CacheMode    *CacheMode    `json:"cacheMode,omitempty"`
}

func (l *tempLocationRequest) validate() error {
    var errs []string
    if l.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `LocationRequest`")
    }
    if l.DeviceList == nil {
        errs = append(errs, "required field `deviceList` is missing for type `LocationRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
