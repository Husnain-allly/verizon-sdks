/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// DeviceId represents a DeviceId struct.
// An identifier for a single device.
type DeviceId struct {
    // The value of the device identifier.
    Id                   string                 `json:"id"`
    // The type of the device identifier. Valid types of identifiers are:ESN (decimal),EID,ICCID (up to 20 digits),IMEI (up to 16 digits),MDN,MEID (hexadecimal),MSISDN.
    Kind                 string                 `json:"kind"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceId,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceId) String() string {
    return fmt.Sprintf(
    	"DeviceId[Id=%v, Kind=%v, AdditionalProperties=%v]",
    	d.Id, d.Kind, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceId.
// It customizes the JSON marshaling process for DeviceId objects.
func (d DeviceId) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "id", "kind"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceId object to a map representation for JSON marshaling.
func (d DeviceId) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    structMap["id"] = d.Id
    structMap["kind"] = d.Kind
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceId.
// It customizes the JSON unmarshaling process for DeviceId objects.
func (d *DeviceId) UnmarshalJSON(input []byte) error {
    var temp tempDeviceId
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "id", "kind")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.Id = *temp.Id
    d.Kind = *temp.Kind
    return nil
}

// tempDeviceId is a temporary struct used for validating the fields of DeviceId.
type tempDeviceId  struct {
    Id   *string `json:"id"`
    Kind *string `json:"kind"`
}

func (d *tempDeviceId) validate() error {
    var errs []string
    if d.Id == nil {
        errs = append(errs, "required field `id` is missing for type `DeviceId`")
    }
    if d.Kind == nil {
        errs = append(errs, "required field `kind` is missing for type `DeviceId`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
