/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// GeographicalPathDescription represents a GeographicalPathDescription struct.
// This data frame can describe a complex path of arbitrary size using node offset method (LL offsets).
type GeographicalPathDescription struct {
    // The OffsetSystem data frame selects a sequence of node offsets described in the Lat-Long offset method.
    Path OffsetSystem `json:"path"`
}

// String implements the fmt.Stringer interface for GeographicalPathDescription,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (g GeographicalPathDescription) String() string {
    return fmt.Sprintf(
    	"GeographicalPathDescription[Path=%v]",
    	g.Path)
}

// MarshalJSON implements the json.Marshaler interface for GeographicalPathDescription.
// It customizes the JSON marshaling process for GeographicalPathDescription objects.
func (g GeographicalPathDescription) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(g.toMap())
}

// toMap converts the GeographicalPathDescription object to a map representation for JSON marshaling.
func (g GeographicalPathDescription) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["path"] = g.Path.toMap()
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for GeographicalPathDescription.
// It customizes the JSON unmarshaling process for GeographicalPathDescription objects.
func (g *GeographicalPathDescription) UnmarshalJSON(input []byte) error {
    var temp tempGeographicalPathDescription
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    g.Path = *temp.Path
    return nil
}

// tempGeographicalPathDescription is a temporary struct used for validating the fields of GeographicalPathDescription.
type tempGeographicalPathDescription  struct {
    Path *OffsetSystem `json:"path"`
}

func (g *tempGeographicalPathDescription) validate() error {
    var errs []string
    if g.Path == nil {
        errs = append(errs, "required field `path` is missing for type `GeographicalPathDescription`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
