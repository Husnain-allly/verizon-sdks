/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
)

// DeviceList2Ids represents a DeviceList2Ids struct.
// This is Array of a container for any-of cases.
type DeviceList2Ids struct {
    value          any
    isEsimDeviceId bool
    isDeviceId2    bool
}

// String implements the fmt.Stringer interface for DeviceList2Ids,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceList2Ids) String() string {
    return fmt.Sprintf("%v", d.value)
}

// MarshalJSON implements the json.Marshaler interface for DeviceList2Ids.
// It customizes the JSON marshaling process for DeviceList2Ids objects.
func (d DeviceList2Ids) MarshalJSON() (
    []byte,
    error) {
    if d.value == nil {
        return nil, errors.New("No underlying type is set. Please use any of the `models.DeviceList2IdsContainer.From*` functions to initialize the DeviceList2Ids object.")
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceList2Ids object to a map representation for JSON marshaling.
func (d *DeviceList2Ids) toMap() any {
    switch obj := d.value.(type) {
    case *EsimDeviceId:
        return obj.toMap()
    case *DeviceId2:
        return obj.toMap()
    }
    return nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceList2Ids.
// It customizes the JSON unmarshaling process for DeviceList2Ids objects.
func (d *DeviceList2Ids) UnmarshalJSON(input []byte) error {
    result, err := UnmarshallAnyOf(input,
        NewTypeHolder(&EsimDeviceId{}, false, &d.isEsimDeviceId),
        NewTypeHolder(&DeviceId2{}, false, &d.isDeviceId2),
    )
    
    d.value = result
    return err
}

func (d *DeviceList2Ids) AsEsimDeviceId() (
    *EsimDeviceId,
    bool) {
    if !d.isEsimDeviceId {
        return nil, false
    }
    return d.value.(*EsimDeviceId), true
}

func (d *DeviceList2Ids) AsDeviceId2() (
    *DeviceId2,
    bool) {
    if !d.isDeviceId2 {
        return nil, false
    }
    return d.value.(*DeviceId2), true
}

// internalDeviceList2Ids represents a deviceList2Ids struct.
// This is Array of a container for any-of cases.
type internalDeviceList2Ids struct {}

var DeviceList2IdsContainer internalDeviceList2Ids

// The internalDeviceList2Ids instance, wrapping the provided EsimDeviceId value.
func (d *internalDeviceList2Ids) FromEsimDeviceId(val EsimDeviceId) DeviceList2Ids {
    return DeviceList2Ids{value: &val}
}

// The internalDeviceList2Ids instance, wrapping the provided DeviceId2 value.
func (d *internalDeviceList2Ids) FromDeviceId2(val DeviceId2) DeviceList2Ids {
    return DeviceList2Ids{value: &val}
}
