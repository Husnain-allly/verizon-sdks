/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// DeviceFilterWithoutAccount represents a DeviceFilterWithoutAccount struct.
// Filter for devices without account.
type DeviceFilterWithoutAccount struct {
    // Only include devices that are in this device group.
    GroupName            *string                `json:"groupName,omitempty"`
    // Only include devices that have this service plan.
    ServicePlan          *string                `json:"servicePlan,omitempty"`
    // Custom field names and values, if you want to only include devices that have matching values.
    CustomFields         []CustomFields         `json:"customFields,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceFilterWithoutAccount,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceFilterWithoutAccount) String() string {
    return fmt.Sprintf(
    	"DeviceFilterWithoutAccount[GroupName=%v, ServicePlan=%v, CustomFields=%v, AdditionalProperties=%v]",
    	d.GroupName, d.ServicePlan, d.CustomFields, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceFilterWithoutAccount.
// It customizes the JSON marshaling process for DeviceFilterWithoutAccount objects.
func (d DeviceFilterWithoutAccount) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "groupName", "servicePlan", "customFields"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceFilterWithoutAccount object to a map representation for JSON marshaling.
func (d DeviceFilterWithoutAccount) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    if d.GroupName != nil {
        structMap["groupName"] = d.GroupName
    }
    if d.ServicePlan != nil {
        structMap["servicePlan"] = d.ServicePlan
    }
    if d.CustomFields != nil {
        structMap["customFields"] = d.CustomFields
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceFilterWithoutAccount.
// It customizes the JSON unmarshaling process for DeviceFilterWithoutAccount objects.
func (d *DeviceFilterWithoutAccount) UnmarshalJSON(input []byte) error {
    var temp tempDeviceFilterWithoutAccount
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "groupName", "servicePlan", "customFields")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.GroupName = temp.GroupName
    d.ServicePlan = temp.ServicePlan
    d.CustomFields = temp.CustomFields
    return nil
}

// tempDeviceFilterWithoutAccount is a temporary struct used for validating the fields of DeviceFilterWithoutAccount.
type tempDeviceFilterWithoutAccount  struct {
    GroupName    *string        `json:"groupName,omitempty"`
    ServicePlan  *string        `json:"servicePlan,omitempty"`
    CustomFields []CustomFields `json:"customFields,omitempty"`
}
