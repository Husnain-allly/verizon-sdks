/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// DeviceListQueryResult represents a DeviceListQueryResult struct.
// List of devices.
type DeviceListQueryResult struct {
    // Account identifier in "##########-#####".
    AccountName          *string                `json:"accountName,omitempty"`
    // True if there are more devices to retrieve.
    HasMoreData          *bool                  `json:"hasMoreData,omitempty"`
    // If hasMoreData=true, the startIndex to use for the next request. 0 if hasMoreData=false.
    LastSeenDeviceId     *int64                 `json:"lastSeenDeviceId,omitempty"`
    // The list of devices in the account.
    DeviceList           []DeviceListQueryItem  `json:"deviceList,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceListQueryResult,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceListQueryResult) String() string {
    return fmt.Sprintf(
    	"DeviceListQueryResult[AccountName=%v, HasMoreData=%v, LastSeenDeviceId=%v, DeviceList=%v, AdditionalProperties=%v]",
    	d.AccountName, d.HasMoreData, d.LastSeenDeviceId, d.DeviceList, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceListQueryResult.
// It customizes the JSON marshaling process for DeviceListQueryResult objects.
func (d DeviceListQueryResult) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "accountName", "hasMoreData", "lastSeenDeviceId", "deviceList"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceListQueryResult object to a map representation for JSON marshaling.
func (d DeviceListQueryResult) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    if d.AccountName != nil {
        structMap["accountName"] = d.AccountName
    }
    if d.HasMoreData != nil {
        structMap["hasMoreData"] = d.HasMoreData
    }
    if d.LastSeenDeviceId != nil {
        structMap["lastSeenDeviceId"] = d.LastSeenDeviceId
    }
    if d.DeviceList != nil {
        structMap["deviceList"] = d.DeviceList
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceListQueryResult.
// It customizes the JSON unmarshaling process for DeviceListQueryResult objects.
func (d *DeviceListQueryResult) UnmarshalJSON(input []byte) error {
    var temp tempDeviceListQueryResult
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "hasMoreData", "lastSeenDeviceId", "deviceList")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.AccountName = temp.AccountName
    d.HasMoreData = temp.HasMoreData
    d.LastSeenDeviceId = temp.LastSeenDeviceId
    d.DeviceList = temp.DeviceList
    return nil
}

// tempDeviceListQueryResult is a temporary struct used for validating the fields of DeviceListQueryResult.
type tempDeviceListQueryResult  struct {
    AccountName      *string               `json:"accountName,omitempty"`
    HasMoreData      *bool                 `json:"hasMoreData,omitempty"`
    LastSeenDeviceId *int64                `json:"lastSeenDeviceId,omitempty"`
    DeviceList       []DeviceListQueryItem `json:"deviceList,omitempty"`
}
