/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// DeviceDiagnosticsCallback represents a DeviceDiagnosticsCallback struct.
// Callback information of an existing diagnostics subscription.
type DeviceDiagnosticsCallback struct {
    // The name of the billing account for which callback messages will be sent. Format: "##########-#####".
    AccountName          string                 `json:"accountName"`
    // The name of the callback service, which identifies the type and format of messages that will be sent to the registered URL.
    ServiceName          string                 `json:"serviceName"`
    // The URL for your web server.
    Endpoint             string                 `json:"endpoint"`
    // The date and time of when this request was created.
    CreatedOn            time.Time              `json:"createdOn"`
    // Your HTTP headers.
    HttpHeaders          *interface{}           `json:"httpHeaders,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceDiagnosticsCallback,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceDiagnosticsCallback) String() string {
    return fmt.Sprintf(
    	"DeviceDiagnosticsCallback[AccountName=%v, ServiceName=%v, Endpoint=%v, CreatedOn=%v, HttpHeaders=%v, AdditionalProperties=%v]",
    	d.AccountName, d.ServiceName, d.Endpoint, d.CreatedOn, d.HttpHeaders, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceDiagnosticsCallback.
// It customizes the JSON marshaling process for DeviceDiagnosticsCallback objects.
func (d DeviceDiagnosticsCallback) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "accountName", "serviceName", "endpoint", "createdOn", "httpHeaders"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceDiagnosticsCallback object to a map representation for JSON marshaling.
func (d DeviceDiagnosticsCallback) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    structMap["accountName"] = d.AccountName
    structMap["serviceName"] = d.ServiceName
    structMap["endpoint"] = d.Endpoint
    structMap["createdOn"] = d.CreatedOn.Format(time.RFC3339)
    if d.HttpHeaders != nil {
        structMap["httpHeaders"] = d.HttpHeaders
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceDiagnosticsCallback.
// It customizes the JSON unmarshaling process for DeviceDiagnosticsCallback objects.
func (d *DeviceDiagnosticsCallback) UnmarshalJSON(input []byte) error {
    var temp tempDeviceDiagnosticsCallback
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "serviceName", "endpoint", "createdOn", "httpHeaders")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.AccountName = *temp.AccountName
    d.ServiceName = *temp.ServiceName
    d.Endpoint = *temp.Endpoint
    CreatedOnVal, err := time.Parse(time.RFC3339, *temp.CreatedOn)
    if err != nil {
        log.Fatalf("Cannot Parse createdOn as % s format.", time.RFC3339)
    }
    d.CreatedOn = CreatedOnVal
    d.HttpHeaders = temp.HttpHeaders
    return nil
}

// tempDeviceDiagnosticsCallback is a temporary struct used for validating the fields of DeviceDiagnosticsCallback.
type tempDeviceDiagnosticsCallback  struct {
    AccountName *string      `json:"accountName"`
    ServiceName *string      `json:"serviceName"`
    Endpoint    *string      `json:"endpoint"`
    CreatedOn   *string      `json:"createdOn"`
    HttpHeaders *interface{} `json:"httpHeaders,omitempty"`
}

func (d *tempDeviceDiagnosticsCallback) validate() error {
    var errs []string
    if d.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `DeviceDiagnosticsCallback`")
    }
    if d.ServiceName == nil {
        errs = append(errs, "required field `serviceName` is missing for type `DeviceDiagnosticsCallback`")
    }
    if d.Endpoint == nil {
        errs = append(errs, "required field `endpoint` is missing for type `DeviceDiagnosticsCallback`")
    }
    if d.CreatedOn == nil {
        errs = append(errs, "required field `createdOn` is missing for type `DeviceDiagnosticsCallback`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
