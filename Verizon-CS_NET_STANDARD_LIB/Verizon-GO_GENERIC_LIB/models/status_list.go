/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// StatusList represents a StatusList struct.
type StatusList struct {
    // Account name
    Id                   *string                `json:"id,omitempty"`
    // Success or Fail
    Status               *string                `json:"status,omitempty"`
    // detailed reason
    Reason               *string                `json:"reason,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for StatusList,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (s StatusList) String() string {
    return fmt.Sprintf(
    	"StatusList[Id=%v, Status=%v, Reason=%v, AdditionalProperties=%v]",
    	s.Id, s.Status, s.Reason, s.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for StatusList.
// It customizes the JSON marshaling process for StatusList objects.
func (s StatusList) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(s.AdditionalProperties,
        "id", "status", "reason"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(s.toMap())
}

// toMap converts the StatusList object to a map representation for JSON marshaling.
func (s StatusList) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, s.AdditionalProperties)
    if s.Id != nil {
        structMap["id"] = s.Id
    }
    if s.Status != nil {
        structMap["status"] = s.Status
    }
    if s.Reason != nil {
        structMap["reason"] = s.Reason
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for StatusList.
// It customizes the JSON unmarshaling process for StatusList objects.
func (s *StatusList) UnmarshalJSON(input []byte) error {
    var temp tempStatusList
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "id", "status", "reason")
    if err != nil {
    	return err
    }
    s.AdditionalProperties = additionalProperties
    
    s.Id = temp.Id
    s.Status = temp.Status
    s.Reason = temp.Reason
    return nil
}

// tempStatusList is a temporary struct used for validating the fields of StatusList.
type tempStatusList  struct {
    Id     *string `json:"id,omitempty"`
    Status *string `json:"status,omitempty"`
    Reason *string `json:"reason,omitempty"`
}
