/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// DistributionSchedule represents a DistributionSchedule struct.
// The distribution schedule parameters for broadcast messages.
type DistributionSchedule struct {
    // The period (in seconds) that the message needs to be repeatedly send out.
    RepeatPeriod int        `json:"repeatPeriod"`
    // The amount of time (in minutes) while the messages needs to be sent out.
    Duration     int        `json:"duration"`
    // The time (in UTC) when the message transmission should be started.
    StartTime    *time.Time `json:"startTime,omitempty"`
}

// String implements the fmt.Stringer interface for DistributionSchedule,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DistributionSchedule) String() string {
    return fmt.Sprintf(
    	"DistributionSchedule[RepeatPeriod=%v, Duration=%v, StartTime=%v]",
    	d.RepeatPeriod, d.Duration, d.StartTime)
}

// MarshalJSON implements the json.Marshaler interface for DistributionSchedule.
// It customizes the JSON marshaling process for DistributionSchedule objects.
func (d DistributionSchedule) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(d.toMap())
}

// toMap converts the DistributionSchedule object to a map representation for JSON marshaling.
func (d DistributionSchedule) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["repeatPeriod"] = d.RepeatPeriod
    structMap["duration"] = d.Duration
    if d.StartTime != nil {
        structMap["startTime"] = d.StartTime.Format(time.RFC3339)
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DistributionSchedule.
// It customizes the JSON unmarshaling process for DistributionSchedule objects.
func (d *DistributionSchedule) UnmarshalJSON(input []byte) error {
    var temp tempDistributionSchedule
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    d.RepeatPeriod = *temp.RepeatPeriod
    d.Duration = *temp.Duration
    if temp.StartTime != nil {
        StartTimeVal, err := time.Parse(time.RFC3339, *temp.StartTime)
        if err != nil {
            log.Fatalf("Cannot Parse startTime as % s format.", time.RFC3339)
        }
        d.StartTime = &StartTimeVal
    }
    return nil
}

// tempDistributionSchedule is a temporary struct used for validating the fields of DistributionSchedule.
type tempDistributionSchedule  struct {
    RepeatPeriod *int    `json:"repeatPeriod"`
    Duration     *int    `json:"duration"`
    StartTime    *string `json:"startTime,omitempty"`
}

func (d *tempDistributionSchedule) validate() error {
    var errs []string
    if d.RepeatPeriod == nil {
        errs = append(errs, "required field `repeatPeriod` is missing for type `DistributionSchedule`")
    }
    if d.Duration == nil {
        errs = append(errs, "required field `duration` is missing for type `DistributionSchedule`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
