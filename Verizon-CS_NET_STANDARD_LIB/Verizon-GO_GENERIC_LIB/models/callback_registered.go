/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// CallbackRegistered represents a CallbackRegistered struct.
// Registered callback listener.
type CallbackRegistered struct {
    // The billing account number for which callback messages will be sent.
    AccountName          string                 `json:"accountName"`
    // The name of the callback service, which identifies the type and format of messages that will be sent to the registered URL.
    Name                 string                 `json:"name"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for CallbackRegistered,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c CallbackRegistered) String() string {
    return fmt.Sprintf(
    	"CallbackRegistered[AccountName=%v, Name=%v, AdditionalProperties=%v]",
    	c.AccountName, c.Name, c.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for CallbackRegistered.
// It customizes the JSON marshaling process for CallbackRegistered objects.
func (c CallbackRegistered) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(c.AdditionalProperties,
        "accountName", "name"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(c.toMap())
}

// toMap converts the CallbackRegistered object to a map representation for JSON marshaling.
func (c CallbackRegistered) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, c.AdditionalProperties)
    structMap["accountName"] = c.AccountName
    structMap["name"] = c.Name
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for CallbackRegistered.
// It customizes the JSON unmarshaling process for CallbackRegistered objects.
func (c *CallbackRegistered) UnmarshalJSON(input []byte) error {
    var temp tempCallbackRegistered
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "name")
    if err != nil {
    	return err
    }
    c.AdditionalProperties = additionalProperties
    
    c.AccountName = *temp.AccountName
    c.Name = *temp.Name
    return nil
}

// tempCallbackRegistered is a temporary struct used for validating the fields of CallbackRegistered.
type tempCallbackRegistered  struct {
    AccountName *string `json:"accountName"`
    Name        *string `json:"name"`
}

func (c *tempCallbackRegistered) validate() error {
    var errs []string
    if c.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `CallbackRegistered`")
    }
    if c.Name == nil {
        errs = append(errs, "required field `name` is missing for type `CallbackRegistered`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
