/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// LocationReportStatus represents a LocationReportStatus struct.
// Status of the report.
type LocationReportStatus struct {
    // The transaction ID of the report.
    Txid                 *string                `json:"txid,omitempty"`
    // Status of the report.
    Status               *ReportStatus          `json:"status,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for LocationReportStatus,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (l LocationReportStatus) String() string {
    return fmt.Sprintf(
    	"LocationReportStatus[Txid=%v, Status=%v, AdditionalProperties=%v]",
    	l.Txid, l.Status, l.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for LocationReportStatus.
// It customizes the JSON marshaling process for LocationReportStatus objects.
func (l LocationReportStatus) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(l.AdditionalProperties,
        "txid", "status"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(l.toMap())
}

// toMap converts the LocationReportStatus object to a map representation for JSON marshaling.
func (l LocationReportStatus) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, l.AdditionalProperties)
    if l.Txid != nil {
        structMap["txid"] = l.Txid
    }
    if l.Status != nil {
        structMap["status"] = l.Status
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for LocationReportStatus.
// It customizes the JSON unmarshaling process for LocationReportStatus objects.
func (l *LocationReportStatus) UnmarshalJSON(input []byte) error {
    var temp tempLocationReportStatus
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "txid", "status")
    if err != nil {
    	return err
    }
    l.AdditionalProperties = additionalProperties
    
    l.Txid = temp.Txid
    l.Status = temp.Status
    return nil
}

// tempLocationReportStatus is a temporary struct used for validating the fields of LocationReportStatus.
type tempLocationReportStatus  struct {
    Txid   *string       `json:"txid,omitempty"`
    Status *ReportStatus `json:"status,omitempty"`
}
