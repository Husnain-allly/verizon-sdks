/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// UploadsActivatesDeviceRequest represents a UploadsActivatesDeviceRequest struct.
// The request body identifies the devices to upload.
type UploadsActivatesDeviceRequest struct {
    // The name of a billing account. An account name is usually numeric, and must include any leading zeros.
    AccountName          string                 `json:"accountName"`
    // The email address that the report should be sent to when the upload is complete.
    EmailAddress         string                 `json:"emailAddress"`
    // The stock keeping unit that identifies the type of devices in the upload and activation.
    DeviceSku            string                 `json:"deviceSku"`
    // The format of the device identifiers in the upload and activation.
    UploadType           string                 `json:"uploadType"`
    // The service plan code that you want to assign to all specified devices.
    ServicePlan          string                 `json:"servicePlan"`
    // The pool from which your device IP addresses is derived.
    CarrierIpPoolName    *string                `json:"carrierIpPoolName,omitempty"`
    // The Zip code of the location where the line of service is primarily used, or a Zip code that you have been told to use with these devices.
    MdnZipCode           string                 `json:"mdnZipCode"`
    // The devices to upload, specified by device IDs in a format matching uploadType.
    Devices              []DeviceList           `json:"devices"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for UploadsActivatesDeviceRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (u UploadsActivatesDeviceRequest) String() string {
    return fmt.Sprintf(
    	"UploadsActivatesDeviceRequest[AccountName=%v, EmailAddress=%v, DeviceSku=%v, UploadType=%v, ServicePlan=%v, CarrierIpPoolName=%v, MdnZipCode=%v, Devices=%v, AdditionalProperties=%v]",
    	u.AccountName, u.EmailAddress, u.DeviceSku, u.UploadType, u.ServicePlan, u.CarrierIpPoolName, u.MdnZipCode, u.Devices, u.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for UploadsActivatesDeviceRequest.
// It customizes the JSON marshaling process for UploadsActivatesDeviceRequest objects.
func (u UploadsActivatesDeviceRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(u.AdditionalProperties,
        "accountName", "emailAddress", "deviceSku", "uploadType", "servicePlan", "carrierIpPoolName", "mdnZipCode", "devices"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(u.toMap())
}

// toMap converts the UploadsActivatesDeviceRequest object to a map representation for JSON marshaling.
func (u UploadsActivatesDeviceRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, u.AdditionalProperties)
    structMap["accountName"] = u.AccountName
    structMap["emailAddress"] = u.EmailAddress
    structMap["deviceSku"] = u.DeviceSku
    structMap["uploadType"] = u.UploadType
    structMap["servicePlan"] = u.ServicePlan
    if u.CarrierIpPoolName != nil {
        structMap["carrierIpPoolName"] = u.CarrierIpPoolName
    }
    structMap["mdnZipCode"] = u.MdnZipCode
    structMap["devices"] = u.Devices
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for UploadsActivatesDeviceRequest.
// It customizes the JSON unmarshaling process for UploadsActivatesDeviceRequest objects.
func (u *UploadsActivatesDeviceRequest) UnmarshalJSON(input []byte) error {
    var temp tempUploadsActivatesDeviceRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "emailAddress", "deviceSku", "uploadType", "servicePlan", "carrierIpPoolName", "mdnZipCode", "devices")
    if err != nil {
    	return err
    }
    u.AdditionalProperties = additionalProperties
    
    u.AccountName = *temp.AccountName
    u.EmailAddress = *temp.EmailAddress
    u.DeviceSku = *temp.DeviceSku
    u.UploadType = *temp.UploadType
    u.ServicePlan = *temp.ServicePlan
    u.CarrierIpPoolName = temp.CarrierIpPoolName
    u.MdnZipCode = *temp.MdnZipCode
    u.Devices = *temp.Devices
    return nil
}

// tempUploadsActivatesDeviceRequest is a temporary struct used for validating the fields of UploadsActivatesDeviceRequest.
type tempUploadsActivatesDeviceRequest  struct {
    AccountName       *string       `json:"accountName"`
    EmailAddress      *string       `json:"emailAddress"`
    DeviceSku         *string       `json:"deviceSku"`
    UploadType        *string       `json:"uploadType"`
    ServicePlan       *string       `json:"servicePlan"`
    CarrierIpPoolName *string       `json:"carrierIpPoolName,omitempty"`
    MdnZipCode        *string       `json:"mdnZipCode"`
    Devices           *[]DeviceList `json:"devices"`
}

func (u *tempUploadsActivatesDeviceRequest) validate() error {
    var errs []string
    if u.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `UploadsActivatesDeviceRequest`")
    }
    if u.EmailAddress == nil {
        errs = append(errs, "required field `emailAddress` is missing for type `UploadsActivatesDeviceRequest`")
    }
    if u.DeviceSku == nil {
        errs = append(errs, "required field `deviceSku` is missing for type `UploadsActivatesDeviceRequest`")
    }
    if u.UploadType == nil {
        errs = append(errs, "required field `uploadType` is missing for type `UploadsActivatesDeviceRequest`")
    }
    if u.ServicePlan == nil {
        errs = append(errs, "required field `servicePlan` is missing for type `UploadsActivatesDeviceRequest`")
    }
    if u.MdnZipCode == nil {
        errs = append(errs, "required field `mdnZipCode` is missing for type `UploadsActivatesDeviceRequest`")
    }
    if u.Devices == nil {
        errs = append(errs, "required field `devices` is missing for type `UploadsActivatesDeviceRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
