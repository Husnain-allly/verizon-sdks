/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// ConnectivityManagementSuccessResult represents a ConnectivityManagementSuccessResult struct.
// Response to successful request.
type ConnectivityManagementSuccessResult struct {
    // A value of “true” indicates that the device group was created successfully.
    Success              *bool                  `json:"success,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for ConnectivityManagementSuccessResult,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c ConnectivityManagementSuccessResult) String() string {
    return fmt.Sprintf(
    	"ConnectivityManagementSuccessResult[Success=%v, AdditionalProperties=%v]",
    	c.Success, c.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for ConnectivityManagementSuccessResult.
// It customizes the JSON marshaling process for ConnectivityManagementSuccessResult objects.
func (c ConnectivityManagementSuccessResult) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(c.AdditionalProperties,
        "success"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(c.toMap())
}

// toMap converts the ConnectivityManagementSuccessResult object to a map representation for JSON marshaling.
func (c ConnectivityManagementSuccessResult) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, c.AdditionalProperties)
    if c.Success != nil {
        structMap["success"] = c.Success
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ConnectivityManagementSuccessResult.
// It customizes the JSON unmarshaling process for ConnectivityManagementSuccessResult objects.
func (c *ConnectivityManagementSuccessResult) UnmarshalJSON(input []byte) error {
    var temp tempConnectivityManagementSuccessResult
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "success")
    if err != nil {
    	return err
    }
    c.AdditionalProperties = additionalProperties
    
    c.Success = temp.Success
    return nil
}

// tempConnectivityManagementSuccessResult is a temporary struct used for validating the fields of ConnectivityManagementSuccessResult.
type tempConnectivityManagementSuccessResult  struct {
    Success *bool `json:"success,omitempty"`
}
