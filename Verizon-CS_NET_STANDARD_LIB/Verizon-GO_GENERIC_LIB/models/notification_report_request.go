/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// NotificationReportRequest represents a NotificationReportRequest struct.
type NotificationReportRequest struct {
    AccountName           string                 `json:"accountName"`
    RequestType           string                 `json:"requestType"`
    Devices               []DeviceList           `json:"devices"`
    MonitorExpirationTime string                 `json:"monitorExpirationTime"`
    AdditionalProperties  map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for NotificationReportRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (n NotificationReportRequest) String() string {
    return fmt.Sprintf(
    	"NotificationReportRequest[AccountName=%v, RequestType=%v, Devices=%v, MonitorExpirationTime=%v, AdditionalProperties=%v]",
    	n.AccountName, n.RequestType, n.Devices, n.MonitorExpirationTime, n.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for NotificationReportRequest.
// It customizes the JSON marshaling process for NotificationReportRequest objects.
func (n NotificationReportRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(n.AdditionalProperties,
        "accountName", "requestType", "devices", "monitorExpirationTime"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(n.toMap())
}

// toMap converts the NotificationReportRequest object to a map representation for JSON marshaling.
func (n NotificationReportRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, n.AdditionalProperties)
    structMap["accountName"] = n.AccountName
    structMap["requestType"] = n.RequestType
    structMap["devices"] = n.Devices
    structMap["monitorExpirationTime"] = n.MonitorExpirationTime
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for NotificationReportRequest.
// It customizes the JSON unmarshaling process for NotificationReportRequest objects.
func (n *NotificationReportRequest) UnmarshalJSON(input []byte) error {
    var temp tempNotificationReportRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "requestType", "devices", "monitorExpirationTime")
    if err != nil {
    	return err
    }
    n.AdditionalProperties = additionalProperties
    
    n.AccountName = *temp.AccountName
    n.RequestType = *temp.RequestType
    n.Devices = *temp.Devices
    n.MonitorExpirationTime = *temp.MonitorExpirationTime
    return nil
}

// tempNotificationReportRequest is a temporary struct used for validating the fields of NotificationReportRequest.
type tempNotificationReportRequest  struct {
    AccountName           *string       `json:"accountName"`
    RequestType           *string       `json:"requestType"`
    Devices               *[]DeviceList `json:"devices"`
    MonitorExpirationTime *string       `json:"monitorExpirationTime"`
}

func (n *tempNotificationReportRequest) validate() error {
    var errs []string
    if n.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `NotificationReportRequest`")
    }
    if n.RequestType == nil {
        errs = append(errs, "required field `requestType` is missing for type `NotificationReportRequest`")
    }
    if n.Devices == nil {
        errs = append(errs, "required field `devices` is missing for type `NotificationReportRequest`")
    }
    if n.MonitorExpirationTime == nil {
        errs = append(errs, "required field `monitorExpirationTime` is missing for type `NotificationReportRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
