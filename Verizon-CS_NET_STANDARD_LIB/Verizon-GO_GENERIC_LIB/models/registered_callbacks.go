/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// RegisteredCallbacks represents a RegisteredCallbacks struct.
// List of registered callback endpoints.
type RegisteredCallbacks struct {
    // The name of the billing account for which callback messages will be sent.
    Aname                *string                `json:"aname,omitempty"`
    // The name of the callback service, which identifies the type and format of messages that will be sent to the registered URL. This will be 'Fota' for the Software Management Services callback.
    Name                 *string                `json:"name,omitempty"`
    // The address to which callback messages will be sent.
    Url                  *string                `json:"url,omitempty"`
    // The user name that ThingSpace will return in the callback messages.
    Username             *string                `json:"username,omitempty"`
    // The password that ThingSpace will return in the callback messages.
    Password             *string                `json:"password,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for RegisteredCallbacks,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (r RegisteredCallbacks) String() string {
    return fmt.Sprintf(
    	"RegisteredCallbacks[Aname=%v, Name=%v, Url=%v, Username=%v, Password=%v, AdditionalProperties=%v]",
    	r.Aname, r.Name, r.Url, r.Username, r.Password, r.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for RegisteredCallbacks.
// It customizes the JSON marshaling process for RegisteredCallbacks objects.
func (r RegisteredCallbacks) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(r.AdditionalProperties,
        "aname", "name", "url", "username", "password"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(r.toMap())
}

// toMap converts the RegisteredCallbacks object to a map representation for JSON marshaling.
func (r RegisteredCallbacks) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, r.AdditionalProperties)
    if r.Aname != nil {
        structMap["aname"] = r.Aname
    }
    if r.Name != nil {
        structMap["name"] = r.Name
    }
    if r.Url != nil {
        structMap["url"] = r.Url
    }
    if r.Username != nil {
        structMap["username"] = r.Username
    }
    if r.Password != nil {
        structMap["password"] = r.Password
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for RegisteredCallbacks.
// It customizes the JSON unmarshaling process for RegisteredCallbacks objects.
func (r *RegisteredCallbacks) UnmarshalJSON(input []byte) error {
    var temp tempRegisteredCallbacks
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "aname", "name", "url", "username", "password")
    if err != nil {
    	return err
    }
    r.AdditionalProperties = additionalProperties
    
    r.Aname = temp.Aname
    r.Name = temp.Name
    r.Url = temp.Url
    r.Username = temp.Username
    r.Password = temp.Password
    return nil
}

// tempRegisteredCallbacks is a temporary struct used for validating the fields of RegisteredCallbacks.
type tempRegisteredCallbacks  struct {
    Aname    *string `json:"aname,omitempty"`
    Name     *string `json:"name,omitempty"`
    Url      *string `json:"url,omitempty"`
    Username *string `json:"username,omitempty"`
    Password *string `json:"password,omitempty"`
}
