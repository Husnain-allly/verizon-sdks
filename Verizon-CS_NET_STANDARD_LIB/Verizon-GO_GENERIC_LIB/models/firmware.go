/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
    "log"
    "time"
)

// Firmware represents a Firmware struct.
// Firmware information.
type Firmware struct {
    // The name of the firmware image, provided by the device manufacturer.
    FirmwareName         *string                `json:"firmwareName,omitempty"`
    // Internal reference; can be ignored.
    ParticipantName      *string                `json:"participantName,omitempty"`
    // The release date of the firmware image.
    LaunchDate           *time.Time             `json:"launchDate,omitempty"`
    // Additional information about the release.
    ReleaseNote          *string                `json:"releaseNote,omitempty"`
    // The device model that the firmware applies to.
    Model                *string                `json:"model,omitempty"`
    // The device make that the firmware applies to.
    Make                 *string                `json:"make,omitempty"`
    // The firmware version that must currently be on the device to upgrade.
    FromVersion          *string                `json:"fromVersion,omitempty"`
    // The firmware version that will be on the device after an upgrade.
    ToVersion            *string                `json:"toVersion,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for Firmware,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (f Firmware) String() string {
    return fmt.Sprintf(
    	"Firmware[FirmwareName=%v, ParticipantName=%v, LaunchDate=%v, ReleaseNote=%v, Model=%v, Make=%v, FromVersion=%v, ToVersion=%v, AdditionalProperties=%v]",
    	f.FirmwareName, f.ParticipantName, f.LaunchDate, f.ReleaseNote, f.Model, f.Make, f.FromVersion, f.ToVersion, f.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for Firmware.
// It customizes the JSON marshaling process for Firmware objects.
func (f Firmware) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(f.AdditionalProperties,
        "firmwareName", "participantName", "launchDate", "releaseNote", "model", "make", "fromVersion", "toVersion"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(f.toMap())
}

// toMap converts the Firmware object to a map representation for JSON marshaling.
func (f Firmware) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, f.AdditionalProperties)
    if f.FirmwareName != nil {
        structMap["firmwareName"] = f.FirmwareName
    }
    if f.ParticipantName != nil {
        structMap["participantName"] = f.ParticipantName
    }
    if f.LaunchDate != nil {
        structMap["launchDate"] = f.LaunchDate.Format(time.RFC3339)
    }
    if f.ReleaseNote != nil {
        structMap["releaseNote"] = f.ReleaseNote
    }
    if f.Model != nil {
        structMap["model"] = f.Model
    }
    if f.Make != nil {
        structMap["make"] = f.Make
    }
    if f.FromVersion != nil {
        structMap["fromVersion"] = f.FromVersion
    }
    if f.ToVersion != nil {
        structMap["toVersion"] = f.ToVersion
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Firmware.
// It customizes the JSON unmarshaling process for Firmware objects.
func (f *Firmware) UnmarshalJSON(input []byte) error {
    var temp tempFirmware
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "firmwareName", "participantName", "launchDate", "releaseNote", "model", "make", "fromVersion", "toVersion")
    if err != nil {
    	return err
    }
    f.AdditionalProperties = additionalProperties
    
    f.FirmwareName = temp.FirmwareName
    f.ParticipantName = temp.ParticipantName
    if temp.LaunchDate != nil {
        LaunchDateVal, err := time.Parse(time.RFC3339, *temp.LaunchDate)
        if err != nil {
            log.Fatalf("Cannot Parse launchDate as % s format.", time.RFC3339)
        }
        f.LaunchDate = &LaunchDateVal
    }
    f.ReleaseNote = temp.ReleaseNote
    f.Model = temp.Model
    f.Make = temp.Make
    f.FromVersion = temp.FromVersion
    f.ToVersion = temp.ToVersion
    return nil
}

// tempFirmware is a temporary struct used for validating the fields of Firmware.
type tempFirmware  struct {
    FirmwareName    *string `json:"firmwareName,omitempty"`
    ParticipantName *string `json:"participantName,omitempty"`
    LaunchDate      *string `json:"launchDate,omitempty"`
    ReleaseNote     *string `json:"releaseNote,omitempty"`
    Model           *string `json:"model,omitempty"`
    Make            *string `json:"make,omitempty"`
    FromVersion     *string `json:"fromVersion,omitempty"`
    ToVersion       *string `json:"toVersion,omitempty"`
}
