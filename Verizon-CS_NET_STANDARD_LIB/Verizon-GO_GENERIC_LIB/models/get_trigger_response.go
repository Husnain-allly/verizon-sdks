/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
    "log"
    "time"
)

// GetTriggerResponse represents a GetTriggerResponse struct.
type GetTriggerResponse struct {
    AccountName           *string    `json:"accountName,omitempty"`
    Comparator            *string    `json:"comparator,omitempty"`
    CreatedAt             *time.Time `json:"createdAt,omitempty"`
    GroupName             *string    `json:"groupName,omitempty"`
    ModifiedAt            *time.Time `json:"modifiedAt,omitempty"`
    NotificationGroupName *string    `json:"notificationGroupName,omitempty"`
    OrganizationName      *string    `json:"organizationName,omitempty"`
    SmsType               *string    `json:"smsType,omitempty"`
    Threshold             *string    `json:"threshold,omitempty"`
    ThresholdUnit         *string    `json:"thresholdUnit,omitempty"`
    TriggerCategory       *string    `json:"triggerCategory,omitempty"`
    TriggerCycle          *string    `json:"triggerCycle,omitempty"`
    TriggerId             *string    `json:"triggerId,omitempty"`
    TriggerName           *string    `json:"triggerName,omitempty"`
}

// String implements the fmt.Stringer interface for GetTriggerResponse,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (g GetTriggerResponse) String() string {
    return fmt.Sprintf(
    	"GetTriggerResponse[AccountName=%v, Comparator=%v, CreatedAt=%v, GroupName=%v, ModifiedAt=%v, NotificationGroupName=%v, OrganizationName=%v, SmsType=%v, Threshold=%v, ThresholdUnit=%v, TriggerCategory=%v, TriggerCycle=%v, TriggerId=%v, TriggerName=%v]",
    	g.AccountName, g.Comparator, g.CreatedAt, g.GroupName, g.ModifiedAt, g.NotificationGroupName, g.OrganizationName, g.SmsType, g.Threshold, g.ThresholdUnit, g.TriggerCategory, g.TriggerCycle, g.TriggerId, g.TriggerName)
}

// MarshalJSON implements the json.Marshaler interface for GetTriggerResponse.
// It customizes the JSON marshaling process for GetTriggerResponse objects.
func (g GetTriggerResponse) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(g.toMap())
}

// toMap converts the GetTriggerResponse object to a map representation for JSON marshaling.
func (g GetTriggerResponse) toMap() map[string]any {
    structMap := make(map[string]any)
    if g.AccountName != nil {
        structMap["accountName"] = g.AccountName
    }
    if g.Comparator != nil {
        structMap["comparator"] = g.Comparator
    }
    if g.CreatedAt != nil {
        structMap["createdAt"] = g.CreatedAt.Format(time.RFC3339)
    }
    if g.GroupName != nil {
        structMap["groupName"] = g.GroupName
    }
    if g.ModifiedAt != nil {
        structMap["modifiedAt"] = g.ModifiedAt.Format(time.RFC3339)
    }
    if g.NotificationGroupName != nil {
        structMap["notificationGroupName"] = g.NotificationGroupName
    }
    if g.OrganizationName != nil {
        structMap["organizationName"] = g.OrganizationName
    }
    if g.SmsType != nil {
        structMap["smsType"] = g.SmsType
    }
    if g.Threshold != nil {
        structMap["threshold"] = g.Threshold
    }
    if g.ThresholdUnit != nil {
        structMap["thresholdUnit"] = g.ThresholdUnit
    }
    if g.TriggerCategory != nil {
        structMap["triggerCategory"] = g.TriggerCategory
    }
    if g.TriggerCycle != nil {
        structMap["triggerCycle"] = g.TriggerCycle
    }
    if g.TriggerId != nil {
        structMap["triggerId"] = g.TriggerId
    }
    if g.TriggerName != nil {
        structMap["triggerName"] = g.TriggerName
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for GetTriggerResponse.
// It customizes the JSON unmarshaling process for GetTriggerResponse objects.
func (g *GetTriggerResponse) UnmarshalJSON(input []byte) error {
    var temp tempGetTriggerResponse
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    
    g.AccountName = temp.AccountName
    g.Comparator = temp.Comparator
    if temp.CreatedAt != nil {
        CreatedAtVal, err := time.Parse(time.RFC3339, *temp.CreatedAt)
        if err != nil {
            log.Fatalf("Cannot Parse createdAt as % s format.", time.RFC3339)
        }
        g.CreatedAt = &CreatedAtVal
    }
    g.GroupName = temp.GroupName
    if temp.ModifiedAt != nil {
        ModifiedAtVal, err := time.Parse(time.RFC3339, *temp.ModifiedAt)
        if err != nil {
            log.Fatalf("Cannot Parse modifiedAt as % s format.", time.RFC3339)
        }
        g.ModifiedAt = &ModifiedAtVal
    }
    g.NotificationGroupName = temp.NotificationGroupName
    g.OrganizationName = temp.OrganizationName
    g.SmsType = temp.SmsType
    g.Threshold = temp.Threshold
    g.ThresholdUnit = temp.ThresholdUnit
    g.TriggerCategory = temp.TriggerCategory
    g.TriggerCycle = temp.TriggerCycle
    g.TriggerId = temp.TriggerId
    g.TriggerName = temp.TriggerName
    return nil
}

// tempGetTriggerResponse is a temporary struct used for validating the fields of GetTriggerResponse.
type tempGetTriggerResponse  struct {
    AccountName           *string `json:"accountName,omitempty"`
    Comparator            *string `json:"comparator,omitempty"`
    CreatedAt             *string `json:"createdAt,omitempty"`
    GroupName             *string `json:"groupName,omitempty"`
    ModifiedAt            *string `json:"modifiedAt,omitempty"`
    NotificationGroupName *string `json:"notificationGroupName,omitempty"`
    OrganizationName      *string `json:"organizationName,omitempty"`
    SmsType               *string `json:"smsType,omitempty"`
    Threshold             *string `json:"threshold,omitempty"`
    ThresholdUnit         *string `json:"thresholdUnit,omitempty"`
    TriggerCategory       *string `json:"triggerCategory,omitempty"`
    TriggerCycle          *string `json:"triggerCycle,omitempty"`
    TriggerId             *string `json:"triggerId,omitempty"`
    TriggerName           *string `json:"triggerName,omitempty"`
}
