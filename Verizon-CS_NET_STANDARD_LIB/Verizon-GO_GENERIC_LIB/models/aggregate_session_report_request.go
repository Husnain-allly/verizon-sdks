/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// AggregateSessionReportRequest represents a AggregateSessionReportRequest struct.
// Request for getting an aggregated session report.
type AggregateSessionReportRequest struct {
    // The unique identifier for the account.
    AccountNumber        string                 `json:"accountNumber"`
    // Start date of session to include. If not specified  information will be shown from the earliest available (180 days). Can be either date in ISO 8601 format or predefined constants.
    StartDate            *string                `json:"startDate,omitempty"`
    // End date of session to include. If not specified  information will be shown to the latest available. Can be either date in ISO 8601 format or predefined constants.
    EndDate              *string                `json:"endDate,omitempty"`
    // Devices for which return usage info. Could be 0, 1 or more. In case of 0 will return all devices belonging to customer (except of filtered by other parameters).
    Imei                 []string               `json:"imei"`
    // User defined group name the devices are a member of.
    DeviceGroup          Optional[string]       `json:"deviceGroup"`
    // Optional filter parameter.
    DeviceLabel          Optional[string]       `json:"deviceLabel"`
    // The data plan the devices beign queried belong to.
    DataPlan             Optional[string]       `json:"dataPlan"`
    // Optional filter parameter which return only devices with no sessions.
    NoSessionFlag        *string                `json:"noSessionFlag,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for AggregateSessionReportRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a AggregateSessionReportRequest) String() string {
    return fmt.Sprintf(
    	"AggregateSessionReportRequest[AccountNumber=%v, StartDate=%v, EndDate=%v, Imei=%v, DeviceGroup=%v, DeviceLabel=%v, DataPlan=%v, NoSessionFlag=%v, AdditionalProperties=%v]",
    	a.AccountNumber, a.StartDate, a.EndDate, a.Imei, a.DeviceGroup, a.DeviceLabel, a.DataPlan, a.NoSessionFlag, a.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for AggregateSessionReportRequest.
// It customizes the JSON marshaling process for AggregateSessionReportRequest objects.
func (a AggregateSessionReportRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(a.AdditionalProperties,
        "accountNumber", "startDate", "endDate", "imei", "deviceGroup", "deviceLabel", "dataPlan", "noSessionFlag"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(a.toMap())
}

// toMap converts the AggregateSessionReportRequest object to a map representation for JSON marshaling.
func (a AggregateSessionReportRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, a.AdditionalProperties)
    structMap["accountNumber"] = a.AccountNumber
    if a.StartDate != nil {
        structMap["startDate"] = a.StartDate
    }
    if a.EndDate != nil {
        structMap["endDate"] = a.EndDate
    }
    structMap["imei"] = a.Imei
    if a.DeviceGroup.IsValueSet() {
        if a.DeviceGroup.Value() != nil {
            structMap["deviceGroup"] = a.DeviceGroup.Value()
        } else {
            structMap["deviceGroup"] = nil
        }
    }
    if a.DeviceLabel.IsValueSet() {
        if a.DeviceLabel.Value() != nil {
            structMap["deviceLabel"] = a.DeviceLabel.Value()
        } else {
            structMap["deviceLabel"] = nil
        }
    }
    if a.DataPlan.IsValueSet() {
        if a.DataPlan.Value() != nil {
            structMap["dataPlan"] = a.DataPlan.Value()
        } else {
            structMap["dataPlan"] = nil
        }
    }
    if a.NoSessionFlag != nil {
        structMap["noSessionFlag"] = a.NoSessionFlag
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for AggregateSessionReportRequest.
// It customizes the JSON unmarshaling process for AggregateSessionReportRequest objects.
func (a *AggregateSessionReportRequest) UnmarshalJSON(input []byte) error {
    var temp tempAggregateSessionReportRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountNumber", "startDate", "endDate", "imei", "deviceGroup", "deviceLabel", "dataPlan", "noSessionFlag")
    if err != nil {
    	return err
    }
    a.AdditionalProperties = additionalProperties
    
    a.AccountNumber = *temp.AccountNumber
    a.StartDate = temp.StartDate
    a.EndDate = temp.EndDate
    a.Imei = *temp.Imei
    a.DeviceGroup = temp.DeviceGroup
    a.DeviceLabel = temp.DeviceLabel
    a.DataPlan = temp.DataPlan
    a.NoSessionFlag = temp.NoSessionFlag
    return nil
}

// tempAggregateSessionReportRequest is a temporary struct used for validating the fields of AggregateSessionReportRequest.
type tempAggregateSessionReportRequest  struct {
    AccountNumber *string          `json:"accountNumber"`
    StartDate     *string          `json:"startDate,omitempty"`
    EndDate       *string          `json:"endDate,omitempty"`
    Imei          *[]string        `json:"imei"`
    DeviceGroup   Optional[string] `json:"deviceGroup"`
    DeviceLabel   Optional[string] `json:"deviceLabel"`
    DataPlan      Optional[string] `json:"dataPlan"`
    NoSessionFlag *string          `json:"noSessionFlag,omitempty"`
}

func (a *tempAggregateSessionReportRequest) validate() error {
    var errs []string
    if a.AccountNumber == nil {
        errs = append(errs, "required field `accountNumber` is missing for type `AggregateSessionReportRequest`")
    }
    if a.Imei == nil {
        errs = append(errs, "required field `imei` is missing for type `AggregateSessionReportRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
