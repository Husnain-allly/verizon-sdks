/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// V2ChangeCampaignDatesRequest represents a V2ChangeCampaignDatesRequest struct.
// New dates and time windows.
type V2ChangeCampaignDatesRequest struct {
    // Campaign start date.
    StartDate              time.Time              `json:"startDate"`
    // Campaign end date.
    EndDate                time.Time              `json:"endDate"`
    // Specifies starting date client should download package. If null, client will download as soon as possible.
    DownloadAfterDate      *time.Time             `json:"downloadAfterDate,omitempty"`
    // List of allowed download time windows. Removing of existing windows is not allowed.
    DownloadTimeWindowList []V2TimeWindow         `json:"downloadTimeWindowList,omitempty"`
    // Client will install package after date. If null, client will install as soon as possible.
    InstallAfterDate       *time.Time             `json:"installAfterDate,omitempty"`
    // List of allowed install time windows. Removing of existing windows is not allowed.
    InstallTimeWindowList  []V2TimeWindow         `json:"installTimeWindowList,omitempty"`
    AdditionalProperties   map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for V2ChangeCampaignDatesRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (v V2ChangeCampaignDatesRequest) String() string {
    return fmt.Sprintf(
    	"V2ChangeCampaignDatesRequest[StartDate=%v, EndDate=%v, DownloadAfterDate=%v, DownloadTimeWindowList=%v, InstallAfterDate=%v, InstallTimeWindowList=%v, AdditionalProperties=%v]",
    	v.StartDate, v.EndDate, v.DownloadAfterDate, v.DownloadTimeWindowList, v.InstallAfterDate, v.InstallTimeWindowList, v.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for V2ChangeCampaignDatesRequest.
// It customizes the JSON marshaling process for V2ChangeCampaignDatesRequest objects.
func (v V2ChangeCampaignDatesRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(v.AdditionalProperties,
        "startDate", "endDate", "downloadAfterDate", "downloadTimeWindowList", "installAfterDate", "installTimeWindowList"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(v.toMap())
}

// toMap converts the V2ChangeCampaignDatesRequest object to a map representation for JSON marshaling.
func (v V2ChangeCampaignDatesRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, v.AdditionalProperties)
    structMap["startDate"] = v.StartDate.Format(DEFAULT_DATE)
    structMap["endDate"] = v.EndDate.Format(DEFAULT_DATE)
    if v.DownloadAfterDate != nil {
        structMap["downloadAfterDate"] = v.DownloadAfterDate.Format(DEFAULT_DATE)
    }
    if v.DownloadTimeWindowList != nil {
        structMap["downloadTimeWindowList"] = v.DownloadTimeWindowList
    }
    if v.InstallAfterDate != nil {
        structMap["installAfterDate"] = v.InstallAfterDate.Format(DEFAULT_DATE)
    }
    if v.InstallTimeWindowList != nil {
        structMap["installTimeWindowList"] = v.InstallTimeWindowList
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for V2ChangeCampaignDatesRequest.
// It customizes the JSON unmarshaling process for V2ChangeCampaignDatesRequest objects.
func (v *V2ChangeCampaignDatesRequest) UnmarshalJSON(input []byte) error {
    var temp tempV2ChangeCampaignDatesRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "startDate", "endDate", "downloadAfterDate", "downloadTimeWindowList", "installAfterDate", "installTimeWindowList")
    if err != nil {
    	return err
    }
    v.AdditionalProperties = additionalProperties
    
    StartDateVal, err := time.Parse(DEFAULT_DATE, *temp.StartDate)
    if err != nil {
        log.Fatalf("Cannot Parse startDate as % s format.", DEFAULT_DATE)
    }
    v.StartDate = StartDateVal
    EndDateVal, err := time.Parse(DEFAULT_DATE, *temp.EndDate)
    if err != nil {
        log.Fatalf("Cannot Parse endDate as % s format.", DEFAULT_DATE)
    }
    v.EndDate = EndDateVal
    if temp.DownloadAfterDate != nil {
        DownloadAfterDateVal, err := time.Parse(DEFAULT_DATE, *temp.DownloadAfterDate)
        if err != nil {
            log.Fatalf("Cannot Parse downloadAfterDate as % s format.", DEFAULT_DATE)
        }
        v.DownloadAfterDate = &DownloadAfterDateVal
    }
    v.DownloadTimeWindowList = temp.DownloadTimeWindowList
    if temp.InstallAfterDate != nil {
        InstallAfterDateVal, err := time.Parse(DEFAULT_DATE, *temp.InstallAfterDate)
        if err != nil {
            log.Fatalf("Cannot Parse installAfterDate as % s format.", DEFAULT_DATE)
        }
        v.InstallAfterDate = &InstallAfterDateVal
    }
    v.InstallTimeWindowList = temp.InstallTimeWindowList
    return nil
}

// tempV2ChangeCampaignDatesRequest is a temporary struct used for validating the fields of V2ChangeCampaignDatesRequest.
type tempV2ChangeCampaignDatesRequest  struct {
    StartDate              *string        `json:"startDate"`
    EndDate                *string        `json:"endDate"`
    DownloadAfterDate      *string        `json:"downloadAfterDate,omitempty"`
    DownloadTimeWindowList []V2TimeWindow `json:"downloadTimeWindowList,omitempty"`
    InstallAfterDate       *string        `json:"installAfterDate,omitempty"`
    InstallTimeWindowList  []V2TimeWindow `json:"installTimeWindowList,omitempty"`
}

func (v *tempV2ChangeCampaignDatesRequest) validate() error {
    var errs []string
    if v.StartDate == nil {
        errs = append(errs, "required field `startDate` is missing for type `V2ChangeCampaignDatesRequest`")
    }
    if v.EndDate == nil {
        errs = append(errs, "required field `endDate` is missing for type `V2ChangeCampaignDatesRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
