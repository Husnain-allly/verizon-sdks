/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// TriggerType3 represents a TriggerType3 struct.
// Trigger details.
type TriggerType3 struct {
    // Trigger ID.
    TriggerId             *string                `json:"triggerId,omitempty"`
    // Trigger name.
    TriggerName           *string                `json:"triggerName,omitempty"`
    // This is the value to use in the request body to detect anomalous behaivior. The values in this table will only be relevant when this parameter is set to this value.
    TriggerCategory       *string                `json:"triggerCategory,omitempty"`
    // Account name.
    AccountName           *string                `json:"accountName,omitempty"`
    // The details of the UsageAnomaly trigger.
    AnomalyTriggerRequest *AnomalyTriggerRequest `json:"anomalyTriggerRequest,omitempty"`
    // The notification details of the trigger.
    Notification          *TriggerNotification   `json:"notification,omitempty"`
}

// String implements the fmt.Stringer interface for TriggerType3,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (t TriggerType3) String() string {
    return fmt.Sprintf(
    	"TriggerType3[TriggerId=%v, TriggerName=%v, TriggerCategory=%v, AccountName=%v, AnomalyTriggerRequest=%v, Notification=%v]",
    	t.TriggerId, t.TriggerName, t.TriggerCategory, t.AccountName, t.AnomalyTriggerRequest, t.Notification)
}

// MarshalJSON implements the json.Marshaler interface for TriggerType3.
// It customizes the JSON marshaling process for TriggerType3 objects.
func (t TriggerType3) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(t.toMap())
}

// toMap converts the TriggerType3 object to a map representation for JSON marshaling.
func (t TriggerType3) toMap() map[string]any {
    structMap := make(map[string]any)
    if t.TriggerId != nil {
        structMap["triggerId"] = t.TriggerId
    }
    if t.TriggerName != nil {
        structMap["triggerName"] = t.TriggerName
    }
    if t.TriggerCategory != nil {
        structMap["triggerCategory"] = t.TriggerCategory
    }
    if t.AccountName != nil {
        structMap["accountName"] = t.AccountName
    }
    if t.AnomalyTriggerRequest != nil {
        structMap["anomalyTriggerRequest"] = t.AnomalyTriggerRequest.toMap()
    }
    if t.Notification != nil {
        structMap["notification"] = t.Notification.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for TriggerType3.
// It customizes the JSON unmarshaling process for TriggerType3 objects.
func (t *TriggerType3) UnmarshalJSON(input []byte) error {
    var temp tempTriggerType3
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    
    t.TriggerId = temp.TriggerId
    t.TriggerName = temp.TriggerName
    t.TriggerCategory = temp.TriggerCategory
    t.AccountName = temp.AccountName
    t.AnomalyTriggerRequest = temp.AnomalyTriggerRequest
    t.Notification = temp.Notification
    return nil
}

// tempTriggerType3 is a temporary struct used for validating the fields of TriggerType3.
type tempTriggerType3  struct {
    TriggerId             *string                `json:"triggerId,omitempty"`
    TriggerName           *string                `json:"triggerName,omitempty"`
    TriggerCategory       *string                `json:"triggerCategory,omitempty"`
    AccountName           *string                `json:"accountName,omitempty"`
    AnomalyTriggerRequest *AnomalyTriggerRequest `json:"anomalyTriggerRequest,omitempty"`
    Notification          *TriggerNotification   `json:"notification,omitempty"`
}
