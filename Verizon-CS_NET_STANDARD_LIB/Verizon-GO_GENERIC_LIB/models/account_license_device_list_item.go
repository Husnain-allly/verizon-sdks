/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
    "log"
    "time"
)

// AccountLicenseDeviceListItem represents a AccountLicenseDeviceListItem struct.
// The list of devices that have licenses assigned, including the date and time of when each license was assigned.
type AccountLicenseDeviceListItem struct {
    // Device IMEI.
    DeviceId             *string                `json:"deviceId,omitempty"`
    // Timestamp of when a license was assigned to the device.
    AssignmentTime       *time.Time             `json:"assignmentTime,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for AccountLicenseDeviceListItem,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a AccountLicenseDeviceListItem) String() string {
    return fmt.Sprintf(
    	"AccountLicenseDeviceListItem[DeviceId=%v, AssignmentTime=%v, AdditionalProperties=%v]",
    	a.DeviceId, a.AssignmentTime, a.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for AccountLicenseDeviceListItem.
// It customizes the JSON marshaling process for AccountLicenseDeviceListItem objects.
func (a AccountLicenseDeviceListItem) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(a.AdditionalProperties,
        "deviceId", "assignmentTime"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(a.toMap())
}

// toMap converts the AccountLicenseDeviceListItem object to a map representation for JSON marshaling.
func (a AccountLicenseDeviceListItem) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, a.AdditionalProperties)
    if a.DeviceId != nil {
        structMap["deviceId"] = a.DeviceId
    }
    if a.AssignmentTime != nil {
        structMap["assignmentTime"] = a.AssignmentTime.Format(time.RFC3339)
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for AccountLicenseDeviceListItem.
// It customizes the JSON unmarshaling process for AccountLicenseDeviceListItem objects.
func (a *AccountLicenseDeviceListItem) UnmarshalJSON(input []byte) error {
    var temp tempAccountLicenseDeviceListItem
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceId", "assignmentTime")
    if err != nil {
    	return err
    }
    a.AdditionalProperties = additionalProperties
    
    a.DeviceId = temp.DeviceId
    if temp.AssignmentTime != nil {
        AssignmentTimeVal, err := time.Parse(time.RFC3339, *temp.AssignmentTime)
        if err != nil {
            log.Fatalf("Cannot Parse assignmentTime as % s format.", time.RFC3339)
        }
        a.AssignmentTime = &AssignmentTimeVal
    }
    return nil
}

// tempAccountLicenseDeviceListItem is a temporary struct used for validating the fields of AccountLicenseDeviceListItem.
type tempAccountLicenseDeviceListItem  struct {
    DeviceId       *string `json:"deviceId,omitempty"`
    AssignmentTime *string `json:"assignmentTime,omitempty"`
}
