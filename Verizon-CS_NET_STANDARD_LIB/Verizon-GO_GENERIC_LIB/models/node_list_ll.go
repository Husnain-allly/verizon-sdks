/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// NodeListLl represents a NodeListLl struct.
// The NodeListLL data structure provides the sequence of signed offset node point values for determining the latitude and longitude. Each LL point is referred to as a node point.
type NodeListLl struct {
    // The NodeSetLL data frame consists of a list of NodeLL entries using LL offsets.
    Nodes []NodeLl `json:"nodes"`
}

// String implements the fmt.Stringer interface for NodeListLl,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (n NodeListLl) String() string {
    return fmt.Sprintf(
    	"NodeListLl[Nodes=%v]",
    	n.Nodes)
}

// MarshalJSON implements the json.Marshaler interface for NodeListLl.
// It customizes the JSON marshaling process for NodeListLl objects.
func (n NodeListLl) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(n.toMap())
}

// toMap converts the NodeListLl object to a map representation for JSON marshaling.
func (n NodeListLl) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["nodes"] = n.Nodes
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for NodeListLl.
// It customizes the JSON unmarshaling process for NodeListLl objects.
func (n *NodeListLl) UnmarshalJSON(input []byte) error {
    var temp tempNodeListLl
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    n.Nodes = *temp.Nodes
    return nil
}

// tempNodeListLl is a temporary struct used for validating the fields of NodeListLl.
type tempNodeListLl  struct {
    Nodes *[]NodeLl `json:"nodes"`
}

func (n *tempNodeListLl) validate() error {
    var errs []string
    if n.Nodes == nil {
        errs = append(errs, "required field `nodes` is missing for type `NodeListLL`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
