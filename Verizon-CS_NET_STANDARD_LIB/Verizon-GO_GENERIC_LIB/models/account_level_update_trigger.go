/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// AccountLevelUpdateTrigger represents a AccountLevelUpdateTrigger struct.
type AccountLevelUpdateTrigger struct {
    // The system assigned UUID of the trigger
    TriggerId       *string            `json:"triggerId,omitempty"`
    // The user defined name of the trigger
    TriggerName     *string            `json:"triggerName,omitempty"`
    // The Enterprise Customer Profile Database ID
    EcpdId          *string            `json:"ecpdId,omitempty"`
    // The type of trigger being created or modified
    TriggerCategory *TriggerCategory   `json:"triggerCategory,omitempty"`
    DataTrigger     *DataTrigger1      `json:"dataTrigger,omitempty"`
    Notification    *Notificationarray `json:"notification,omitempty"`
}

// String implements the fmt.Stringer interface for AccountLevelUpdateTrigger,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a AccountLevelUpdateTrigger) String() string {
    return fmt.Sprintf(
    	"AccountLevelUpdateTrigger[TriggerId=%v, TriggerName=%v, EcpdId=%v, TriggerCategory=%v, DataTrigger=%v, Notification=%v]",
    	a.TriggerId, a.TriggerName, a.EcpdId, a.TriggerCategory, a.DataTrigger, a.Notification)
}

// MarshalJSON implements the json.Marshaler interface for AccountLevelUpdateTrigger.
// It customizes the JSON marshaling process for AccountLevelUpdateTrigger objects.
func (a AccountLevelUpdateTrigger) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(a.toMap())
}

// toMap converts the AccountLevelUpdateTrigger object to a map representation for JSON marshaling.
func (a AccountLevelUpdateTrigger) toMap() map[string]any {
    structMap := make(map[string]any)
    if a.TriggerId != nil {
        structMap["triggerId"] = a.TriggerId
    }
    if a.TriggerName != nil {
        structMap["triggerName"] = a.TriggerName
    }
    if a.EcpdId != nil {
        structMap["ecpdId"] = a.EcpdId
    }
    if a.TriggerCategory != nil {
        structMap["triggerCategory"] = a.TriggerCategory
    }
    if a.DataTrigger != nil {
        structMap["dataTrigger"] = a.DataTrigger.toMap()
    }
    if a.Notification != nil {
        structMap["notification"] = a.Notification.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for AccountLevelUpdateTrigger.
// It customizes the JSON unmarshaling process for AccountLevelUpdateTrigger objects.
func (a *AccountLevelUpdateTrigger) UnmarshalJSON(input []byte) error {
    var temp tempAccountLevelUpdateTrigger
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    
    a.TriggerId = temp.TriggerId
    a.TriggerName = temp.TriggerName
    a.EcpdId = temp.EcpdId
    a.TriggerCategory = temp.TriggerCategory
    a.DataTrigger = temp.DataTrigger
    a.Notification = temp.Notification
    return nil
}

// tempAccountLevelUpdateTrigger is a temporary struct used for validating the fields of AccountLevelUpdateTrigger.
type tempAccountLevelUpdateTrigger  struct {
    TriggerId       *string            `json:"triggerId,omitempty"`
    TriggerName     *string            `json:"triggerName,omitempty"`
    EcpdId          *string            `json:"ecpdId,omitempty"`
    TriggerCategory *TriggerCategory   `json:"triggerCategory,omitempty"`
    DataTrigger     *DataTrigger1      `json:"dataTrigger,omitempty"`
    Notification    *Notificationarray `json:"notification,omitempty"`
}
