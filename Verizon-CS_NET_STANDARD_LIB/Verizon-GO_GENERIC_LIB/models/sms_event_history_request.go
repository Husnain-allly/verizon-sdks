/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// SmsEventHistoryRequest represents a SmsEventHistoryRequest struct.
type SmsEventHistoryRequest struct {
    DeviceId GioDeviceId `json:"deviceId"`
    Earliest *time.Time  `json:"earliest,omitempty"`
    Latest   *time.Time  `json:"latest,omitempty"`
}

// String implements the fmt.Stringer interface for SmsEventHistoryRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (s SmsEventHistoryRequest) String() string {
    return fmt.Sprintf(
    	"SmsEventHistoryRequest[DeviceId=%v, Earliest=%v, Latest=%v]",
    	s.DeviceId, s.Earliest, s.Latest)
}

// MarshalJSON implements the json.Marshaler interface for SmsEventHistoryRequest.
// It customizes the JSON marshaling process for SmsEventHistoryRequest objects.
func (s SmsEventHistoryRequest) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(s.toMap())
}

// toMap converts the SmsEventHistoryRequest object to a map representation for JSON marshaling.
func (s SmsEventHistoryRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["deviceId"] = s.DeviceId.toMap()
    if s.Earliest != nil {
        structMap["earliest"] = s.Earliest.Format(time.RFC3339)
    }
    if s.Latest != nil {
        structMap["latest"] = s.Latest.Format(time.RFC3339)
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for SmsEventHistoryRequest.
// It customizes the JSON unmarshaling process for SmsEventHistoryRequest objects.
func (s *SmsEventHistoryRequest) UnmarshalJSON(input []byte) error {
    var temp tempSmsEventHistoryRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    s.DeviceId = *temp.DeviceId
    if temp.Earliest != nil {
        EarliestVal, err := time.Parse(time.RFC3339, *temp.Earliest)
        if err != nil {
            log.Fatalf("Cannot Parse earliest as % s format.", time.RFC3339)
        }
        s.Earliest = &EarliestVal
    }
    if temp.Latest != nil {
        LatestVal, err := time.Parse(time.RFC3339, *temp.Latest)
        if err != nil {
            log.Fatalf("Cannot Parse latest as % s format.", time.RFC3339)
        }
        s.Latest = &LatestVal
    }
    return nil
}

// tempSmsEventHistoryRequest is a temporary struct used for validating the fields of SmsEventHistoryRequest.
type tempSmsEventHistoryRequest  struct {
    DeviceId *GioDeviceId `json:"deviceId"`
    Earliest *string      `json:"earliest,omitempty"`
    Latest   *string      `json:"latest,omitempty"`
}

func (s *tempSmsEventHistoryRequest) validate() error {
    var errs []string
    if s.DeviceId == nil {
        errs = append(errs, "required field `deviceId` is missing for type `SMSEventHistoryRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
