/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// DeviceListIp represents a DeviceListIp struct.
type DeviceListIp struct {
    DeviceIds            []PwnDeviceId          `json:"deviceIds"`
    Ipaddress            string                 `json:"ipAddress"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceListIp,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceListIp) String() string {
    return fmt.Sprintf(
    	"DeviceListIp[DeviceIds=%v, Ipaddress=%v, AdditionalProperties=%v]",
    	d.DeviceIds, d.Ipaddress, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceListIp.
// It customizes the JSON marshaling process for DeviceListIp objects.
func (d DeviceListIp) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "deviceIds", "ipAddress"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceListIp object to a map representation for JSON marshaling.
func (d DeviceListIp) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    structMap["deviceIds"] = d.DeviceIds
    structMap["ipAddress"] = d.Ipaddress
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceListIp.
// It customizes the JSON unmarshaling process for DeviceListIp objects.
func (d *DeviceListIp) UnmarshalJSON(input []byte) error {
    var temp tempDeviceListIp
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceIds", "ipAddress")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.DeviceIds = *temp.DeviceIds
    d.Ipaddress = *temp.Ipaddress
    return nil
}

// tempDeviceListIp is a temporary struct used for validating the fields of DeviceListIp.
type tempDeviceListIp  struct {
    DeviceIds *[]PwnDeviceId `json:"deviceIds"`
    Ipaddress *string        `json:"ipAddress"`
}

func (d *tempDeviceListIp) validate() error {
    var errs []string
    if d.DeviceIds == nil {
        errs = append(errs, "required field `deviceIds` is missing for type `DeviceListIP`")
    }
    if d.Ipaddress == nil {
        errs = append(errs, "required field `ipAddress` is missing for type `DeviceListIP`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
