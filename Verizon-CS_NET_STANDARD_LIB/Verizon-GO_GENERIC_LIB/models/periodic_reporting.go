/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// PeriodicReporting represents a PeriodicReporting struct.
// The units and values of the time interval for the sensor to send a report
type PeriodicReporting struct {
    Unit                 *Unit                  `json:"unit,omitempty"`
    // whole numbers from 0 to 24
    Hours                *int                   `json:"hours,omitempty"`
    // whole numbers from 0 to 59
    Minutes              *int                   `json:"minutes,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for PeriodicReporting,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (p PeriodicReporting) String() string {
    return fmt.Sprintf(
    	"PeriodicReporting[Unit=%v, Hours=%v, Minutes=%v, AdditionalProperties=%v]",
    	p.Unit, p.Hours, p.Minutes, p.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for PeriodicReporting.
// It customizes the JSON marshaling process for PeriodicReporting objects.
func (p PeriodicReporting) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(p.AdditionalProperties,
        "unit", "hours", "minutes"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(p.toMap())
}

// toMap converts the PeriodicReporting object to a map representation for JSON marshaling.
func (p PeriodicReporting) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, p.AdditionalProperties)
    if p.Unit != nil {
        structMap["unit"] = p.Unit
    }
    if p.Hours != nil {
        structMap["hours"] = p.Hours
    }
    if p.Minutes != nil {
        structMap["minutes"] = p.Minutes
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for PeriodicReporting.
// It customizes the JSON unmarshaling process for PeriodicReporting objects.
func (p *PeriodicReporting) UnmarshalJSON(input []byte) error {
    var temp tempPeriodicReporting
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "unit", "hours", "minutes")
    if err != nil {
    	return err
    }
    p.AdditionalProperties = additionalProperties
    
    p.Unit = temp.Unit
    p.Hours = temp.Hours
    p.Minutes = temp.Minutes
    return nil
}

// tempPeriodicReporting is a temporary struct used for validating the fields of PeriodicReporting.
type tempPeriodicReporting  struct {
    Unit    *Unit `json:"unit,omitempty"`
    Hours   *int  `json:"hours,omitempty"`
    Minutes *int  `json:"minutes,omitempty"`
}
