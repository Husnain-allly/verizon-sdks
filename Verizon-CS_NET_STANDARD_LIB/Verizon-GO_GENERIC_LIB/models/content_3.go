/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// Content3 represents a Content3 struct.
type Content3 struct {
    // List of speed limits and cautions.
    SpeedLimit           []TextPhraseOrItis2    `json:"speedLimit"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for Content3,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c Content3) String() string {
    return fmt.Sprintf(
    	"Content3[SpeedLimit=%v, AdditionalProperties=%v]",
    	c.SpeedLimit, c.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for Content3.
// It customizes the JSON marshaling process for Content3 objects.
func (c Content3) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(c.AdditionalProperties,
        "speedLimit"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(c.toMap())
}

// toMap converts the Content3 object to a map representation for JSON marshaling.
func (c Content3) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, c.AdditionalProperties)
    structMap["speedLimit"] = c.SpeedLimit
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Content3.
// It customizes the JSON unmarshaling process for Content3 objects.
func (c *Content3) UnmarshalJSON(input []byte) error {
    var temp tempContent3
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "speedLimit")
    if err != nil {
    	return err
    }
    c.AdditionalProperties = additionalProperties
    
    c.SpeedLimit = *temp.SpeedLimit
    return nil
}

// tempContent3 is a temporary struct used for validating the fields of Content3.
type tempContent3  struct {
    SpeedLimit *[]TextPhraseOrItis2 `json:"speedLimit"`
}

func (c *tempContent3) validate() error {
    var errs []string
    if c.SpeedLimit == nil {
        errs = append(errs, "required field `speedLimit` is missing for type `Content3`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
