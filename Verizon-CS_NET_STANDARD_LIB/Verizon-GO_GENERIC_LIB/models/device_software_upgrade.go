/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// DeviceSoftwareUpgrade represents a DeviceSoftwareUpgrade struct.
// Array of software upgrade objects with the specified status.
type DeviceSoftwareUpgrade struct {
    // Device identifier.
    DeviceId             string                 `json:"deviceId"`
    // Upgrade identifier.
    Id                   string                 `json:"id"`
    // Account identifier.
    AccountName          string                 `json:"accountName"`
    // Software name.
    SoftwareName         *string                `json:"softwareName,omitempty"`
    // Software upgrade start date.
    StartDate            time.Time              `json:"startDate"`
    // Software upgrade status.
    Status               string                 `json:"status"`
    // Software upgrade result reason.
    Reason               string                 `json:"reason"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceSoftwareUpgrade,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceSoftwareUpgrade) String() string {
    return fmt.Sprintf(
    	"DeviceSoftwareUpgrade[DeviceId=%v, Id=%v, AccountName=%v, SoftwareName=%v, StartDate=%v, Status=%v, Reason=%v, AdditionalProperties=%v]",
    	d.DeviceId, d.Id, d.AccountName, d.SoftwareName, d.StartDate, d.Status, d.Reason, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceSoftwareUpgrade.
// It customizes the JSON marshaling process for DeviceSoftwareUpgrade objects.
func (d DeviceSoftwareUpgrade) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "deviceId", "id", "accountName", "softwareName", "startDate", "status", "reason"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceSoftwareUpgrade object to a map representation for JSON marshaling.
func (d DeviceSoftwareUpgrade) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    structMap["deviceId"] = d.DeviceId
    structMap["id"] = d.Id
    structMap["accountName"] = d.AccountName
    if d.SoftwareName != nil {
        structMap["softwareName"] = d.SoftwareName
    }
    structMap["startDate"] = d.StartDate.Format(DEFAULT_DATE)
    structMap["status"] = d.Status
    structMap["reason"] = d.Reason
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceSoftwareUpgrade.
// It customizes the JSON unmarshaling process for DeviceSoftwareUpgrade objects.
func (d *DeviceSoftwareUpgrade) UnmarshalJSON(input []byte) error {
    var temp tempDeviceSoftwareUpgrade
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceId", "id", "accountName", "softwareName", "startDate", "status", "reason")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.DeviceId = *temp.DeviceId
    d.Id = *temp.Id
    d.AccountName = *temp.AccountName
    d.SoftwareName = temp.SoftwareName
    StartDateVal, err := time.Parse(DEFAULT_DATE, *temp.StartDate)
    if err != nil {
        log.Fatalf("Cannot Parse startDate as % s format.", DEFAULT_DATE)
    }
    d.StartDate = StartDateVal
    d.Status = *temp.Status
    d.Reason = *temp.Reason
    return nil
}

// tempDeviceSoftwareUpgrade is a temporary struct used for validating the fields of DeviceSoftwareUpgrade.
type tempDeviceSoftwareUpgrade  struct {
    DeviceId     *string `json:"deviceId"`
    Id           *string `json:"id"`
    AccountName  *string `json:"accountName"`
    SoftwareName *string `json:"softwareName,omitempty"`
    StartDate    *string `json:"startDate"`
    Status       *string `json:"status"`
    Reason       *string `json:"reason"`
}

func (d *tempDeviceSoftwareUpgrade) validate() error {
    var errs []string
    if d.DeviceId == nil {
        errs = append(errs, "required field `deviceId` is missing for type `DeviceSoftwareUpgrade`")
    }
    if d.Id == nil {
        errs = append(errs, "required field `id` is missing for type `DeviceSoftwareUpgrade`")
    }
    if d.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `DeviceSoftwareUpgrade`")
    }
    if d.StartDate == nil {
        errs = append(errs, "required field `startDate` is missing for type `DeviceSoftwareUpgrade`")
    }
    if d.Status == nil {
        errs = append(errs, "required field `status` is missing for type `DeviceSoftwareUpgrade`")
    }
    if d.Reason == nil {
        errs = append(errs, "required field `reason` is missing for type `DeviceSoftwareUpgrade`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
