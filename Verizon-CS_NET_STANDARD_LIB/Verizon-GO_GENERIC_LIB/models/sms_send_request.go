/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// SmsSendRequest represents a SmsSendRequest struct.
// Request to send SMS.
type SmsSendRequest struct {
    // The name of a billing account.
    AccountName          string                 `json:"accountName"`
    // The contents of the SMS message. The SMS message is limited to 160 characters in 7-bit format, or 140 characters in 8-bit format.
    SmsMessage           string                 `json:"smsMessage"`
    // The names and values of custom fields, if you want to only include devices that have matching custom fields.
    CustomFields         []CustomFields         `json:"customFields,omitempty"`
    // The SMS message encoding, which can be 7-bit (default), 8-bit-ASCII, 8-bit-UTF-8, 8-bit-DATA.
    DataEncoding         *string                `json:"dataEncoding,omitempty"`
    // The devices that you want to send the message to, specified by device identifier.
    DeviceIds            []DeviceId             `json:"deviceIds,omitempty"`
    // The name of a device group, if you want to send the SMS message to all devices in the device group.
    GroupName            *string                `json:"groupName,omitempty"`
    // The name of a service plan, if you want to only include devices that have that service plan.
    ServicePlan          *string                `json:"servicePlan,omitempty"`
    // A period of time the message remains valid or an end date for the message. This value would be less than the 5 day default.
    TimeToLive           *string                `json:"timeToLive,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for SmsSendRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (s SmsSendRequest) String() string {
    return fmt.Sprintf(
    	"SmsSendRequest[AccountName=%v, SmsMessage=%v, CustomFields=%v, DataEncoding=%v, DeviceIds=%v, GroupName=%v, ServicePlan=%v, TimeToLive=%v, AdditionalProperties=%v]",
    	s.AccountName, s.SmsMessage, s.CustomFields, s.DataEncoding, s.DeviceIds, s.GroupName, s.ServicePlan, s.TimeToLive, s.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for SmsSendRequest.
// It customizes the JSON marshaling process for SmsSendRequest objects.
func (s SmsSendRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(s.AdditionalProperties,
        "accountName", "smsMessage", "customFields", "dataEncoding", "deviceIds", "groupName", "servicePlan", "timeToLive"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(s.toMap())
}

// toMap converts the SmsSendRequest object to a map representation for JSON marshaling.
func (s SmsSendRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, s.AdditionalProperties)
    structMap["accountName"] = s.AccountName
    structMap["smsMessage"] = s.SmsMessage
    if s.CustomFields != nil {
        structMap["customFields"] = s.CustomFields
    }
    if s.DataEncoding != nil {
        structMap["dataEncoding"] = s.DataEncoding
    }
    if s.DeviceIds != nil {
        structMap["deviceIds"] = s.DeviceIds
    }
    if s.GroupName != nil {
        structMap["groupName"] = s.GroupName
    }
    if s.ServicePlan != nil {
        structMap["servicePlan"] = s.ServicePlan
    }
    if s.TimeToLive != nil {
        structMap["timeToLive"] = s.TimeToLive
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for SmsSendRequest.
// It customizes the JSON unmarshaling process for SmsSendRequest objects.
func (s *SmsSendRequest) UnmarshalJSON(input []byte) error {
    var temp tempSmsSendRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "smsMessage", "customFields", "dataEncoding", "deviceIds", "groupName", "servicePlan", "timeToLive")
    if err != nil {
    	return err
    }
    s.AdditionalProperties = additionalProperties
    
    s.AccountName = *temp.AccountName
    s.SmsMessage = *temp.SmsMessage
    s.CustomFields = temp.CustomFields
    s.DataEncoding = temp.DataEncoding
    s.DeviceIds = temp.DeviceIds
    s.GroupName = temp.GroupName
    s.ServicePlan = temp.ServicePlan
    s.TimeToLive = temp.TimeToLive
    return nil
}

// tempSmsSendRequest is a temporary struct used for validating the fields of SmsSendRequest.
type tempSmsSendRequest  struct {
    AccountName  *string        `json:"accountName"`
    SmsMessage   *string        `json:"smsMessage"`
    CustomFields []CustomFields `json:"customFields,omitempty"`
    DataEncoding *string        `json:"dataEncoding,omitempty"`
    DeviceIds    []DeviceId     `json:"deviceIds,omitempty"`
    GroupName    *string        `json:"groupName,omitempty"`
    ServicePlan  *string        `json:"servicePlan,omitempty"`
    TimeToLive   *string        `json:"timeToLive,omitempty"`
}

func (s *tempSmsSendRequest) validate() error {
    var errs []string
    if s.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `SMSSendRequest`")
    }
    if s.SmsMessage == nil {
        errs = append(errs, "required field `smsMessage` is missing for type `SMSSendRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
