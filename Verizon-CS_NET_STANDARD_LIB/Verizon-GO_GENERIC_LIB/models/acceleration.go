/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// Acceleration represents a Acceleration struct.
type Acceleration struct {
    X                    *string                `json:"x,omitempty"`
    Y                    *string                `json:"y,omitempty"`
    Z                    *string                `json:"z,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for Acceleration,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a Acceleration) String() string {
    return fmt.Sprintf(
    	"Acceleration[X=%v, Y=%v, Z=%v, AdditionalProperties=%v]",
    	a.X, a.Y, a.Z, a.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for Acceleration.
// It customizes the JSON marshaling process for Acceleration objects.
func (a Acceleration) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(a.AdditionalProperties,
        "x", "y", "z"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(a.toMap())
}

// toMap converts the Acceleration object to a map representation for JSON marshaling.
func (a Acceleration) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, a.AdditionalProperties)
    if a.X != nil {
        structMap["x"] = a.X
    }
    if a.Y != nil {
        structMap["y"] = a.Y
    }
    if a.Z != nil {
        structMap["z"] = a.Z
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Acceleration.
// It customizes the JSON unmarshaling process for Acceleration objects.
func (a *Acceleration) UnmarshalJSON(input []byte) error {
    var temp tempAcceleration
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "x", "y", "z")
    if err != nil {
    	return err
    }
    a.AdditionalProperties = additionalProperties
    
    a.X = temp.X
    a.Y = temp.Y
    a.Z = temp.Z
    return nil
}

// tempAcceleration is a temporary struct used for validating the fields of Acceleration.
type tempAcceleration  struct {
    X *string `json:"x,omitempty"`
    Y *string `json:"y,omitempty"`
    Z *string `json:"z,omitempty"`
}
