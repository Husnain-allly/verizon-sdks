/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// SecuritySubscription represents a SecuritySubscription struct.
// Subscription of the device.
type SecuritySubscription struct {
    // Attributes of the subscription.
    ExtendedAttributes []ExtendedAttributes `json:"extendedAttributes,omitempty"`
    // The total number of licenses for this license type that are assigned to device SIMs.
    LicenseAssigned    *int                 `json:"licenseAssigned,omitempty"`
    // The total number of licenses for this license type that are available to assign to device SIMs.
    LicenseAvailable   *int                 `json:"licenseAvailable,omitempty"`
    // The total number of licenses purchased for the license type.
    LicensePurchased   *int                 `json:"licensePurchased,omitempty"`
    // The license type associated with the skuNumber.
    LicenseType        *string              `json:"licenseType,omitempty"`
    // The skuNumber that identifies the license type.
    SkuNumber          *string              `json:"skuNumber,omitempty"`
}

// String implements the fmt.Stringer interface for SecuritySubscription,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (s SecuritySubscription) String() string {
    return fmt.Sprintf(
    	"SecuritySubscription[ExtendedAttributes=%v, LicenseAssigned=%v, LicenseAvailable=%v, LicensePurchased=%v, LicenseType=%v, SkuNumber=%v]",
    	s.ExtendedAttributes, s.LicenseAssigned, s.LicenseAvailable, s.LicensePurchased, s.LicenseType, s.SkuNumber)
}

// MarshalJSON implements the json.Marshaler interface for SecuritySubscription.
// It customizes the JSON marshaling process for SecuritySubscription objects.
func (s SecuritySubscription) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(s.toMap())
}

// toMap converts the SecuritySubscription object to a map representation for JSON marshaling.
func (s SecuritySubscription) toMap() map[string]any {
    structMap := make(map[string]any)
    if s.ExtendedAttributes != nil {
        structMap["extendedAttributes"] = s.ExtendedAttributes
    }
    if s.LicenseAssigned != nil {
        structMap["licenseAssigned"] = s.LicenseAssigned
    }
    if s.LicenseAvailable != nil {
        structMap["licenseAvailable"] = s.LicenseAvailable
    }
    if s.LicensePurchased != nil {
        structMap["licensePurchased"] = s.LicensePurchased
    }
    if s.LicenseType != nil {
        structMap["licenseType"] = s.LicenseType
    }
    if s.SkuNumber != nil {
        structMap["skuNumber"] = s.SkuNumber
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for SecuritySubscription.
// It customizes the JSON unmarshaling process for SecuritySubscription objects.
func (s *SecuritySubscription) UnmarshalJSON(input []byte) error {
    var temp tempSecuritySubscription
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    
    s.ExtendedAttributes = temp.ExtendedAttributes
    s.LicenseAssigned = temp.LicenseAssigned
    s.LicenseAvailable = temp.LicenseAvailable
    s.LicensePurchased = temp.LicensePurchased
    s.LicenseType = temp.LicenseType
    s.SkuNumber = temp.SkuNumber
    return nil
}

// tempSecuritySubscription is a temporary struct used for validating the fields of SecuritySubscription.
type tempSecuritySubscription  struct {
    ExtendedAttributes []ExtendedAttributes `json:"extendedAttributes,omitempty"`
    LicenseAssigned    *int                 `json:"licenseAssigned,omitempty"`
    LicenseAvailable   *int                 `json:"licenseAvailable,omitempty"`
    LicensePurchased   *int                 `json:"licensePurchased,omitempty"`
    LicenseType        *string              `json:"licenseType,omitempty"`
    SkuNumber          *string              `json:"skuNumber,omitempty"`
}
