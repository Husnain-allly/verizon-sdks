/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// SaeInfo represents a SaeInfo struct.
type SaeInfo struct {
    // List of data frames.
    DataFrames []DataFrame `json:"dataFrames"`
}

// String implements the fmt.Stringer interface for SaeInfo,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (s SaeInfo) String() string {
    return fmt.Sprintf(
    	"SaeInfo[DataFrames=%v]",
    	s.DataFrames)
}

// MarshalJSON implements the json.Marshaler interface for SaeInfo.
// It customizes the JSON marshaling process for SaeInfo objects.
func (s SaeInfo) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(s.toMap())
}

// toMap converts the SaeInfo object to a map representation for JSON marshaling.
func (s SaeInfo) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["dataFrames"] = s.DataFrames
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for SaeInfo.
// It customizes the JSON unmarshaling process for SaeInfo objects.
func (s *SaeInfo) UnmarshalJSON(input []byte) error {
    var temp tempSaeInfo
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    s.DataFrames = *temp.DataFrames
    return nil
}

// tempSaeInfo is a temporary struct used for validating the fields of SaeInfo.
type tempSaeInfo  struct {
    DataFrames *[]DataFrame `json:"dataFrames"`
}

func (s *tempSaeInfo) validate() error {
    var errs []string
    if s.DataFrames == nil {
        errs = append(errs, "required field `dataFrames` is missing for type `SaeInfo`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
