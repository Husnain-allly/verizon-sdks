/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// TriggerNotification represents a TriggerNotification struct.
// The notification details of the trigger.
type TriggerNotification struct {
    // The type of notification, i.e. 'DailySummary'.
    NotificationType              *string     `json:"notificationType,omitempty"`
    // Whether or not the notification should be sent via callback.<br />true<br />false.
    Callback                      *bool       `json:"callback,omitempty"`
    // Whether or not the notification should be sent via e-mail.<br />true<br />false.
    EmailNotification             *bool       `json:"emailNotification,omitempty"`
    // Name for the notification group.
    NotificationGroupName         *string     `json:"notificationGroupName,omitempty"`
    // Frequency factor for notification.
    NotificationFrequencyFactor   *int        `json:"notificationFrequencyFactor,omitempty"`
    // Frequency interval for notification.
    NotificationFrequencyInterval *string     `json:"notificationFrequencyInterval,omitempty"`
    // E-mail address(es) where the notification should be delivered.
    ExternalEmailRecipients       *string     `json:"externalEmailRecipients,omitempty"`
    // SMS notification.
    SmsNotification               *bool       `json:"smsNotification,omitempty"`
    // List of SMS numbers.
    SmsNumbers                    []SmsNumber `json:"smsNumbers,omitempty"`
    Reminder                      *bool       `json:"reminder,omitempty"`
    // Severity level associated with the notification. Examples would be:<br />Major<br />Minor<br />Critical<br />NotApplicable.
    Severity                      *string     `json:"severity,omitempty"`
}

// String implements the fmt.Stringer interface for TriggerNotification,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (t TriggerNotification) String() string {
    return fmt.Sprintf(
    	"TriggerNotification[NotificationType=%v, Callback=%v, EmailNotification=%v, NotificationGroupName=%v, NotificationFrequencyFactor=%v, NotificationFrequencyInterval=%v, ExternalEmailRecipients=%v, SmsNotification=%v, SmsNumbers=%v, Reminder=%v, Severity=%v]",
    	t.NotificationType, t.Callback, t.EmailNotification, t.NotificationGroupName, t.NotificationFrequencyFactor, t.NotificationFrequencyInterval, t.ExternalEmailRecipients, t.SmsNotification, t.SmsNumbers, t.Reminder, t.Severity)
}

// MarshalJSON implements the json.Marshaler interface for TriggerNotification.
// It customizes the JSON marshaling process for TriggerNotification objects.
func (t TriggerNotification) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(t.toMap())
}

// toMap converts the TriggerNotification object to a map representation for JSON marshaling.
func (t TriggerNotification) toMap() map[string]any {
    structMap := make(map[string]any)
    if t.NotificationType != nil {
        structMap["notificationType"] = t.NotificationType
    }
    if t.Callback != nil {
        structMap["callback"] = t.Callback
    }
    if t.EmailNotification != nil {
        structMap["emailNotification"] = t.EmailNotification
    }
    if t.NotificationGroupName != nil {
        structMap["notificationGroupName"] = t.NotificationGroupName
    }
    if t.NotificationFrequencyFactor != nil {
        structMap["notificationFrequencyFactor"] = t.NotificationFrequencyFactor
    }
    if t.NotificationFrequencyInterval != nil {
        structMap["notificationFrequencyInterval"] = t.NotificationFrequencyInterval
    }
    if t.ExternalEmailRecipients != nil {
        structMap["externalEmailRecipients"] = t.ExternalEmailRecipients
    }
    if t.SmsNotification != nil {
        structMap["smsNotification"] = t.SmsNotification
    }
    if t.SmsNumbers != nil {
        structMap["smsNumbers"] = t.SmsNumbers
    }
    if t.Reminder != nil {
        structMap["reminder"] = t.Reminder
    }
    if t.Severity != nil {
        structMap["severity"] = t.Severity
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for TriggerNotification.
// It customizes the JSON unmarshaling process for TriggerNotification objects.
func (t *TriggerNotification) UnmarshalJSON(input []byte) error {
    var temp tempTriggerNotification
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    
    t.NotificationType = temp.NotificationType
    t.Callback = temp.Callback
    t.EmailNotification = temp.EmailNotification
    t.NotificationGroupName = temp.NotificationGroupName
    t.NotificationFrequencyFactor = temp.NotificationFrequencyFactor
    t.NotificationFrequencyInterval = temp.NotificationFrequencyInterval
    t.ExternalEmailRecipients = temp.ExternalEmailRecipients
    t.SmsNotification = temp.SmsNotification
    t.SmsNumbers = temp.SmsNumbers
    t.Reminder = temp.Reminder
    t.Severity = temp.Severity
    return nil
}

// tempTriggerNotification is a temporary struct used for validating the fields of TriggerNotification.
type tempTriggerNotification  struct {
    NotificationType              *string     `json:"notificationType,omitempty"`
    Callback                      *bool       `json:"callback,omitempty"`
    EmailNotification             *bool       `json:"emailNotification,omitempty"`
    NotificationGroupName         *string     `json:"notificationGroupName,omitempty"`
    NotificationFrequencyFactor   *int        `json:"notificationFrequencyFactor,omitempty"`
    NotificationFrequencyInterval *string     `json:"notificationFrequencyInterval,omitempty"`
    ExternalEmailRecipients       *string     `json:"externalEmailRecipients,omitempty"`
    SmsNotification               *bool       `json:"smsNotification,omitempty"`
    SmsNumbers                    []SmsNumber `json:"smsNumbers,omitempty"`
    Reminder                      *bool       `json:"reminder,omitempty"`
    Severity                      *string     `json:"severity,omitempty"`
}
