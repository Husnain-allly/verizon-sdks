/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// ResourceUser represents a ResourceUser struct.
type ResourceUser struct {
    // Not used in this release, future functionality
    Accountclientid            *string                `json:"accountclientid,omitempty"`
    // Indicates if terms are agreed to (true) or not
    Ackterms                   *bool                  `json:"ackterms,omitempty"`
    Acktermson                 *time.Time             `json:"acktermson,omitempty"`
    // The billing account ID. This is the same value as the Account ID
    Billingaccountid           *string                `json:"billingaccountid,omitempty"`
    // Timestamp of the record
    Createdon                  time.Time              `json:"createdon"`
    // User credentials. The only valid value is an email address
    Credentialsid              *string                `json:"credentialsid,omitempty"`
    // The type of credential represented by the ID. The only valid value is `email`
    Credentialstype            string                 `json:"credentialstype"`
    // Name/value pair, where the value is client defined.  The purpose is to keep track of current state per device action.
    Customdata                 map[string]interface{} `json:"customdata,omitempty"`
    // a short description
    Description                *string                `json:"description,omitempty"`
    // the user name value to display
    Displayname                *string                `json:"displayname,omitempty"`
    // Contact email for the group
    Email                      *string                `json:"email,omitempty"`
    // The first name in the user record
    Firstname                  *string                `json:"firstname,omitempty"`
    // UUID of the ECPD account the user belongs to
    Foreignid                  string                 `json:"foreignid"`
    // UUID of the user record, assigned at creation
    Id                         *string                `json:"id,omitempty"`
    // The last name in the user record
    Lastname                   *string                `json:"lastname,omitempty"`
    // Timestamp of the record
    Lastupdated                time.Time              `json:"lastupdated"`
    // The Mobile Directory Number
    Mdn                        *string                `json:"mdn,omitempty"`
    // optional field for middle name or initial
    Middlename                 *string                `json:"middlename,omitempty"`
    // User defined name of the record
    Name                       *string                `json:"name,omitempty"`
    // Virtual field; will not be used in this implementation
    Secondarybillingaccountids []string               `json:"secondarybillingaccountids,omitempty"`
    // The current status of the device or transaction and will be `success` or `failed`
    State                      *string                `json:"state,omitempty"`
    // The resource version
    Version                    *string                `json:"version,omitempty"`
    // The UUID of the resource version
    Versionid                  string                 `json:"versionid"`
}

// String implements the fmt.Stringer interface for ResourceUser,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (r ResourceUser) String() string {
    return fmt.Sprintf(
    	"ResourceUser[Accountclientid=%v, Ackterms=%v, Acktermson=%v, Billingaccountid=%v, Createdon=%v, Credentialsid=%v, Credentialstype=%v, Customdata=%v, Description=%v, Displayname=%v, Email=%v, Firstname=%v, Foreignid=%v, Id=%v, Lastname=%v, Lastupdated=%v, Mdn=%v, Middlename=%v, Name=%v, Secondarybillingaccountids=%v, State=%v, Version=%v, Versionid=%v]",
    	r.Accountclientid, r.Ackterms, r.Acktermson, r.Billingaccountid, r.Createdon, r.Credentialsid, r.Credentialstype, r.Customdata, r.Description, r.Displayname, r.Email, r.Firstname, r.Foreignid, r.Id, r.Lastname, r.Lastupdated, r.Mdn, r.Middlename, r.Name, r.Secondarybillingaccountids, r.State, r.Version, r.Versionid)
}

// MarshalJSON implements the json.Marshaler interface for ResourceUser.
// It customizes the JSON marshaling process for ResourceUser objects.
func (r ResourceUser) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(r.toMap())
}

// toMap converts the ResourceUser object to a map representation for JSON marshaling.
func (r ResourceUser) toMap() map[string]any {
    structMap := make(map[string]any)
    if r.Accountclientid != nil {
        structMap["accountclientid"] = r.Accountclientid
    }
    if r.Ackterms != nil {
        structMap["ackterms"] = r.Ackterms
    }
    if r.Acktermson != nil {
        structMap["acktermson"] = r.Acktermson.Format(time.RFC3339)
    }
    if r.Billingaccountid != nil {
        structMap["billingaccountid"] = r.Billingaccountid
    }
    structMap["createdon"] = r.Createdon.Format(time.RFC3339)
    if r.Credentialsid != nil {
        structMap["credentialsid"] = r.Credentialsid
    }
    structMap["credentialstype"] = r.Credentialstype
    if r.Customdata != nil {
        structMap["customdata"] = r.Customdata
    }
    if r.Description != nil {
        structMap["description"] = r.Description
    }
    if r.Displayname != nil {
        structMap["displayname"] = r.Displayname
    }
    if r.Email != nil {
        structMap["email"] = r.Email
    }
    if r.Firstname != nil {
        structMap["firstname"] = r.Firstname
    }
    structMap["foreignid"] = r.Foreignid
    if r.Id != nil {
        structMap["id"] = r.Id
    }
    if r.Lastname != nil {
        structMap["lastname"] = r.Lastname
    }
    structMap["lastupdated"] = r.Lastupdated.Format(time.RFC3339)
    if r.Mdn != nil {
        structMap["mdn"] = r.Mdn
    }
    if r.Middlename != nil {
        structMap["middlename"] = r.Middlename
    }
    if r.Name != nil {
        structMap["name"] = r.Name
    }
    if r.Secondarybillingaccountids != nil {
        structMap["secondarybillingaccountids"] = r.Secondarybillingaccountids
    }
    if r.State != nil {
        structMap["state"] = r.State
    }
    if r.Version != nil {
        structMap["version"] = r.Version
    }
    structMap["versionid"] = r.Versionid
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ResourceUser.
// It customizes the JSON unmarshaling process for ResourceUser objects.
func (r *ResourceUser) UnmarshalJSON(input []byte) error {
    var temp tempResourceUser
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    r.Accountclientid = temp.Accountclientid
    r.Ackterms = temp.Ackterms
    if temp.Acktermson != nil {
        AcktermsonVal, err := time.Parse(time.RFC3339, *temp.Acktermson)
        if err != nil {
            log.Fatalf("Cannot Parse acktermson as % s format.", time.RFC3339)
        }
        r.Acktermson = &AcktermsonVal
    }
    r.Billingaccountid = temp.Billingaccountid
    CreatedonVal, err := time.Parse(time.RFC3339, *temp.Createdon)
    if err != nil {
        log.Fatalf("Cannot Parse createdon as % s format.", time.RFC3339)
    }
    r.Createdon = CreatedonVal
    r.Credentialsid = temp.Credentialsid
    r.Credentialstype = *temp.Credentialstype
    r.Customdata = temp.Customdata
    r.Description = temp.Description
    r.Displayname = temp.Displayname
    r.Email = temp.Email
    r.Firstname = temp.Firstname
    r.Foreignid = *temp.Foreignid
    r.Id = temp.Id
    r.Lastname = temp.Lastname
    LastupdatedVal, err := time.Parse(time.RFC3339, *temp.Lastupdated)
    if err != nil {
        log.Fatalf("Cannot Parse lastupdated as % s format.", time.RFC3339)
    }
    r.Lastupdated = LastupdatedVal
    r.Mdn = temp.Mdn
    r.Middlename = temp.Middlename
    r.Name = temp.Name
    r.Secondarybillingaccountids = temp.Secondarybillingaccountids
    r.State = temp.State
    r.Version = temp.Version
    r.Versionid = *temp.Versionid
    return nil
}

// tempResourceUser is a temporary struct used for validating the fields of ResourceUser.
type tempResourceUser  struct {
    Accountclientid            *string                `json:"accountclientid,omitempty"`
    Ackterms                   *bool                  `json:"ackterms,omitempty"`
    Acktermson                 *string                `json:"acktermson,omitempty"`
    Billingaccountid           *string                `json:"billingaccountid,omitempty"`
    Createdon                  *string                `json:"createdon"`
    Credentialsid              *string                `json:"credentialsid,omitempty"`
    Credentialstype            *string                `json:"credentialstype"`
    Customdata                 map[string]interface{} `json:"customdata,omitempty"`
    Description                *string                `json:"description,omitempty"`
    Displayname                *string                `json:"displayname,omitempty"`
    Email                      *string                `json:"email,omitempty"`
    Firstname                  *string                `json:"firstname,omitempty"`
    Foreignid                  *string                `json:"foreignid"`
    Id                         *string                `json:"id,omitempty"`
    Lastname                   *string                `json:"lastname,omitempty"`
    Lastupdated                *string                `json:"lastupdated"`
    Mdn                        *string                `json:"mdn,omitempty"`
    Middlename                 *string                `json:"middlename,omitempty"`
    Name                       *string                `json:"name,omitempty"`
    Secondarybillingaccountids []string               `json:"secondarybillingaccountids,omitempty"`
    State                      *string                `json:"state,omitempty"`
    Version                    *string                `json:"version,omitempty"`
    Versionid                  *string                `json:"versionid"`
}

func (r *tempResourceUser) validate() error {
    var errs []string
    if r.Createdon == nil {
        errs = append(errs, "required field `createdon` is missing for type `resource.User`")
    }
    if r.Credentialstype == nil {
        errs = append(errs, "required field `credentialstype` is missing for type `resource.User`")
    }
    if r.Foreignid == nil {
        errs = append(errs, "required field `foreignid` is missing for type `resource.User`")
    }
    if r.Lastupdated == nil {
        errs = append(errs, "required field `lastupdated` is missing for type `resource.User`")
    }
    if r.Versionid == nil {
        errs = append(errs, "required field `versionid` is missing for type `resource.User`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
