/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// FirmwareUpgrade represents a FirmwareUpgrade struct.
// Array of upgrade objects with the specified status.
type FirmwareUpgrade struct {
    // The unique identifier for this upgrade.
    Id                   *string                         `json:"id,omitempty"`
    // Account identifier in "##########-#####".
    AccountName          *string                         `json:"accountName,omitempty"`
    // The name of the firmware image that will be used for the upgrade.
    FirmwareName         *string                         `json:"firmwareName,omitempty"`
    // The name of the firmware version that will be on the devices after a successful upgrade.
    FirmwareTo           *string                         `json:"firmwareTo,omitempty"`
    // The intended start date for the upgrade.
    StartDate            *string                         `json:"startDate,omitempty"`
    // The current status of the upgrade.
    Status               *string                         `json:"status,omitempty"`
    // A JSON object for each device that was included in the upgrade, showing the device IMEI, the status of the upgrade, and additional information about the status.
    DeviceList           []FirmwareUpgradeDeviceListItem `json:"deviceList,omitempty"`
    AdditionalProperties map[string]interface{}          `json:"_"`
}

// String implements the fmt.Stringer interface for FirmwareUpgrade,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (f FirmwareUpgrade) String() string {
    return fmt.Sprintf(
    	"FirmwareUpgrade[Id=%v, AccountName=%v, FirmwareName=%v, FirmwareTo=%v, StartDate=%v, Status=%v, DeviceList=%v, AdditionalProperties=%v]",
    	f.Id, f.AccountName, f.FirmwareName, f.FirmwareTo, f.StartDate, f.Status, f.DeviceList, f.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for FirmwareUpgrade.
// It customizes the JSON marshaling process for FirmwareUpgrade objects.
func (f FirmwareUpgrade) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(f.AdditionalProperties,
        "id", "accountName", "firmwareName", "firmwareTo", "startDate", "status", "deviceList"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(f.toMap())
}

// toMap converts the FirmwareUpgrade object to a map representation for JSON marshaling.
func (f FirmwareUpgrade) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, f.AdditionalProperties)
    if f.Id != nil {
        structMap["id"] = f.Id
    }
    if f.AccountName != nil {
        structMap["accountName"] = f.AccountName
    }
    if f.FirmwareName != nil {
        structMap["firmwareName"] = f.FirmwareName
    }
    if f.FirmwareTo != nil {
        structMap["firmwareTo"] = f.FirmwareTo
    }
    if f.StartDate != nil {
        structMap["startDate"] = f.StartDate
    }
    if f.Status != nil {
        structMap["status"] = f.Status
    }
    if f.DeviceList != nil {
        structMap["deviceList"] = f.DeviceList
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for FirmwareUpgrade.
// It customizes the JSON unmarshaling process for FirmwareUpgrade objects.
func (f *FirmwareUpgrade) UnmarshalJSON(input []byte) error {
    var temp tempFirmwareUpgrade
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "id", "accountName", "firmwareName", "firmwareTo", "startDate", "status", "deviceList")
    if err != nil {
    	return err
    }
    f.AdditionalProperties = additionalProperties
    
    f.Id = temp.Id
    f.AccountName = temp.AccountName
    f.FirmwareName = temp.FirmwareName
    f.FirmwareTo = temp.FirmwareTo
    f.StartDate = temp.StartDate
    f.Status = temp.Status
    f.DeviceList = temp.DeviceList
    return nil
}

// tempFirmwareUpgrade is a temporary struct used for validating the fields of FirmwareUpgrade.
type tempFirmwareUpgrade  struct {
    Id           *string                         `json:"id,omitempty"`
    AccountName  *string                         `json:"accountName,omitempty"`
    FirmwareName *string                         `json:"firmwareName,omitempty"`
    FirmwareTo   *string                         `json:"firmwareTo,omitempty"`
    StartDate    *string                         `json:"startDate,omitempty"`
    Status       *string                         `json:"status,omitempty"`
    DeviceList   []FirmwareUpgradeDeviceListItem `json:"deviceList,omitempty"`
}
