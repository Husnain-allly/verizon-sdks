/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// PositionData represents a PositionData struct.
// Position data.
type PositionData struct {
    // Time location obtained.
    Time                 *string                `json:"time,omitempty"`
    // UTC offset of time.
    Utcoffset            *string                `json:"utcoffset,omitempty"`
    // X coordinate of location.
    X                    *string                `json:"x,omitempty"`
    // Y coordinate of location.
    Y                    *string                `json:"y,omitempty"`
    // Radius of the location in meters.
    Radius               *string                `json:"radius,omitempty"`
    // Whether requested accurary is met or not.
    Qos                  *bool                  `json:"qos,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for PositionData,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (p PositionData) String() string {
    return fmt.Sprintf(
    	"PositionData[Time=%v, Utcoffset=%v, X=%v, Y=%v, Radius=%v, Qos=%v, AdditionalProperties=%v]",
    	p.Time, p.Utcoffset, p.X, p.Y, p.Radius, p.Qos, p.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for PositionData.
// It customizes the JSON marshaling process for PositionData objects.
func (p PositionData) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(p.AdditionalProperties,
        "time", "utcoffset", "x", "y", "radius", "qos"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(p.toMap())
}

// toMap converts the PositionData object to a map representation for JSON marshaling.
func (p PositionData) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, p.AdditionalProperties)
    if p.Time != nil {
        structMap["time"] = p.Time
    }
    if p.Utcoffset != nil {
        structMap["utcoffset"] = p.Utcoffset
    }
    if p.X != nil {
        structMap["x"] = p.X
    }
    if p.Y != nil {
        structMap["y"] = p.Y
    }
    if p.Radius != nil {
        structMap["radius"] = p.Radius
    }
    if p.Qos != nil {
        structMap["qos"] = p.Qos
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for PositionData.
// It customizes the JSON unmarshaling process for PositionData objects.
func (p *PositionData) UnmarshalJSON(input []byte) error {
    var temp tempPositionData
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "time", "utcoffset", "x", "y", "radius", "qos")
    if err != nil {
    	return err
    }
    p.AdditionalProperties = additionalProperties
    
    p.Time = temp.Time
    p.Utcoffset = temp.Utcoffset
    p.X = temp.X
    p.Y = temp.Y
    p.Radius = temp.Radius
    p.Qos = temp.Qos
    return nil
}

// tempPositionData is a temporary struct used for validating the fields of PositionData.
type tempPositionData  struct {
    Time      *string `json:"time,omitempty"`
    Utcoffset *string `json:"utcoffset,omitempty"`
    X         *string `json:"x,omitempty"`
    Y         *string `json:"y,omitempty"`
    Radius    *string `json:"radius,omitempty"`
    Qos       *bool   `json:"qos,omitempty"`
}
