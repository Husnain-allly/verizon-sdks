/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// Content represents a Content struct.
type Content struct {
    // List of typical ITIS warnings.
    Advisory             []AdvisoryItem2        `json:"advisory"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for Content,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c Content) String() string {
    return fmt.Sprintf(
    	"Content[Advisory=%v, AdditionalProperties=%v]",
    	c.Advisory, c.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for Content.
// It customizes the JSON marshaling process for Content objects.
func (c Content) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(c.AdditionalProperties,
        "advisory"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(c.toMap())
}

// toMap converts the Content object to a map representation for JSON marshaling.
func (c Content) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, c.AdditionalProperties)
    structMap["advisory"] = c.Advisory
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Content.
// It customizes the JSON unmarshaling process for Content objects.
func (c *Content) UnmarshalJSON(input []byte) error {
    var temp tempContent
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "advisory")
    if err != nil {
    	return err
    }
    c.AdditionalProperties = additionalProperties
    
    c.Advisory = *temp.Advisory
    return nil
}

// tempContent is a temporary struct used for validating the fields of Content.
type tempContent  struct {
    Advisory *[]AdvisoryItem2 `json:"advisory"`
}

func (c *tempContent) validate() error {
    var errs []string
    if c.Advisory == nil {
        errs = append(errs, "required field `advisory` is missing for type `Content`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
