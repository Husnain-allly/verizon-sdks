/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// OffsetSystem represents a OffsetSystem struct.
// The OffsetSystem data frame selects a sequence of node offsets described in the Lat-Long offset method.
type OffsetSystem struct {
    // The sequence of node offsets then describes a path or polygon in the Lat-Long system.
    Offset Offset `json:"offset"`
}

// String implements the fmt.Stringer interface for OffsetSystem,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (o OffsetSystem) String() string {
    return fmt.Sprintf(
    	"OffsetSystem[Offset=%v]",
    	o.Offset)
}

// MarshalJSON implements the json.Marshaler interface for OffsetSystem.
// It customizes the JSON marshaling process for OffsetSystem objects.
func (o OffsetSystem) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(o.toMap())
}

// toMap converts the OffsetSystem object to a map representation for JSON marshaling.
func (o OffsetSystem) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["offset"] = o.Offset.toMap()
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for OffsetSystem.
// It customizes the JSON unmarshaling process for OffsetSystem objects.
func (o *OffsetSystem) UnmarshalJSON(input []byte) error {
    var temp tempOffsetSystem
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    o.Offset = *temp.Offset
    return nil
}

// tempOffsetSystem is a temporary struct used for validating the fields of OffsetSystem.
type tempOffsetSystem  struct {
    Offset *Offset `json:"offset"`
}

func (o *tempOffsetSystem) validate() error {
    var errs []string
    if o.Offset == nil {
        errs = append(errs, "required field `offset` is missing for type `OffsetSystem`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
