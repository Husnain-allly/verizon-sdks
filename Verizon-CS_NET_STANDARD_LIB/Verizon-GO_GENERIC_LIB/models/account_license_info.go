/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// AccountLicenseInfo represents a AccountLicenseInfo struct.
// Account license information.
type AccountLicenseInfo struct {
    // Account identifier in "##########-#####".
    AccountName          *string                        `json:"accountName,omitempty"`
    // Number of monthly licenses in an MRC subscription.
    TotalLicenses        *int                           `json:"totalLicenses,omitempty"`
    // Number of licenses currently assigned to devices.
    AssignedLicenses     *int                           `json:"assignedLicenses,omitempty"`
    // True if there are more devices to retrieve.
    HasMoreData          *bool                          `json:"hasMoreData,omitempty"`
    // If hasMoreData=true, the startIndex to use for the next request. 0 if hasMoreData=false.
    LastSeenDeviceId     *int                           `json:"lastSeenDeviceId,omitempty"`
    // The list of devices that have licenses assigned, including the date and time of when each license was assigned.
    DeviceList           []AccountLicenseDeviceListItem `json:"deviceList,omitempty"`
    AdditionalProperties map[string]interface{}         `json:"_"`
}

// String implements the fmt.Stringer interface for AccountLicenseInfo,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a AccountLicenseInfo) String() string {
    return fmt.Sprintf(
    	"AccountLicenseInfo[AccountName=%v, TotalLicenses=%v, AssignedLicenses=%v, HasMoreData=%v, LastSeenDeviceId=%v, DeviceList=%v, AdditionalProperties=%v]",
    	a.AccountName, a.TotalLicenses, a.AssignedLicenses, a.HasMoreData, a.LastSeenDeviceId, a.DeviceList, a.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for AccountLicenseInfo.
// It customizes the JSON marshaling process for AccountLicenseInfo objects.
func (a AccountLicenseInfo) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(a.AdditionalProperties,
        "accountName", "totalLicenses", "assignedLicenses", "hasMoreData", "lastSeenDeviceId", "deviceList"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(a.toMap())
}

// toMap converts the AccountLicenseInfo object to a map representation for JSON marshaling.
func (a AccountLicenseInfo) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, a.AdditionalProperties)
    if a.AccountName != nil {
        structMap["accountName"] = a.AccountName
    }
    if a.TotalLicenses != nil {
        structMap["totalLicenses"] = a.TotalLicenses
    }
    if a.AssignedLicenses != nil {
        structMap["assignedLicenses"] = a.AssignedLicenses
    }
    if a.HasMoreData != nil {
        structMap["hasMoreData"] = a.HasMoreData
    }
    if a.LastSeenDeviceId != nil {
        structMap["lastSeenDeviceId"] = a.LastSeenDeviceId
    }
    if a.DeviceList != nil {
        structMap["deviceList"] = a.DeviceList
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for AccountLicenseInfo.
// It customizes the JSON unmarshaling process for AccountLicenseInfo objects.
func (a *AccountLicenseInfo) UnmarshalJSON(input []byte) error {
    var temp tempAccountLicenseInfo
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "totalLicenses", "assignedLicenses", "hasMoreData", "lastSeenDeviceId", "deviceList")
    if err != nil {
    	return err
    }
    a.AdditionalProperties = additionalProperties
    
    a.AccountName = temp.AccountName
    a.TotalLicenses = temp.TotalLicenses
    a.AssignedLicenses = temp.AssignedLicenses
    a.HasMoreData = temp.HasMoreData
    a.LastSeenDeviceId = temp.LastSeenDeviceId
    a.DeviceList = temp.DeviceList
    return nil
}

// tempAccountLicenseInfo is a temporary struct used for validating the fields of AccountLicenseInfo.
type tempAccountLicenseInfo  struct {
    AccountName      *string                        `json:"accountName,omitempty"`
    TotalLicenses    *int                           `json:"totalLicenses,omitempty"`
    AssignedLicenses *int                           `json:"assignedLicenses,omitempty"`
    HasMoreData      *bool                          `json:"hasMoreData,omitempty"`
    LastSeenDeviceId *int                           `json:"lastSeenDeviceId,omitempty"`
    DeviceList       []AccountLicenseDeviceListItem `json:"deviceList,omitempty"`
}
