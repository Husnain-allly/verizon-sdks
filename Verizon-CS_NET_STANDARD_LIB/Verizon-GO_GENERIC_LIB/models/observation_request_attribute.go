/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// ObservationRequestAttribute represents a ObservationRequestAttribute struct.
// Streaming RF parameter that you want to observe.
type ObservationRequestAttribute struct {
    // Attribute identifier.
    Name                 *AttributeIdentifier   `json:"name,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for ObservationRequestAttribute,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (o ObservationRequestAttribute) String() string {
    return fmt.Sprintf(
    	"ObservationRequestAttribute[Name=%v, AdditionalProperties=%v]",
    	o.Name, o.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for ObservationRequestAttribute.
// It customizes the JSON marshaling process for ObservationRequestAttribute objects.
func (o ObservationRequestAttribute) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(o.AdditionalProperties,
        "name"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(o.toMap())
}

// toMap converts the ObservationRequestAttribute object to a map representation for JSON marshaling.
func (o ObservationRequestAttribute) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, o.AdditionalProperties)
    if o.Name != nil {
        structMap["name"] = o.Name
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ObservationRequestAttribute.
// It customizes the JSON unmarshaling process for ObservationRequestAttribute objects.
func (o *ObservationRequestAttribute) UnmarshalJSON(input []byte) error {
    var temp tempObservationRequestAttribute
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "name")
    if err != nil {
    	return err
    }
    o.AdditionalProperties = additionalProperties
    
    o.Name = temp.Name
    return nil
}

// tempObservationRequestAttribute is a temporary struct used for validating the fields of ObservationRequestAttribute.
type tempObservationRequestAttribute  struct {
    Name *AttributeIdentifier `json:"name,omitempty"`
}
