/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// LicenseDeviceId represents a LicenseDeviceId struct.
// Id of the devices.
type LicenseDeviceId struct {
    // For 4G devices, IMEI (decimal, up to 15 digits) for unassign and ICCID (decimal, up to 20 digits) for assign.
    Id   *string `json:"id,omitempty"`
    // For 4G devices, ICCID (decimal, up to 20 digits) for unassign and IMEI (decimal, up to 15 digits) for assign.
    Kind *string `json:"kind,omitempty"`
}

// String implements the fmt.Stringer interface for LicenseDeviceId,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (l LicenseDeviceId) String() string {
    return fmt.Sprintf(
    	"LicenseDeviceId[Id=%v, Kind=%v]",
    	l.Id, l.Kind)
}

// MarshalJSON implements the json.Marshaler interface for LicenseDeviceId.
// It customizes the JSON marshaling process for LicenseDeviceId objects.
func (l LicenseDeviceId) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(l.toMap())
}

// toMap converts the LicenseDeviceId object to a map representation for JSON marshaling.
func (l LicenseDeviceId) toMap() map[string]any {
    structMap := make(map[string]any)
    if l.Id != nil {
        structMap["id"] = l.Id
    }
    if l.Kind != nil {
        structMap["kind"] = l.Kind
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for LicenseDeviceId.
// It customizes the JSON unmarshaling process for LicenseDeviceId objects.
func (l *LicenseDeviceId) UnmarshalJSON(input []byte) error {
    var temp tempLicenseDeviceId
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    
    l.Id = temp.Id
    l.Kind = temp.Kind
    return nil
}

// tempLicenseDeviceId is a temporary struct used for validating the fields of LicenseDeviceId.
type tempLicenseDeviceId  struct {
    Id   *string `json:"id,omitempty"`
    Kind *string `json:"kind,omitempty"`
}
