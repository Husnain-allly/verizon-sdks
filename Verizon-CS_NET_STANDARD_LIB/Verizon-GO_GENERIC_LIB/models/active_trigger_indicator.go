/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// ActiveTriggerIndicator represents a ActiveTriggerIndicator struct.
// Whether the trigger is active or not.
type ActiveTriggerIndicator struct {
    // Indicates if the trigger is active<br />True - trigger is active<br />False - trigger is not active.
    Active               *bool                  `json:"active,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for ActiveTriggerIndicator,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a ActiveTriggerIndicator) String() string {
    return fmt.Sprintf(
    	"ActiveTriggerIndicator[Active=%v, AdditionalProperties=%v]",
    	a.Active, a.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for ActiveTriggerIndicator.
// It customizes the JSON marshaling process for ActiveTriggerIndicator objects.
func (a ActiveTriggerIndicator) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(a.AdditionalProperties,
        "active"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(a.toMap())
}

// toMap converts the ActiveTriggerIndicator object to a map representation for JSON marshaling.
func (a ActiveTriggerIndicator) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, a.AdditionalProperties)
    if a.Active != nil {
        structMap["active"] = a.Active
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ActiveTriggerIndicator.
// It customizes the JSON unmarshaling process for ActiveTriggerIndicator objects.
func (a *ActiveTriggerIndicator) UnmarshalJSON(input []byte) error {
    var temp tempActiveTriggerIndicator
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "active")
    if err != nil {
    	return err
    }
    a.AdditionalProperties = additionalProperties
    
    a.Active = temp.Active
    return nil
}

// tempActiveTriggerIndicator is a temporary struct used for validating the fields of ActiveTriggerIndicator.
type tempActiveTriggerIndicator  struct {
    Active *bool `json:"active,omitempty"`
}
