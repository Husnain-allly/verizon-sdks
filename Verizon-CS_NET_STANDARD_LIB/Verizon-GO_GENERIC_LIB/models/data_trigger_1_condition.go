/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
)

// DataTrigger1Condition represents a DataTrigger1Condition struct.
// This is a container for any-of cases.
type DataTrigger1Condition struct {
    value                 any
    isConditionType       bool
    isConditionObjectCall bool
}

// String implements the fmt.Stringer interface for DataTrigger1Condition,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DataTrigger1Condition) String() string {
    return fmt.Sprintf("%v", d.value)
}

// MarshalJSON implements the json.Marshaler interface for DataTrigger1Condition.
// It customizes the JSON marshaling process for DataTrigger1Condition objects.
func (d DataTrigger1Condition) MarshalJSON() (
    []byte,
    error) {
    if d.value == nil {
        return nil, errors.New("No underlying type is set. Please use any of the `models.DataTrigger1ConditionContainer.From*` functions to initialize the DataTrigger1Condition object.")
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DataTrigger1Condition object to a map representation for JSON marshaling.
func (d *DataTrigger1Condition) toMap() any {
    switch obj := d.value.(type) {
    case *ConditionType:
        return *obj
    case *ConditionObjectCall:
        return obj.toMap()
    }
    return nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for DataTrigger1Condition.
// It customizes the JSON unmarshaling process for DataTrigger1Condition objects.
func (d *DataTrigger1Condition) UnmarshalJSON(input []byte) error {
    result, err := UnmarshallAnyOf(input,
        NewTypeHolder(new(ConditionType), false, &d.isConditionType),
        NewTypeHolder(&ConditionObjectCall{}, false, &d.isConditionObjectCall),
    )
    
    d.value = result
    return err
}

func (d *DataTrigger1Condition) AsConditionType() (
    *ConditionType,
    bool) {
    if !d.isConditionType {
        return nil, false
    }
    return d.value.(*ConditionType), true
}

func (d *DataTrigger1Condition) AsConditionObjectCall() (
    *ConditionObjectCall,
    bool) {
    if !d.isConditionObjectCall {
        return nil, false
    }
    return d.value.(*ConditionObjectCall), true
}

// internalDataTrigger1Condition represents a dataTrigger1Condition struct.
// This is a container for any-of cases.
type internalDataTrigger1Condition struct {}

var DataTrigger1ConditionContainer internalDataTrigger1Condition

// The internalDataTrigger1Condition instance, wrapping the provided ConditionType value.
func (d *internalDataTrigger1Condition) FromConditionType(val ConditionType) DataTrigger1Condition {
    return DataTrigger1Condition{value: &val}
}

// The internalDataTrigger1Condition instance, wrapping the provided ConditionObjectCall value.
func (d *internalDataTrigger1Condition) FromConditionObjectCall(val ConditionObjectCall) DataTrigger1Condition {
    return DataTrigger1Condition{value: &val}
}
