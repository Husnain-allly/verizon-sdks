/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// Item2 represents a Item2 struct.
type Item2 struct {
    // Text phrase provides very short sections of text interspersed between the ITIS codes to create phrases. In general, this is used for expressing proper nouns, such as street names reflecting local expressions that do not appear in the ITIS tables.
    Text string `json:"text"`
}

// String implements the fmt.Stringer interface for Item2,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (i Item2) String() string {
    return fmt.Sprintf(
    	"Item2[Text=%v]",
    	i.Text)
}

// MarshalJSON implements the json.Marshaler interface for Item2.
// It customizes the JSON marshaling process for Item2 objects.
func (i Item2) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(i.toMap())
}

// toMap converts the Item2 object to a map representation for JSON marshaling.
func (i Item2) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["text"] = i.Text
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Item2.
// It customizes the JSON unmarshaling process for Item2 objects.
func (i *Item2) UnmarshalJSON(input []byte) error {
    var temp tempItem2
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    i.Text = *temp.Text
    return nil
}

// tempItem2 is a temporary struct used for validating the fields of Item2.
type tempItem2  struct {
    Text *string `json:"text"`
}

func (i *tempItem2) validate() error {
    var errs []string
    if i.Text == nil {
        errs = append(errs, "required field `text` is missing for type `Item2`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
