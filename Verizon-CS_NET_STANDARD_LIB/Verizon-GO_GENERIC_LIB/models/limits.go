/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
)

// Limits represents a Limits struct.
// List of limitations. These limitations can be used for making the trigger condition more precise by defining speed and motion direction requirements to be met before the messages are sent out.
type Limits struct {
    value         any
    isSpeedItem   bool
    isHeadingItem bool
}

// String implements the fmt.Stringer interface for Limits,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (l Limits) String() string {
    return fmt.Sprintf("%v", l.value)
}

// MarshalJSON implements the json.Marshaler interface for Limits.
// It customizes the JSON marshaling process for Limits objects.
func (l Limits) MarshalJSON() (
    []byte,
    error) {
    if l.value == nil {
        return nil, errors.New("No underlying type is set. Please use any of the `models.LimitsContainer.From*` functions to initialize the Limits object.")
    }
    return json.Marshal(l.toMap())
}

// toMap converts the Limits object to a map representation for JSON marshaling.
func (l *Limits) toMap() any {
    switch obj := l.value.(type) {
    case *SpeedItem:
        return obj.toMap()
    case *HeadingItem:
        return obj.toMap()
    }
    return nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for Limits.
// It customizes the JSON unmarshaling process for Limits objects.
func (l *Limits) UnmarshalJSON(input []byte) error {
    result, err := UnmarshallOneOf(input,
        NewTypeHolder(&SpeedItem{}, false, &l.isSpeedItem),
        NewTypeHolder(&HeadingItem{}, false, &l.isHeadingItem),
    )
    
    l.value = result
    return err
}

func (l *Limits) AsSpeedItem() (
    *SpeedItem,
    bool) {
    if !l.isSpeedItem {
        return nil, false
    }
    return l.value.(*SpeedItem), true
}

func (l *Limits) AsHeadingItem() (
    *HeadingItem,
    bool) {
    if !l.isHeadingItem {
        return nil, false
    }
    return l.value.(*HeadingItem), true
}

// internalLimits represents a limits struct.
// List of limitations. These limitations can be used for making the trigger condition more precise by defining speed and motion direction requirements to be met before the messages are sent out.
type internalLimits struct {}

var LimitsContainer internalLimits

// The internalLimits instance, wrapping the provided SpeedItem value.
func (l *internalLimits) FromSpeedItem(val SpeedItem) Limits {
    return Limits{value: &val}
}

// The internalLimits instance, wrapping the provided HeadingItem value.
func (l *internalLimits) FromHeadingItem(val HeadingItem) Limits {
    return Limits{value: &val}
}
