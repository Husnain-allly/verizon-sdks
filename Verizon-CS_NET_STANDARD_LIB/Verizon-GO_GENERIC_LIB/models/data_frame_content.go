/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
)

// DataFrameContent represents a DataFrameContent struct.
// This is a container for one-of cases.
type DataFrameContent struct {
    value      any
    isContent  bool
    isContent1 bool
    isContent2 bool
    isContent3 bool
    isContent4 bool
}

// String implements the fmt.Stringer interface for DataFrameContent,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DataFrameContent) String() string {
    return fmt.Sprintf("%v", d.value)
}

// MarshalJSON implements the json.Marshaler interface for DataFrameContent.
// It customizes the JSON marshaling process for DataFrameContent objects.
func (d DataFrameContent) MarshalJSON() (
    []byte,
    error) {
    if d.value == nil {
        return nil, errors.New("No underlying type is set. Please use any of the `models.DataFrameContentContainer.From*` functions to initialize the DataFrameContent object.")
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DataFrameContent object to a map representation for JSON marshaling.
func (d *DataFrameContent) toMap() any {
    switch obj := d.value.(type) {
    case *Content:
        return obj.toMap()
    case *Content1:
        return obj.toMap()
    case *Content2:
        return obj.toMap()
    case *Content3:
        return obj.toMap()
    case *Content4:
        return obj.toMap()
    }
    return nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for DataFrameContent.
// It customizes the JSON unmarshaling process for DataFrameContent objects.
func (d *DataFrameContent) UnmarshalJSON(input []byte) error {
    result, err := UnmarshallOneOf(input,
        NewTypeHolder(&Content{}, false, &d.isContent),
        NewTypeHolder(&Content1{}, false, &d.isContent1),
        NewTypeHolder(&Content2{}, false, &d.isContent2),
        NewTypeHolder(&Content3{}, false, &d.isContent3),
        NewTypeHolder(&Content4{}, false, &d.isContent4),
    )
    
    d.value = result
    return err
}

func (d *DataFrameContent) AsContent() (
    *Content,
    bool) {
    if !d.isContent {
        return nil, false
    }
    return d.value.(*Content), true
}

func (d *DataFrameContent) AsContent1() (
    *Content1,
    bool) {
    if !d.isContent1 {
        return nil, false
    }
    return d.value.(*Content1), true
}

func (d *DataFrameContent) AsContent2() (
    *Content2,
    bool) {
    if !d.isContent2 {
        return nil, false
    }
    return d.value.(*Content2), true
}

func (d *DataFrameContent) AsContent3() (
    *Content3,
    bool) {
    if !d.isContent3 {
        return nil, false
    }
    return d.value.(*Content3), true
}

func (d *DataFrameContent) AsContent4() (
    *Content4,
    bool) {
    if !d.isContent4 {
        return nil, false
    }
    return d.value.(*Content4), true
}

// internalDataFrameContent represents a dataFrameContent struct.
// This is a container for one-of cases.
type internalDataFrameContent struct {}

var DataFrameContentContainer internalDataFrameContent

// The internalDataFrameContent instance, wrapping the provided Content value.
func (d *internalDataFrameContent) FromContent(val Content) DataFrameContent {
    return DataFrameContent{value: &val}
}

// The internalDataFrameContent instance, wrapping the provided Content1 value.
func (d *internalDataFrameContent) FromContent1(val Content1) DataFrameContent {
    return DataFrameContent{value: &val}
}

// The internalDataFrameContent instance, wrapping the provided Content2 value.
func (d *internalDataFrameContent) FromContent2(val Content2) DataFrameContent {
    return DataFrameContent{value: &val}
}

// The internalDataFrameContent instance, wrapping the provided Content3 value.
func (d *internalDataFrameContent) FromContent3(val Content3) DataFrameContent {
    return DataFrameContent{value: &val}
}

// The internalDataFrameContent instance, wrapping the provided Content4 value.
func (d *internalDataFrameContent) FromContent4(val Content4) DataFrameContent {
    return DataFrameContent{value: &val}
}
