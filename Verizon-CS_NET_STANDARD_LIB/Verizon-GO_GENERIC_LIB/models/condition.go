/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// Condition represents a Condition struct.
type Condition struct {
    Condition            []Keyschunk2           `json:"condition,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for Condition,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c Condition) String() string {
    return fmt.Sprintf(
    	"Condition[Condition=%v, AdditionalProperties=%v]",
    	c.Condition, c.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for Condition.
// It customizes the JSON marshaling process for Condition objects.
func (c Condition) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(c.AdditionalProperties,
        "condition"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(c.toMap())
}

// toMap converts the Condition object to a map representation for JSON marshaling.
func (c Condition) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, c.AdditionalProperties)
    if c.Condition != nil {
        structMap["condition"] = c.Condition
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Condition.
// It customizes the JSON unmarshaling process for Condition objects.
func (c *Condition) UnmarshalJSON(input []byte) error {
    var temp tempCondition
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "condition")
    if err != nil {
    	return err
    }
    c.AdditionalProperties = additionalProperties
    
    c.Condition = temp.Condition
    return nil
}

// tempCondition is a temporary struct used for validating the fields of Condition.
type tempCondition  struct {
    Condition []Keyschunk2 `json:"condition,omitempty"`
}
