/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// HistorySearchRequest represents a HistorySearchRequest struct.
// Used to filter data by time period or number of devices.
type HistorySearchRequest struct {
    // The selected device and attributes for which a request should retrieve data.
    MFilter              HistorySearchFilter     `json:"$filter"`
    // The maximum number of historical attributes to include in the response. If the request matches more than this number of attributes, the response will contain an X-Next value in the header that can be used as the page value in the next request to retrieve the next page of events.
    MLimitNumber         *int                    `json:"$limitNumber,omitempty"`
    // The time period for which a request should retrieve data, beginning with the limitTime.startOn and proceeding with the limitTime.duration.
    MLimitTime           *HistorySearchLimitTime `json:"$limitTime,omitempty"`
    // Page number for pagination purposes.
    MPage                *string                 `json:"$page,omitempty"`
    AdditionalProperties map[string]interface{}  `json:"_"`
}

// String implements the fmt.Stringer interface for HistorySearchRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (h HistorySearchRequest) String() string {
    return fmt.Sprintf(
    	"HistorySearchRequest[MFilter=%v, MLimitNumber=%v, MLimitTime=%v, MPage=%v, AdditionalProperties=%v]",
    	h.MFilter, h.MLimitNumber, h.MLimitTime, h.MPage, h.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for HistorySearchRequest.
// It customizes the JSON marshaling process for HistorySearchRequest objects.
func (h HistorySearchRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(h.AdditionalProperties,
        "$filter", "$limitNumber", "$limitTime", "$page"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(h.toMap())
}

// toMap converts the HistorySearchRequest object to a map representation for JSON marshaling.
func (h HistorySearchRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, h.AdditionalProperties)
    structMap["$filter"] = h.MFilter.toMap()
    if h.MLimitNumber != nil {
        structMap["$limitNumber"] = h.MLimitNumber
    }
    if h.MLimitTime != nil {
        structMap["$limitTime"] = h.MLimitTime.toMap()
    }
    if h.MPage != nil {
        structMap["$page"] = h.MPage
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for HistorySearchRequest.
// It customizes the JSON unmarshaling process for HistorySearchRequest objects.
func (h *HistorySearchRequest) UnmarshalJSON(input []byte) error {
    var temp tempHistorySearchRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "$filter", "$limitNumber", "$limitTime", "$page")
    if err != nil {
    	return err
    }
    h.AdditionalProperties = additionalProperties
    
    h.MFilter = *temp.MFilter
    h.MLimitNumber = temp.MLimitNumber
    h.MLimitTime = temp.MLimitTime
    h.MPage = temp.MPage
    return nil
}

// tempHistorySearchRequest is a temporary struct used for validating the fields of HistorySearchRequest.
type tempHistorySearchRequest  struct {
    MFilter      *HistorySearchFilter    `json:"$filter"`
    MLimitNumber *int                    `json:"$limitNumber,omitempty"`
    MLimitTime   *HistorySearchLimitTime `json:"$limitTime,omitempty"`
    MPage        *string                 `json:"$page,omitempty"`
}

func (h *tempHistorySearchRequest) validate() error {
    var errs []string
    if h.MFilter == nil {
        errs = append(errs, "required field `$filter` is missing for type `HistorySearchRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
