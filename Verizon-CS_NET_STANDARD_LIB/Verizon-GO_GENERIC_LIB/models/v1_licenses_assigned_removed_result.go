/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// V1LicensesAssignedRemovedResult represents a V1LicensesAssignedRemovedResult struct.
// License assignment or removal confirmation.
type V1LicensesAssignedRemovedResult struct {
    // Account identifier in "##########-#####".
    AccountName          *string                `json:"accountName,omitempty"`
    // Total number of monthly licenses in an MRC subscription.
    LicCount             *int                   `json:"licCount,omitempty"`
    // Number of licenses assigned to devices after the request completed.
    LicUsedCount         *int                   `json:"licUsedCount,omitempty"`
    // A JSON object for each device that was in the request.
    DeviceList           []V1DeviceListItem     `json:"deviceList,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for V1LicensesAssignedRemovedResult,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (v V1LicensesAssignedRemovedResult) String() string {
    return fmt.Sprintf(
    	"V1LicensesAssignedRemovedResult[AccountName=%v, LicCount=%v, LicUsedCount=%v, DeviceList=%v, AdditionalProperties=%v]",
    	v.AccountName, v.LicCount, v.LicUsedCount, v.DeviceList, v.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for V1LicensesAssignedRemovedResult.
// It customizes the JSON marshaling process for V1LicensesAssignedRemovedResult objects.
func (v V1LicensesAssignedRemovedResult) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(v.AdditionalProperties,
        "accountName", "licCount", "licUsedCount", "deviceList"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(v.toMap())
}

// toMap converts the V1LicensesAssignedRemovedResult object to a map representation for JSON marshaling.
func (v V1LicensesAssignedRemovedResult) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, v.AdditionalProperties)
    if v.AccountName != nil {
        structMap["accountName"] = v.AccountName
    }
    if v.LicCount != nil {
        structMap["licCount"] = v.LicCount
    }
    if v.LicUsedCount != nil {
        structMap["licUsedCount"] = v.LicUsedCount
    }
    if v.DeviceList != nil {
        structMap["deviceList"] = v.DeviceList
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for V1LicensesAssignedRemovedResult.
// It customizes the JSON unmarshaling process for V1LicensesAssignedRemovedResult objects.
func (v *V1LicensesAssignedRemovedResult) UnmarshalJSON(input []byte) error {
    var temp tempV1LicensesAssignedRemovedResult
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "licCount", "licUsedCount", "deviceList")
    if err != nil {
    	return err
    }
    v.AdditionalProperties = additionalProperties
    
    v.AccountName = temp.AccountName
    v.LicCount = temp.LicCount
    v.LicUsedCount = temp.LicUsedCount
    v.DeviceList = temp.DeviceList
    return nil
}

// tempV1LicensesAssignedRemovedResult is a temporary struct used for validating the fields of V1LicensesAssignedRemovedResult.
type tempV1LicensesAssignedRemovedResult  struct {
    AccountName  *string            `json:"accountName,omitempty"`
    LicCount     *int               `json:"licCount,omitempty"`
    LicUsedCount *int               `json:"licUsedCount,omitempty"`
    DeviceList   []V1DeviceListItem `json:"deviceList,omitempty"`
}
