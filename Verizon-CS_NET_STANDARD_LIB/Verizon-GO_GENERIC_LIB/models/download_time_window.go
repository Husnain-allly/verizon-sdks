/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// DownloadTimeWindow represents a DownloadTimeWindow struct.
type DownloadTimeWindow struct {
    // Device IMEI list.
    StartTime            *string                `json:"startTime,omitempty"`
    // Device IMEI list.
    EndTime              *string                `json:"endTime,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DownloadTimeWindow,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DownloadTimeWindow) String() string {
    return fmt.Sprintf(
    	"DownloadTimeWindow[StartTime=%v, EndTime=%v, AdditionalProperties=%v]",
    	d.StartTime, d.EndTime, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DownloadTimeWindow.
// It customizes the JSON marshaling process for DownloadTimeWindow objects.
func (d DownloadTimeWindow) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "startTime", "endTime"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DownloadTimeWindow object to a map representation for JSON marshaling.
func (d DownloadTimeWindow) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    if d.StartTime != nil {
        structMap["startTime"] = d.StartTime
    }
    if d.EndTime != nil {
        structMap["endTime"] = d.EndTime
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DownloadTimeWindow.
// It customizes the JSON unmarshaling process for DownloadTimeWindow objects.
func (d *DownloadTimeWindow) UnmarshalJSON(input []byte) error {
    var temp tempDownloadTimeWindow
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "startTime", "endTime")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.StartTime = temp.StartTime
    d.EndTime = temp.EndTime
    return nil
}

// tempDownloadTimeWindow is a temporary struct used for validating the fields of DownloadTimeWindow.
type tempDownloadTimeWindow  struct {
    StartTime *string `json:"startTime,omitempty"`
    EndTime   *string `json:"endTime,omitempty"`
}
