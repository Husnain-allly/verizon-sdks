/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// Label represents a Label struct.
type Label struct {
    Name  *string `json:"name,omitempty"`
    Value *string `json:"value,omitempty"`
}

// String implements the fmt.Stringer interface for Label,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (l Label) String() string {
    return fmt.Sprintf(
    	"Label[Name=%v, Value=%v]",
    	l.Name, l.Value)
}

// MarshalJSON implements the json.Marshaler interface for Label.
// It customizes the JSON marshaling process for Label objects.
func (l Label) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(l.toMap())
}

// toMap converts the Label object to a map representation for JSON marshaling.
func (l Label) toMap() map[string]any {
    structMap := make(map[string]any)
    if l.Name != nil {
        structMap["name"] = l.Name
    }
    if l.Value != nil {
        structMap["value"] = l.Value
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Label.
// It customizes the JSON unmarshaling process for Label objects.
func (l *Label) UnmarshalJSON(input []byte) error {
    var temp tempLabel
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    
    l.Name = temp.Name
    l.Value = temp.Value
    return nil
}

// tempLabel is a temporary struct used for validating the fields of Label.
type tempLabel  struct {
    Name  *string `json:"name,omitempty"`
    Value *string `json:"value,omitempty"`
}
