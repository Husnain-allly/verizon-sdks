/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// V3Device represents a V3Device struct.
// Device information.
type V3Device struct {
    // Device IMEI.
    DeviceId             string                 `json:"deviceId"`
    // Success or failure.
    RequestStatus        *string                `json:"requestStatus,omitempty"`
    ResultReason         *string                `json:"resultReason,omitempty"`
    // MDN.
    Mdn                  *string                `json:"mdn,omitempty"`
    // Device model.
    Model                *string                `json:"model,omitempty"`
    // Device make.
    Make                 *string                `json:"make,omitempty"`
    // Device firmware version.
    Firmware             *string                `json:"firmware,omitempty"`
    // Value=true if the device software can be upgraded over the air using the Software Management Services API.
    FotaEligible         *bool                  `json:"fotaEligible,omitempty"`
    // Device status.
    Status               *string                `json:"status,omitempty"`
    // License assigned device.
    LicenseAssigned      *bool                  `json:"licenseAssigned,omitempty"`
    // Firmware protocol. Valid values include: LWM2M, OMADM, HTTP or NONE.
    Protocol             *string                `json:"protocol,omitempty"`
    // List of sofware.
    SoftwareList         []V3SoftwareInfo       `json:"softwareList,omitempty"`
    // List of files.
    FileList             []V3SoftwareInfo       `json:"fileList,omitempty"`
    // The date and time of when the device is created.
    CreateTime           *string                `json:"createTime,omitempty"`
    // The date and time of when the device firmware or software is updated.
    StatusTime           *string                `json:"statusTime,omitempty"`
    // The date and time of when the device is updated.
    UpdateTime           *string                `json:"updateTime,omitempty"`
    // The date and time of when the device is refreshed.
    RefreshTime          *string                `json:"refreshTime,omitempty"`
    // The date and time of when the device reachability is checked.
    LastConnectionTime   *time.Time             `json:"lastConnectionTime,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for V3Device,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (v V3Device) String() string {
    return fmt.Sprintf(
    	"V3Device[DeviceId=%v, RequestStatus=%v, ResultReason=%v, Mdn=%v, Model=%v, Make=%v, Firmware=%v, FotaEligible=%v, Status=%v, LicenseAssigned=%v, Protocol=%v, SoftwareList=%v, FileList=%v, CreateTime=%v, StatusTime=%v, UpdateTime=%v, RefreshTime=%v, LastConnectionTime=%v, AdditionalProperties=%v]",
    	v.DeviceId, v.RequestStatus, v.ResultReason, v.Mdn, v.Model, v.Make, v.Firmware, v.FotaEligible, v.Status, v.LicenseAssigned, v.Protocol, v.SoftwareList, v.FileList, v.CreateTime, v.StatusTime, v.UpdateTime, v.RefreshTime, v.LastConnectionTime, v.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for V3Device.
// It customizes the JSON marshaling process for V3Device objects.
func (v V3Device) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(v.AdditionalProperties,
        "deviceId", "requestStatus", "resultReason", "mdn", "model", "make", "firmware", "fotaEligible", "status", "licenseAssigned", "protocol", "softwareList", "fileList", "createTime", "statusTime", "updateTime", "refreshTime", "lastConnectionTime"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(v.toMap())
}

// toMap converts the V3Device object to a map representation for JSON marshaling.
func (v V3Device) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, v.AdditionalProperties)
    structMap["deviceId"] = v.DeviceId
    if v.RequestStatus != nil {
        structMap["requestStatus"] = v.RequestStatus
    }
    if v.ResultReason != nil {
        structMap["resultReason"] = v.ResultReason
    }
    if v.Mdn != nil {
        structMap["mdn"] = v.Mdn
    }
    if v.Model != nil {
        structMap["model"] = v.Model
    }
    if v.Make != nil {
        structMap["make"] = v.Make
    }
    if v.Firmware != nil {
        structMap["firmware"] = v.Firmware
    }
    if v.FotaEligible != nil {
        structMap["fotaEligible"] = v.FotaEligible
    }
    if v.Status != nil {
        structMap["status"] = v.Status
    }
    if v.LicenseAssigned != nil {
        structMap["licenseAssigned"] = v.LicenseAssigned
    }
    if v.Protocol != nil {
        structMap["protocol"] = v.Protocol
    }
    if v.SoftwareList != nil {
        structMap["softwareList"] = v.SoftwareList
    }
    if v.FileList != nil {
        structMap["fileList"] = v.FileList
    }
    if v.CreateTime != nil {
        structMap["createTime"] = v.CreateTime
    }
    if v.StatusTime != nil {
        structMap["statusTime"] = v.StatusTime
    }
    if v.UpdateTime != nil {
        structMap["updateTime"] = v.UpdateTime
    }
    if v.RefreshTime != nil {
        structMap["refreshTime"] = v.RefreshTime
    }
    if v.LastConnectionTime != nil {
        structMap["lastConnectionTime"] = v.LastConnectionTime.Format(time.RFC3339)
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for V3Device.
// It customizes the JSON unmarshaling process for V3Device objects.
func (v *V3Device) UnmarshalJSON(input []byte) error {
    var temp tempV3Device
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceId", "requestStatus", "resultReason", "mdn", "model", "make", "firmware", "fotaEligible", "status", "licenseAssigned", "protocol", "softwareList", "fileList", "createTime", "statusTime", "updateTime", "refreshTime", "lastConnectionTime")
    if err != nil {
    	return err
    }
    v.AdditionalProperties = additionalProperties
    
    v.DeviceId = *temp.DeviceId
    v.RequestStatus = temp.RequestStatus
    v.ResultReason = temp.ResultReason
    v.Mdn = temp.Mdn
    v.Model = temp.Model
    v.Make = temp.Make
    v.Firmware = temp.Firmware
    v.FotaEligible = temp.FotaEligible
    v.Status = temp.Status
    v.LicenseAssigned = temp.LicenseAssigned
    v.Protocol = temp.Protocol
    v.SoftwareList = temp.SoftwareList
    v.FileList = temp.FileList
    v.CreateTime = temp.CreateTime
    v.StatusTime = temp.StatusTime
    v.UpdateTime = temp.UpdateTime
    v.RefreshTime = temp.RefreshTime
    if temp.LastConnectionTime != nil {
        LastConnectionTimeVal, err := time.Parse(time.RFC3339, *temp.LastConnectionTime)
        if err != nil {
            log.Fatalf("Cannot Parse lastConnectionTime as % s format.", time.RFC3339)
        }
        v.LastConnectionTime = &LastConnectionTimeVal
    }
    return nil
}

// tempV3Device is a temporary struct used for validating the fields of V3Device.
type tempV3Device  struct {
    DeviceId           *string          `json:"deviceId"`
    RequestStatus      *string          `json:"requestStatus,omitempty"`
    ResultReason       *string          `json:"resultReason,omitempty"`
    Mdn                *string          `json:"mdn,omitempty"`
    Model              *string          `json:"model,omitempty"`
    Make               *string          `json:"make,omitempty"`
    Firmware           *string          `json:"firmware,omitempty"`
    FotaEligible       *bool            `json:"fotaEligible,omitempty"`
    Status             *string          `json:"status,omitempty"`
    LicenseAssigned    *bool            `json:"licenseAssigned,omitempty"`
    Protocol           *string          `json:"protocol,omitempty"`
    SoftwareList       []V3SoftwareInfo `json:"softwareList,omitempty"`
    FileList           []V3SoftwareInfo `json:"fileList,omitempty"`
    CreateTime         *string          `json:"createTime,omitempty"`
    StatusTime         *string          `json:"statusTime,omitempty"`
    UpdateTime         *string          `json:"updateTime,omitempty"`
    RefreshTime        *string          `json:"refreshTime,omitempty"`
    LastConnectionTime *string          `json:"lastConnectionTime,omitempty"`
}

func (v *tempV3Device) validate() error {
    var errs []string
    if v.DeviceId == nil {
        errs = append(errs, "required field `deviceId` is missing for type `V3Device`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
