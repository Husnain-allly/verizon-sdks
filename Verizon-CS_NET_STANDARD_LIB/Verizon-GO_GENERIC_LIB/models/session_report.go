/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// SessionReport represents a SessionReport struct.
// Session report for a device.
type SessionReport struct {
    // An object containing the start and end time of the session with the amount of data transferred.
    Sessions             []DailyUsageItem       `json:"sessions,omitempty"`
    // The 10-digit ID of the device.
    Id                   string                 `json:"id"`
    // A unique string that associates the request with the location report information that is sent in asynchronous callback message.ThingSpace will send a separate callback message for each device that was in the request. All of the callback messages will have the same txid.
    Txid                 *string                `json:"txid"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for SessionReport,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (s SessionReport) String() string {
    return fmt.Sprintf(
    	"SessionReport[Sessions=%v, Id=%v, Txid=%v, AdditionalProperties=%v]",
    	s.Sessions, s.Id, s.Txid, s.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for SessionReport.
// It customizes the JSON marshaling process for SessionReport objects.
func (s SessionReport) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(s.AdditionalProperties,
        "sessions", "id", "txid"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(s.toMap())
}

// toMap converts the SessionReport object to a map representation for JSON marshaling.
func (s SessionReport) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, s.AdditionalProperties)
    if s.Sessions != nil {
        structMap["sessions"] = s.Sessions
    }
    structMap["id"] = s.Id
    if s.Txid != nil {
        structMap["txid"] = s.Txid
    } else {
        structMap["txid"] = nil
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for SessionReport.
// It customizes the JSON unmarshaling process for SessionReport objects.
func (s *SessionReport) UnmarshalJSON(input []byte) error {
    var temp tempSessionReport
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "sessions", "id", "txid")
    if err != nil {
    	return err
    }
    s.AdditionalProperties = additionalProperties
    
    s.Sessions = temp.Sessions
    s.Id = *temp.Id
    s.Txid = temp.Txid
    return nil
}

// tempSessionReport is a temporary struct used for validating the fields of SessionReport.
type tempSessionReport  struct {
    Sessions []DailyUsageItem `json:"sessions,omitempty"`
    Id       *string          `json:"id"`
    Txid     *string          `json:"txid"`
}

func (s *tempSessionReport) validate() error {
    var errs []string
    if s.Id == nil {
        errs = append(errs, "required field `id` is missing for type `SessionReport`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
