/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// ManagedAccountsProvisionRequest represents a ManagedAccountsProvisionRequest struct.
type ManagedAccountsProvisionRequest struct {
    // Managed account identifier
    AccountName          string                 `json:"accountName"`
    // Primary Account identifier
    PaccountName         string                 `json:"paccountName"`
    // Service name
    ServiceName          ServiceName            `json:"serviceName"`
    // SKU name
    Type                 string                 `json:"type"`
    // Transaction identifier returned by add request
    Txid                 string                 `json:"txid"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for ManagedAccountsProvisionRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (m ManagedAccountsProvisionRequest) String() string {
    return fmt.Sprintf(
    	"ManagedAccountsProvisionRequest[AccountName=%v, PaccountName=%v, ServiceName=%v, Type=%v, Txid=%v, AdditionalProperties=%v]",
    	m.AccountName, m.PaccountName, m.ServiceName, m.Type, m.Txid, m.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for ManagedAccountsProvisionRequest.
// It customizes the JSON marshaling process for ManagedAccountsProvisionRequest objects.
func (m ManagedAccountsProvisionRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(m.AdditionalProperties,
        "accountName", "paccountName", "serviceName", "type", "txid"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(m.toMap())
}

// toMap converts the ManagedAccountsProvisionRequest object to a map representation for JSON marshaling.
func (m ManagedAccountsProvisionRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, m.AdditionalProperties)
    structMap["accountName"] = m.AccountName
    structMap["paccountName"] = m.PaccountName
    structMap["serviceName"] = m.ServiceName
    structMap["type"] = m.Type
    structMap["txid"] = m.Txid
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ManagedAccountsProvisionRequest.
// It customizes the JSON unmarshaling process for ManagedAccountsProvisionRequest objects.
func (m *ManagedAccountsProvisionRequest) UnmarshalJSON(input []byte) error {
    var temp tempManagedAccountsProvisionRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "paccountName", "serviceName", "type", "txid")
    if err != nil {
    	return err
    }
    m.AdditionalProperties = additionalProperties
    
    m.AccountName = *temp.AccountName
    m.PaccountName = *temp.PaccountName
    m.ServiceName = *temp.ServiceName
    m.Type = *temp.Type
    m.Txid = *temp.Txid
    return nil
}

// tempManagedAccountsProvisionRequest is a temporary struct used for validating the fields of ManagedAccountsProvisionRequest.
type tempManagedAccountsProvisionRequest  struct {
    AccountName  *string      `json:"accountName"`
    PaccountName *string      `json:"paccountName"`
    ServiceName  *ServiceName `json:"serviceName"`
    Type         *string      `json:"type"`
    Txid         *string      `json:"txid"`
}

func (m *tempManagedAccountsProvisionRequest) validate() error {
    var errs []string
    if m.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `ManagedAccountsProvisionRequest`")
    }
    if m.PaccountName == nil {
        errs = append(errs, "required field `paccountName` is missing for type `ManagedAccountsProvisionRequest`")
    }
    if m.ServiceName == nil {
        errs = append(errs, "required field `serviceName` is missing for type `ManagedAccountsProvisionRequest`")
    }
    if m.Type == nil {
        errs = append(errs, "required field `type` is missing for type `ManagedAccountsProvisionRequest`")
    }
    if m.Txid == nil {
        errs = append(errs, "required field `txid` is missing for type `ManagedAccountsProvisionRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
