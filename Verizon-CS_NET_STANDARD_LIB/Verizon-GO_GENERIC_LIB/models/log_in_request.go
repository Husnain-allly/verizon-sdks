/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// LogInRequest represents a LogInRequest struct.
// Request to initiate a Connectivity Management session and returns a VZ-M2M session token that is required in subsequent API requests.
type LogInRequest struct {
    // The username for authentication.
    Username             string                 `json:"username"`
    // The password for authentication.
    Password             string                 `json:"password"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for LogInRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (l LogInRequest) String() string {
    return fmt.Sprintf(
    	"LogInRequest[Username=%v, Password=%v, AdditionalProperties=%v]",
    	l.Username, l.Password, l.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for LogInRequest.
// It customizes the JSON marshaling process for LogInRequest objects.
func (l LogInRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(l.AdditionalProperties,
        "username", "password"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(l.toMap())
}

// toMap converts the LogInRequest object to a map representation for JSON marshaling.
func (l LogInRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, l.AdditionalProperties)
    structMap["username"] = l.Username
    structMap["password"] = l.Password
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for LogInRequest.
// It customizes the JSON unmarshaling process for LogInRequest objects.
func (l *LogInRequest) UnmarshalJSON(input []byte) error {
    var temp tempLogInRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "username", "password")
    if err != nil {
    	return err
    }
    l.AdditionalProperties = additionalProperties
    
    l.Username = *temp.Username
    l.Password = *temp.Password
    return nil
}

// tempLogInRequest is a temporary struct used for validating the fields of LogInRequest.
type tempLogInRequest  struct {
    Username *string `json:"username"`
    Password *string `json:"password"`
}

func (l *tempLogInRequest) validate() error {
    var errs []string
    if l.Username == nil {
        errs = append(errs, "required field `username` is missing for type `LogInRequest`")
    }
    if l.Password == nil {
        errs = append(errs, "required field `password` is missing for type `LogInRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
