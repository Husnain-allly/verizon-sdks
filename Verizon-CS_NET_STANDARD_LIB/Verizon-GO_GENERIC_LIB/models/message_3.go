/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
)

// Message3 represents a Message3 struct.
type Message3 struct {
    value      any
    isMessage  bool
    isMessage1 bool
    isMessage2 bool
}

// String implements the fmt.Stringer interface for Message3,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (m Message3) String() string {
    return fmt.Sprintf("%v", m.value)
}

// MarshalJSON implements the json.Marshaler interface for Message3.
// It customizes the JSON marshaling process for Message3 objects.
func (m Message3) MarshalJSON() (
    []byte,
    error) {
    if m.value == nil {
        return nil, errors.New("No underlying type is set. Please use any of the `models.Message3Container.From*` functions to initialize the Message3 object.")
    }
    return json.Marshal(m.toMap())
}

// toMap converts the Message3 object to a map representation for JSON marshaling.
func (m *Message3) toMap() any {
    switch obj := m.value.(type) {
    case *Message:
        return obj.toMap()
    case *Message1:
        return obj.toMap()
    case *Message2:
        return obj.toMap()
    }
    return nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for Message3.
// It customizes the JSON unmarshaling process for Message3 objects.
func (m *Message3) UnmarshalJSON(input []byte) error {
    result, err := UnmarshallOneOf(input,
        NewTypeHolder(&Message{}, false, &m.isMessage),
        NewTypeHolder(&Message1{}, false, &m.isMessage1),
        NewTypeHolder(&Message2{}, false, &m.isMessage2),
    )
    
    m.value = result
    return err
}

func (m *Message3) AsMessage() (
    *Message,
    bool) {
    if !m.isMessage {
        return nil, false
    }
    return m.value.(*Message), true
}

func (m *Message3) AsMessage1() (
    *Message1,
    bool) {
    if !m.isMessage1 {
        return nil, false
    }
    return m.value.(*Message1), true
}

func (m *Message3) AsMessage2() (
    *Message2,
    bool) {
    if !m.isMessage2 {
        return nil, false
    }
    return m.value.(*Message2), true
}

// internalMessage3 represents a message3 struct.
type internalMessage3 struct {}

var Message3Container internalMessage3

// The internalMessage3 instance, wrapping the provided Message value.
func (m *internalMessage3) FromMessage(val Message) Message3 {
    return Message3{value: &val}
}

// The internalMessage3 instance, wrapping the provided Message1 value.
func (m *internalMessage3) FromMessage1(val Message1) Message3 {
    return Message3{value: &val}
}

// The internalMessage3 instance, wrapping the provided Message2 value.
func (m *internalMessage3) FromMessage2(val Message2) Message3 {
    return Message3{value: &val}
}
