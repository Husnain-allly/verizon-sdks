/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// AccountStatesAndServices represents a AccountStatesAndServices struct.
// Returns a list and details of all custom services and states defined for a specified account.
type AccountStatesAndServices struct {
    // The engagements associated with the account.
    Engagement           []Engagement           `json:"engagement"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for AccountStatesAndServices,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a AccountStatesAndServices) String() string {
    return fmt.Sprintf(
    	"AccountStatesAndServices[Engagement=%v, AdditionalProperties=%v]",
    	a.Engagement, a.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for AccountStatesAndServices.
// It customizes the JSON marshaling process for AccountStatesAndServices objects.
func (a AccountStatesAndServices) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(a.AdditionalProperties,
        "engagement"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(a.toMap())
}

// toMap converts the AccountStatesAndServices object to a map representation for JSON marshaling.
func (a AccountStatesAndServices) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, a.AdditionalProperties)
    structMap["engagement"] = a.Engagement
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for AccountStatesAndServices.
// It customizes the JSON unmarshaling process for AccountStatesAndServices objects.
func (a *AccountStatesAndServices) UnmarshalJSON(input []byte) error {
    var temp tempAccountStatesAndServices
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "engagement")
    if err != nil {
    	return err
    }
    a.AdditionalProperties = additionalProperties
    
    a.Engagement = *temp.Engagement
    return nil
}

// tempAccountStatesAndServices is a temporary struct used for validating the fields of AccountStatesAndServices.
type tempAccountStatesAndServices  struct {
    Engagement *[]Engagement `json:"engagement"`
}

func (a *tempAccountStatesAndServices) validate() error {
    var errs []string
    if a.Engagement == nil {
        errs = append(errs, "required field `engagement` is missing for type `AccountStatesAndServices`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
