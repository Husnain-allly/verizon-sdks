/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// FirmwareUpgradeDeviceListItem represents a FirmwareUpgradeDeviceListItem struct.
// A JSON object for each device that was included in the upgrade, showing the device IMEI, the status of the upgrade, and additional information about the status.
type FirmwareUpgradeDeviceListItem struct {
    // Device IMEI.
    DeviceId             *string                `json:"deviceId,omitempty"`
    // The status of the upgrade for this device.
    Status               *string                `json:"status,omitempty"`
    // Additional details about the status. Not included when status='Request Pending.'
    ResultReason         *string                `json:"resultReason,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for FirmwareUpgradeDeviceListItem,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (f FirmwareUpgradeDeviceListItem) String() string {
    return fmt.Sprintf(
    	"FirmwareUpgradeDeviceListItem[DeviceId=%v, Status=%v, ResultReason=%v, AdditionalProperties=%v]",
    	f.DeviceId, f.Status, f.ResultReason, f.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for FirmwareUpgradeDeviceListItem.
// It customizes the JSON marshaling process for FirmwareUpgradeDeviceListItem objects.
func (f FirmwareUpgradeDeviceListItem) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(f.AdditionalProperties,
        "deviceId", "status", "resultReason"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(f.toMap())
}

// toMap converts the FirmwareUpgradeDeviceListItem object to a map representation for JSON marshaling.
func (f FirmwareUpgradeDeviceListItem) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, f.AdditionalProperties)
    if f.DeviceId != nil {
        structMap["deviceId"] = f.DeviceId
    }
    if f.Status != nil {
        structMap["status"] = f.Status
    }
    if f.ResultReason != nil {
        structMap["resultReason"] = f.ResultReason
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for FirmwareUpgradeDeviceListItem.
// It customizes the JSON unmarshaling process for FirmwareUpgradeDeviceListItem objects.
func (f *FirmwareUpgradeDeviceListItem) UnmarshalJSON(input []byte) error {
    var temp tempFirmwareUpgradeDeviceListItem
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceId", "status", "resultReason")
    if err != nil {
    	return err
    }
    f.AdditionalProperties = additionalProperties
    
    f.DeviceId = temp.DeviceId
    f.Status = temp.Status
    f.ResultReason = temp.ResultReason
    return nil
}

// tempFirmwareUpgradeDeviceListItem is a temporary struct used for validating the fields of FirmwareUpgradeDeviceListItem.
type tempFirmwareUpgradeDeviceListItem  struct {
    DeviceId     *string `json:"deviceId,omitempty"`
    Status       *string `json:"status,omitempty"`
    ResultReason *string `json:"resultReason,omitempty"`
}
