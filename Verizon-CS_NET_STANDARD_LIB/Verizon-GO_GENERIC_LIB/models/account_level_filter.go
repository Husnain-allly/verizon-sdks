/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// AccountLevelFilter represents a AccountLevelFilter struct.
type AccountLevelFilter struct {
    // Determines whether or not to aggregate usage of multiple accounts together, or separate by account. If this is null or not present, then the trigger will be for an individual line.
    SeparateOrCombined   *string                `json:"separateOrCombined,omitempty"`
    AccountNames         *Accountnames          `json:"accountNames,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for AccountLevelFilter,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a AccountLevelFilter) String() string {
    return fmt.Sprintf(
    	"AccountLevelFilter[SeparateOrCombined=%v, AccountNames=%v, AdditionalProperties=%v]",
    	a.SeparateOrCombined, a.AccountNames, a.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for AccountLevelFilter.
// It customizes the JSON marshaling process for AccountLevelFilter objects.
func (a AccountLevelFilter) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(a.AdditionalProperties,
        "separateOrCombined", "accountNames"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(a.toMap())
}

// toMap converts the AccountLevelFilter object to a map representation for JSON marshaling.
func (a AccountLevelFilter) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, a.AdditionalProperties)
    if a.SeparateOrCombined != nil {
        structMap["separateOrCombined"] = a.SeparateOrCombined
    }
    if a.AccountNames != nil {
        structMap["accountNames"] = a.AccountNames.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for AccountLevelFilter.
// It customizes the JSON unmarshaling process for AccountLevelFilter objects.
func (a *AccountLevelFilter) UnmarshalJSON(input []byte) error {
    var temp tempAccountLevelFilter
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "separateOrCombined", "accountNames")
    if err != nil {
    	return err
    }
    a.AdditionalProperties = additionalProperties
    
    a.SeparateOrCombined = temp.SeparateOrCombined
    a.AccountNames = temp.AccountNames
    return nil
}

// tempAccountLevelFilter is a temporary struct used for validating the fields of AccountLevelFilter.
type tempAccountLevelFilter  struct {
    SeparateOrCombined *string       `json:"separateOrCombined,omitempty"`
    AccountNames       *Accountnames `json:"accountNames,omitempty"`
}
