/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// V3DeviceStatus represents a V3DeviceStatus struct.
// Device status.
type V3DeviceStatus struct {
    // Device IMEI.
    DeviceId             string                 `json:"deviceId"`
    // Success or failure.
    Status               string                 `json:"status"`
    // Result reason.
    ResultReason         *string                `json:"resultReason,omitempty"`
    // Updated Time.
    UpdatedTime          *time.Time             `json:"updatedTime,omitempty"`
    // The most recent attempt time.
    RecentAttemptTime    *time.Time             `json:"recentAttemptTime,omitempty"`
    // Next attempt time.
    NextAttemptTime      *time.Time             `json:"nextAttemptTime,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for V3DeviceStatus,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (v V3DeviceStatus) String() string {
    return fmt.Sprintf(
    	"V3DeviceStatus[DeviceId=%v, Status=%v, ResultReason=%v, UpdatedTime=%v, RecentAttemptTime=%v, NextAttemptTime=%v, AdditionalProperties=%v]",
    	v.DeviceId, v.Status, v.ResultReason, v.UpdatedTime, v.RecentAttemptTime, v.NextAttemptTime, v.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for V3DeviceStatus.
// It customizes the JSON marshaling process for V3DeviceStatus objects.
func (v V3DeviceStatus) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(v.AdditionalProperties,
        "deviceId", "status", "resultReason", "updatedTime", "recentAttemptTime", "nextAttemptTime"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(v.toMap())
}

// toMap converts the V3DeviceStatus object to a map representation for JSON marshaling.
func (v V3DeviceStatus) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, v.AdditionalProperties)
    structMap["deviceId"] = v.DeviceId
    structMap["status"] = v.Status
    if v.ResultReason != nil {
        structMap["resultReason"] = v.ResultReason
    }
    if v.UpdatedTime != nil {
        structMap["updatedTime"] = v.UpdatedTime.Format(time.RFC3339)
    }
    if v.RecentAttemptTime != nil {
        structMap["recentAttemptTime"] = v.RecentAttemptTime.Format(time.RFC3339)
    }
    if v.NextAttemptTime != nil {
        structMap["nextAttemptTime"] = v.NextAttemptTime.Format(time.RFC3339)
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for V3DeviceStatus.
// It customizes the JSON unmarshaling process for V3DeviceStatus objects.
func (v *V3DeviceStatus) UnmarshalJSON(input []byte) error {
    var temp tempV3DeviceStatus
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceId", "status", "resultReason", "updatedTime", "recentAttemptTime", "nextAttemptTime")
    if err != nil {
    	return err
    }
    v.AdditionalProperties = additionalProperties
    
    v.DeviceId = *temp.DeviceId
    v.Status = *temp.Status
    v.ResultReason = temp.ResultReason
    if temp.UpdatedTime != nil {
        UpdatedTimeVal, err := time.Parse(time.RFC3339, *temp.UpdatedTime)
        if err != nil {
            log.Fatalf("Cannot Parse updatedTime as % s format.", time.RFC3339)
        }
        v.UpdatedTime = &UpdatedTimeVal
    }
    if temp.RecentAttemptTime != nil {
        RecentAttemptTimeVal, err := time.Parse(time.RFC3339, *temp.RecentAttemptTime)
        if err != nil {
            log.Fatalf("Cannot Parse recentAttemptTime as % s format.", time.RFC3339)
        }
        v.RecentAttemptTime = &RecentAttemptTimeVal
    }
    if temp.NextAttemptTime != nil {
        NextAttemptTimeVal, err := time.Parse(time.RFC3339, *temp.NextAttemptTime)
        if err != nil {
            log.Fatalf("Cannot Parse nextAttemptTime as % s format.", time.RFC3339)
        }
        v.NextAttemptTime = &NextAttemptTimeVal
    }
    return nil
}

// tempV3DeviceStatus is a temporary struct used for validating the fields of V3DeviceStatus.
type tempV3DeviceStatus  struct {
    DeviceId          *string `json:"deviceId"`
    Status            *string `json:"status"`
    ResultReason      *string `json:"resultReason,omitempty"`
    UpdatedTime       *string `json:"updatedTime,omitempty"`
    RecentAttemptTime *string `json:"recentAttemptTime,omitempty"`
    NextAttemptTime   *string `json:"nextAttemptTime,omitempty"`
}

func (v *tempV3DeviceStatus) validate() error {
    var errs []string
    if v.DeviceId == nil {
        errs = append(errs, "required field `deviceId` is missing for type `V3DeviceStatus`")
    }
    if v.Status == nil {
        errs = append(errs, "required field `status` is missing for type `V3DeviceStatus`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
