/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// SubscribeRequest represents a SubscribeRequest struct.
type SubscribeRequest struct {
    AccountName          string                 `json:"accountName"`
    DeviceInfo           []QosDeviceInfo        `json:"deviceInfo"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for SubscribeRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (s SubscribeRequest) String() string {
    return fmt.Sprintf(
    	"SubscribeRequest[AccountName=%v, DeviceInfo=%v, AdditionalProperties=%v]",
    	s.AccountName, s.DeviceInfo, s.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for SubscribeRequest.
// It customizes the JSON marshaling process for SubscribeRequest objects.
func (s SubscribeRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(s.AdditionalProperties,
        "accountName", "deviceInfo"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(s.toMap())
}

// toMap converts the SubscribeRequest object to a map representation for JSON marshaling.
func (s SubscribeRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, s.AdditionalProperties)
    structMap["accountName"] = s.AccountName
    structMap["deviceInfo"] = s.DeviceInfo
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for SubscribeRequest.
// It customizes the JSON unmarshaling process for SubscribeRequest objects.
func (s *SubscribeRequest) UnmarshalJSON(input []byte) error {
    var temp tempSubscribeRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "deviceInfo")
    if err != nil {
    	return err
    }
    s.AdditionalProperties = additionalProperties
    
    s.AccountName = *temp.AccountName
    s.DeviceInfo = *temp.DeviceInfo
    return nil
}

// tempSubscribeRequest is a temporary struct used for validating the fields of SubscribeRequest.
type tempSubscribeRequest  struct {
    AccountName *string          `json:"accountName"`
    DeviceInfo  *[]QosDeviceInfo `json:"deviceInfo"`
}

func (s *tempSubscribeRequest) validate() error {
    var errs []string
    if s.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `subscribeRequest`")
    }
    if s.DeviceInfo == nil {
        errs = append(errs, "required field `deviceInfo` is missing for type `subscribeRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
