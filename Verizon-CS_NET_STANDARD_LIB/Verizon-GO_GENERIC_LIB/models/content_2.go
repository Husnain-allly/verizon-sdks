/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// Content2 represents a Content2 struct.
type Content2 struct {
    // List of MUTCD signs and directions.
    GenericSign          []TextPhraseOrItis2    `json:"genericSign"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for Content2,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c Content2) String() string {
    return fmt.Sprintf(
    	"Content2[GenericSign=%v, AdditionalProperties=%v]",
    	c.GenericSign, c.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for Content2.
// It customizes the JSON marshaling process for Content2 objects.
func (c Content2) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(c.AdditionalProperties,
        "genericSign"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(c.toMap())
}

// toMap converts the Content2 object to a map representation for JSON marshaling.
func (c Content2) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, c.AdditionalProperties)
    structMap["genericSign"] = c.GenericSign
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Content2.
// It customizes the JSON unmarshaling process for Content2 objects.
func (c *Content2) UnmarshalJSON(input []byte) error {
    var temp tempContent2
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "genericSign")
    if err != nil {
    	return err
    }
    c.AdditionalProperties = additionalProperties
    
    c.GenericSign = *temp.GenericSign
    return nil
}

// tempContent2 is a temporary struct used for validating the fields of Content2.
type tempContent2  struct {
    GenericSign *[]TextPhraseOrItis2 `json:"genericSign"`
}

func (c *tempContent2) validate() error {
    var errs []string
    if c.GenericSign == nil {
        errs = append(errs, "required field `genericSign` is missing for type `Content2`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
