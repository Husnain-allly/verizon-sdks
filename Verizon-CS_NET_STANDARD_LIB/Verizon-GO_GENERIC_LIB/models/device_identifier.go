/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// DeviceIdentifier represents a DeviceIdentifier struct.
// Device Id details.
type DeviceIdentifier struct {
    // Kind of device.
    Kind string  `json:"kind"`
    // Device Identity number.
    Id   string  `json:"id"`
    // Device MDN number.
    Mdn  *string `json:"mdn,omitempty"`
}

// String implements the fmt.Stringer interface for DeviceIdentifier,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceIdentifier) String() string {
    return fmt.Sprintf(
    	"DeviceIdentifier[Kind=%v, Id=%v, Mdn=%v]",
    	d.Kind, d.Id, d.Mdn)
}

// MarshalJSON implements the json.Marshaler interface for DeviceIdentifier.
// It customizes the JSON marshaling process for DeviceIdentifier objects.
func (d DeviceIdentifier) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceIdentifier object to a map representation for JSON marshaling.
func (d DeviceIdentifier) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["kind"] = d.Kind
    structMap["id"] = d.Id
    if d.Mdn != nil {
        structMap["mdn"] = d.Mdn
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceIdentifier.
// It customizes the JSON unmarshaling process for DeviceIdentifier objects.
func (d *DeviceIdentifier) UnmarshalJSON(input []byte) error {
    var temp tempDeviceIdentifier
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    d.Kind = *temp.Kind
    d.Id = *temp.Id
    d.Mdn = temp.Mdn
    return nil
}

// tempDeviceIdentifier is a temporary struct used for validating the fields of DeviceIdentifier.
type tempDeviceIdentifier  struct {
    Kind *string `json:"kind"`
    Id   *string `json:"id"`
    Mdn  *string `json:"mdn,omitempty"`
}

func (d *tempDeviceIdentifier) validate() error {
    var errs []string
    if d.Kind == nil {
        errs = append(errs, "required field `kind` is missing for type `DeviceIdentifier`")
    }
    if d.Id == nil {
        errs = append(errs, "required field `id` is missing for type `DeviceIdentifier`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
