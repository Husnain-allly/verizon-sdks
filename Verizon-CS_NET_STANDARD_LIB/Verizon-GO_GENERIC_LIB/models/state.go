/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// State represents a State struct.
// Each service includes custom states.
type State struct {
    // The name of the state.
    Name                   *string                `json:"name,omitempty"`
    // The workflow sequence number of this state.
    WorkflowSequenceNumber *float64               `json:"workflowSequenceNumber,omitempty"`
    // The service plans that can be used to charge for services for devices in this state.
    ServicePlans           []string               `json:"servicePlans,omitempty"`
    AdditionalProperties   map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for State,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (s State) String() string {
    return fmt.Sprintf(
    	"State[Name=%v, WorkflowSequenceNumber=%v, ServicePlans=%v, AdditionalProperties=%v]",
    	s.Name, s.WorkflowSequenceNumber, s.ServicePlans, s.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for State.
// It customizes the JSON marshaling process for State objects.
func (s State) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(s.AdditionalProperties,
        "name", "workflowSequenceNumber", "servicePlans"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(s.toMap())
}

// toMap converts the State object to a map representation for JSON marshaling.
func (s State) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, s.AdditionalProperties)
    if s.Name != nil {
        structMap["name"] = s.Name
    }
    if s.WorkflowSequenceNumber != nil {
        structMap["workflowSequenceNumber"] = s.WorkflowSequenceNumber
    }
    if s.ServicePlans != nil {
        structMap["servicePlans"] = s.ServicePlans
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for State.
// It customizes the JSON unmarshaling process for State objects.
func (s *State) UnmarshalJSON(input []byte) error {
    var temp tempState
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "name", "workflowSequenceNumber", "servicePlans")
    if err != nil {
    	return err
    }
    s.AdditionalProperties = additionalProperties
    
    s.Name = temp.Name
    s.WorkflowSequenceNumber = temp.WorkflowSequenceNumber
    s.ServicePlans = temp.ServicePlans
    return nil
}

// tempState is a temporary struct used for validating the fields of State.
type tempState  struct {
    Name                   *string  `json:"name,omitempty"`
    WorkflowSequenceNumber *float64 `json:"workflowSequenceNumber,omitempty"`
    ServicePlans           []string `json:"servicePlans,omitempty"`
}
