/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// DeviceGroupFilter represents a DeviceGroupFilter struct.
type DeviceGroupFilter struct {
    DeviceGroupName      *string                `json:"deviceGroupName,omitempty"`
    IndividualOrCombined *string                `json:"IndividualOrCombined,omitempty"`
    // The numeric name of the account and must include leading zeroes
    AccountName          *string                `json:"accountName,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceGroupFilter,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceGroupFilter) String() string {
    return fmt.Sprintf(
    	"DeviceGroupFilter[DeviceGroupName=%v, IndividualOrCombined=%v, AccountName=%v, AdditionalProperties=%v]",
    	d.DeviceGroupName, d.IndividualOrCombined, d.AccountName, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceGroupFilter.
// It customizes the JSON marshaling process for DeviceGroupFilter objects.
func (d DeviceGroupFilter) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "deviceGroupName", "IndividualOrCombined", "accountName"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceGroupFilter object to a map representation for JSON marshaling.
func (d DeviceGroupFilter) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    if d.DeviceGroupName != nil {
        structMap["deviceGroupName"] = d.DeviceGroupName
    }
    if d.IndividualOrCombined != nil {
        structMap["IndividualOrCombined"] = d.IndividualOrCombined
    }
    if d.AccountName != nil {
        structMap["accountName"] = d.AccountName
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceGroupFilter.
// It customizes the JSON unmarshaling process for DeviceGroupFilter objects.
func (d *DeviceGroupFilter) UnmarshalJSON(input []byte) error {
    var temp tempDeviceGroupFilter
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceGroupName", "IndividualOrCombined", "accountName")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.DeviceGroupName = temp.DeviceGroupName
    d.IndividualOrCombined = temp.IndividualOrCombined
    d.AccountName = temp.AccountName
    return nil
}

// tempDeviceGroupFilter is a temporary struct used for validating the fields of DeviceGroupFilter.
type tempDeviceGroupFilter  struct {
    DeviceGroupName      *string `json:"deviceGroupName,omitempty"`
    IndividualOrCombined *string `json:"IndividualOrCombined,omitempty"`
    AccountName          *string `json:"accountName,omitempty"`
}
