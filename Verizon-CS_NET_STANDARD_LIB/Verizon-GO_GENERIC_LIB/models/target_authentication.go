/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// TargetAuthentication represents a TargetAuthentication struct.
// OAuth 2 token and refresh token for TS to stream events to Target.
type TargetAuthentication struct {
    Body                 *TargetAuthenticationBody `json:"body,omitempty"`
    Version              *string                   `json:"version,omitempty"`
    AdditionalProperties map[string]interface{}    `json:"_"`
}

// String implements the fmt.Stringer interface for TargetAuthentication,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (t TargetAuthentication) String() string {
    return fmt.Sprintf(
    	"TargetAuthentication[Body=%v, Version=%v, AdditionalProperties=%v]",
    	t.Body, t.Version, t.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for TargetAuthentication.
// It customizes the JSON marshaling process for TargetAuthentication objects.
func (t TargetAuthentication) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(t.AdditionalProperties,
        "body", "version"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(t.toMap())
}

// toMap converts the TargetAuthentication object to a map representation for JSON marshaling.
func (t TargetAuthentication) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, t.AdditionalProperties)
    if t.Body != nil {
        structMap["body"] = t.Body.toMap()
    }
    if t.Version != nil {
        structMap["version"] = t.Version
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for TargetAuthentication.
// It customizes the JSON unmarshaling process for TargetAuthentication objects.
func (t *TargetAuthentication) UnmarshalJSON(input []byte) error {
    var temp tempTargetAuthentication
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "body", "version")
    if err != nil {
    	return err
    }
    t.AdditionalProperties = additionalProperties
    
    t.Body = temp.Body
    t.Version = temp.Version
    return nil
}

// tempTargetAuthentication is a temporary struct used for validating the fields of TargetAuthentication.
type tempTargetAuthentication  struct {
    Body    *TargetAuthenticationBody `json:"body,omitempty"`
    Version *string                   `json:"version,omitempty"`
}
