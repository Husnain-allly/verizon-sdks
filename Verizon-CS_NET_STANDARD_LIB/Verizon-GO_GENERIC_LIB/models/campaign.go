/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// Campaign represents a Campaign struct.
// Firmware upgrade information.
type Campaign struct {
    // Upgrade identifier.
    Id                     string                 `json:"id"`
    // Account identifier.
    AccountName            string                 `json:"accountName"`
    // Campaign name.
    CampaignName           *string                `json:"campaignName,omitempty"`
    // Name of firmware.
    FirmwareName           *string                `json:"firmwareName,omitempty"`
    // Old firmware version.
    FirmwareFrom           *string                `json:"firmwareFrom,omitempty"`
    // New firmware version.
    FirmwareTo             *string                `json:"firmwareTo,omitempty"`
    // The protocol of the firmware distribution. Default: LWM2M.
    Protocol               string                 `json:"protocol"`
    // Applicable make.
    Make                   string                 `json:"make"`
    // Applicable model.
    Model                  string                 `json:"model"`
    // Campaign start date.
    StartDate              time.Time              `json:"startDate"`
    // Campaign end date.
    EndDate                time.Time              `json:"endDate"`
    // List of allowed campaign time windows.
    CampaignTimeWindowList []V3TimeWindow         `json:"campaignTimeWindowList,omitempty"`
    // Firmware upgrade status.
    Status                 string                 `json:"status"`
    // Any device included in the device list which does not have a license will automatically be assigned a FOTA license, assuming there are enough FOTA licenses available, when set to true.
    AutoAssignLicenseFlag  bool                   `json:"autoAssignLicenseFlag"`
    // Beyond the devices included on the device list, any other device(s) which matches the eligibility criteria (same make, model, current firmware, protocol, billing account) will automatically be added to the campaign list during the life of the campaign when set to true.
    AutoAddDevicesFlag     bool                   `json:"autoAddDevicesFlag"`
    AdditionalProperties   map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for Campaign,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c Campaign) String() string {
    return fmt.Sprintf(
    	"Campaign[Id=%v, AccountName=%v, CampaignName=%v, FirmwareName=%v, FirmwareFrom=%v, FirmwareTo=%v, Protocol=%v, Make=%v, Model=%v, StartDate=%v, EndDate=%v, CampaignTimeWindowList=%v, Status=%v, AutoAssignLicenseFlag=%v, AutoAddDevicesFlag=%v, AdditionalProperties=%v]",
    	c.Id, c.AccountName, c.CampaignName, c.FirmwareName, c.FirmwareFrom, c.FirmwareTo, c.Protocol, c.Make, c.Model, c.StartDate, c.EndDate, c.CampaignTimeWindowList, c.Status, c.AutoAssignLicenseFlag, c.AutoAddDevicesFlag, c.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for Campaign.
// It customizes the JSON marshaling process for Campaign objects.
func (c Campaign) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(c.AdditionalProperties,
        "id", "accountName", "campaignName", "firmwareName", "firmwareFrom", "firmwareTo", "protocol", "make", "model", "startDate", "endDate", "campaignTimeWindowList", "status", "autoAssignLicenseFlag", "autoAddDevicesFlag"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(c.toMap())
}

// toMap converts the Campaign object to a map representation for JSON marshaling.
func (c Campaign) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, c.AdditionalProperties)
    structMap["id"] = c.Id
    structMap["accountName"] = c.AccountName
    if c.CampaignName != nil {
        structMap["campaignName"] = c.CampaignName
    }
    if c.FirmwareName != nil {
        structMap["firmwareName"] = c.FirmwareName
    }
    if c.FirmwareFrom != nil {
        structMap["firmwareFrom"] = c.FirmwareFrom
    }
    if c.FirmwareTo != nil {
        structMap["firmwareTo"] = c.FirmwareTo
    }
    structMap["protocol"] = c.Protocol
    structMap["make"] = c.Make
    structMap["model"] = c.Model
    structMap["startDate"] = c.StartDate.Format(DEFAULT_DATE)
    structMap["endDate"] = c.EndDate.Format(DEFAULT_DATE)
    if c.CampaignTimeWindowList != nil {
        structMap["campaignTimeWindowList"] = c.CampaignTimeWindowList
    }
    structMap["status"] = c.Status
    structMap["autoAssignLicenseFlag"] = c.AutoAssignLicenseFlag
    structMap["autoAddDevicesFlag"] = c.AutoAddDevicesFlag
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Campaign.
// It customizes the JSON unmarshaling process for Campaign objects.
func (c *Campaign) UnmarshalJSON(input []byte) error {
    var temp tempCampaign
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "id", "accountName", "campaignName", "firmwareName", "firmwareFrom", "firmwareTo", "protocol", "make", "model", "startDate", "endDate", "campaignTimeWindowList", "status", "autoAssignLicenseFlag", "autoAddDevicesFlag")
    if err != nil {
    	return err
    }
    c.AdditionalProperties = additionalProperties
    
    c.Id = *temp.Id
    c.AccountName = *temp.AccountName
    c.CampaignName = temp.CampaignName
    c.FirmwareName = temp.FirmwareName
    c.FirmwareFrom = temp.FirmwareFrom
    c.FirmwareTo = temp.FirmwareTo
    c.Protocol = *temp.Protocol
    c.Make = *temp.Make
    c.Model = *temp.Model
    StartDateVal, err := time.Parse(DEFAULT_DATE, *temp.StartDate)
    if err != nil {
        log.Fatalf("Cannot Parse startDate as % s format.", DEFAULT_DATE)
    }
    c.StartDate = StartDateVal
    EndDateVal, err := time.Parse(DEFAULT_DATE, *temp.EndDate)
    if err != nil {
        log.Fatalf("Cannot Parse endDate as % s format.", DEFAULT_DATE)
    }
    c.EndDate = EndDateVal
    c.CampaignTimeWindowList = temp.CampaignTimeWindowList
    c.Status = *temp.Status
    c.AutoAssignLicenseFlag = *temp.AutoAssignLicenseFlag
    c.AutoAddDevicesFlag = *temp.AutoAddDevicesFlag
    return nil
}

// tempCampaign is a temporary struct used for validating the fields of Campaign.
type tempCampaign  struct {
    Id                     *string        `json:"id"`
    AccountName            *string        `json:"accountName"`
    CampaignName           *string        `json:"campaignName,omitempty"`
    FirmwareName           *string        `json:"firmwareName,omitempty"`
    FirmwareFrom           *string        `json:"firmwareFrom,omitempty"`
    FirmwareTo             *string        `json:"firmwareTo,omitempty"`
    Protocol               *string        `json:"protocol"`
    Make                   *string        `json:"make"`
    Model                  *string        `json:"model"`
    StartDate              *string        `json:"startDate"`
    EndDate                *string        `json:"endDate"`
    CampaignTimeWindowList []V3TimeWindow `json:"campaignTimeWindowList,omitempty"`
    Status                 *string        `json:"status"`
    AutoAssignLicenseFlag  *bool          `json:"autoAssignLicenseFlag"`
    AutoAddDevicesFlag     *bool          `json:"autoAddDevicesFlag"`
}

func (c *tempCampaign) validate() error {
    var errs []string
    if c.Id == nil {
        errs = append(errs, "required field `id` is missing for type `Campaign`")
    }
    if c.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `Campaign`")
    }
    if c.Protocol == nil {
        errs = append(errs, "required field `protocol` is missing for type `Campaign`")
    }
    if c.Make == nil {
        errs = append(errs, "required field `make` is missing for type `Campaign`")
    }
    if c.Model == nil {
        errs = append(errs, "required field `model` is missing for type `Campaign`")
    }
    if c.StartDate == nil {
        errs = append(errs, "required field `startDate` is missing for type `Campaign`")
    }
    if c.EndDate == nil {
        errs = append(errs, "required field `endDate` is missing for type `Campaign`")
    }
    if c.Status == nil {
        errs = append(errs, "required field `status` is missing for type `Campaign`")
    }
    if c.AutoAssignLicenseFlag == nil {
        errs = append(errs, "required field `autoAssignLicenseFlag` is missing for type `Campaign`")
    }
    if c.AutoAddDevicesFlag == nil {
        errs = append(errs, "required field `autoAddDevicesFlag` is missing for type `Campaign`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
