/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// Polygon represents a Polygon struct.
// A Polygon is a type of geometry that represents a collection of points that form a closed ring.
// NOTE: This API only supports a single polygon in the Polygon geometry, so holes cannot be defines at this point. Support for hole will be added in future releases.
type Polygon struct {
    Type                 PolygonType            `json:"type"`
    Coordinates          [][][]float64          `json:"coordinates"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for Polygon,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (p Polygon) String() string {
    return fmt.Sprintf(
    	"Polygon[Type=%v, Coordinates=%v, AdditionalProperties=%v]",
    	p.Type, p.Coordinates, p.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for Polygon.
// It customizes the JSON marshaling process for Polygon objects.
func (p Polygon) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(p.AdditionalProperties,
        "type", "coordinates"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(p.toMap())
}

// toMap converts the Polygon object to a map representation for JSON marshaling.
func (p Polygon) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, p.AdditionalProperties)
    structMap["type"] = p.Type
    structMap["coordinates"] = p.Coordinates
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Polygon.
// It customizes the JSON unmarshaling process for Polygon objects.
func (p *Polygon) UnmarshalJSON(input []byte) error {
    var temp tempPolygon
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "type", "coordinates")
    if err != nil {
    	return err
    }
    p.AdditionalProperties = additionalProperties
    
    p.Type = *temp.Type
    p.Coordinates = *temp.Coordinates
    return nil
}

// tempPolygon is a temporary struct used for validating the fields of Polygon.
type tempPolygon  struct {
    Type        *PolygonType   `json:"type"`
    Coordinates *[][][]float64 `json:"coordinates"`
}

func (p *tempPolygon) validate() error {
    var errs []string
    if p.Type == nil {
        errs = append(errs, "required field `type` is missing for type `Polygon`")
    }
    if p.Coordinates == nil {
        errs = append(errs, "required field `coordinates` is missing for type `Polygon`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
