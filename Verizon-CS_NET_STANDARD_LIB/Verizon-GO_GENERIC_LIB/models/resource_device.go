/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// ResourceDevice represents a ResourceDevice struct.
type ResourceDevice struct {
    // Not used in this release, future functionality
    Accountclientid  *string                `json:"accountclientid,omitempty"`
    // The billing account ID. This is the same value as the Account ID
    Billingaccountid *string                `json:"billingaccountid,omitempty"`
    // The Identifier of chipset used by the device
    Chipset          *string                `json:"chipset,omitempty"`
    // Timestamp of the record
    Createdon        time.Time              `json:"createdon"`
    // Name/value pair, where the value is client defined.  The purpose is to keep track of current state per device action.
    Customdata       map[string]interface{} `json:"customdata,omitempty"`
    // a short description
    Description      *string                `json:"description,omitempty"`
    // The Electronic Serial Number (ESN) of the device
    Esn              *int                   `json:"esn,omitempty"`
    // Fields to return needed by search
    Fields           *DtoFields             `json:"fields,omitempty"`
    // UUID of the ECPD account the user belongs to
    Foreignid        string                 `json:"foreignid"`
    // The manufacturer's hardware version of the device
    Hardwareversion  *string                `json:"hardwareversion,omitempty"`
    // The 20-digit Integrated Circuit Card ID (SIM card ID)
    Iccid            *string                `json:"iccid,omitempty"`
    // UUID of the user record, assigned at creation
    Id               *string                `json:"id,omitempty"`
    // The 15-digit International Mobile Equipment ID
    Imei             *int                   `json:"imei,omitempty"`
    // The 64-bit International Mobile Subscriber Identity
    Imsi             *int                   `json:"imsi,omitempty"`
    // Timestamp of the record
    Lastupdated      time.Time              `json:"lastupdated"`
    // licenses assigned to the device
    Licenses         []string               `json:"licenses,omitempty"`
    // The Media Access Control address of the device, listed on the device in the format XX-XX-XX-XX-XX-XX or XX:XX:XX:XX:XX:XX
    Mac              *string                `json:"mac,omitempty"`
    // The manufacturer of the device
    Manufacturer     *string                `json:"manufacturer,omitempty"`
    // The 56-bit Mobile Equipment ID
    Meid             *string                `json:"meid,omitempty"`
    // The Mobile Station International Subscriber Directory Number. In the USA, this is 1+ a 10-digit phone number
    Msisdn           *string                `json:"msisdn,omitempty"`
    // User defined name of the record
    Name             *string                `json:"name,omitempty"`
    // this field is applicable for BLE sensors. This represents the value of parent gateway device
    Parentdeviceid   *string                `json:"parentdeviceid,omitempty"`
    // The device model name
    Productmodel     *string                `json:"productmodel,omitempty"`
    // The id of the provider who is responible for talking to the device
    Providerid       *string                `json:"providerid,omitempty"`
    // The numeric value of the Quick Response (QR) code
    Qrcode           *string                `json:"qrcode,omitempty"`
    // The device reference ID
    Refid            *string                `json:"refid,omitempty"`
    // The type of value represented by `refid`
    Refidtype        *string                `json:"refidtype,omitempty"`
    // The device's serial number
    Serial           *string                `json:"serial,omitempty"`
    Services         []string               `json:"services,omitempty"`
    // The Stock Keeping Unit (SKU) number of the device
    Sku              *string                `json:"sku,omitempty"`
    // the current device software version
    Softwareversion  *string                `json:"softwareversion,omitempty"`
    // The current status of the device or transaction and will be `success` or `failed`
    State            string                 `json:"state"`
    // The resource version
    Version          *string                `json:"version,omitempty"`
    // The UUID of the resource version
    Versionid        string                 `json:"versionid"`
    // Data retention period
    Eventretention   *int                   `json:"eventretention,omitempty"`
}

// String implements the fmt.Stringer interface for ResourceDevice,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (r ResourceDevice) String() string {
    return fmt.Sprintf(
    	"ResourceDevice[Accountclientid=%v, Billingaccountid=%v, Chipset=%v, Createdon=%v, Customdata=%v, Description=%v, Esn=%v, Fields=%v, Foreignid=%v, Hardwareversion=%v, Iccid=%v, Id=%v, Imei=%v, Imsi=%v, Lastupdated=%v, Licenses=%v, Mac=%v, Manufacturer=%v, Meid=%v, Msisdn=%v, Name=%v, Parentdeviceid=%v, Productmodel=%v, Providerid=%v, Qrcode=%v, Refid=%v, Refidtype=%v, Serial=%v, Services=%v, Sku=%v, Softwareversion=%v, State=%v, Version=%v, Versionid=%v, Eventretention=%v]",
    	r.Accountclientid, r.Billingaccountid, r.Chipset, r.Createdon, r.Customdata, r.Description, r.Esn, r.Fields, r.Foreignid, r.Hardwareversion, r.Iccid, r.Id, r.Imei, r.Imsi, r.Lastupdated, r.Licenses, r.Mac, r.Manufacturer, r.Meid, r.Msisdn, r.Name, r.Parentdeviceid, r.Productmodel, r.Providerid, r.Qrcode, r.Refid, r.Refidtype, r.Serial, r.Services, r.Sku, r.Softwareversion, r.State, r.Version, r.Versionid, r.Eventretention)
}

// MarshalJSON implements the json.Marshaler interface for ResourceDevice.
// It customizes the JSON marshaling process for ResourceDevice objects.
func (r ResourceDevice) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(r.toMap())
}

// toMap converts the ResourceDevice object to a map representation for JSON marshaling.
func (r ResourceDevice) toMap() map[string]any {
    structMap := make(map[string]any)
    if r.Accountclientid != nil {
        structMap["accountclientid"] = r.Accountclientid
    }
    if r.Billingaccountid != nil {
        structMap["billingaccountid"] = r.Billingaccountid
    }
    if r.Chipset != nil {
        structMap["chipset"] = r.Chipset
    }
    structMap["createdon"] = r.Createdon.Format(time.RFC3339)
    if r.Customdata != nil {
        structMap["customdata"] = r.Customdata
    }
    if r.Description != nil {
        structMap["description"] = r.Description
    }
    if r.Esn != nil {
        structMap["esn"] = r.Esn
    }
    if r.Fields != nil {
        structMap["fields"] = r.Fields.toMap()
    }
    structMap["foreignid"] = r.Foreignid
    if r.Hardwareversion != nil {
        structMap["hardwareversion"] = r.Hardwareversion
    }
    if r.Iccid != nil {
        structMap["iccid"] = r.Iccid
    }
    if r.Id != nil {
        structMap["id"] = r.Id
    }
    if r.Imei != nil {
        structMap["imei"] = r.Imei
    }
    if r.Imsi != nil {
        structMap["imsi"] = r.Imsi
    }
    structMap["lastupdated"] = r.Lastupdated.Format(time.RFC3339)
    if r.Licenses != nil {
        structMap["licenses"] = r.Licenses
    }
    if r.Mac != nil {
        structMap["mac"] = r.Mac
    }
    if r.Manufacturer != nil {
        structMap["manufacturer"] = r.Manufacturer
    }
    if r.Meid != nil {
        structMap["meid"] = r.Meid
    }
    if r.Msisdn != nil {
        structMap["msisdn"] = r.Msisdn
    }
    if r.Name != nil {
        structMap["name"] = r.Name
    }
    if r.Parentdeviceid != nil {
        structMap["parentdeviceid"] = r.Parentdeviceid
    }
    if r.Productmodel != nil {
        structMap["productmodel"] = r.Productmodel
    }
    if r.Providerid != nil {
        structMap["providerid"] = r.Providerid
    }
    if r.Qrcode != nil {
        structMap["qrcode"] = r.Qrcode
    }
    if r.Refid != nil {
        structMap["refid"] = r.Refid
    }
    if r.Refidtype != nil {
        structMap["refidtype"] = r.Refidtype
    }
    if r.Serial != nil {
        structMap["serial"] = r.Serial
    }
    if r.Services != nil {
        structMap["services"] = r.Services
    }
    if r.Sku != nil {
        structMap["sku"] = r.Sku
    }
    if r.Softwareversion != nil {
        structMap["softwareversion"] = r.Softwareversion
    }
    structMap["state"] = r.State
    if r.Version != nil {
        structMap["version"] = r.Version
    }
    structMap["versionid"] = r.Versionid
    if r.Eventretention != nil {
        structMap["eventretention"] = r.Eventretention
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ResourceDevice.
// It customizes the JSON unmarshaling process for ResourceDevice objects.
func (r *ResourceDevice) UnmarshalJSON(input []byte) error {
    var temp tempResourceDevice
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    r.Accountclientid = temp.Accountclientid
    r.Billingaccountid = temp.Billingaccountid
    r.Chipset = temp.Chipset
    CreatedonVal, err := time.Parse(time.RFC3339, *temp.Createdon)
    if err != nil {
        log.Fatalf("Cannot Parse createdon as % s format.", time.RFC3339)
    }
    r.Createdon = CreatedonVal
    r.Customdata = temp.Customdata
    r.Description = temp.Description
    r.Esn = temp.Esn
    r.Fields = temp.Fields
    r.Foreignid = *temp.Foreignid
    r.Hardwareversion = temp.Hardwareversion
    r.Iccid = temp.Iccid
    r.Id = temp.Id
    r.Imei = temp.Imei
    r.Imsi = temp.Imsi
    LastupdatedVal, err := time.Parse(time.RFC3339, *temp.Lastupdated)
    if err != nil {
        log.Fatalf("Cannot Parse lastupdated as % s format.", time.RFC3339)
    }
    r.Lastupdated = LastupdatedVal
    r.Licenses = temp.Licenses
    r.Mac = temp.Mac
    r.Manufacturer = temp.Manufacturer
    r.Meid = temp.Meid
    r.Msisdn = temp.Msisdn
    r.Name = temp.Name
    r.Parentdeviceid = temp.Parentdeviceid
    r.Productmodel = temp.Productmodel
    r.Providerid = temp.Providerid
    r.Qrcode = temp.Qrcode
    r.Refid = temp.Refid
    r.Refidtype = temp.Refidtype
    r.Serial = temp.Serial
    r.Services = temp.Services
    r.Sku = temp.Sku
    r.Softwareversion = temp.Softwareversion
    r.State = *temp.State
    r.Version = temp.Version
    r.Versionid = *temp.Versionid
    r.Eventretention = temp.Eventretention
    return nil
}

// tempResourceDevice is a temporary struct used for validating the fields of ResourceDevice.
type tempResourceDevice  struct {
    Accountclientid  *string                `json:"accountclientid,omitempty"`
    Billingaccountid *string                `json:"billingaccountid,omitempty"`
    Chipset          *string                `json:"chipset,omitempty"`
    Createdon        *string                `json:"createdon"`
    Customdata       map[string]interface{} `json:"customdata,omitempty"`
    Description      *string                `json:"description,omitempty"`
    Esn              *int                   `json:"esn,omitempty"`
    Fields           *DtoFields             `json:"fields,omitempty"`
    Foreignid        *string                `json:"foreignid"`
    Hardwareversion  *string                `json:"hardwareversion,omitempty"`
    Iccid            *string                `json:"iccid,omitempty"`
    Id               *string                `json:"id,omitempty"`
    Imei             *int                   `json:"imei,omitempty"`
    Imsi             *int                   `json:"imsi,omitempty"`
    Lastupdated      *string                `json:"lastupdated"`
    Licenses         []string               `json:"licenses,omitempty"`
    Mac              *string                `json:"mac,omitempty"`
    Manufacturer     *string                `json:"manufacturer,omitempty"`
    Meid             *string                `json:"meid,omitempty"`
    Msisdn           *string                `json:"msisdn,omitempty"`
    Name             *string                `json:"name,omitempty"`
    Parentdeviceid   *string                `json:"parentdeviceid,omitempty"`
    Productmodel     *string                `json:"productmodel,omitempty"`
    Providerid       *string                `json:"providerid,omitempty"`
    Qrcode           *string                `json:"qrcode,omitempty"`
    Refid            *string                `json:"refid,omitempty"`
    Refidtype        *string                `json:"refidtype,omitempty"`
    Serial           *string                `json:"serial,omitempty"`
    Services         []string               `json:"services,omitempty"`
    Sku              *string                `json:"sku,omitempty"`
    Softwareversion  *string                `json:"softwareversion,omitempty"`
    State            *string                `json:"state"`
    Version          *string                `json:"version,omitempty"`
    Versionid        *string                `json:"versionid"`
    Eventretention   *int                   `json:"eventretention,omitempty"`
}

func (r *tempResourceDevice) validate() error {
    var errs []string
    if r.Createdon == nil {
        errs = append(errs, "required field `createdon` is missing for type `resource.Device`")
    }
    if r.Foreignid == nil {
        errs = append(errs, "required field `foreignid` is missing for type `resource.Device`")
    }
    if r.Lastupdated == nil {
        errs = append(errs, "required field `lastupdated` is missing for type `resource.Device`")
    }
    if r.State == nil {
        errs = append(errs, "required field `state` is missing for type `resource.Device`")
    }
    if r.Versionid == nil {
        errs = append(errs, "required field `versionid` is missing for type `resource.Device`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
