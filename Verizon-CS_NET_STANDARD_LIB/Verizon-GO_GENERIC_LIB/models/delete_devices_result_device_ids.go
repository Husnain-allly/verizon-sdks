/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
)

// DeleteDevicesResultDeviceIds represents a DeleteDevicesResultDeviceIds struct.
// This is a container for one-of cases.
type DeleteDevicesResultDeviceIds struct {
    value             any
    isArrayOfDeviceId bool
    isDeviceId        bool
}

// String implements the fmt.Stringer interface for DeleteDevicesResultDeviceIds,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeleteDevicesResultDeviceIds) String() string {
    return fmt.Sprintf("%v", d.value)
}

// MarshalJSON implements the json.Marshaler interface for DeleteDevicesResultDeviceIds.
// It customizes the JSON marshaling process for DeleteDevicesResultDeviceIds objects.
func (d DeleteDevicesResultDeviceIds) MarshalJSON() (
    []byte,
    error) {
    if d.value == nil {
        return nil, errors.New("No underlying type is set. Please use any of the `models.DeleteDevicesResultDeviceIdsContainer.From*` functions to initialize the DeleteDevicesResultDeviceIds object.")
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeleteDevicesResultDeviceIds object to a map representation for JSON marshaling.
func (d *DeleteDevicesResultDeviceIds) toMap() any {
    switch obj := d.value.(type) {
    case *[]DeviceId:
        return *obj
    case *DeviceId:
        return obj.toMap()
    }
    return nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeleteDevicesResultDeviceIds.
// It customizes the JSON unmarshaling process for DeleteDevicesResultDeviceIds objects.
func (d *DeleteDevicesResultDeviceIds) UnmarshalJSON(input []byte) error {
    result, err := UnmarshallOneOf(input,
        NewTypeHolder(&[]DeviceId{}, false, &d.isArrayOfDeviceId),
        NewTypeHolder(&DeviceId{}, false, &d.isDeviceId),
    )
    
    d.value = result
    return err
}

func (d *DeleteDevicesResultDeviceIds) AsArrayOfDeviceId() (
    *[]DeviceId,
    bool) {
    if !d.isArrayOfDeviceId {
        return nil, false
    }
    return d.value.(*[]DeviceId), true
}

func (d *DeleteDevicesResultDeviceIds) AsDeviceId() (
    *DeviceId,
    bool) {
    if !d.isDeviceId {
        return nil, false
    }
    return d.value.(*DeviceId), true
}

// internalDeleteDevicesResultDeviceIds represents a deleteDevicesResultDeviceIds struct.
// This is a container for one-of cases.
type internalDeleteDevicesResultDeviceIds struct {}

var DeleteDevicesResultDeviceIdsContainer internalDeleteDevicesResultDeviceIds

// The internalDeleteDevicesResultDeviceIds instance, wrapping the provided []DeviceId value.
func (d *internalDeleteDevicesResultDeviceIds) FromArrayOfDeviceId(val []DeviceId) DeleteDevicesResultDeviceIds {
    return DeleteDevicesResultDeviceIds{value: &val}
}

// The internalDeleteDevicesResultDeviceIds instance, wrapping the provided DeviceId value.
func (d *internalDeleteDevicesResultDeviceIds) FromDeviceId(val DeviceId) DeleteDevicesResultDeviceIds {
    return DeleteDevicesResultDeviceIds{value: &val}
}
