/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// TextPhraseOrItis1 represents a TextPhraseOrItis1 struct.
type TextPhraseOrItis1 struct {
    Item                 Item2                  `json:"item"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for TextPhraseOrItis1,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (t TextPhraseOrItis1) String() string {
    return fmt.Sprintf(
    	"TextPhraseOrItis1[Item=%v, AdditionalProperties=%v]",
    	t.Item, t.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for TextPhraseOrItis1.
// It customizes the JSON marshaling process for TextPhraseOrItis1 objects.
func (t TextPhraseOrItis1) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(t.AdditionalProperties,
        "item"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(t.toMap())
}

// toMap converts the TextPhraseOrItis1 object to a map representation for JSON marshaling.
func (t TextPhraseOrItis1) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, t.AdditionalProperties)
    structMap["item"] = t.Item.toMap()
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for TextPhraseOrItis1.
// It customizes the JSON unmarshaling process for TextPhraseOrItis1 objects.
func (t *TextPhraseOrItis1) UnmarshalJSON(input []byte) error {
    var temp tempTextPhraseOrItis1
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "item")
    if err != nil {
    	return err
    }
    t.AdditionalProperties = additionalProperties
    
    t.Item = *temp.Item
    return nil
}

// tempTextPhraseOrItis1 is a temporary struct used for validating the fields of TextPhraseOrItis1.
type tempTextPhraseOrItis1  struct {
    Item *Item2 `json:"item"`
}

func (t *tempTextPhraseOrItis1) validate() error {
    var errs []string
    if t.Item == nil {
        errs = append(errs, "required field `item` is missing for type `TextPhraseOrITIS1`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
