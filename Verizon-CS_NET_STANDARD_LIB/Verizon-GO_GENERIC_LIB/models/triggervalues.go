/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
    "log"
    "time"
)

// Triggervalues represents a Triggervalues struct.
type Triggervalues struct {
    TriggerId            *string                `json:"triggerId,omitempty"`
    TriggerName          *string                `json:"triggerName,omitempty"`
    AccountName          *string                `json:"accountName,omitempty"`
    OrganizationName     *string                `json:"organizationName,omitempty"`
    TriggerCategory      *string                `json:"triggerCategory,omitempty"`
    TriggerAttributes    []KeysChunk            `json:"triggerAttributes,omitempty"`
    CreatedAt            *time.Time             `json:"createdAt,omitempty"`
    ModifiedAt           *time.Time             `json:"modifiedAt,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for Triggervalues,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (t Triggervalues) String() string {
    return fmt.Sprintf(
    	"Triggervalues[TriggerId=%v, TriggerName=%v, AccountName=%v, OrganizationName=%v, TriggerCategory=%v, TriggerAttributes=%v, CreatedAt=%v, ModifiedAt=%v, AdditionalProperties=%v]",
    	t.TriggerId, t.TriggerName, t.AccountName, t.OrganizationName, t.TriggerCategory, t.TriggerAttributes, t.CreatedAt, t.ModifiedAt, t.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for Triggervalues.
// It customizes the JSON marshaling process for Triggervalues objects.
func (t Triggervalues) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(t.AdditionalProperties,
        "triggerId", "triggerName", "accountName", "organizationName", "triggerCategory", "triggerAttributes", "createdAt", "modifiedAt"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(t.toMap())
}

// toMap converts the Triggervalues object to a map representation for JSON marshaling.
func (t Triggervalues) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, t.AdditionalProperties)
    if t.TriggerId != nil {
        structMap["triggerId"] = t.TriggerId
    }
    if t.TriggerName != nil {
        structMap["triggerName"] = t.TriggerName
    }
    if t.AccountName != nil {
        structMap["accountName"] = t.AccountName
    }
    if t.OrganizationName != nil {
        structMap["organizationName"] = t.OrganizationName
    }
    if t.TriggerCategory != nil {
        structMap["triggerCategory"] = t.TriggerCategory
    }
    if t.TriggerAttributes != nil {
        structMap["triggerAttributes"] = t.TriggerAttributes
    }
    if t.CreatedAt != nil {
        structMap["createdAt"] = t.CreatedAt.Format(time.RFC3339)
    }
    if t.ModifiedAt != nil {
        structMap["modifiedAt"] = t.ModifiedAt.Format(time.RFC3339)
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Triggervalues.
// It customizes the JSON unmarshaling process for Triggervalues objects.
func (t *Triggervalues) UnmarshalJSON(input []byte) error {
    var temp tempTriggervalues
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "triggerId", "triggerName", "accountName", "organizationName", "triggerCategory", "triggerAttributes", "createdAt", "modifiedAt")
    if err != nil {
    	return err
    }
    t.AdditionalProperties = additionalProperties
    
    t.TriggerId = temp.TriggerId
    t.TriggerName = temp.TriggerName
    t.AccountName = temp.AccountName
    t.OrganizationName = temp.OrganizationName
    t.TriggerCategory = temp.TriggerCategory
    t.TriggerAttributes = temp.TriggerAttributes
    if temp.CreatedAt != nil {
        CreatedAtVal, err := time.Parse(time.RFC3339, *temp.CreatedAt)
        if err != nil {
            log.Fatalf("Cannot Parse createdAt as % s format.", time.RFC3339)
        }
        t.CreatedAt = &CreatedAtVal
    }
    if temp.ModifiedAt != nil {
        ModifiedAtVal, err := time.Parse(time.RFC3339, *temp.ModifiedAt)
        if err != nil {
            log.Fatalf("Cannot Parse modifiedAt as % s format.", time.RFC3339)
        }
        t.ModifiedAt = &ModifiedAtVal
    }
    return nil
}

// tempTriggervalues is a temporary struct used for validating the fields of Triggervalues.
type tempTriggervalues  struct {
    TriggerId         *string     `json:"triggerId,omitempty"`
    TriggerName       *string     `json:"triggerName,omitempty"`
    AccountName       *string     `json:"accountName,omitempty"`
    OrganizationName  *string     `json:"organizationName,omitempty"`
    TriggerCategory   *string     `json:"triggerCategory,omitempty"`
    TriggerAttributes []KeysChunk `json:"triggerAttributes,omitempty"`
    CreatedAt         *string     `json:"createdAt,omitempty"`
    ModifiedAt        *string     `json:"modifiedAt,omitempty"`
}
