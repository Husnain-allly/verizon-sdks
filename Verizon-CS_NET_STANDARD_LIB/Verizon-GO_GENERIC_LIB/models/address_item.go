/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// AddressItem represents a AddressItem struct.
// Address details.
type AddressItem struct {
    // Street Address.
    AddressLine1 *string `json:"addressLine1,omitempty"`
    // Optional address information.
    AddressLine2 *string `json:"addressLine2,omitempty"`
    // Name of the city.
    City         *string `json:"city,omitempty"`
    // State code.
    State        *string `json:"state,omitempty"`
    // Country.
    Country      *string `json:"country,omitempty"`
    // Five digit zipcode.
    Zip          *string `json:"zip,omitempty"`
    // Four digit zip code.
    Zip4         *string `json:"zip4,omitempty"`
}

// String implements the fmt.Stringer interface for AddressItem,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a AddressItem) String() string {
    return fmt.Sprintf(
    	"AddressItem[AddressLine1=%v, AddressLine2=%v, City=%v, State=%v, Country=%v, Zip=%v, Zip4=%v]",
    	a.AddressLine1, a.AddressLine2, a.City, a.State, a.Country, a.Zip, a.Zip4)
}

// MarshalJSON implements the json.Marshaler interface for AddressItem.
// It customizes the JSON marshaling process for AddressItem objects.
func (a AddressItem) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(a.toMap())
}

// toMap converts the AddressItem object to a map representation for JSON marshaling.
func (a AddressItem) toMap() map[string]any {
    structMap := make(map[string]any)
    if a.AddressLine1 != nil {
        structMap["addressLine1"] = a.AddressLine1
    }
    if a.AddressLine2 != nil {
        structMap["addressLine2"] = a.AddressLine2
    }
    if a.City != nil {
        structMap["city"] = a.City
    }
    if a.State != nil {
        structMap["state"] = a.State
    }
    if a.Country != nil {
        structMap["country"] = a.Country
    }
    if a.Zip != nil {
        structMap["zip"] = a.Zip
    }
    if a.Zip4 != nil {
        structMap["zip4"] = a.Zip4
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for AddressItem.
// It customizes the JSON unmarshaling process for AddressItem objects.
func (a *AddressItem) UnmarshalJSON(input []byte) error {
    var temp tempAddressItem
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    
    a.AddressLine1 = temp.AddressLine1
    a.AddressLine2 = temp.AddressLine2
    a.City = temp.City
    a.State = temp.State
    a.Country = temp.Country
    a.Zip = temp.Zip
    a.Zip4 = temp.Zip4
    return nil
}

// tempAddressItem is a temporary struct used for validating the fields of AddressItem.
type tempAddressItem  struct {
    AddressLine1 *string `json:"addressLine1,omitempty"`
    AddressLine2 *string `json:"addressLine2,omitempty"`
    City         *string `json:"city,omitempty"`
    State        *string `json:"state,omitempty"`
    Country      *string `json:"country,omitempty"`
    Zip          *string `json:"zip,omitempty"`
    Zip4         *string `json:"zip4,omitempty"`
}
