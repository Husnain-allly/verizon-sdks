/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
)

// DataFrameMsgId represents a DataFrameMsgId struct.
// This is a container for one-of cases.
type DataFrameMsgId struct {
    value    any
    isMsgId  bool
    isMsgId1 bool
}

// String implements the fmt.Stringer interface for DataFrameMsgId,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DataFrameMsgId) String() string {
    return fmt.Sprintf("%v", d.value)
}

// MarshalJSON implements the json.Marshaler interface for DataFrameMsgId.
// It customizes the JSON marshaling process for DataFrameMsgId objects.
func (d DataFrameMsgId) MarshalJSON() (
    []byte,
    error) {
    if d.value == nil {
        return nil, errors.New("No underlying type is set. Please use any of the `models.DataFrameMsgIdContainer.From*` functions to initialize the DataFrameMsgId object.")
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DataFrameMsgId object to a map representation for JSON marshaling.
func (d *DataFrameMsgId) toMap() any {
    switch obj := d.value.(type) {
    case *MsgId:
        return obj.toMap()
    case *MsgId1:
        return obj.toMap()
    }
    return nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for DataFrameMsgId.
// It customizes the JSON unmarshaling process for DataFrameMsgId objects.
func (d *DataFrameMsgId) UnmarshalJSON(input []byte) error {
    result, err := UnmarshallOneOf(input,
        NewTypeHolder(&MsgId{}, false, &d.isMsgId),
        NewTypeHolder(&MsgId1{}, false, &d.isMsgId1),
    )
    
    d.value = result
    return err
}

func (d *DataFrameMsgId) AsMsgId() (
    *MsgId,
    bool) {
    if !d.isMsgId {
        return nil, false
    }
    return d.value.(*MsgId), true
}

func (d *DataFrameMsgId) AsMsgId1() (
    *MsgId1,
    bool) {
    if !d.isMsgId1 {
        return nil, false
    }
    return d.value.(*MsgId1), true
}

// internalDataFrameMsgId represents a dataFrameMsgId struct.
// This is a container for one-of cases.
type internalDataFrameMsgId struct {}

var DataFrameMsgIdContainer internalDataFrameMsgId

// The internalDataFrameMsgId instance, wrapping the provided MsgId value.
func (d *internalDataFrameMsgId) FromMsgId(val MsgId) DataFrameMsgId {
    return DataFrameMsgId{value: &val}
}

// The internalDataFrameMsgId instance, wrapping the provided MsgId1 value.
func (d *internalDataFrameMsgId) FromMsgId1(val MsgId1) DataFrameMsgId {
    return DataFrameMsgId{value: &val}
}
