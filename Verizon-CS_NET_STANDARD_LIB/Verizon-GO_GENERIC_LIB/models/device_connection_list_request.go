/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// DeviceConnectionListRequest represents a DeviceConnectionListRequest struct.
// Request to list of network connection events for a device during a specified time period.
type DeviceConnectionListRequest struct {
    // An identifier for a single device.
    DeviceId             DeviceId               `json:"deviceId"`
    // The earliest date and time for which you want connection events.
    Earliest             string                 `json:"earliest"`
    // The last date and time for which you want connection events.
    Latest               string                 `json:"latest"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceConnectionListRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceConnectionListRequest) String() string {
    return fmt.Sprintf(
    	"DeviceConnectionListRequest[DeviceId=%v, Earliest=%v, Latest=%v, AdditionalProperties=%v]",
    	d.DeviceId, d.Earliest, d.Latest, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceConnectionListRequest.
// It customizes the JSON marshaling process for DeviceConnectionListRequest objects.
func (d DeviceConnectionListRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "deviceId", "earliest", "latest"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceConnectionListRequest object to a map representation for JSON marshaling.
func (d DeviceConnectionListRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    structMap["deviceId"] = d.DeviceId.toMap()
    structMap["earliest"] = d.Earliest
    structMap["latest"] = d.Latest
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceConnectionListRequest.
// It customizes the JSON unmarshaling process for DeviceConnectionListRequest objects.
func (d *DeviceConnectionListRequest) UnmarshalJSON(input []byte) error {
    var temp tempDeviceConnectionListRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceId", "earliest", "latest")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.DeviceId = *temp.DeviceId
    d.Earliest = *temp.Earliest
    d.Latest = *temp.Latest
    return nil
}

// tempDeviceConnectionListRequest is a temporary struct used for validating the fields of DeviceConnectionListRequest.
type tempDeviceConnectionListRequest  struct {
    DeviceId *DeviceId `json:"deviceId"`
    Earliest *string   `json:"earliest"`
    Latest   *string   `json:"latest"`
}

func (d *tempDeviceConnectionListRequest) validate() error {
    var errs []string
    if d.DeviceId == nil {
        errs = append(errs, "required field `deviceId` is missing for type `DeviceConnectionListRequest`")
    }
    if d.Earliest == nil {
        errs = append(errs, "required field `earliest` is missing for type `DeviceConnectionListRequest`")
    }
    if d.Latest == nil {
        errs = append(errs, "required field `latest` is missing for type `DeviceConnectionListRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
