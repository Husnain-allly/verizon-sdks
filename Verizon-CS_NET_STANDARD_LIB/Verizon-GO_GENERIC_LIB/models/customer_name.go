/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// CustomerName represents a CustomerName struct.
// The customer name to be used for line usage taxation.
type CustomerName struct {
    // An optional title for the customer, such as “Mr.” or “Dr.”
    Title                *string                `json:"title,omitempty"`
    // The customer's first name.
    FirstName            string                 `json:"firstName"`
    // The customer's middle name.
    MiddleName           *string                `json:"middleName,omitempty"`
    // The customer's last name.
    LastName             string                 `json:"lastName"`
    // An optional suffix for the customer name, such as “Jr.” or “III.”
    Suffix               *string                `json:"suffix,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for CustomerName,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c CustomerName) String() string {
    return fmt.Sprintf(
    	"CustomerName[Title=%v, FirstName=%v, MiddleName=%v, LastName=%v, Suffix=%v, AdditionalProperties=%v]",
    	c.Title, c.FirstName, c.MiddleName, c.LastName, c.Suffix, c.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for CustomerName.
// It customizes the JSON marshaling process for CustomerName objects.
func (c CustomerName) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(c.AdditionalProperties,
        "title", "firstName", "middleName", "lastName", "suffix"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(c.toMap())
}

// toMap converts the CustomerName object to a map representation for JSON marshaling.
func (c CustomerName) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, c.AdditionalProperties)
    if c.Title != nil {
        structMap["title"] = c.Title
    }
    structMap["firstName"] = c.FirstName
    if c.MiddleName != nil {
        structMap["middleName"] = c.MiddleName
    }
    structMap["lastName"] = c.LastName
    if c.Suffix != nil {
        structMap["suffix"] = c.Suffix
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for CustomerName.
// It customizes the JSON unmarshaling process for CustomerName objects.
func (c *CustomerName) UnmarshalJSON(input []byte) error {
    var temp tempCustomerName
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "title", "firstName", "middleName", "lastName", "suffix")
    if err != nil {
    	return err
    }
    c.AdditionalProperties = additionalProperties
    
    c.Title = temp.Title
    c.FirstName = *temp.FirstName
    c.MiddleName = temp.MiddleName
    c.LastName = *temp.LastName
    c.Suffix = temp.Suffix
    return nil
}

// tempCustomerName is a temporary struct used for validating the fields of CustomerName.
type tempCustomerName  struct {
    Title      *string `json:"title,omitempty"`
    FirstName  *string `json:"firstName"`
    MiddleName *string `json:"middleName,omitempty"`
    LastName   *string `json:"lastName"`
    Suffix     *string `json:"suffix,omitempty"`
}

func (c *tempCustomerName) validate() error {
    var errs []string
    if c.FirstName == nil {
        errs = append(errs, "required field `firstName` is missing for type `CustomerName`")
    }
    if c.LastName == nil {
        errs = append(errs, "required field `lastName` is missing for type `CustomerName`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
