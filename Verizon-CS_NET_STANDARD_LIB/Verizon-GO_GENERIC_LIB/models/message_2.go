/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// Message2 represents a Message2 struct.
type Message2 struct {
    // Defines whether the message is private or public.
    // Private messages are published under the Vendor ID defined in the configuration and only visible to devices of selected vendors.
    // Public messages are published under the Public vendor and are visible to all the users.
    IsPrivate            bool                   `json:"isPrivate"`
    // Type of the Road User.
    RoadUserType         []RoadUserTypes        `json:"roadUserType"`
    // Trigger conditions that define on which road user action the message will be sent. If multiple Trigger Conditions are defined any of them will trigger the message.
    TriggerConditions    []TriggerCondition     `json:"triggerConditions"`
    // List of limitations. These limitations can be used for making the trigger condition more precise by defining speed and motion direction requirements to be met before the messages are sent out.
    Limits               []Limits               `json:"limits,omitempty"`
    // Type of the distribution.
    DistributionType     []DistributionTypes    `json:"distributionType,omitempty"`
    // The distribution schedule parameters for broadcast messages.
    DistributionSchedule *DistributionSchedule  `json:"distributionSchedule,omitempty"`
    SaeInfo              SaeInfo                `json:"saeInfo"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for Message2,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (m Message2) String() string {
    return fmt.Sprintf(
    	"Message2[IsPrivate=%v, RoadUserType=%v, TriggerConditions=%v, Limits=%v, DistributionType=%v, DistributionSchedule=%v, SaeInfo=%v, AdditionalProperties=%v]",
    	m.IsPrivate, m.RoadUserType, m.TriggerConditions, m.Limits, m.DistributionType, m.DistributionSchedule, m.SaeInfo, m.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for Message2.
// It customizes the JSON marshaling process for Message2 objects.
func (m Message2) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(m.AdditionalProperties,
        "isPrivate", "roadUserType", "triggerConditions", "limits", "distributionType", "distributionSchedule", "saeInfo"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(m.toMap())
}

// toMap converts the Message2 object to a map representation for JSON marshaling.
func (m Message2) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, m.AdditionalProperties)
    structMap["isPrivate"] = m.IsPrivate
    structMap["roadUserType"] = m.RoadUserType
    structMap["triggerConditions"] = m.TriggerConditions
    if m.Limits != nil {
        structMap["limits"] = m.Limits
    }
    if m.DistributionType != nil {
        structMap["distributionType"] = m.DistributionType
    }
    if m.DistributionSchedule != nil {
        structMap["distributionSchedule"] = m.DistributionSchedule.toMap()
    }
    structMap["saeInfo"] = m.SaeInfo.toMap()
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Message2.
// It customizes the JSON unmarshaling process for Message2 objects.
func (m *Message2) UnmarshalJSON(input []byte) error {
    var temp tempMessage2
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "isPrivate", "roadUserType", "triggerConditions", "limits", "distributionType", "distributionSchedule", "saeInfo")
    if err != nil {
    	return err
    }
    m.AdditionalProperties = additionalProperties
    
    m.IsPrivate = *temp.IsPrivate
    m.RoadUserType = *temp.RoadUserType
    m.TriggerConditions = *temp.TriggerConditions
    m.Limits = temp.Limits
    m.DistributionType = temp.DistributionType
    m.DistributionSchedule = temp.DistributionSchedule
    m.SaeInfo = *temp.SaeInfo
    return nil
}

// tempMessage2 is a temporary struct used for validating the fields of Message2.
type tempMessage2  struct {
    IsPrivate            *bool                 `json:"isPrivate"`
    RoadUserType         *[]RoadUserTypes      `json:"roadUserType"`
    TriggerConditions    *[]TriggerCondition   `json:"triggerConditions"`
    Limits               []Limits              `json:"limits,omitempty"`
    DistributionType     []DistributionTypes   `json:"distributionType,omitempty"`
    DistributionSchedule *DistributionSchedule `json:"distributionSchedule,omitempty"`
    SaeInfo              *SaeInfo              `json:"saeInfo"`
}

func (m *tempMessage2) validate() error {
    var errs []string
    if m.IsPrivate == nil {
        errs = append(errs, "required field `isPrivate` is missing for type `Message2`")
    }
    if m.RoadUserType == nil {
        errs = append(errs, "required field `roadUserType` is missing for type `Message2`")
    }
    if m.TriggerConditions == nil {
        errs = append(errs, "required field `triggerConditions` is missing for type `Message2`")
    }
    if m.SaeInfo == nil {
        errs = append(errs, "required field `saeInfo` is missing for type `Message2`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
