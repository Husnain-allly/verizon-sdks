/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// FotaV3Subscription represents a FotaV3Subscription struct.
// Information for licenses applied to devices.
type FotaV3Subscription struct {
    // Account identifier in "##########-#####".
    AccountName          *string                `json:"accountName,omitempty"`
    // Subscription models used by the account.
    PurchaseType         *string                `json:"purchaseType,omitempty"`
    // Number of monthly licenses in an MRC subscription.
    LicenseCount         *int                   `json:"licenseCount,omitempty"`
    // Number of licenses currently assigned to devices.
    LicenseUsedCount     *int                   `json:"licenseUsedCount,omitempty"`
    // The date and time of when the subscription was last updated.
    UpdateTime           *string                `json:"updateTime,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for FotaV3Subscription,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (f FotaV3Subscription) String() string {
    return fmt.Sprintf(
    	"FotaV3Subscription[AccountName=%v, PurchaseType=%v, LicenseCount=%v, LicenseUsedCount=%v, UpdateTime=%v, AdditionalProperties=%v]",
    	f.AccountName, f.PurchaseType, f.LicenseCount, f.LicenseUsedCount, f.UpdateTime, f.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for FotaV3Subscription.
// It customizes the JSON marshaling process for FotaV3Subscription objects.
func (f FotaV3Subscription) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(f.AdditionalProperties,
        "accountName", "purchaseType", "licenseCount", "licenseUsedCount", "updateTime"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(f.toMap())
}

// toMap converts the FotaV3Subscription object to a map representation for JSON marshaling.
func (f FotaV3Subscription) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, f.AdditionalProperties)
    if f.AccountName != nil {
        structMap["accountName"] = f.AccountName
    }
    if f.PurchaseType != nil {
        structMap["purchaseType"] = f.PurchaseType
    }
    if f.LicenseCount != nil {
        structMap["licenseCount"] = f.LicenseCount
    }
    if f.LicenseUsedCount != nil {
        structMap["licenseUsedCount"] = f.LicenseUsedCount
    }
    if f.UpdateTime != nil {
        structMap["updateTime"] = f.UpdateTime
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for FotaV3Subscription.
// It customizes the JSON unmarshaling process for FotaV3Subscription objects.
func (f *FotaV3Subscription) UnmarshalJSON(input []byte) error {
    var temp tempFotaV3Subscription
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "purchaseType", "licenseCount", "licenseUsedCount", "updateTime")
    if err != nil {
    	return err
    }
    f.AdditionalProperties = additionalProperties
    
    f.AccountName = temp.AccountName
    f.PurchaseType = temp.PurchaseType
    f.LicenseCount = temp.LicenseCount
    f.LicenseUsedCount = temp.LicenseUsedCount
    f.UpdateTime = temp.UpdateTime
    return nil
}

// tempFotaV3Subscription is a temporary struct used for validating the fields of FotaV3Subscription.
type tempFotaV3Subscription  struct {
    AccountName      *string `json:"accountName,omitempty"`
    PurchaseType     *string `json:"purchaseType,omitempty"`
    LicenseCount     *int    `json:"licenseCount,omitempty"`
    LicenseUsedCount *int    `json:"licenseUsedCount,omitempty"`
    UpdateTime       *string `json:"updateTime,omitempty"`
}
