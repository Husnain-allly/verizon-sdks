/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
)

// DeactivateDeviceListIds represents a DeactivateDeviceListIds struct.
// This is Array of a container for any-of cases.
type DeactivateDeviceListIds struct {
    value              any
    isDeviceId         bool
    isPropertyDeviceId bool
}

// String implements the fmt.Stringer interface for DeactivateDeviceListIds,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeactivateDeviceListIds) String() string {
    return fmt.Sprintf("%v", d.value)
}

// MarshalJSON implements the json.Marshaler interface for DeactivateDeviceListIds.
// It customizes the JSON marshaling process for DeactivateDeviceListIds objects.
func (d DeactivateDeviceListIds) MarshalJSON() (
    []byte,
    error) {
    if d.value == nil {
        return nil, errors.New("No underlying type is set. Please use any of the `models.DeactivateDeviceListIdsContainer.From*` functions to initialize the DeactivateDeviceListIds object.")
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeactivateDeviceListIds object to a map representation for JSON marshaling.
func (d *DeactivateDeviceListIds) toMap() any {
    switch obj := d.value.(type) {
    case *DeviceId:
        return obj.toMap()
    case *PropertyDeviceId:
        return obj.toMap()
    }
    return nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeactivateDeviceListIds.
// It customizes the JSON unmarshaling process for DeactivateDeviceListIds objects.
func (d *DeactivateDeviceListIds) UnmarshalJSON(input []byte) error {
    result, err := UnmarshallAnyOf(input,
        NewTypeHolder(&DeviceId{}, false, &d.isDeviceId),
        NewTypeHolder(&PropertyDeviceId{}, false, &d.isPropertyDeviceId),
    )
    
    d.value = result
    return err
}

func (d *DeactivateDeviceListIds) AsDeviceId() (
    *DeviceId,
    bool) {
    if !d.isDeviceId {
        return nil, false
    }
    return d.value.(*DeviceId), true
}

func (d *DeactivateDeviceListIds) AsPropertyDeviceId() (
    *PropertyDeviceId,
    bool) {
    if !d.isPropertyDeviceId {
        return nil, false
    }
    return d.value.(*PropertyDeviceId), true
}

// internalDeactivateDeviceListIds represents a deactivateDeviceListIds struct.
// This is Array of a container for any-of cases.
type internalDeactivateDeviceListIds struct {}

var DeactivateDeviceListIdsContainer internalDeactivateDeviceListIds

// The internalDeactivateDeviceListIds instance, wrapping the provided DeviceId value.
func (d *internalDeactivateDeviceListIds) FromDeviceId(val DeviceId) DeactivateDeviceListIds {
    return DeactivateDeviceListIds{value: &val}
}

// The internalDeactivateDeviceListIds instance, wrapping the provided PropertyDeviceId value.
func (d *internalDeactivateDeviceListIds) FromPropertyDeviceId(val PropertyDeviceId) DeactivateDeviceListIds {
    return DeactivateDeviceListIds{value: &val}
}
