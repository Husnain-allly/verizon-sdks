/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// DeviceLoggingStatus represents a DeviceLoggingStatus struct.
// Device logging status information.
type DeviceLoggingStatus struct {
    // Device IMEI.
    DeviceId             string                 `json:"deviceId"`
    // The date when device logging expires.
    ExpiryDate           time.Time              `json:"expiryDate"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceLoggingStatus,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceLoggingStatus) String() string {
    return fmt.Sprintf(
    	"DeviceLoggingStatus[DeviceId=%v, ExpiryDate=%v, AdditionalProperties=%v]",
    	d.DeviceId, d.ExpiryDate, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceLoggingStatus.
// It customizes the JSON marshaling process for DeviceLoggingStatus objects.
func (d DeviceLoggingStatus) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "deviceId", "expiryDate"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceLoggingStatus object to a map representation for JSON marshaling.
func (d DeviceLoggingStatus) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    structMap["deviceId"] = d.DeviceId
    structMap["expiryDate"] = d.ExpiryDate.Format(DEFAULT_DATE)
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceLoggingStatus.
// It customizes the JSON unmarshaling process for DeviceLoggingStatus objects.
func (d *DeviceLoggingStatus) UnmarshalJSON(input []byte) error {
    var temp tempDeviceLoggingStatus
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceId", "expiryDate")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.DeviceId = *temp.DeviceId
    ExpiryDateVal, err := time.Parse(DEFAULT_DATE, *temp.ExpiryDate)
    if err != nil {
        log.Fatalf("Cannot Parse expiryDate as % s format.", DEFAULT_DATE)
    }
    d.ExpiryDate = ExpiryDateVal
    return nil
}

// tempDeviceLoggingStatus is a temporary struct used for validating the fields of DeviceLoggingStatus.
type tempDeviceLoggingStatus  struct {
    DeviceId   *string `json:"deviceId"`
    ExpiryDate *string `json:"expiryDate"`
}

func (d *tempDeviceLoggingStatus) validate() error {
    var errs []string
    if d.DeviceId == nil {
        errs = append(errs, "required field `deviceId` is missing for type `DeviceLoggingStatus`")
    }
    if d.ExpiryDate == nil {
        errs = append(errs, "required field `expiryDate` is missing for type `DeviceLoggingStatus`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
