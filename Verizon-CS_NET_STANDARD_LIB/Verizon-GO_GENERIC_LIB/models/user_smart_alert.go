/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// UserSmartAlert represents a UserSmartAlert struct.
type UserSmartAlert struct {
    // Not used in this release, future functionality
    Accountclientid  *string   `json:"accountclientid,omitempty"`
    // The billing account ID. This is the same value as the Account ID
    Billingaccountid *string   `json:"billingaccountid,omitempty"`
    // The type of alert and will be either `telemetry` or `infrastructure`
    Category         *string   `json:"category,omitempty"`
    // The condition or threshold for an alert
    Condition        *int      `json:"condition,omitempty"`
    // Timestamp of the record
    Createdon        time.Time `json:"createdon"`
    // a short description
    Description      *string   `json:"description,omitempty"`
    // This is a UUID value of the device created when the device is onboarded
    Deviceid         *string   `json:"deviceid,omitempty"`
    // UUID of the ECPD account the user belongs to
    Foreignid        *string   `json:"foreignid,omitempty"`
    // UUID of the user record, assigned at creation
    Id               *string   `json:"id,omitempty"`
    // A flag that indicates if the alarm has been acknowledged
    Isacknowledged   *bool     `json:"isacknowledged,omitempty"`
    // A flag that indicates if the alarm has been cleared
    Iscleared        *bool     `json:"iscleared,omitempty"`
    // A flag that indicates if the alarm has been disabled
    Isdisabled       *bool     `json:"isdisabled,omitempty"`
    // Timestamp of the record
    Lastupdated      time.Time `json:"lastupdated"`
    // User defined name of the record
    Name             *string   `json:"name,omitempty"`
    // The UUID of a rule for alerts
    Ruleid           *string   `json:"ruleid,omitempty"`
    // The threshold value to trigger an alert and will be Critical, Major or Minor
    Severity         *string   `json:"severity,omitempty"`
    // The current status of the device or transaction and will be `success` or `failed`
    State            *string   `json:"state,omitempty"`
    // template of the rule which triggered a given alert
    Template         *string   `json:"template,omitempty"`
    // The resource version
    Version          *string   `json:"version,omitempty"`
    // The UUID of the resource version
    Versionid        string    `json:"versionid"`
}

// String implements the fmt.Stringer interface for UserSmartAlert,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (u UserSmartAlert) String() string {
    return fmt.Sprintf(
    	"UserSmartAlert[Accountclientid=%v, Billingaccountid=%v, Category=%v, Condition=%v, Createdon=%v, Description=%v, Deviceid=%v, Foreignid=%v, Id=%v, Isacknowledged=%v, Iscleared=%v, Isdisabled=%v, Lastupdated=%v, Name=%v, Ruleid=%v, Severity=%v, State=%v, Template=%v, Version=%v, Versionid=%v]",
    	u.Accountclientid, u.Billingaccountid, u.Category, u.Condition, u.Createdon, u.Description, u.Deviceid, u.Foreignid, u.Id, u.Isacknowledged, u.Iscleared, u.Isdisabled, u.Lastupdated, u.Name, u.Ruleid, u.Severity, u.State, u.Template, u.Version, u.Versionid)
}

// MarshalJSON implements the json.Marshaler interface for UserSmartAlert.
// It customizes the JSON marshaling process for UserSmartAlert objects.
func (u UserSmartAlert) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(u.toMap())
}

// toMap converts the UserSmartAlert object to a map representation for JSON marshaling.
func (u UserSmartAlert) toMap() map[string]any {
    structMap := make(map[string]any)
    if u.Accountclientid != nil {
        structMap["accountclientid"] = u.Accountclientid
    }
    if u.Billingaccountid != nil {
        structMap["billingaccountid"] = u.Billingaccountid
    }
    if u.Category != nil {
        structMap["category"] = u.Category
    }
    if u.Condition != nil {
        structMap["condition"] = u.Condition
    }
    structMap["createdon"] = u.Createdon.Format(time.RFC3339)
    if u.Description != nil {
        structMap["description"] = u.Description
    }
    if u.Deviceid != nil {
        structMap["deviceid"] = u.Deviceid
    }
    if u.Foreignid != nil {
        structMap["foreignid"] = u.Foreignid
    }
    if u.Id != nil {
        structMap["id"] = u.Id
    }
    if u.Isacknowledged != nil {
        structMap["isacknowledged"] = u.Isacknowledged
    }
    if u.Iscleared != nil {
        structMap["iscleared"] = u.Iscleared
    }
    if u.Isdisabled != nil {
        structMap["isdisabled"] = u.Isdisabled
    }
    structMap["lastupdated"] = u.Lastupdated.Format(time.RFC3339)
    if u.Name != nil {
        structMap["name"] = u.Name
    }
    if u.Ruleid != nil {
        structMap["ruleid"] = u.Ruleid
    }
    if u.Severity != nil {
        structMap["severity"] = u.Severity
    }
    if u.State != nil {
        structMap["state"] = u.State
    }
    if u.Template != nil {
        structMap["template"] = u.Template
    }
    if u.Version != nil {
        structMap["version"] = u.Version
    }
    structMap["versionid"] = u.Versionid
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for UserSmartAlert.
// It customizes the JSON unmarshaling process for UserSmartAlert objects.
func (u *UserSmartAlert) UnmarshalJSON(input []byte) error {
    var temp tempUserSmartAlert
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    u.Accountclientid = temp.Accountclientid
    u.Billingaccountid = temp.Billingaccountid
    u.Category = temp.Category
    u.Condition = temp.Condition
    CreatedonVal, err := time.Parse(time.RFC3339, *temp.Createdon)
    if err != nil {
        log.Fatalf("Cannot Parse createdon as % s format.", time.RFC3339)
    }
    u.Createdon = CreatedonVal
    u.Description = temp.Description
    u.Deviceid = temp.Deviceid
    u.Foreignid = temp.Foreignid
    u.Id = temp.Id
    u.Isacknowledged = temp.Isacknowledged
    u.Iscleared = temp.Iscleared
    u.Isdisabled = temp.Isdisabled
    LastupdatedVal, err := time.Parse(time.RFC3339, *temp.Lastupdated)
    if err != nil {
        log.Fatalf("Cannot Parse lastupdated as % s format.", time.RFC3339)
    }
    u.Lastupdated = LastupdatedVal
    u.Name = temp.Name
    u.Ruleid = temp.Ruleid
    u.Severity = temp.Severity
    u.State = temp.State
    u.Template = temp.Template
    u.Version = temp.Version
    u.Versionid = *temp.Versionid
    return nil
}

// tempUserSmartAlert is a temporary struct used for validating the fields of UserSmartAlert.
type tempUserSmartAlert  struct {
    Accountclientid  *string `json:"accountclientid,omitempty"`
    Billingaccountid *string `json:"billingaccountid,omitempty"`
    Category         *string `json:"category,omitempty"`
    Condition        *int    `json:"condition,omitempty"`
    Createdon        *string `json:"createdon"`
    Description      *string `json:"description,omitempty"`
    Deviceid         *string `json:"deviceid,omitempty"`
    Foreignid        *string `json:"foreignid,omitempty"`
    Id               *string `json:"id,omitempty"`
    Isacknowledged   *bool   `json:"isacknowledged,omitempty"`
    Iscleared        *bool   `json:"iscleared,omitempty"`
    Isdisabled       *bool   `json:"isdisabled,omitempty"`
    Lastupdated      *string `json:"lastupdated"`
    Name             *string `json:"name,omitempty"`
    Ruleid           *string `json:"ruleid,omitempty"`
    Severity         *string `json:"severity,omitempty"`
    State            *string `json:"state,omitempty"`
    Template         *string `json:"template,omitempty"`
    Version          *string `json:"version,omitempty"`
    Versionid        *string `json:"versionid"`
}

func (u *tempUserSmartAlert) validate() error {
    var errs []string
    if u.Createdon == nil {
        errs = append(errs, "required field `createdon` is missing for type `user.SmartAlert`")
    }
    if u.Lastupdated == nil {
        errs = append(errs, "required field `lastupdated` is missing for type `user.SmartAlert`")
    }
    if u.Versionid == nil {
        errs = append(errs, "required field `versionid` is missing for type `user.SmartAlert`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
