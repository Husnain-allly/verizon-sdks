/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// V2AccountDevice represents a V2AccountDevice struct.
// Account device information.
type V2AccountDevice struct {
    // Device identifier.
    DeviceId             string                 `json:"deviceId"`
    // MDN.
    Mdn                  string                 `json:"mdn"`
    // Device model.
    Model                string                 `json:"model"`
    // Device make.
    Make                 string                 `json:"make"`
    // Device FOTA capable.
    FotaEligible         bool                   `json:"fotaEligible"`
    // Device application FOTA capable.
    AppFotaEligible      bool                   `json:"appFotaEligible"`
    // License assigned device.
    LicenseAssigned      bool                   `json:"licenseAssigned"`
    // LWM2M, OMD-DM or HTTP.
    DistributionType     string                 `json:"distributionType"`
    // List of sofware.
    SoftwareList         []V2SoftwareInfo       `json:"softwareList"`
    // The date and time of when the device is created.
    CreateTime           *string                `json:"createTime,omitempty"`
    // The date and time of when the device firmware or software is upgraded.
    UpgradeTime          *string                `json:"upgradeTime,omitempty"`
    // The date and time of when the device is updated.
    UpdateTime           *string                `json:"updateTime,omitempty"`
    // The date and time of when the device is refreshed.
    RefreshTime          *string                `json:"refreshTime,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for V2AccountDevice,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (v V2AccountDevice) String() string {
    return fmt.Sprintf(
    	"V2AccountDevice[DeviceId=%v, Mdn=%v, Model=%v, Make=%v, FotaEligible=%v, AppFotaEligible=%v, LicenseAssigned=%v, DistributionType=%v, SoftwareList=%v, CreateTime=%v, UpgradeTime=%v, UpdateTime=%v, RefreshTime=%v, AdditionalProperties=%v]",
    	v.DeviceId, v.Mdn, v.Model, v.Make, v.FotaEligible, v.AppFotaEligible, v.LicenseAssigned, v.DistributionType, v.SoftwareList, v.CreateTime, v.UpgradeTime, v.UpdateTime, v.RefreshTime, v.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for V2AccountDevice.
// It customizes the JSON marshaling process for V2AccountDevice objects.
func (v V2AccountDevice) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(v.AdditionalProperties,
        "deviceId", "mdn", "model", "make", "fotaEligible", "appFotaEligible", "licenseAssigned", "distributionType", "softwareList", "createTime", "upgradeTime", "updateTime", "refreshTime"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(v.toMap())
}

// toMap converts the V2AccountDevice object to a map representation for JSON marshaling.
func (v V2AccountDevice) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, v.AdditionalProperties)
    structMap["deviceId"] = v.DeviceId
    structMap["mdn"] = v.Mdn
    structMap["model"] = v.Model
    structMap["make"] = v.Make
    structMap["fotaEligible"] = v.FotaEligible
    structMap["appFotaEligible"] = v.AppFotaEligible
    structMap["licenseAssigned"] = v.LicenseAssigned
    structMap["distributionType"] = v.DistributionType
    structMap["softwareList"] = v.SoftwareList
    if v.CreateTime != nil {
        structMap["createTime"] = v.CreateTime
    }
    if v.UpgradeTime != nil {
        structMap["upgradeTime"] = v.UpgradeTime
    }
    if v.UpdateTime != nil {
        structMap["updateTime"] = v.UpdateTime
    }
    if v.RefreshTime != nil {
        structMap["refreshTime"] = v.RefreshTime
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for V2AccountDevice.
// It customizes the JSON unmarshaling process for V2AccountDevice objects.
func (v *V2AccountDevice) UnmarshalJSON(input []byte) error {
    var temp tempV2AccountDevice
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceId", "mdn", "model", "make", "fotaEligible", "appFotaEligible", "licenseAssigned", "distributionType", "softwareList", "createTime", "upgradeTime", "updateTime", "refreshTime")
    if err != nil {
    	return err
    }
    v.AdditionalProperties = additionalProperties
    
    v.DeviceId = *temp.DeviceId
    v.Mdn = *temp.Mdn
    v.Model = *temp.Model
    v.Make = *temp.Make
    v.FotaEligible = *temp.FotaEligible
    v.AppFotaEligible = *temp.AppFotaEligible
    v.LicenseAssigned = *temp.LicenseAssigned
    v.DistributionType = *temp.DistributionType
    v.SoftwareList = *temp.SoftwareList
    v.CreateTime = temp.CreateTime
    v.UpgradeTime = temp.UpgradeTime
    v.UpdateTime = temp.UpdateTime
    v.RefreshTime = temp.RefreshTime
    return nil
}

// tempV2AccountDevice is a temporary struct used for validating the fields of V2AccountDevice.
type tempV2AccountDevice  struct {
    DeviceId         *string           `json:"deviceId"`
    Mdn              *string           `json:"mdn"`
    Model            *string           `json:"model"`
    Make             *string           `json:"make"`
    FotaEligible     *bool             `json:"fotaEligible"`
    AppFotaEligible  *bool             `json:"appFotaEligible"`
    LicenseAssigned  *bool             `json:"licenseAssigned"`
    DistributionType *string           `json:"distributionType"`
    SoftwareList     *[]V2SoftwareInfo `json:"softwareList"`
    CreateTime       *string           `json:"createTime,omitempty"`
    UpgradeTime      *string           `json:"upgradeTime,omitempty"`
    UpdateTime       *string           `json:"updateTime,omitempty"`
    RefreshTime      *string           `json:"refreshTime,omitempty"`
}

func (v *tempV2AccountDevice) validate() error {
    var errs []string
    if v.DeviceId == nil {
        errs = append(errs, "required field `deviceId` is missing for type `V2AccountDevice`")
    }
    if v.Mdn == nil {
        errs = append(errs, "required field `mdn` is missing for type `V2AccountDevice`")
    }
    if v.Model == nil {
        errs = append(errs, "required field `model` is missing for type `V2AccountDevice`")
    }
    if v.Make == nil {
        errs = append(errs, "required field `make` is missing for type `V2AccountDevice`")
    }
    if v.FotaEligible == nil {
        errs = append(errs, "required field `fotaEligible` is missing for type `V2AccountDevice`")
    }
    if v.AppFotaEligible == nil {
        errs = append(errs, "required field `appFotaEligible` is missing for type `V2AccountDevice`")
    }
    if v.LicenseAssigned == nil {
        errs = append(errs, "required field `licenseAssigned` is missing for type `V2AccountDevice`")
    }
    if v.DistributionType == nil {
        errs = append(errs, "required field `distributionType` is missing for type `V2AccountDevice`")
    }
    if v.SoftwareList == nil {
        errs = append(errs, "required field `softwareList` is missing for type `V2AccountDevice`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
