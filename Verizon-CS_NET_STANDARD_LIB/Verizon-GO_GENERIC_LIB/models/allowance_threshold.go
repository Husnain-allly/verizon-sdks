/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// AllowanceThreshold represents a AllowanceThreshold struct.
type AllowanceThreshold struct {
    Percentage50         *bool                  `json:"percentage50,omitempty"`
    Percentage75         *bool                  `json:"percentage75,omitempty"`
    Percentage90         *bool                  `json:"percentage90,omitempty"`
    Percentage100        *bool                  `json:"percentage100,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for AllowanceThreshold,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a AllowanceThreshold) String() string {
    return fmt.Sprintf(
    	"AllowanceThreshold[Percentage50=%v, Percentage75=%v, Percentage90=%v, Percentage100=%v, AdditionalProperties=%v]",
    	a.Percentage50, a.Percentage75, a.Percentage90, a.Percentage100, a.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for AllowanceThreshold.
// It customizes the JSON marshaling process for AllowanceThreshold objects.
func (a AllowanceThreshold) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(a.AdditionalProperties,
        "percentage50", "percentage75", "percentage90", "percentage100"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(a.toMap())
}

// toMap converts the AllowanceThreshold object to a map representation for JSON marshaling.
func (a AllowanceThreshold) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, a.AdditionalProperties)
    if a.Percentage50 != nil {
        structMap["percentage50"] = a.Percentage50
    }
    if a.Percentage75 != nil {
        structMap["percentage75"] = a.Percentage75
    }
    if a.Percentage90 != nil {
        structMap["percentage90"] = a.Percentage90
    }
    if a.Percentage100 != nil {
        structMap["percentage100"] = a.Percentage100
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for AllowanceThreshold.
// It customizes the JSON unmarshaling process for AllowanceThreshold objects.
func (a *AllowanceThreshold) UnmarshalJSON(input []byte) error {
    var temp tempAllowanceThreshold
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "percentage50", "percentage75", "percentage90", "percentage100")
    if err != nil {
    	return err
    }
    a.AdditionalProperties = additionalProperties
    
    a.Percentage50 = temp.Percentage50
    a.Percentage75 = temp.Percentage75
    a.Percentage90 = temp.Percentage90
    a.Percentage100 = temp.Percentage100
    return nil
}

// tempAllowanceThreshold is a temporary struct used for validating the fields of AllowanceThreshold.
type tempAllowanceThreshold  struct {
    Percentage50  *bool `json:"percentage50,omitempty"`
    Percentage75  *bool `json:"percentage75,omitempty"`
    Percentage90  *bool `json:"percentage90,omitempty"`
    Percentage100 *bool `json:"percentage100,omitempty"`
}
