/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// DeviceLocationCallback represents a DeviceLocationCallback struct.
type DeviceLocationCallback struct {
    // The name of the callback service.
    Name                 CallbackServiceName    `json:"name"`
    // The location of your callback listener.
    Url                  string                 `json:"url"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceLocationCallback,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceLocationCallback) String() string {
    return fmt.Sprintf(
    	"DeviceLocationCallback[Name=%v, Url=%v, AdditionalProperties=%v]",
    	d.Name, d.Url, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceLocationCallback.
// It customizes the JSON marshaling process for DeviceLocationCallback objects.
func (d DeviceLocationCallback) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "name", "url"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceLocationCallback object to a map representation for JSON marshaling.
func (d DeviceLocationCallback) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    structMap["name"] = d.Name
    structMap["url"] = d.Url
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceLocationCallback.
// It customizes the JSON unmarshaling process for DeviceLocationCallback objects.
func (d *DeviceLocationCallback) UnmarshalJSON(input []byte) error {
    var temp tempDeviceLocationCallback
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "name", "url")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.Name = *temp.Name
    d.Url = *temp.Url
    return nil
}

// tempDeviceLocationCallback is a temporary struct used for validating the fields of DeviceLocationCallback.
type tempDeviceLocationCallback  struct {
    Name *CallbackServiceName `json:"name"`
    Url  *string              `json:"url"`
}

func (d *tempDeviceLocationCallback) validate() error {
    var errs []string
    if d.Name == nil {
        errs = append(errs, "required field `name` is missing for type `DeviceLocationCallback`")
    }
    if d.Url == nil {
        errs = append(errs, "required field `url` is missing for type `DeviceLocationCallback`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
