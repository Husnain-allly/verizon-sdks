/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// ResourceRule represents a ResourceRule struct.
type ResourceRule struct {
    // Not used in this release, future functionality
    Accountclientid  *string     `json:"accountclientid,omitempty"`
    // The billing account ID. This is the same value as the Account ID
    Billingaccountid *string     `json:"billingaccountid,omitempty"`
    // Timestamp of the record
    Createdon        time.Time   `json:"createdon"`
    // a short description
    Description      *string     `json:"description,omitempty"`
    // This is a UUID value of the device created when the device is onboarded
    Deviceid         *string     `json:"deviceid,omitempty"`
    Disabled         *bool       `json:"disabled,omitempty"`
    // UUID of the ECPD account the user belongs to
    Foreignid        string      `json:"foreignid"`
    // UUID of the user record, assigned at creation
    Id               *string     `json:"id,omitempty"`
    // Timestamp of the record
    Lastupdated      time.Time   `json:"lastupdated"`
    // User defined name of the record
    Name             *string     `json:"name,omitempty"`
    Rulechain        interface{} `json:"rulechain"`
    // The syntax of the rule and supports camel and json style syntaxes
    Rulesyntax       *string     `json:"rulesyntax,omitempty"`
    // The resource version
    Version          *string     `json:"version,omitempty"`
    // The UUID of the resource version
    Versionid        string      `json:"versionid"`
}

// String implements the fmt.Stringer interface for ResourceRule,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (r ResourceRule) String() string {
    return fmt.Sprintf(
    	"ResourceRule[Accountclientid=%v, Billingaccountid=%v, Createdon=%v, Description=%v, Deviceid=%v, Disabled=%v, Foreignid=%v, Id=%v, Lastupdated=%v, Name=%v, Rulechain=%v, Rulesyntax=%v, Version=%v, Versionid=%v]",
    	r.Accountclientid, r.Billingaccountid, r.Createdon, r.Description, r.Deviceid, r.Disabled, r.Foreignid, r.Id, r.Lastupdated, r.Name, r.Rulechain, r.Rulesyntax, r.Version, r.Versionid)
}

// MarshalJSON implements the json.Marshaler interface for ResourceRule.
// It customizes the JSON marshaling process for ResourceRule objects.
func (r ResourceRule) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(r.toMap())
}

// toMap converts the ResourceRule object to a map representation for JSON marshaling.
func (r ResourceRule) toMap() map[string]any {
    structMap := make(map[string]any)
    if r.Accountclientid != nil {
        structMap["accountclientid"] = r.Accountclientid
    }
    if r.Billingaccountid != nil {
        structMap["billingaccountid"] = r.Billingaccountid
    }
    structMap["createdon"] = r.Createdon.Format(time.RFC3339)
    if r.Description != nil {
        structMap["description"] = r.Description
    }
    if r.Deviceid != nil {
        structMap["deviceid"] = r.Deviceid
    }
    if r.Disabled != nil {
        structMap["disabled"] = r.Disabled
    }
    structMap["foreignid"] = r.Foreignid
    if r.Id != nil {
        structMap["id"] = r.Id
    }
    structMap["lastupdated"] = r.Lastupdated.Format(time.RFC3339)
    if r.Name != nil {
        structMap["name"] = r.Name
    }
    structMap["rulechain"] = r.Rulechain
    if r.Rulesyntax != nil {
        structMap["rulesyntax"] = r.Rulesyntax
    }
    if r.Version != nil {
        structMap["version"] = r.Version
    }
    structMap["versionid"] = r.Versionid
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ResourceRule.
// It customizes the JSON unmarshaling process for ResourceRule objects.
func (r *ResourceRule) UnmarshalJSON(input []byte) error {
    var temp tempResourceRule
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    r.Accountclientid = temp.Accountclientid
    r.Billingaccountid = temp.Billingaccountid
    CreatedonVal, err := time.Parse(time.RFC3339, *temp.Createdon)
    if err != nil {
        log.Fatalf("Cannot Parse createdon as % s format.", time.RFC3339)
    }
    r.Createdon = CreatedonVal
    r.Description = temp.Description
    r.Deviceid = temp.Deviceid
    r.Disabled = temp.Disabled
    r.Foreignid = *temp.Foreignid
    r.Id = temp.Id
    LastupdatedVal, err := time.Parse(time.RFC3339, *temp.Lastupdated)
    if err != nil {
        log.Fatalf("Cannot Parse lastupdated as % s format.", time.RFC3339)
    }
    r.Lastupdated = LastupdatedVal
    r.Name = temp.Name
    r.Rulechain = *temp.Rulechain
    r.Rulesyntax = temp.Rulesyntax
    r.Version = temp.Version
    r.Versionid = *temp.Versionid
    return nil
}

// tempResourceRule is a temporary struct used for validating the fields of ResourceRule.
type tempResourceRule  struct {
    Accountclientid  *string      `json:"accountclientid,omitempty"`
    Billingaccountid *string      `json:"billingaccountid,omitempty"`
    Createdon        *string      `json:"createdon"`
    Description      *string      `json:"description,omitempty"`
    Deviceid         *string      `json:"deviceid,omitempty"`
    Disabled         *bool        `json:"disabled,omitempty"`
    Foreignid        *string      `json:"foreignid"`
    Id               *string      `json:"id,omitempty"`
    Lastupdated      *string      `json:"lastupdated"`
    Name             *string      `json:"name,omitempty"`
    Rulechain        *interface{} `json:"rulechain"`
    Rulesyntax       *string      `json:"rulesyntax,omitempty"`
    Version          *string      `json:"version,omitempty"`
    Versionid        *string      `json:"versionid"`
}

func (r *tempResourceRule) validate() error {
    var errs []string
    if r.Createdon == nil {
        errs = append(errs, "required field `createdon` is missing for type `resource.Rule`")
    }
    if r.Foreignid == nil {
        errs = append(errs, "required field `foreignid` is missing for type `resource.Rule`")
    }
    if r.Lastupdated == nil {
        errs = append(errs, "required field `lastupdated` is missing for type `resource.Rule`")
    }
    if r.Rulechain == nil {
        errs = append(errs, "required field `rulechain` is missing for type `resource.Rule`")
    }
    if r.Versionid == nil {
        errs = append(errs, "required field `versionid` is missing for type `resource.Rule`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
