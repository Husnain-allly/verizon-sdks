/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// CarrierDeactivateRequest represents a CarrierDeactivateRequest struct.
// Request to deactivate a carrier.
type CarrierDeactivateRequest struct {
    // The name of a billing account.
    AccountName             string                 `json:"accountName"`
    // The devices for which you want to deactivate service, specified by device identifier.
    Devices                 []AccountDeviceList    `json:"devices"`
    // Code identifying the reason for the deactivation. Currently the only valid reason code is “FF”, which corresponds to General Admin/Maintenance.
    ReasonCode              string                 `json:"reasonCode"`
    // Custom field names and values, if you want to only include devices that have matching values.
    CustomFields            []CustomFields         `json:"customFields,omitempty"`
    // Fees may be assessed for deactivating Verizon Wireless devices, depending on the account contract. The etfWaiver parameter waives the Early Termination Fee (ETF), if applicable.
    EtfWaiver               *bool                  `json:"etfWaiver,omitempty"`
    // The name of a device group, if you want to deactivate all devices in that group.
    GroupName               *string                `json:"groupName,omitempty"`
    // The name of a service plan, if you want to only include devices that have that service plan.
    ServicePlan             *string                `json:"servicePlan,omitempty"`
    DeleteAfterDeactivation *bool                  `json:"deleteAfterDeactivation,omitempty"`
    AdditionalProperties    map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for CarrierDeactivateRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c CarrierDeactivateRequest) String() string {
    return fmt.Sprintf(
    	"CarrierDeactivateRequest[AccountName=%v, Devices=%v, ReasonCode=%v, CustomFields=%v, EtfWaiver=%v, GroupName=%v, ServicePlan=%v, DeleteAfterDeactivation=%v, AdditionalProperties=%v]",
    	c.AccountName, c.Devices, c.ReasonCode, c.CustomFields, c.EtfWaiver, c.GroupName, c.ServicePlan, c.DeleteAfterDeactivation, c.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for CarrierDeactivateRequest.
// It customizes the JSON marshaling process for CarrierDeactivateRequest objects.
func (c CarrierDeactivateRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(c.AdditionalProperties,
        "accountName", "devices", "reasonCode", "customFields", "etfWaiver", "groupName", "servicePlan", "deleteAfterDeactivation"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(c.toMap())
}

// toMap converts the CarrierDeactivateRequest object to a map representation for JSON marshaling.
func (c CarrierDeactivateRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, c.AdditionalProperties)
    structMap["accountName"] = c.AccountName
    structMap["devices"] = c.Devices
    structMap["reasonCode"] = c.ReasonCode
    if c.CustomFields != nil {
        structMap["customFields"] = c.CustomFields
    }
    if c.EtfWaiver != nil {
        structMap["etfWaiver"] = c.EtfWaiver
    }
    if c.GroupName != nil {
        structMap["groupName"] = c.GroupName
    }
    if c.ServicePlan != nil {
        structMap["servicePlan"] = c.ServicePlan
    }
    if c.DeleteAfterDeactivation != nil {
        structMap["deleteAfterDeactivation"] = c.DeleteAfterDeactivation
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for CarrierDeactivateRequest.
// It customizes the JSON unmarshaling process for CarrierDeactivateRequest objects.
func (c *CarrierDeactivateRequest) UnmarshalJSON(input []byte) error {
    var temp tempCarrierDeactivateRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "devices", "reasonCode", "customFields", "etfWaiver", "groupName", "servicePlan", "deleteAfterDeactivation")
    if err != nil {
    	return err
    }
    c.AdditionalProperties = additionalProperties
    
    c.AccountName = *temp.AccountName
    c.Devices = *temp.Devices
    c.ReasonCode = *temp.ReasonCode
    c.CustomFields = temp.CustomFields
    c.EtfWaiver = temp.EtfWaiver
    c.GroupName = temp.GroupName
    c.ServicePlan = temp.ServicePlan
    c.DeleteAfterDeactivation = temp.DeleteAfterDeactivation
    return nil
}

// tempCarrierDeactivateRequest is a temporary struct used for validating the fields of CarrierDeactivateRequest.
type tempCarrierDeactivateRequest  struct {
    AccountName             *string              `json:"accountName"`
    Devices                 *[]AccountDeviceList `json:"devices"`
    ReasonCode              *string              `json:"reasonCode"`
    CustomFields            []CustomFields       `json:"customFields,omitempty"`
    EtfWaiver               *bool                `json:"etfWaiver,omitempty"`
    GroupName               *string              `json:"groupName,omitempty"`
    ServicePlan             *string              `json:"servicePlan,omitempty"`
    DeleteAfterDeactivation *bool                `json:"deleteAfterDeactivation,omitempty"`
}

func (c *tempCarrierDeactivateRequest) validate() error {
    var errs []string
    if c.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `CarrierDeactivateRequest`")
    }
    if c.Devices == nil {
        errs = append(errs, "required field `devices` is missing for type `CarrierDeactivateRequest`")
    }
    if c.ReasonCode == nil {
        errs = append(errs, "required field `reasonCode` is missing for type `CarrierDeactivateRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
