/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// SpeedItem represents a SpeedItem struct.
// Defines the acceptable speed range for road users in m/s. Messages are triggered when:
// 1. The road user's speed is below the required minimum OR
// 2. The road user's speed is above the acceptable maximum AND
// 3. The associated TriggerConditions are met.
// Example: For the speed range of 10-20 m/s and a TriggerCondition of 'user inside geofence', the message is sent if the user's speed is below 10 m/s or above 20 m/s while in the geofence area.
type SpeedItem struct {
    Speed                *Speed                 `json:"speed"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for SpeedItem,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (s SpeedItem) String() string {
    return fmt.Sprintf(
    	"SpeedItem[Speed=%v, AdditionalProperties=%v]",
    	s.Speed, s.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for SpeedItem.
// It customizes the JSON marshaling process for SpeedItem objects.
func (s SpeedItem) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(s.AdditionalProperties,
        "speed"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(s.toMap())
}

// toMap converts the SpeedItem object to a map representation for JSON marshaling.
func (s SpeedItem) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, s.AdditionalProperties)
    if s.Speed != nil {
        structMap["speed"] = s.Speed.toMap()
    } else {
        structMap["speed"] = nil
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for SpeedItem.
// It customizes the JSON unmarshaling process for SpeedItem objects.
func (s *SpeedItem) UnmarshalJSON(input []byte) error {
    var temp tempSpeedItem
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "speed")
    if err != nil {
    	return err
    }
    s.AdditionalProperties = additionalProperties
    
    s.Speed = temp.Speed
    return nil
}

// tempSpeedItem is a temporary struct used for validating the fields of SpeedItem.
type tempSpeedItem  struct {
    Speed *Speed `json:"speed"`
}

func (s *tempSpeedItem) validate() error {
    var errs []string
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
