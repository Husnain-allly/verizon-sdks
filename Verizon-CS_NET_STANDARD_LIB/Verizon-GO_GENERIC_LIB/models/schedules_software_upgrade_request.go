/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// SchedulesSoftwareUpgradeRequest represents a SchedulesSoftwareUpgradeRequest struct.
type SchedulesSoftwareUpgradeRequest struct {
    // The campaign name.
    CampaignName           *string                `json:"campaignName,omitempty"`
    // Software name.
    SoftwareName           *string                `json:"softwareName,omitempty"`
    // Old software name.
    SoftwareFrom           *string                `json:"softwareFrom,omitempty"`
    // New software name.
    SoftwareTo             *string                `json:"softwareTo,omitempty"`
    // Valid values
    DistributionType       *string                `json:"distributionType,omitempty"`
    // Campaign start date.
    StartDate              *string                `json:"startDate,omitempty"`
    // Campaign end date.
    EndDate                *string                `json:"endDate,omitempty"`
    // Specifies the starting date the client should download the package. If null, client downloads as soon as possible.
    DownloadAfterDate      *string                `json:"downloadAfterDate,omitempty"`
    // List of allowed download time windows.
    DownloadTimeWindowList []DownloadTimeWindow   `json:"downloadTimeWindowList,omitempty"`
    // The date after which you install the package. If null, install as soon as possible.
    InstallAfterDate       *string                `json:"installAfterDate,omitempty"`
    // List of allowed install time windows.
    InstallTimeWindowList  []DownloadTimeWindow   `json:"installTimeWindowList,omitempty"`
    // Device IMEI list.
    DeviceList             []string               `json:"deviceList,omitempty"`
    AdditionalProperties   map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for SchedulesSoftwareUpgradeRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (s SchedulesSoftwareUpgradeRequest) String() string {
    return fmt.Sprintf(
    	"SchedulesSoftwareUpgradeRequest[CampaignName=%v, SoftwareName=%v, SoftwareFrom=%v, SoftwareTo=%v, DistributionType=%v, StartDate=%v, EndDate=%v, DownloadAfterDate=%v, DownloadTimeWindowList=%v, InstallAfterDate=%v, InstallTimeWindowList=%v, DeviceList=%v, AdditionalProperties=%v]",
    	s.CampaignName, s.SoftwareName, s.SoftwareFrom, s.SoftwareTo, s.DistributionType, s.StartDate, s.EndDate, s.DownloadAfterDate, s.DownloadTimeWindowList, s.InstallAfterDate, s.InstallTimeWindowList, s.DeviceList, s.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for SchedulesSoftwareUpgradeRequest.
// It customizes the JSON marshaling process for SchedulesSoftwareUpgradeRequest objects.
func (s SchedulesSoftwareUpgradeRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(s.AdditionalProperties,
        "campaignName", "softwareName", "softwareFrom", "softwareTo", "distributionType", "startDate", "endDate", "downloadAfterDate", "downloadTimeWindowList", "installAfterDate", "installTimeWindowList", "deviceList"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(s.toMap())
}

// toMap converts the SchedulesSoftwareUpgradeRequest object to a map representation for JSON marshaling.
func (s SchedulesSoftwareUpgradeRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, s.AdditionalProperties)
    if s.CampaignName != nil {
        structMap["campaignName"] = s.CampaignName
    }
    if s.SoftwareName != nil {
        structMap["softwareName"] = s.SoftwareName
    }
    if s.SoftwareFrom != nil {
        structMap["softwareFrom"] = s.SoftwareFrom
    }
    if s.SoftwareTo != nil {
        structMap["softwareTo"] = s.SoftwareTo
    }
    if s.DistributionType != nil {
        structMap["distributionType"] = s.DistributionType
    }
    if s.StartDate != nil {
        structMap["startDate"] = s.StartDate
    }
    if s.EndDate != nil {
        structMap["endDate"] = s.EndDate
    }
    if s.DownloadAfterDate != nil {
        structMap["downloadAfterDate"] = s.DownloadAfterDate
    }
    if s.DownloadTimeWindowList != nil {
        structMap["downloadTimeWindowList"] = s.DownloadTimeWindowList
    }
    if s.InstallAfterDate != nil {
        structMap["installAfterDate"] = s.InstallAfterDate
    }
    if s.InstallTimeWindowList != nil {
        structMap["installTimeWindowList"] = s.InstallTimeWindowList
    }
    if s.DeviceList != nil {
        structMap["deviceList"] = s.DeviceList
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for SchedulesSoftwareUpgradeRequest.
// It customizes the JSON unmarshaling process for SchedulesSoftwareUpgradeRequest objects.
func (s *SchedulesSoftwareUpgradeRequest) UnmarshalJSON(input []byte) error {
    var temp tempSchedulesSoftwareUpgradeRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "campaignName", "softwareName", "softwareFrom", "softwareTo", "distributionType", "startDate", "endDate", "downloadAfterDate", "downloadTimeWindowList", "installAfterDate", "installTimeWindowList", "deviceList")
    if err != nil {
    	return err
    }
    s.AdditionalProperties = additionalProperties
    
    s.CampaignName = temp.CampaignName
    s.SoftwareName = temp.SoftwareName
    s.SoftwareFrom = temp.SoftwareFrom
    s.SoftwareTo = temp.SoftwareTo
    s.DistributionType = temp.DistributionType
    s.StartDate = temp.StartDate
    s.EndDate = temp.EndDate
    s.DownloadAfterDate = temp.DownloadAfterDate
    s.DownloadTimeWindowList = temp.DownloadTimeWindowList
    s.InstallAfterDate = temp.InstallAfterDate
    s.InstallTimeWindowList = temp.InstallTimeWindowList
    s.DeviceList = temp.DeviceList
    return nil
}

// tempSchedulesSoftwareUpgradeRequest is a temporary struct used for validating the fields of SchedulesSoftwareUpgradeRequest.
type tempSchedulesSoftwareUpgradeRequest  struct {
    CampaignName           *string              `json:"campaignName,omitempty"`
    SoftwareName           *string              `json:"softwareName,omitempty"`
    SoftwareFrom           *string              `json:"softwareFrom,omitempty"`
    SoftwareTo             *string              `json:"softwareTo,omitempty"`
    DistributionType       *string              `json:"distributionType,omitempty"`
    StartDate              *string              `json:"startDate,omitempty"`
    EndDate                *string              `json:"endDate,omitempty"`
    DownloadAfterDate      *string              `json:"downloadAfterDate,omitempty"`
    DownloadTimeWindowList []DownloadTimeWindow `json:"downloadTimeWindowList,omitempty"`
    InstallAfterDate       *string              `json:"installAfterDate,omitempty"`
    InstallTimeWindowList  []DownloadTimeWindow `json:"installTimeWindowList,omitempty"`
    DeviceList             []string             `json:"deviceList,omitempty"`
}
