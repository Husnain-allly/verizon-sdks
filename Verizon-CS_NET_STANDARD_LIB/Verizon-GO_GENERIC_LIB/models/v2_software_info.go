/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// V2SoftwareInfo represents a V2SoftwareInfo struct.
// Software information.
type V2SoftwareInfo struct {
    // Software name.
    Name                 string                 `json:"name"`
    // Software version.
    Version              string                 `json:"version"`
    // Upgrade time.
    UpgradeTime          string                 `json:"upgradeTime"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for V2SoftwareInfo,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (v V2SoftwareInfo) String() string {
    return fmt.Sprintf(
    	"V2SoftwareInfo[Name=%v, Version=%v, UpgradeTime=%v, AdditionalProperties=%v]",
    	v.Name, v.Version, v.UpgradeTime, v.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for V2SoftwareInfo.
// It customizes the JSON marshaling process for V2SoftwareInfo objects.
func (v V2SoftwareInfo) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(v.AdditionalProperties,
        "name", "version", "upgradeTime"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(v.toMap())
}

// toMap converts the V2SoftwareInfo object to a map representation for JSON marshaling.
func (v V2SoftwareInfo) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, v.AdditionalProperties)
    structMap["name"] = v.Name
    structMap["version"] = v.Version
    structMap["upgradeTime"] = v.UpgradeTime
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for V2SoftwareInfo.
// It customizes the JSON unmarshaling process for V2SoftwareInfo objects.
func (v *V2SoftwareInfo) UnmarshalJSON(input []byte) error {
    var temp tempV2SoftwareInfo
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "name", "version", "upgradeTime")
    if err != nil {
    	return err
    }
    v.AdditionalProperties = additionalProperties
    
    v.Name = *temp.Name
    v.Version = *temp.Version
    v.UpgradeTime = *temp.UpgradeTime
    return nil
}

// tempV2SoftwareInfo is a temporary struct used for validating the fields of V2SoftwareInfo.
type tempV2SoftwareInfo  struct {
    Name        *string `json:"name"`
    Version     *string `json:"version"`
    UpgradeTime *string `json:"upgradeTime"`
}

func (v *tempV2SoftwareInfo) validate() error {
    var errs []string
    if v.Name == nil {
        errs = append(errs, "required field `name` is missing for type `V2SoftwareInfo`")
    }
    if v.Version == nil {
        errs = append(errs, "required field `version` is missing for type `V2SoftwareInfo`")
    }
    if v.UpgradeTime == nil {
        errs = append(errs, "required field `upgradeTime` is missing for type `V2SoftwareInfo`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
