/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
    "log"
    "time"
)

// HistorySearchLimitTime represents a HistorySearchLimitTime struct.
// The time period for which a request should retrieve data, beginning with the limitTime.startOn and proceeding with the limitTime.duration.
type HistorySearchLimitTime struct {
    // The starting date-time for this request.
    StartOn              *time.Time             `json:"startOn,omitempty"`
    // Describes value and unit of time.
    Duration             *NumericalData         `json:"duration,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for HistorySearchLimitTime,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (h HistorySearchLimitTime) String() string {
    return fmt.Sprintf(
    	"HistorySearchLimitTime[StartOn=%v, Duration=%v, AdditionalProperties=%v]",
    	h.StartOn, h.Duration, h.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for HistorySearchLimitTime.
// It customizes the JSON marshaling process for HistorySearchLimitTime objects.
func (h HistorySearchLimitTime) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(h.AdditionalProperties,
        "startOn", "duration"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(h.toMap())
}

// toMap converts the HistorySearchLimitTime object to a map representation for JSON marshaling.
func (h HistorySearchLimitTime) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, h.AdditionalProperties)
    if h.StartOn != nil {
        structMap["startOn"] = h.StartOn.Format(time.RFC3339)
    }
    if h.Duration != nil {
        structMap["duration"] = h.Duration.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for HistorySearchLimitTime.
// It customizes the JSON unmarshaling process for HistorySearchLimitTime objects.
func (h *HistorySearchLimitTime) UnmarshalJSON(input []byte) error {
    var temp tempHistorySearchLimitTime
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "startOn", "duration")
    if err != nil {
    	return err
    }
    h.AdditionalProperties = additionalProperties
    
    if temp.StartOn != nil {
        StartOnVal, err := time.Parse(time.RFC3339, *temp.StartOn)
        if err != nil {
            log.Fatalf("Cannot Parse startOn as % s format.", time.RFC3339)
        }
        h.StartOn = &StartOnVal
    }
    h.Duration = temp.Duration
    return nil
}

// tempHistorySearchLimitTime is a temporary struct used for validating the fields of HistorySearchLimitTime.
type tempHistorySearchLimitTime  struct {
    StartOn  *string        `json:"startOn,omitempty"`
    Duration *NumericalData `json:"duration,omitempty"`
}
