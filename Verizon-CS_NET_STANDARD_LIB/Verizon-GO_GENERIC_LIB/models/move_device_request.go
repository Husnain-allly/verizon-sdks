/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// MoveDeviceRequest represents a MoveDeviceRequest struct.
// Request to move active devices from one billing account to another within a customer profile.
type MoveDeviceRequest struct {
    // The name of the billing account that you want to move the devices to.
    AccountName          string                 `json:"accountName"`
    // Specify the kind of the device identifier, the type of match, and the string that you want to match.
    Filter               *DeviceFilter          `json:"filter,omitempty"`
    // Custom field names and values, if you want to only include devices that have matching values.
    CustomFields         []CustomFields         `json:"customFields,omitempty"`
    // Up to 10,000 devices that you want to move to a different account, specified by device identifier.
    Devices              []AccountDeviceList    `json:"devices,omitempty"`
    // The name of a device group, to only include devices in that group.
    GroupName            *string                `json:"groupName,omitempty"`
    // The pool from which device IP addresses will be derived in the new account. If you do not include this element, the default pool will be used.
    CarrierIpPoolName    *string                `json:"carrierIpPoolName,omitempty"`
    // The service plan code that you want to assign to the devices in the new account. If you do not include this element, ThingSpace will attempt to use the current service plan, which will result in a error if the new account does not have that service plan.
    ServicePlan          *string                `json:"servicePlan,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for MoveDeviceRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (m MoveDeviceRequest) String() string {
    return fmt.Sprintf(
    	"MoveDeviceRequest[AccountName=%v, Filter=%v, CustomFields=%v, Devices=%v, GroupName=%v, CarrierIpPoolName=%v, ServicePlan=%v, AdditionalProperties=%v]",
    	m.AccountName, m.Filter, m.CustomFields, m.Devices, m.GroupName, m.CarrierIpPoolName, m.ServicePlan, m.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for MoveDeviceRequest.
// It customizes the JSON marshaling process for MoveDeviceRequest objects.
func (m MoveDeviceRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(m.AdditionalProperties,
        "accountName", "filter", "customFields", "devices", "groupName", "carrierIpPoolName", "servicePlan"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(m.toMap())
}

// toMap converts the MoveDeviceRequest object to a map representation for JSON marshaling.
func (m MoveDeviceRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, m.AdditionalProperties)
    structMap["accountName"] = m.AccountName
    if m.Filter != nil {
        structMap["filter"] = m.Filter.toMap()
    }
    if m.CustomFields != nil {
        structMap["customFields"] = m.CustomFields
    }
    if m.Devices != nil {
        structMap["devices"] = m.Devices
    }
    if m.GroupName != nil {
        structMap["groupName"] = m.GroupName
    }
    if m.CarrierIpPoolName != nil {
        structMap["carrierIpPoolName"] = m.CarrierIpPoolName
    }
    if m.ServicePlan != nil {
        structMap["servicePlan"] = m.ServicePlan
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for MoveDeviceRequest.
// It customizes the JSON unmarshaling process for MoveDeviceRequest objects.
func (m *MoveDeviceRequest) UnmarshalJSON(input []byte) error {
    var temp tempMoveDeviceRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "filter", "customFields", "devices", "groupName", "carrierIpPoolName", "servicePlan")
    if err != nil {
    	return err
    }
    m.AdditionalProperties = additionalProperties
    
    m.AccountName = *temp.AccountName
    m.Filter = temp.Filter
    m.CustomFields = temp.CustomFields
    m.Devices = temp.Devices
    m.GroupName = temp.GroupName
    m.CarrierIpPoolName = temp.CarrierIpPoolName
    m.ServicePlan = temp.ServicePlan
    return nil
}

// tempMoveDeviceRequest is a temporary struct used for validating the fields of MoveDeviceRequest.
type tempMoveDeviceRequest  struct {
    AccountName       *string             `json:"accountName"`
    Filter            *DeviceFilter       `json:"filter,omitempty"`
    CustomFields      []CustomFields      `json:"customFields,omitempty"`
    Devices           []AccountDeviceList `json:"devices,omitempty"`
    GroupName         *string             `json:"groupName,omitempty"`
    CarrierIpPoolName *string             `json:"carrierIpPoolName,omitempty"`
    ServicePlan       *string             `json:"servicePlan,omitempty"`
}

func (m *tempMoveDeviceRequest) validate() error {
    var errs []string
    if m.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `MoveDeviceRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
