/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// CarrierActivateRequest represents a CarrierActivateRequest struct.
// Request for carrier activation.
type CarrierActivateRequest struct {
    // Up to 10,000 devices for which you want to activate service, specified by device identifier.
    Devices              []AccountDeviceList    `json:"devices"`
    // The service plan code that you want to assign to all specified devices.
    ServicePlan          string                 `json:"servicePlan"`
    // The Zip code of the location where the line of service will primarily be used, or a Zip code that you have been told to use with these devices. For accounts that are configured for geographic numbering, this is the ZIP code from which the MDN will be derived.
    MdnZipCode           string                 `json:"mdnZipCode"`
    // The name of a billing account.
    AccountName          *string                `json:"accountName,omitempty"`
    // The private IP pool (Carrier Group Name) from which your device IP addresses will be derived.
    CarrierIpPoolName    *string                `json:"carrierIpPoolName,omitempty"`
    // The carrier that will perform the activation.
    CarrierName          *string                `json:"carrierName,omitempty"`
    // A string to identify the cost center that the device is associated with.
    CostCenterCode       *string                `json:"costCenterCode,omitempty"`
    // A user-defined descriptive field, limited to 50 characters.
    CustomFields         []CustomFields         `json:"customFields,omitempty"`
    // If you specify devices by ID in the devices parameters, this is the name of a device group that the devices should be added to.If you don't specify individual devices with the devices parameter, you can provide the name of a device group to activate all devices in that group.
    GroupName            *string                `json:"groupName,omitempty"`
    // The ID of a “Qualified” or “Closed - Won” VPP customer lead, which is used with other values to determine MDN assignment, taxation, and compensation.
    LeadId               *string                `json:"leadId,omitempty"`
    // The customer name and the address of the device's primary place of use. Leave these fields empty to use the account profile address as the primary place of use. These values will be applied to all devices in the request.If the account is enabled for non-geographic MDNs and the device supports it, the primaryPlaceOfUse address will also be used to derive the MDN for the device.
    PrimaryPlaceOfUse    *PlaceOfUse            `json:"primaryPlaceOfUse,omitempty"`
    // For devices with static IP addresses on the public network, this specifies whether the devices have general access to the Internet.
    PublicIpRestriction  *string                `json:"publicIpRestriction,omitempty"`
    // The Stock Keeping Unit (SKU) of a 4G device type can be used with ICCID device identifiers in lieu of an IMEI when activating 4G devices. The SkuNumber will be used with all devices in the request, so all devices must be of the same type.
    SkuNumber            *string                `json:"skuNumber,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for CarrierActivateRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c CarrierActivateRequest) String() string {
    return fmt.Sprintf(
    	"CarrierActivateRequest[Devices=%v, ServicePlan=%v, MdnZipCode=%v, AccountName=%v, CarrierIpPoolName=%v, CarrierName=%v, CostCenterCode=%v, CustomFields=%v, GroupName=%v, LeadId=%v, PrimaryPlaceOfUse=%v, PublicIpRestriction=%v, SkuNumber=%v, AdditionalProperties=%v]",
    	c.Devices, c.ServicePlan, c.MdnZipCode, c.AccountName, c.CarrierIpPoolName, c.CarrierName, c.CostCenterCode, c.CustomFields, c.GroupName, c.LeadId, c.PrimaryPlaceOfUse, c.PublicIpRestriction, c.SkuNumber, c.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for CarrierActivateRequest.
// It customizes the JSON marshaling process for CarrierActivateRequest objects.
func (c CarrierActivateRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(c.AdditionalProperties,
        "devices", "servicePlan", "mdnZipCode", "accountName", "carrierIpPoolName", "carrierName", "costCenterCode", "customFields", "groupName", "leadId", "primaryPlaceOfUse", "publicIpRestriction", "skuNumber"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(c.toMap())
}

// toMap converts the CarrierActivateRequest object to a map representation for JSON marshaling.
func (c CarrierActivateRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, c.AdditionalProperties)
    structMap["devices"] = c.Devices
    structMap["servicePlan"] = c.ServicePlan
    structMap["mdnZipCode"] = c.MdnZipCode
    if c.AccountName != nil {
        structMap["accountName"] = c.AccountName
    }
    if c.CarrierIpPoolName != nil {
        structMap["carrierIpPoolName"] = c.CarrierIpPoolName
    }
    if c.CarrierName != nil {
        structMap["carrierName"] = c.CarrierName
    }
    if c.CostCenterCode != nil {
        structMap["costCenterCode"] = c.CostCenterCode
    }
    if c.CustomFields != nil {
        structMap["customFields"] = c.CustomFields
    }
    if c.GroupName != nil {
        structMap["groupName"] = c.GroupName
    }
    if c.LeadId != nil {
        structMap["leadId"] = c.LeadId
    }
    if c.PrimaryPlaceOfUse != nil {
        structMap["primaryPlaceOfUse"] = c.PrimaryPlaceOfUse.toMap()
    }
    if c.PublicIpRestriction != nil {
        structMap["publicIpRestriction"] = c.PublicIpRestriction
    }
    if c.SkuNumber != nil {
        structMap["skuNumber"] = c.SkuNumber
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for CarrierActivateRequest.
// It customizes the JSON unmarshaling process for CarrierActivateRequest objects.
func (c *CarrierActivateRequest) UnmarshalJSON(input []byte) error {
    var temp tempCarrierActivateRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "devices", "servicePlan", "mdnZipCode", "accountName", "carrierIpPoolName", "carrierName", "costCenterCode", "customFields", "groupName", "leadId", "primaryPlaceOfUse", "publicIpRestriction", "skuNumber")
    if err != nil {
    	return err
    }
    c.AdditionalProperties = additionalProperties
    
    c.Devices = *temp.Devices
    c.ServicePlan = *temp.ServicePlan
    c.MdnZipCode = *temp.MdnZipCode
    c.AccountName = temp.AccountName
    c.CarrierIpPoolName = temp.CarrierIpPoolName
    c.CarrierName = temp.CarrierName
    c.CostCenterCode = temp.CostCenterCode
    c.CustomFields = temp.CustomFields
    c.GroupName = temp.GroupName
    c.LeadId = temp.LeadId
    c.PrimaryPlaceOfUse = temp.PrimaryPlaceOfUse
    c.PublicIpRestriction = temp.PublicIpRestriction
    c.SkuNumber = temp.SkuNumber
    return nil
}

// tempCarrierActivateRequest is a temporary struct used for validating the fields of CarrierActivateRequest.
type tempCarrierActivateRequest  struct {
    Devices             *[]AccountDeviceList `json:"devices"`
    ServicePlan         *string              `json:"servicePlan"`
    MdnZipCode          *string              `json:"mdnZipCode"`
    AccountName         *string              `json:"accountName,omitempty"`
    CarrierIpPoolName   *string              `json:"carrierIpPoolName,omitempty"`
    CarrierName         *string              `json:"carrierName,omitempty"`
    CostCenterCode      *string              `json:"costCenterCode,omitempty"`
    CustomFields        []CustomFields       `json:"customFields,omitempty"`
    GroupName           *string              `json:"groupName,omitempty"`
    LeadId              *string              `json:"leadId,omitempty"`
    PrimaryPlaceOfUse   *PlaceOfUse          `json:"primaryPlaceOfUse,omitempty"`
    PublicIpRestriction *string              `json:"publicIpRestriction,omitempty"`
    SkuNumber           *string              `json:"skuNumber,omitempty"`
}

func (c *tempCarrierActivateRequest) validate() error {
    var errs []string
    if c.Devices == nil {
        errs = append(errs, "required field `devices` is missing for type `CarrierActivateRequest`")
    }
    if c.ServicePlan == nil {
        errs = append(errs, "required field `servicePlan` is missing for type `CarrierActivateRequest`")
    }
    if c.MdnZipCode == nil {
        errs = append(errs, "required field `mdnZipCode` is missing for type `CarrierActivateRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
