/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// DtoConfigurationProfile represents a DtoConfigurationProfile struct.
type DtoConfigurationProfile struct {
    // The numeric account name, which must include leading zeros
    Accountname          *string                `json:"accountname,omitempty"`
    Profiles             []DtoProfile           `json:"profiles,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DtoConfigurationProfile,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DtoConfigurationProfile) String() string {
    return fmt.Sprintf(
    	"DtoConfigurationProfile[Accountname=%v, Profiles=%v, AdditionalProperties=%v]",
    	d.Accountname, d.Profiles, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DtoConfigurationProfile.
// It customizes the JSON marshaling process for DtoConfigurationProfile objects.
func (d DtoConfigurationProfile) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "accountname", "profiles"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DtoConfigurationProfile object to a map representation for JSON marshaling.
func (d DtoConfigurationProfile) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    if d.Accountname != nil {
        structMap["accountname"] = d.Accountname
    }
    if d.Profiles != nil {
        structMap["profiles"] = d.Profiles
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DtoConfigurationProfile.
// It customizes the JSON unmarshaling process for DtoConfigurationProfile objects.
func (d *DtoConfigurationProfile) UnmarshalJSON(input []byte) error {
    var temp tempDtoConfigurationProfile
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountname", "profiles")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.Accountname = temp.Accountname
    d.Profiles = temp.Profiles
    return nil
}

// tempDtoConfigurationProfile is a temporary struct used for validating the fields of DtoConfigurationProfile.
type tempDtoConfigurationProfile  struct {
    Accountname *string      `json:"accountname,omitempty"`
    Profiles    []DtoProfile `json:"profiles,omitempty"`
}
