/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// ServicePlan represents a ServicePlan struct.
// Details of the service plan.
type ServicePlan struct {
    // The code that is used by the carrier for the service plan.
    CarrierServicePlanCode *string                `json:"carrierServicePlanCode,omitempty"`
    // The code of the service plan, which may not be the same as the name.
    Code                   *string                `json:"code,omitempty"`
    // Any extended attributes for the service plan, as Key and Value pairs.
    ExtendedAttributes     []CustomFields         `json:"extendedAttributes,omitempty"`
    // The name of the service plan.
    Name                   *string                `json:"name,omitempty"`
    // The size of the service plan in kilobytes.
    SizeKb                 *int64                 `json:"sizeKb,omitempty"`
    AdditionalProperties   map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for ServicePlan,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (s ServicePlan) String() string {
    return fmt.Sprintf(
    	"ServicePlan[CarrierServicePlanCode=%v, Code=%v, ExtendedAttributes=%v, Name=%v, SizeKb=%v, AdditionalProperties=%v]",
    	s.CarrierServicePlanCode, s.Code, s.ExtendedAttributes, s.Name, s.SizeKb, s.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for ServicePlan.
// It customizes the JSON marshaling process for ServicePlan objects.
func (s ServicePlan) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(s.AdditionalProperties,
        "carrierServicePlanCode", "code", "extendedAttributes", "name", "sizeKb"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(s.toMap())
}

// toMap converts the ServicePlan object to a map representation for JSON marshaling.
func (s ServicePlan) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, s.AdditionalProperties)
    if s.CarrierServicePlanCode != nil {
        structMap["carrierServicePlanCode"] = s.CarrierServicePlanCode
    }
    if s.Code != nil {
        structMap["code"] = s.Code
    }
    if s.ExtendedAttributes != nil {
        structMap["extendedAttributes"] = s.ExtendedAttributes
    }
    if s.Name != nil {
        structMap["name"] = s.Name
    }
    if s.SizeKb != nil {
        structMap["sizeKb"] = s.SizeKb
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ServicePlan.
// It customizes the JSON unmarshaling process for ServicePlan objects.
func (s *ServicePlan) UnmarshalJSON(input []byte) error {
    var temp tempServicePlan
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "carrierServicePlanCode", "code", "extendedAttributes", "name", "sizeKb")
    if err != nil {
    	return err
    }
    s.AdditionalProperties = additionalProperties
    
    s.CarrierServicePlanCode = temp.CarrierServicePlanCode
    s.Code = temp.Code
    s.ExtendedAttributes = temp.ExtendedAttributes
    s.Name = temp.Name
    s.SizeKb = temp.SizeKb
    return nil
}

// tempServicePlan is a temporary struct used for validating the fields of ServicePlan.
type tempServicePlan  struct {
    CarrierServicePlanCode *string        `json:"carrierServicePlanCode,omitempty"`
    Code                   *string        `json:"code,omitempty"`
    ExtendedAttributes     []CustomFields `json:"extendedAttributes,omitempty"`
    Name                   *string        `json:"name,omitempty"`
    SizeKb                 *int64         `json:"sizeKb,omitempty"`
}
