/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// UsageTriggerResponse represents a UsageTriggerResponse struct.
type UsageTriggerResponse struct {
    // Unique usage triggerId
    TriggerId             string                 `json:"triggerId"`
    // Usage trigger name
    TriggerName           string                 `json:"triggerName"`
    // Account name
    AccountName           string                 `json:"accountName"`
    // Service name
    ServiceName           ServiceName            `json:"serviceName"`
    // Percent of subscription at which trigger will send an alert
    ThresholdValue        string                 `json:"thresholdValue"`
    // allowExcess determines whether to restrict usage after exceeds limits
    AllowExcess           bool                   `json:"allowExcess"`
    // Send SMS (text) alerts when the thresholdValue is reached.
    SendSmsNotification   bool                   `json:"sendSmsNotification"`
    // comma seperated value of list of Phone numbers for SMS notifications
    SmsPhoneNumbers       string                 `json:"smsPhoneNumbers"`
    // Send email alerts when the thresholdValue is reached.
    SendEmailNotification bool                   `json:"sendEmailNotification"`
    // comma seperated value of list of Email addresses for Email notifications
    EmailAddresses        string                 `json:"emailAddresses"`
    // UTC Date when the usage trigger was created
    CreateDate            string                 `json:"createDate"`
    // UTC Date when the usage trigger was last updated
    UpdateDate            string                 `json:"updateDate"`
    AdditionalProperties  map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for UsageTriggerResponse,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (u UsageTriggerResponse) String() string {
    return fmt.Sprintf(
    	"UsageTriggerResponse[TriggerId=%v, TriggerName=%v, AccountName=%v, ServiceName=%v, ThresholdValue=%v, AllowExcess=%v, SendSmsNotification=%v, SmsPhoneNumbers=%v, SendEmailNotification=%v, EmailAddresses=%v, CreateDate=%v, UpdateDate=%v, AdditionalProperties=%v]",
    	u.TriggerId, u.TriggerName, u.AccountName, u.ServiceName, u.ThresholdValue, u.AllowExcess, u.SendSmsNotification, u.SmsPhoneNumbers, u.SendEmailNotification, u.EmailAddresses, u.CreateDate, u.UpdateDate, u.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for UsageTriggerResponse.
// It customizes the JSON marshaling process for UsageTriggerResponse objects.
func (u UsageTriggerResponse) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(u.AdditionalProperties,
        "triggerId", "triggerName", "accountName", "serviceName", "thresholdValue", "allowExcess", "sendSmsNotification", "smsPhoneNumbers", "sendEmailNotification", "emailAddresses", "createDate", "updateDate"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(u.toMap())
}

// toMap converts the UsageTriggerResponse object to a map representation for JSON marshaling.
func (u UsageTriggerResponse) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, u.AdditionalProperties)
    structMap["triggerId"] = u.TriggerId
    structMap["triggerName"] = u.TriggerName
    structMap["accountName"] = u.AccountName
    structMap["serviceName"] = u.ServiceName
    structMap["thresholdValue"] = u.ThresholdValue
    structMap["allowExcess"] = u.AllowExcess
    structMap["sendSmsNotification"] = u.SendSmsNotification
    structMap["smsPhoneNumbers"] = u.SmsPhoneNumbers
    structMap["sendEmailNotification"] = u.SendEmailNotification
    structMap["emailAddresses"] = u.EmailAddresses
    structMap["createDate"] = u.CreateDate
    structMap["updateDate"] = u.UpdateDate
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for UsageTriggerResponse.
// It customizes the JSON unmarshaling process for UsageTriggerResponse objects.
func (u *UsageTriggerResponse) UnmarshalJSON(input []byte) error {
    var temp tempUsageTriggerResponse
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "triggerId", "triggerName", "accountName", "serviceName", "thresholdValue", "allowExcess", "sendSmsNotification", "smsPhoneNumbers", "sendEmailNotification", "emailAddresses", "createDate", "updateDate")
    if err != nil {
    	return err
    }
    u.AdditionalProperties = additionalProperties
    
    u.TriggerId = *temp.TriggerId
    u.TriggerName = *temp.TriggerName
    u.AccountName = *temp.AccountName
    u.ServiceName = *temp.ServiceName
    u.ThresholdValue = *temp.ThresholdValue
    u.AllowExcess = *temp.AllowExcess
    u.SendSmsNotification = *temp.SendSmsNotification
    u.SmsPhoneNumbers = *temp.SmsPhoneNumbers
    u.SendEmailNotification = *temp.SendEmailNotification
    u.EmailAddresses = *temp.EmailAddresses
    u.CreateDate = *temp.CreateDate
    u.UpdateDate = *temp.UpdateDate
    return nil
}

// tempUsageTriggerResponse is a temporary struct used for validating the fields of UsageTriggerResponse.
type tempUsageTriggerResponse  struct {
    TriggerId             *string      `json:"triggerId"`
    TriggerName           *string      `json:"triggerName"`
    AccountName           *string      `json:"accountName"`
    ServiceName           *ServiceName `json:"serviceName"`
    ThresholdValue        *string      `json:"thresholdValue"`
    AllowExcess           *bool        `json:"allowExcess"`
    SendSmsNotification   *bool        `json:"sendSmsNotification"`
    SmsPhoneNumbers       *string      `json:"smsPhoneNumbers"`
    SendEmailNotification *bool        `json:"sendEmailNotification"`
    EmailAddresses        *string      `json:"emailAddresses"`
    CreateDate            *string      `json:"createDate"`
    UpdateDate            *string      `json:"updateDate"`
}

func (u *tempUsageTriggerResponse) validate() error {
    var errs []string
    if u.TriggerId == nil {
        errs = append(errs, "required field `triggerId` is missing for type `UsageTriggerResponse`")
    }
    if u.TriggerName == nil {
        errs = append(errs, "required field `triggerName` is missing for type `UsageTriggerResponse`")
    }
    if u.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `UsageTriggerResponse`")
    }
    if u.ServiceName == nil {
        errs = append(errs, "required field `serviceName` is missing for type `UsageTriggerResponse`")
    }
    if u.ThresholdValue == nil {
        errs = append(errs, "required field `thresholdValue` is missing for type `UsageTriggerResponse`")
    }
    if u.AllowExcess == nil {
        errs = append(errs, "required field `allowExcess` is missing for type `UsageTriggerResponse`")
    }
    if u.SendSmsNotification == nil {
        errs = append(errs, "required field `sendSmsNotification` is missing for type `UsageTriggerResponse`")
    }
    if u.SmsPhoneNumbers == nil {
        errs = append(errs, "required field `smsPhoneNumbers` is missing for type `UsageTriggerResponse`")
    }
    if u.SendEmailNotification == nil {
        errs = append(errs, "required field `sendEmailNotification` is missing for type `UsageTriggerResponse`")
    }
    if u.EmailAddresses == nil {
        errs = append(errs, "required field `emailAddresses` is missing for type `UsageTriggerResponse`")
    }
    if u.CreateDate == nil {
        errs = append(errs, "required field `createDate` is missing for type `UsageTriggerResponse`")
    }
    if u.UpdateDate == nil {
        errs = append(errs, "required field `updateDate` is missing for type `UsageTriggerResponse`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
