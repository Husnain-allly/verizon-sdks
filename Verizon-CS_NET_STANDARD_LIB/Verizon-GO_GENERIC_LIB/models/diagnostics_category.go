/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// DiagnosticsCategory represents a DiagnosticsCategory struct.
// Various types of information about the device, grouped into categories. Each category object contains the category name and a list of Extended Attribute objects as key-value pairs.
type DiagnosticsCategory struct {
    // The name of the category.
    CategoryName         *string                `json:"categoryName,omitempty"`
    // A list of Extended Attribute objects as key-value pairs.
    ExtendedAttributes   []CustomFields         `json:"extendedAttributes,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DiagnosticsCategory,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DiagnosticsCategory) String() string {
    return fmt.Sprintf(
    	"DiagnosticsCategory[CategoryName=%v, ExtendedAttributes=%v, AdditionalProperties=%v]",
    	d.CategoryName, d.ExtendedAttributes, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DiagnosticsCategory.
// It customizes the JSON marshaling process for DiagnosticsCategory objects.
func (d DiagnosticsCategory) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "categoryName", "extendedAttributes"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DiagnosticsCategory object to a map representation for JSON marshaling.
func (d DiagnosticsCategory) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    if d.CategoryName != nil {
        structMap["categoryName"] = d.CategoryName
    }
    if d.ExtendedAttributes != nil {
        structMap["extendedAttributes"] = d.ExtendedAttributes
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DiagnosticsCategory.
// It customizes the JSON unmarshaling process for DiagnosticsCategory objects.
func (d *DiagnosticsCategory) UnmarshalJSON(input []byte) error {
    var temp tempDiagnosticsCategory
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "categoryName", "extendedAttributes")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.CategoryName = temp.CategoryName
    d.ExtendedAttributes = temp.ExtendedAttributes
    return nil
}

// tempDiagnosticsCategory is a temporary struct used for validating the fields of DiagnosticsCategory.
type tempDiagnosticsCategory  struct {
    CategoryName       *string        `json:"categoryName,omitempty"`
    ExtendedAttributes []CustomFields `json:"extendedAttributes,omitempty"`
}
