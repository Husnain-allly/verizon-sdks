/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// BillableUsageReport represents a BillableUsageReport struct.
// Bill usage report.
type BillableUsageReport struct {
    // Account identifier.
    AccountName           *string                `json:"accountName,omitempty"`
    // The usage is for a single or multiple accounts.
    UsageForAllAccounts   *bool                  `json:"usageForAllAccounts,omitempty"`
    // SKU Name of the service subscription.
    SkuName               *string                `json:"skuName,omitempty"`
    // The number of location requests included with the subscription type.
    TransactionsAllowed   *string                `json:"transactionsAllowed,omitempty"`
    // The total number of billable device location requests during the reporting period from all included accounts.
    TotalTransactionCount *string                `json:"totalTransactionCount,omitempty"`
    PrimaryAccount        *ServiceUsage          `json:"PrimaryAccount,omitempty"`
    // Zero or more managed accounts.
    ManagedAccounts       []ServiceUsage         `json:"ManagedAccounts,omitempty"`
    AdditionalProperties  map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for BillableUsageReport,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (b BillableUsageReport) String() string {
    return fmt.Sprintf(
    	"BillableUsageReport[AccountName=%v, UsageForAllAccounts=%v, SkuName=%v, TransactionsAllowed=%v, TotalTransactionCount=%v, PrimaryAccount=%v, ManagedAccounts=%v, AdditionalProperties=%v]",
    	b.AccountName, b.UsageForAllAccounts, b.SkuName, b.TransactionsAllowed, b.TotalTransactionCount, b.PrimaryAccount, b.ManagedAccounts, b.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for BillableUsageReport.
// It customizes the JSON marshaling process for BillableUsageReport objects.
func (b BillableUsageReport) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(b.AdditionalProperties,
        "accountName", "usageForAllAccounts", "skuName", "transactionsAllowed", "totalTransactionCount", "PrimaryAccount", "ManagedAccounts"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(b.toMap())
}

// toMap converts the BillableUsageReport object to a map representation for JSON marshaling.
func (b BillableUsageReport) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, b.AdditionalProperties)
    if b.AccountName != nil {
        structMap["accountName"] = b.AccountName
    }
    if b.UsageForAllAccounts != nil {
        structMap["usageForAllAccounts"] = b.UsageForAllAccounts
    }
    if b.SkuName != nil {
        structMap["skuName"] = b.SkuName
    }
    if b.TransactionsAllowed != nil {
        structMap["transactionsAllowed"] = b.TransactionsAllowed
    }
    if b.TotalTransactionCount != nil {
        structMap["totalTransactionCount"] = b.TotalTransactionCount
    }
    if b.PrimaryAccount != nil {
        structMap["PrimaryAccount"] = b.PrimaryAccount.toMap()
    }
    if b.ManagedAccounts != nil {
        structMap["ManagedAccounts"] = b.ManagedAccounts
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for BillableUsageReport.
// It customizes the JSON unmarshaling process for BillableUsageReport objects.
func (b *BillableUsageReport) UnmarshalJSON(input []byte) error {
    var temp tempBillableUsageReport
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "usageForAllAccounts", "skuName", "transactionsAllowed", "totalTransactionCount", "PrimaryAccount", "ManagedAccounts")
    if err != nil {
    	return err
    }
    b.AdditionalProperties = additionalProperties
    
    b.AccountName = temp.AccountName
    b.UsageForAllAccounts = temp.UsageForAllAccounts
    b.SkuName = temp.SkuName
    b.TransactionsAllowed = temp.TransactionsAllowed
    b.TotalTransactionCount = temp.TotalTransactionCount
    b.PrimaryAccount = temp.PrimaryAccount
    b.ManagedAccounts = temp.ManagedAccounts
    return nil
}

// tempBillableUsageReport is a temporary struct used for validating the fields of BillableUsageReport.
type tempBillableUsageReport  struct {
    AccountName           *string        `json:"accountName,omitempty"`
    UsageForAllAccounts   *bool          `json:"usageForAllAccounts,omitempty"`
    SkuName               *string        `json:"skuName,omitempty"`
    TransactionsAllowed   *string        `json:"transactionsAllowed,omitempty"`
    TotalTransactionCount *string        `json:"totalTransactionCount,omitempty"`
    PrimaryAccount        *ServiceUsage  `json:"PrimaryAccount,omitempty"`
    ManagedAccounts       []ServiceUsage `json:"ManagedAccounts,omitempty"`
}
