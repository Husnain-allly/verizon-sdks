/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// CustomFields represents a CustomFields struct.
// Custom data that can be included using key-value pairs.
type CustomFields struct {
    // The key for an extended attribute.
    Key                  string                 `json:"key"`
    // The value of an extended attribute.
    Value                string                 `json:"value"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for CustomFields,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c CustomFields) String() string {
    return fmt.Sprintf(
    	"CustomFields[Key=%v, Value=%v, AdditionalProperties=%v]",
    	c.Key, c.Value, c.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for CustomFields.
// It customizes the JSON marshaling process for CustomFields objects.
func (c CustomFields) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(c.AdditionalProperties,
        "key", "value"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(c.toMap())
}

// toMap converts the CustomFields object to a map representation for JSON marshaling.
func (c CustomFields) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, c.AdditionalProperties)
    structMap["key"] = c.Key
    structMap["value"] = c.Value
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for CustomFields.
// It customizes the JSON unmarshaling process for CustomFields objects.
func (c *CustomFields) UnmarshalJSON(input []byte) error {
    var temp tempCustomFields
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "key", "value")
    if err != nil {
    	return err
    }
    c.AdditionalProperties = additionalProperties
    
    c.Key = *temp.Key
    c.Value = *temp.Value
    return nil
}

// tempCustomFields is a temporary struct used for validating the fields of CustomFields.
type tempCustomFields  struct {
    Key   *string `json:"key"`
    Value *string `json:"value"`
}

func (c *tempCustomFields) validate() error {
    var errs []string
    if c.Key == nil {
        errs = append(errs, "required field `key` is missing for type `CustomFields`")
    }
    if c.Value == nil {
        errs = append(errs, "required field `value` is missing for type `CustomFields`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
