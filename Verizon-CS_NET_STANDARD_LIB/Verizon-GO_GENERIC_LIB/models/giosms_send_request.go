/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// GiosmsSendRequest represents a GiosmsSendRequest struct.
type GiosmsSendRequest struct {
    AccountName  *string       `json:"accountName,omitempty"`
    CustomFields []KvPair      `json:"customFields,omitempty"`
    DataEncoding *string       `json:"dataEncoding,omitempty"`
    GroupName    *string       `json:"groupName,omitempty"`
    ServicePlan  *string       `json:"servicePlan,omitempty"`
    // A period of time the message remains valid or an end date for the message. This value would be less than the 5 day default.
    TimeToLive   *string       `json:"timeToLive,omitempty"`
    DeviceIds    []GioDeviceId `json:"deviceIds,omitempty"`
    SmsMessage   string        `json:"smsMessage"`
}

// String implements the fmt.Stringer interface for GiosmsSendRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (g GiosmsSendRequest) String() string {
    return fmt.Sprintf(
    	"GiosmsSendRequest[AccountName=%v, CustomFields=%v, DataEncoding=%v, GroupName=%v, ServicePlan=%v, TimeToLive=%v, DeviceIds=%v, SmsMessage=%v]",
    	g.AccountName, g.CustomFields, g.DataEncoding, g.GroupName, g.ServicePlan, g.TimeToLive, g.DeviceIds, g.SmsMessage)
}

// MarshalJSON implements the json.Marshaler interface for GiosmsSendRequest.
// It customizes the JSON marshaling process for GiosmsSendRequest objects.
func (g GiosmsSendRequest) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(g.toMap())
}

// toMap converts the GiosmsSendRequest object to a map representation for JSON marshaling.
func (g GiosmsSendRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    if g.AccountName != nil {
        structMap["accountName"] = g.AccountName
    }
    if g.CustomFields != nil {
        structMap["customFields"] = g.CustomFields
    }
    if g.DataEncoding != nil {
        structMap["dataEncoding"] = g.DataEncoding
    }
    if g.GroupName != nil {
        structMap["groupName"] = g.GroupName
    }
    if g.ServicePlan != nil {
        structMap["servicePlan"] = g.ServicePlan
    }
    if g.TimeToLive != nil {
        structMap["timeToLive"] = g.TimeToLive
    }
    if g.DeviceIds != nil {
        structMap["deviceIds"] = g.DeviceIds
    }
    structMap["smsMessage"] = g.SmsMessage
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for GiosmsSendRequest.
// It customizes the JSON unmarshaling process for GiosmsSendRequest objects.
func (g *GiosmsSendRequest) UnmarshalJSON(input []byte) error {
    var temp tempGiosmsSendRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    g.AccountName = temp.AccountName
    g.CustomFields = temp.CustomFields
    g.DataEncoding = temp.DataEncoding
    g.GroupName = temp.GroupName
    g.ServicePlan = temp.ServicePlan
    g.TimeToLive = temp.TimeToLive
    g.DeviceIds = temp.DeviceIds
    g.SmsMessage = *temp.SmsMessage
    return nil
}

// tempGiosmsSendRequest is a temporary struct used for validating the fields of GiosmsSendRequest.
type tempGiosmsSendRequest  struct {
    AccountName  *string       `json:"accountName,omitempty"`
    CustomFields []KvPair      `json:"customFields,omitempty"`
    DataEncoding *string       `json:"dataEncoding,omitempty"`
    GroupName    *string       `json:"groupName,omitempty"`
    ServicePlan  *string       `json:"servicePlan,omitempty"`
    TimeToLive   *string       `json:"timeToLive,omitempty"`
    DeviceIds    []GioDeviceId `json:"deviceIds,omitempty"`
    SmsMessage   *string       `json:"smsMessage"`
}

func (g *tempGiosmsSendRequest) validate() error {
    var errs []string
    if g.SmsMessage == nil {
        errs = append(errs, "required field `smsMessage` is missing for type `GIOSMSSendRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
