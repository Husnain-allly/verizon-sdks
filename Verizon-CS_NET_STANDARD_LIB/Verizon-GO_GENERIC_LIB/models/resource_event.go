/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
    "strings"
    "time"
)

// ResourceEvent represents a ResourceEvent struct.
type ResourceEvent struct {
    // Not used in this release, future functionality
    Accountclientid       *string    `json:"accountclientid,omitempty"`
    // The URL of the callback listener
    Callbackurl           *string    `json:"callbackurl,omitempty"`
    // Timestamp of the record
    Createdon             time.Time  `json:"createdon"`
    // a short description
    Description           *string    `json:"description,omitempty"`
    // This is a UUID value of the device created when the device is onboarded
    Deviceid              *string    `json:"deviceid,omitempty"`
    // Error message
    Errmsg                *string    `json:"errmsg,omitempty"`
    Fieldid               string     `json:"fieldid"`
    // Fields to return needed by search
    Fields                *DtoFields `json:"fields,omitempty"`
    Fieldvalue            []int      `json:"fieldvalue,omitempty"`
    // UUID of the ECPD account the user belongs to
    Foreignid             string     `json:"foreignid"`
    // UUID of the user record, assigned at creation
    Id                    *string    `json:"id,omitempty"`
    // Timestamp of the record
    Lastupdated           time.Time  `json:"lastupdated"`
    // The model ID of the device
    Modelid               *string    `json:"modelid,omitempty"`
    // User defined name of the record
    Name                  *string    `json:"name,omitempty"`
    // A flag to indicate if sensor data is to be aggregated (true) or not
    Sensordataaggregation *bool      `json:"sensordataaggregation,omitempty"`
    // The current status of the device or transaction and will be `success` or `failed`
    State                 string     `json:"state"`
    // The system-generated UUID of the transaction
    Transactionid         *string    `json:"transactionid,omitempty"`
    // The resource version
    Version               *string    `json:"version,omitempty"`
    // The UUID of the resource version
    Versionid             string     `json:"versionid"`
}

// String implements the fmt.Stringer interface for ResourceEvent,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (r ResourceEvent) String() string {
    return fmt.Sprintf(
    	"ResourceEvent[Accountclientid=%v, Callbackurl=%v, Createdon=%v, Description=%v, Deviceid=%v, Errmsg=%v, Fieldid=%v, Fields=%v, Fieldvalue=%v, Foreignid=%v, Id=%v, Lastupdated=%v, Modelid=%v, Name=%v, Sensordataaggregation=%v, State=%v, Transactionid=%v, Version=%v, Versionid=%v]",
    	r.Accountclientid, r.Callbackurl, r.Createdon, r.Description, r.Deviceid, r.Errmsg, r.Fieldid, r.Fields, r.Fieldvalue, r.Foreignid, r.Id, r.Lastupdated, r.Modelid, r.Name, r.Sensordataaggregation, r.State, r.Transactionid, r.Version, r.Versionid)
}

// MarshalJSON implements the json.Marshaler interface for ResourceEvent.
// It customizes the JSON marshaling process for ResourceEvent objects.
func (r ResourceEvent) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(r.toMap())
}

// toMap converts the ResourceEvent object to a map representation for JSON marshaling.
func (r ResourceEvent) toMap() map[string]any {
    structMap := make(map[string]any)
    if r.Accountclientid != nil {
        structMap["accountclientid"] = r.Accountclientid
    }
    if r.Callbackurl != nil {
        structMap["callbackurl"] = r.Callbackurl
    }
    structMap["createdon"] = r.Createdon.Format(time.RFC3339)
    if r.Description != nil {
        structMap["description"] = r.Description
    }
    if r.Deviceid != nil {
        structMap["deviceid"] = r.Deviceid
    }
    if r.Errmsg != nil {
        structMap["errmsg"] = r.Errmsg
    }
    structMap["fieldid"] = r.Fieldid
    if r.Fields != nil {
        structMap["fields"] = r.Fields.toMap()
    }
    if r.Fieldvalue != nil {
        structMap["fieldvalue"] = r.Fieldvalue
    }
    structMap["foreignid"] = r.Foreignid
    if r.Id != nil {
        structMap["id"] = r.Id
    }
    structMap["lastupdated"] = r.Lastupdated.Format(time.RFC3339)
    if r.Modelid != nil {
        structMap["modelid"] = r.Modelid
    }
    if r.Name != nil {
        structMap["name"] = r.Name
    }
    if r.Sensordataaggregation != nil {
        structMap["sensordataaggregation"] = r.Sensordataaggregation
    }
    structMap["state"] = r.State
    if r.Transactionid != nil {
        structMap["transactionid"] = r.Transactionid
    }
    if r.Version != nil {
        structMap["version"] = r.Version
    }
    structMap["versionid"] = r.Versionid
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ResourceEvent.
// It customizes the JSON unmarshaling process for ResourceEvent objects.
func (r *ResourceEvent) UnmarshalJSON(input []byte) error {
    var temp tempResourceEvent
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    r.Accountclientid = temp.Accountclientid
    r.Callbackurl = temp.Callbackurl
    CreatedonVal, err := time.Parse(time.RFC3339, *temp.Createdon)
    if err != nil {
        log.Fatalf("Cannot Parse createdon as % s format.", time.RFC3339)
    }
    r.Createdon = CreatedonVal
    r.Description = temp.Description
    r.Deviceid = temp.Deviceid
    r.Errmsg = temp.Errmsg
    r.Fieldid = *temp.Fieldid
    r.Fields = temp.Fields
    r.Fieldvalue = temp.Fieldvalue
    r.Foreignid = *temp.Foreignid
    r.Id = temp.Id
    LastupdatedVal, err := time.Parse(time.RFC3339, *temp.Lastupdated)
    if err != nil {
        log.Fatalf("Cannot Parse lastupdated as % s format.", time.RFC3339)
    }
    r.Lastupdated = LastupdatedVal
    r.Modelid = temp.Modelid
    r.Name = temp.Name
    r.Sensordataaggregation = temp.Sensordataaggregation
    r.State = *temp.State
    r.Transactionid = temp.Transactionid
    r.Version = temp.Version
    r.Versionid = *temp.Versionid
    return nil
}

// tempResourceEvent is a temporary struct used for validating the fields of ResourceEvent.
type tempResourceEvent  struct {
    Accountclientid       *string    `json:"accountclientid,omitempty"`
    Callbackurl           *string    `json:"callbackurl,omitempty"`
    Createdon             *string    `json:"createdon"`
    Description           *string    `json:"description,omitempty"`
    Deviceid              *string    `json:"deviceid,omitempty"`
    Errmsg                *string    `json:"errmsg,omitempty"`
    Fieldid               *string    `json:"fieldid"`
    Fields                *DtoFields `json:"fields,omitempty"`
    Fieldvalue            []int      `json:"fieldvalue,omitempty"`
    Foreignid             *string    `json:"foreignid"`
    Id                    *string    `json:"id,omitempty"`
    Lastupdated           *string    `json:"lastupdated"`
    Modelid               *string    `json:"modelid,omitempty"`
    Name                  *string    `json:"name,omitempty"`
    Sensordataaggregation *bool      `json:"sensordataaggregation,omitempty"`
    State                 *string    `json:"state"`
    Transactionid         *string    `json:"transactionid,omitempty"`
    Version               *string    `json:"version,omitempty"`
    Versionid             *string    `json:"versionid"`
}

func (r *tempResourceEvent) validate() error {
    var errs []string
    if r.Createdon == nil {
        errs = append(errs, "required field `createdon` is missing for type `resource.Event`")
    }
    if r.Fieldid == nil {
        errs = append(errs, "required field `fieldid` is missing for type `resource.Event`")
    }
    if r.Foreignid == nil {
        errs = append(errs, "required field `foreignid` is missing for type `resource.Event`")
    }
    if r.Lastupdated == nil {
        errs = append(errs, "required field `lastupdated` is missing for type `resource.Event`")
    }
    if r.State == nil {
        errs = append(errs, "required field `state` is missing for type `resource.Event`")
    }
    if r.Versionid == nil {
        errs = append(errs, "required field `versionid` is missing for type `resource.Event`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
