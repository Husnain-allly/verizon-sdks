/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// Actionobject represents a Actionobject struct.
type Actionobject struct {
    Suspend              *bool                  `json:"suspend,omitempty"`
    SuspendDetails       *Suspenddetailsobject  `json:"suspendDetails,omitempty"`
    // a flag to set if the trigger changes service plans, true, or not, false
    ChangePlan           *bool                  `json:"changePlan,omitempty"`
    // The service plan code to switch to
    ChangePlanDetails    *ChangePlanDetails     `json:"changePlanDetails,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for Actionobject,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a Actionobject) String() string {
    return fmt.Sprintf(
    	"Actionobject[Suspend=%v, SuspendDetails=%v, ChangePlan=%v, ChangePlanDetails=%v, AdditionalProperties=%v]",
    	a.Suspend, a.SuspendDetails, a.ChangePlan, a.ChangePlanDetails, a.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for Actionobject.
// It customizes the JSON marshaling process for Actionobject objects.
func (a Actionobject) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(a.AdditionalProperties,
        "suspend", "suspendDetails", "changePlan", "changePlanDetails"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(a.toMap())
}

// toMap converts the Actionobject object to a map representation for JSON marshaling.
func (a Actionobject) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, a.AdditionalProperties)
    if a.Suspend != nil {
        structMap["suspend"] = a.Suspend
    }
    if a.SuspendDetails != nil {
        structMap["suspendDetails"] = a.SuspendDetails.toMap()
    }
    if a.ChangePlan != nil {
        structMap["changePlan"] = a.ChangePlan
    }
    if a.ChangePlanDetails != nil {
        structMap["changePlanDetails"] = a.ChangePlanDetails.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Actionobject.
// It customizes the JSON unmarshaling process for Actionobject objects.
func (a *Actionobject) UnmarshalJSON(input []byte) error {
    var temp tempActionobject
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "suspend", "suspendDetails", "changePlan", "changePlanDetails")
    if err != nil {
    	return err
    }
    a.AdditionalProperties = additionalProperties
    
    a.Suspend = temp.Suspend
    a.SuspendDetails = temp.SuspendDetails
    a.ChangePlan = temp.ChangePlan
    a.ChangePlanDetails = temp.ChangePlanDetails
    return nil
}

// tempActionobject is a temporary struct used for validating the fields of Actionobject.
type tempActionobject  struct {
    Suspend           *bool                 `json:"suspend,omitempty"`
    SuspendDetails    *Suspenddetailsobject `json:"suspendDetails,omitempty"`
    ChangePlan        *bool                 `json:"changePlan,omitempty"`
    ChangePlanDetails *ChangePlanDetails    `json:"changePlanDetails,omitempty"`
}
