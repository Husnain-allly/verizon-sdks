/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// BilledusageListRequest represents a BilledusageListRequest struct.
// Information required to associate a usage segmentation label with a device to retrieve billing.
type BilledusageListRequest struct {
    AccountName          string                 `json:"accountName"`
    Labels               *LabelsList            `json:"labels,omitempty"`
    DeviceIds            []DeviceList           `json:"deviceIds,omitempty"`
    BillingCycle         *BillingCycle          `json:"billingCycle,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for BilledusageListRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (b BilledusageListRequest) String() string {
    return fmt.Sprintf(
    	"BilledusageListRequest[AccountName=%v, Labels=%v, DeviceIds=%v, BillingCycle=%v, AdditionalProperties=%v]",
    	b.AccountName, b.Labels, b.DeviceIds, b.BillingCycle, b.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for BilledusageListRequest.
// It customizes the JSON marshaling process for BilledusageListRequest objects.
func (b BilledusageListRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(b.AdditionalProperties,
        "accountName", "labels", "deviceIds", "billingCycle"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(b.toMap())
}

// toMap converts the BilledusageListRequest object to a map representation for JSON marshaling.
func (b BilledusageListRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, b.AdditionalProperties)
    structMap["accountName"] = b.AccountName
    if b.Labels != nil {
        structMap["labels"] = b.Labels.toMap()
    }
    if b.DeviceIds != nil {
        structMap["deviceIds"] = b.DeviceIds
    }
    if b.BillingCycle != nil {
        structMap["billingCycle"] = b.BillingCycle.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for BilledusageListRequest.
// It customizes the JSON unmarshaling process for BilledusageListRequest objects.
func (b *BilledusageListRequest) UnmarshalJSON(input []byte) error {
    var temp tempBilledusageListRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "accountName", "labels", "deviceIds", "billingCycle")
    if err != nil {
    	return err
    }
    b.AdditionalProperties = additionalProperties
    
    b.AccountName = *temp.AccountName
    b.Labels = temp.Labels
    b.DeviceIds = temp.DeviceIds
    b.BillingCycle = temp.BillingCycle
    return nil
}

// tempBilledusageListRequest is a temporary struct used for validating the fields of BilledusageListRequest.
type tempBilledusageListRequest  struct {
    AccountName  *string       `json:"accountName"`
    Labels       *LabelsList   `json:"labels,omitempty"`
    DeviceIds    []DeviceList  `json:"deviceIds,omitempty"`
    BillingCycle *BillingCycle `json:"billingCycle,omitempty"`
}

func (b *tempBilledusageListRequest) validate() error {
    var errs []string
    if b.AccountName == nil {
        errs = append(errs, "required field `accountName` is missing for type `billedusageListRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
