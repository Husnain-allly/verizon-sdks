/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
)

// KeysChunk represents a KeysChunk struct.
type KeysChunk struct {
    value                 any
    isKeyServicePlan      bool
    isKeyDataPercentage50 bool
    isKeysmsPercentage50  bool
    isNoOfDaysB4PromoExp  bool
    isEnablePromoExp      bool
}

// String implements the fmt.Stringer interface for KeysChunk,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (k KeysChunk) String() string {
    return fmt.Sprintf("%v", k.value)
}

// MarshalJSON implements the json.Marshaler interface for KeysChunk.
// It customizes the JSON marshaling process for KeysChunk objects.
func (k KeysChunk) MarshalJSON() (
    []byte,
    error) {
    if k.value == nil {
        return nil, errors.New("No underlying type is set. Please use any of the `models.KeysChunkContainer.From*` functions to initialize the KeysChunk object.")
    }
    return json.Marshal(k.toMap())
}

// toMap converts the KeysChunk object to a map representation for JSON marshaling.
func (k *KeysChunk) toMap() any {
    switch obj := k.value.(type) {
    case *KeyServicePlan:
        return obj.toMap()
    case *KeyDataPercentage50:
        return obj.toMap()
    case *KeysmsPercentage50:
        return obj.toMap()
    case *NoOfDaysB4PromoExp:
        return obj.toMap()
    case *EnablePromoExp:
        return obj.toMap()
    }
    return nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for KeysChunk.
// It customizes the JSON unmarshaling process for KeysChunk objects.
func (k *KeysChunk) UnmarshalJSON(input []byte) error {
    result, err := UnmarshallAnyOf(input,
        NewTypeHolder(&KeyServicePlan{}, false, &k.isKeyServicePlan),
        NewTypeHolder(&KeyDataPercentage50{}, false, &k.isKeyDataPercentage50),
        NewTypeHolder(&KeysmsPercentage50{}, false, &k.isKeysmsPercentage50),
        NewTypeHolder(&NoOfDaysB4PromoExp{}, false, &k.isNoOfDaysB4PromoExp),
        NewTypeHolder(&EnablePromoExp{}, false, &k.isEnablePromoExp),
    )
    
    k.value = result
    return err
}

func (k *KeysChunk) AsKeyServicePlan() (
    *KeyServicePlan,
    bool) {
    if !k.isKeyServicePlan {
        return nil, false
    }
    return k.value.(*KeyServicePlan), true
}

func (k *KeysChunk) AsKeyDataPercentage50() (
    *KeyDataPercentage50,
    bool) {
    if !k.isKeyDataPercentage50 {
        return nil, false
    }
    return k.value.(*KeyDataPercentage50), true
}

func (k *KeysChunk) AsKeysmsPercentage50() (
    *KeysmsPercentage50,
    bool) {
    if !k.isKeysmsPercentage50 {
        return nil, false
    }
    return k.value.(*KeysmsPercentage50), true
}

func (k *KeysChunk) AsNoOfDaysB4PromoExp() (
    *NoOfDaysB4PromoExp,
    bool) {
    if !k.isNoOfDaysB4PromoExp {
        return nil, false
    }
    return k.value.(*NoOfDaysB4PromoExp), true
}

func (k *KeysChunk) AsEnablePromoExp() (
    *EnablePromoExp,
    bool) {
    if !k.isEnablePromoExp {
        return nil, false
    }
    return k.value.(*EnablePromoExp), true
}

// internalKeysChunk represents a keysChunk struct.
type internalKeysChunk struct {}

var KeysChunkContainer internalKeysChunk

// The internalKeysChunk instance, wrapping the provided KeyServicePlan value.
func (k *internalKeysChunk) FromKeyServicePlan(val KeyServicePlan) KeysChunk {
    return KeysChunk{value: &val}
}

// The internalKeysChunk instance, wrapping the provided KeyDataPercentage50 value.
func (k *internalKeysChunk) FromKeyDataPercentage50(val KeyDataPercentage50) KeysChunk {
    return KeysChunk{value: &val}
}

// The internalKeysChunk instance, wrapping the provided KeysmsPercentage50 value.
func (k *internalKeysChunk) FromKeysmsPercentage50(val KeysmsPercentage50) KeysChunk {
    return KeysChunk{value: &val}
}

// The internalKeysChunk instance, wrapping the provided NoOfDaysB4PromoExp value.
func (k *internalKeysChunk) FromNoOfDaysB4PromoExp(val NoOfDaysB4PromoExp) KeysChunk {
    return KeysChunk{value: &val}
}

// The internalKeysChunk instance, wrapping the provided EnablePromoExp value.
func (k *internalKeysChunk) FromEnablePromoExp(val EnablePromoExp) KeysChunk {
    return KeysChunk{value: &val}
}
