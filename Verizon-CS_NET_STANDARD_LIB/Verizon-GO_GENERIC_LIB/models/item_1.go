/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// Item1 represents a Item1 struct.
type Item1 struct {
    // Simple text used with ITIS codes. (Text taken from SAE J2540.)
    Text string `json:"text"`
}

// String implements the fmt.Stringer interface for Item1,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (i Item1) String() string {
    return fmt.Sprintf(
    	"Item1[Text=%v]",
    	i.Text)
}

// MarshalJSON implements the json.Marshaler interface for Item1.
// It customizes the JSON marshaling process for Item1 objects.
func (i Item1) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(i.toMap())
}

// toMap converts the Item1 object to a map representation for JSON marshaling.
func (i Item1) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["text"] = i.Text
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Item1.
// It customizes the JSON unmarshaling process for Item1 objects.
func (i *Item1) UnmarshalJSON(input []byte) error {
    var temp tempItem1
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    i.Text = *temp.Text
    return nil
}

// tempItem1 is a temporary struct used for validating the fields of Item1.
type tempItem1  struct {
    Text *string `json:"text"`
}

func (i *tempItem1) validate() error {
    var errs []string
    if i.Text == nil {
        errs = append(errs, "required field `text` is missing for type `Item1`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
