/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// DeviceProvisioningHistoryListResult represents a DeviceProvisioningHistoryListResult struct.
// Response to return the provisioning history of a specified device during a specified time period.
type DeviceProvisioningHistoryListResult struct {
    // False for a status 200 response.True for a status 202 response, indicating that there is more data to be retrieved.
    HasMoreData          *bool                  `json:"hasMoreData,omitempty"`
    // The provisioning history of a specified device during a specified time period.
    ProvisioningHistory  []ProvisioningHistory  `json:"provisioningHistory,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceProvisioningHistoryListResult,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceProvisioningHistoryListResult) String() string {
    return fmt.Sprintf(
    	"DeviceProvisioningHistoryListResult[HasMoreData=%v, ProvisioningHistory=%v, AdditionalProperties=%v]",
    	d.HasMoreData, d.ProvisioningHistory, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceProvisioningHistoryListResult.
// It customizes the JSON marshaling process for DeviceProvisioningHistoryListResult objects.
func (d DeviceProvisioningHistoryListResult) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "hasMoreData", "provisioningHistory"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceProvisioningHistoryListResult object to a map representation for JSON marshaling.
func (d DeviceProvisioningHistoryListResult) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    if d.HasMoreData != nil {
        structMap["hasMoreData"] = d.HasMoreData
    }
    if d.ProvisioningHistory != nil {
        structMap["provisioningHistory"] = d.ProvisioningHistory
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceProvisioningHistoryListResult.
// It customizes the JSON unmarshaling process for DeviceProvisioningHistoryListResult objects.
func (d *DeviceProvisioningHistoryListResult) UnmarshalJSON(input []byte) error {
    var temp tempDeviceProvisioningHistoryListResult
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "hasMoreData", "provisioningHistory")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.HasMoreData = temp.HasMoreData
    d.ProvisioningHistory = temp.ProvisioningHistory
    return nil
}

// tempDeviceProvisioningHistoryListResult is a temporary struct used for validating the fields of DeviceProvisioningHistoryListResult.
type tempDeviceProvisioningHistoryListResult  struct {
    HasMoreData         *bool                 `json:"hasMoreData,omitempty"`
    ProvisioningHistory []ProvisioningHistory `json:"provisioningHistory,omitempty"`
}
