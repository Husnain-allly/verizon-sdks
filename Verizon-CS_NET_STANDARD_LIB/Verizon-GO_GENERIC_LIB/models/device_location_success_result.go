/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// DeviceLocationSuccessResult represents a DeviceLocationSuccessResult struct.
// Whether the device location request was successful or not.
type DeviceLocationSuccessResult struct {
    Success              *bool                  `json:"success,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceLocationSuccessResult,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceLocationSuccessResult) String() string {
    return fmt.Sprintf(
    	"DeviceLocationSuccessResult[Success=%v, AdditionalProperties=%v]",
    	d.Success, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceLocationSuccessResult.
// It customizes the JSON marshaling process for DeviceLocationSuccessResult objects.
func (d DeviceLocationSuccessResult) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "success"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceLocationSuccessResult object to a map representation for JSON marshaling.
func (d DeviceLocationSuccessResult) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    if d.Success != nil {
        structMap["success"] = d.Success
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceLocationSuccessResult.
// It customizes the JSON unmarshaling process for DeviceLocationSuccessResult objects.
func (d *DeviceLocationSuccessResult) UnmarshalJSON(input []byte) error {
    var temp tempDeviceLocationSuccessResult
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "success")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.Success = temp.Success
    return nil
}

// tempDeviceLocationSuccessResult is a temporary struct used for validating the fields of DeviceLocationSuccessResult.
type tempDeviceLocationSuccessResult  struct {
    Success *bool `json:"success,omitempty"`
}
