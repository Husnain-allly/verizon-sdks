/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "github.com/google/uuid"
    "strings"
)

// ClientRegistrationResponse represents a ClientRegistrationResponse struct.
// Response for /clients/registration. It provides a generated device ID and the certificates needed to connect the ETX Message Exchange.
type ClientRegistrationResponse struct {
    // The generated ID (UUID v4) for the device. It can be used as:
    // - the MQTT Client ID when connecting to the Message Exchange system
    // - a parameter when asking for the connection endpoint
    // - a parameter when finishing the device registration
    // - a parameter when unregistering the device
    DeviceId    uuid.UUID   `json:"DeviceID"`
    // Structure for the credentials required to connect to the ETX MQTT Message Exchange.
    Certificate Certificate `json:"Certificate"`
}

// String implements the fmt.Stringer interface for ClientRegistrationResponse,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c ClientRegistrationResponse) String() string {
    return fmt.Sprintf(
    	"ClientRegistrationResponse[DeviceId=%v, Certificate=%v]",
    	c.DeviceId, c.Certificate)
}

// MarshalJSON implements the json.Marshaler interface for ClientRegistrationResponse.
// It customizes the JSON marshaling process for ClientRegistrationResponse objects.
func (c ClientRegistrationResponse) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(c.toMap())
}

// toMap converts the ClientRegistrationResponse object to a map representation for JSON marshaling.
func (c ClientRegistrationResponse) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["DeviceID"] = c.DeviceId
    structMap["Certificate"] = c.Certificate.toMap()
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for ClientRegistrationResponse.
// It customizes the JSON unmarshaling process for ClientRegistrationResponse objects.
func (c *ClientRegistrationResponse) UnmarshalJSON(input []byte) error {
    var temp tempClientRegistrationResponse
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    c.DeviceId = *temp.DeviceId
    c.Certificate = *temp.Certificate
    return nil
}

// tempClientRegistrationResponse is a temporary struct used for validating the fields of ClientRegistrationResponse.
type tempClientRegistrationResponse  struct {
    DeviceId    *uuid.UUID   `json:"DeviceID"`
    Certificate *Certificate `json:"Certificate"`
}

func (c *tempClientRegistrationResponse) validate() error {
    var errs []string
    if c.DeviceId == nil {
        errs = append(errs, "required field `DeviceID` is missing for type `ClientRegistrationResponse`")
    }
    if c.Certificate == nil {
        errs = append(errs, "required field `Certificate` is missing for type `ClientRegistrationResponse`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
