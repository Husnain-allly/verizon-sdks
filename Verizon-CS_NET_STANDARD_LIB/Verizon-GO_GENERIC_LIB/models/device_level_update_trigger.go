/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// DeviceLevelUpdateTrigger represents a DeviceLevelUpdateTrigger struct.
type DeviceLevelUpdateTrigger struct {
    // The system assigned UUID of the trigger
    TriggerId       *string            `json:"triggerId,omitempty"`
    // The user defined name of the trigger
    TriggerName     *string            `json:"triggerName,omitempty"`
    // The Enterprise Customer Profile Database ID
    EcpdId          *string            `json:"ecpdId,omitempty"`
    // The type of trigger being created or modified
    TriggerCategory *TriggerCategory   `json:"triggerCategory,omitempty"`
    DataTrigger     *DataTrigger2      `json:"dataTrigger,omitempty"`
    Notification    *Notificationarray `json:"notification,omitempty"`
}

// String implements the fmt.Stringer interface for DeviceLevelUpdateTrigger,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceLevelUpdateTrigger) String() string {
    return fmt.Sprintf(
    	"DeviceLevelUpdateTrigger[TriggerId=%v, TriggerName=%v, EcpdId=%v, TriggerCategory=%v, DataTrigger=%v, Notification=%v]",
    	d.TriggerId, d.TriggerName, d.EcpdId, d.TriggerCategory, d.DataTrigger, d.Notification)
}

// MarshalJSON implements the json.Marshaler interface for DeviceLevelUpdateTrigger.
// It customizes the JSON marshaling process for DeviceLevelUpdateTrigger objects.
func (d DeviceLevelUpdateTrigger) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceLevelUpdateTrigger object to a map representation for JSON marshaling.
func (d DeviceLevelUpdateTrigger) toMap() map[string]any {
    structMap := make(map[string]any)
    if d.TriggerId != nil {
        structMap["triggerId"] = d.TriggerId
    }
    if d.TriggerName != nil {
        structMap["triggerName"] = d.TriggerName
    }
    if d.EcpdId != nil {
        structMap["ecpdId"] = d.EcpdId
    }
    if d.TriggerCategory != nil {
        structMap["triggerCategory"] = d.TriggerCategory
    }
    if d.DataTrigger != nil {
        structMap["dataTrigger"] = d.DataTrigger.toMap()
    }
    if d.Notification != nil {
        structMap["notification"] = d.Notification.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceLevelUpdateTrigger.
// It customizes the JSON unmarshaling process for DeviceLevelUpdateTrigger objects.
func (d *DeviceLevelUpdateTrigger) UnmarshalJSON(input []byte) error {
    var temp tempDeviceLevelUpdateTrigger
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    
    d.TriggerId = temp.TriggerId
    d.TriggerName = temp.TriggerName
    d.EcpdId = temp.EcpdId
    d.TriggerCategory = temp.TriggerCategory
    d.DataTrigger = temp.DataTrigger
    d.Notification = temp.Notification
    return nil
}

// tempDeviceLevelUpdateTrigger is a temporary struct used for validating the fields of DeviceLevelUpdateTrigger.
type tempDeviceLevelUpdateTrigger  struct {
    TriggerId       *string            `json:"triggerId,omitempty"`
    TriggerName     *string            `json:"triggerName,omitempty"`
    EcpdId          *string            `json:"ecpdId,omitempty"`
    TriggerCategory *TriggerCategory   `json:"triggerCategory,omitempty"`
    DataTrigger     *DataTrigger2      `json:"dataTrigger,omitempty"`
    Notification    *Notificationarray `json:"notification,omitempty"`
}
