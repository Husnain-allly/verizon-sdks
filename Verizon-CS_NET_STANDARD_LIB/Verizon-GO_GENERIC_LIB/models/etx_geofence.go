/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// EtxGeofence represents a EtxGeofence struct.
// The GeoJSON representation of geofence. Geofence supports the following geometry types: LineString, Polygon, MultiLineString, and MultiPolygon. The system only supports a single Feature in the FeatureCollection, so only one Line, Polygon, MultiLine or MultiPolygon can be defined within one Geofencing configuration.
type EtxGeofence struct {
    Type     FeatureCollectionType `json:"type"`
    Features []GeoFeature          `json:"features"`
}

// String implements the fmt.Stringer interface for EtxGeofence,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (e EtxGeofence) String() string {
    return fmt.Sprintf(
    	"EtxGeofence[Type=%v, Features=%v]",
    	e.Type, e.Features)
}

// MarshalJSON implements the json.Marshaler interface for EtxGeofence.
// It customizes the JSON marshaling process for EtxGeofence objects.
func (e EtxGeofence) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(e.toMap())
}

// toMap converts the EtxGeofence object to a map representation for JSON marshaling.
func (e EtxGeofence) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["type"] = e.Type
    structMap["features"] = e.Features
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for EtxGeofence.
// It customizes the JSON unmarshaling process for EtxGeofence objects.
func (e *EtxGeofence) UnmarshalJSON(input []byte) error {
    var temp tempEtxGeofence
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    e.Type = *temp.Type
    e.Features = *temp.Features
    return nil
}

// tempEtxGeofence is a temporary struct used for validating the fields of EtxGeofence.
type tempEtxGeofence  struct {
    Type     *FeatureCollectionType `json:"type"`
    Features *[]GeoFeature          `json:"features"`
}

func (e *tempEtxGeofence) validate() error {
    var errs []string
    if e.Type == nil {
        errs = append(errs, "required field `type` is missing for type `ETXGeofence`")
    }
    if e.Features == nil {
        errs = append(errs, "required field `features` is missing for type `ETXGeofence`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
