/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// DeviceIdSearch represents a DeviceIdSearch struct.
// Search by device id.
type DeviceIdSearch struct {
    // The string appears anywhere in the identifer.
    Contains             string                 `json:"contains"`
    // The identifer must start with the specified string.
    Startswith           *string                `json:"startswith,omitempty"`
    // The identifier must end with the specified string.
    Endswith             *string                `json:"endswith,omitempty"`
    // The type of the device identifier. Valid types of identifiers are:ESN (decimal),EID,ICCID (up to 20 digits),IMEI (up to 16 digits),MDN,MEID (hexadecimal),MSISDN.
    Kind                 string                 `json:"kind"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceIdSearch,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceIdSearch) String() string {
    return fmt.Sprintf(
    	"DeviceIdSearch[Contains=%v, Startswith=%v, Endswith=%v, Kind=%v, AdditionalProperties=%v]",
    	d.Contains, d.Startswith, d.Endswith, d.Kind, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceIdSearch.
// It customizes the JSON marshaling process for DeviceIdSearch objects.
func (d DeviceIdSearch) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "contains", "startswith", "endswith", "kind"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceIdSearch object to a map representation for JSON marshaling.
func (d DeviceIdSearch) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    structMap["contains"] = d.Contains
    if d.Startswith != nil {
        structMap["startswith"] = d.Startswith
    }
    if d.Endswith != nil {
        structMap["endswith"] = d.Endswith
    }
    structMap["kind"] = d.Kind
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceIdSearch.
// It customizes the JSON unmarshaling process for DeviceIdSearch objects.
func (d *DeviceIdSearch) UnmarshalJSON(input []byte) error {
    var temp tempDeviceIdSearch
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "contains", "startswith", "endswith", "kind")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.Contains = *temp.Contains
    d.Startswith = temp.Startswith
    d.Endswith = temp.Endswith
    d.Kind = *temp.Kind
    return nil
}

// tempDeviceIdSearch is a temporary struct used for validating the fields of DeviceIdSearch.
type tempDeviceIdSearch  struct {
    Contains   *string `json:"contains"`
    Startswith *string `json:"startswith,omitempty"`
    Endswith   *string `json:"endswith,omitempty"`
    Kind       *string `json:"kind"`
}

func (d *tempDeviceIdSearch) validate() error {
    var errs []string
    if d.Contains == nil {
        errs = append(errs, "required field `contains` is missing for type `DeviceIdSearch`")
    }
    if d.Kind == nil {
        errs = append(errs, "required field `kind` is missing for type `DeviceIdSearch`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
