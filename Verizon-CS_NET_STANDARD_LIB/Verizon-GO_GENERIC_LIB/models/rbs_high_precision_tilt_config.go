/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// RbsHighPrecisionTiltConfig represents a RbsHighPrecisionTiltConfig struct.
type RbsHighPrecisionTiltConfig struct {
    // the reporting mode of the tilt sensor
    Mode                 *Mode                  `json:"mode,omitempty"`
    // The units and values of the time interval for the sensor to send a report
    PeriodicReporting    *PeriodicReporting     `json:"periodic-reporting,omitempty"`
    // The time the threshold condition exists, in milliseconds, to recognize an event
    HoldTime             *int                   `json:"hold-time,omitempty"`
    // the threshold value, from verticle, to recognize an event
    AngleAway            *int                   `json:"angle-away,omitempty"`
    // the threshold value, moving towards  verticle, to recognize an event
    AngleToward          *int                   `json:"angle-toward,omitempty"`
    Tscore               *Tscore                `json:"tscore,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for RbsHighPrecisionTiltConfig,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (r RbsHighPrecisionTiltConfig) String() string {
    return fmt.Sprintf(
    	"RbsHighPrecisionTiltConfig[Mode=%v, PeriodicReporting=%v, HoldTime=%v, AngleAway=%v, AngleToward=%v, Tscore=%v, AdditionalProperties=%v]",
    	r.Mode, r.PeriodicReporting, r.HoldTime, r.AngleAway, r.AngleToward, r.Tscore, r.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for RbsHighPrecisionTiltConfig.
// It customizes the JSON marshaling process for RbsHighPrecisionTiltConfig objects.
func (r RbsHighPrecisionTiltConfig) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(r.AdditionalProperties,
        "mode", "periodic-reporting", "hold-time", "angle-away", "angle-toward", "tscore"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(r.toMap())
}

// toMap converts the RbsHighPrecisionTiltConfig object to a map representation for JSON marshaling.
func (r RbsHighPrecisionTiltConfig) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, r.AdditionalProperties)
    if r.Mode != nil {
        structMap["mode"] = r.Mode
    }
    if r.PeriodicReporting != nil {
        structMap["periodic-reporting"] = r.PeriodicReporting.toMap()
    }
    if r.HoldTime != nil {
        structMap["hold-time"] = r.HoldTime
    }
    if r.AngleAway != nil {
        structMap["angle-away"] = r.AngleAway
    }
    if r.AngleToward != nil {
        structMap["angle-toward"] = r.AngleToward
    }
    if r.Tscore != nil {
        structMap["tscore"] = r.Tscore.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for RbsHighPrecisionTiltConfig.
// It customizes the JSON unmarshaling process for RbsHighPrecisionTiltConfig objects.
func (r *RbsHighPrecisionTiltConfig) UnmarshalJSON(input []byte) error {
    var temp tempRbsHighPrecisionTiltConfig
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "mode", "periodic-reporting", "hold-time", "angle-away", "angle-toward", "tscore")
    if err != nil {
    	return err
    }
    r.AdditionalProperties = additionalProperties
    
    r.Mode = temp.Mode
    r.PeriodicReporting = temp.PeriodicReporting
    r.HoldTime = temp.HoldTime
    r.AngleAway = temp.AngleAway
    r.AngleToward = temp.AngleToward
    r.Tscore = temp.Tscore
    return nil
}

// tempRbsHighPrecisionTiltConfig is a temporary struct used for validating the fields of RbsHighPrecisionTiltConfig.
type tempRbsHighPrecisionTiltConfig  struct {
    Mode              *Mode              `json:"mode,omitempty"`
    PeriodicReporting *PeriodicReporting `json:"periodic-reporting,omitempty"`
    HoldTime          *int               `json:"hold-time,omitempty"`
    AngleAway         *int               `json:"angle-away,omitempty"`
    AngleToward       *int               `json:"angle-toward,omitempty"`
    Tscore            *Tscore            `json:"tscore,omitempty"`
}
