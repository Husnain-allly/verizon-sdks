/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// Heading represents a Heading struct.
type Heading struct {
    // The minimum value of heading in unit of degrees.
    Min float64 `json:"min"`
    // The maximum value of heading in unit of degrees.
    Max float64 `json:"max"`
}

// String implements the fmt.Stringer interface for Heading,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (h Heading) String() string {
    return fmt.Sprintf(
    	"Heading[Min=%v, Max=%v]",
    	h.Min, h.Max)
}

// MarshalJSON implements the json.Marshaler interface for Heading.
// It customizes the JSON marshaling process for Heading objects.
func (h Heading) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(h.toMap())
}

// toMap converts the Heading object to a map representation for JSON marshaling.
func (h Heading) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["min"] = h.Min
    structMap["max"] = h.Max
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Heading.
// It customizes the JSON unmarshaling process for Heading objects.
func (h *Heading) UnmarshalJSON(input []byte) error {
    var temp tempHeading
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    h.Min = *temp.Min
    h.Max = *temp.Max
    return nil
}

// tempHeading is a temporary struct used for validating the fields of Heading.
type tempHeading  struct {
    Min *float64 `json:"min"`
    Max *float64 `json:"max"`
}

func (h *tempHeading) validate() error {
    var errs []string
    if h.Min == nil {
        errs = append(errs, "required field `min` is missing for type `Heading`")
    }
    if h.Max == nil {
        errs = append(errs, "required field `max` is missing for type `Heading`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
