/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
)

// AccountLevelObjectCondition represents a AccountLevelObjectCondition struct.
// This is a container for any-of cases.
type AccountLevelObjectCondition struct {
    value                 any
    isConditionType       bool
    isConditionObjectCall bool
}

// String implements the fmt.Stringer interface for AccountLevelObjectCondition,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a AccountLevelObjectCondition) String() string {
    return fmt.Sprintf("%v", a.value)
}

// MarshalJSON implements the json.Marshaler interface for AccountLevelObjectCondition.
// It customizes the JSON marshaling process for AccountLevelObjectCondition objects.
func (a AccountLevelObjectCondition) MarshalJSON() (
    []byte,
    error) {
    if a.value == nil {
        return nil, errors.New("No underlying type is set. Please use any of the `models.AccountLevelObjectConditionContainer.From*` functions to initialize the AccountLevelObjectCondition object.")
    }
    return json.Marshal(a.toMap())
}

// toMap converts the AccountLevelObjectCondition object to a map representation for JSON marshaling.
func (a *AccountLevelObjectCondition) toMap() any {
    switch obj := a.value.(type) {
    case *ConditionType:
        return *obj
    case *ConditionObjectCall:
        return obj.toMap()
    }
    return nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for AccountLevelObjectCondition.
// It customizes the JSON unmarshaling process for AccountLevelObjectCondition objects.
func (a *AccountLevelObjectCondition) UnmarshalJSON(input []byte) error {
    result, err := UnmarshallAnyOf(input,
        NewTypeHolder(new(ConditionType), false, &a.isConditionType),
        NewTypeHolder(&ConditionObjectCall{}, false, &a.isConditionObjectCall),
    )
    
    a.value = result
    return err
}

func (a *AccountLevelObjectCondition) AsConditionType() (
    *ConditionType,
    bool) {
    if !a.isConditionType {
        return nil, false
    }
    return a.value.(*ConditionType), true
}

func (a *AccountLevelObjectCondition) AsConditionObjectCall() (
    *ConditionObjectCall,
    bool) {
    if !a.isConditionObjectCall {
        return nil, false
    }
    return a.value.(*ConditionObjectCall), true
}

// internalAccountLevelObjectCondition represents a accountLevelObjectCondition struct.
// This is a container for any-of cases.
type internalAccountLevelObjectCondition struct {}

var AccountLevelObjectConditionContainer internalAccountLevelObjectCondition

// The internalAccountLevelObjectCondition instance, wrapping the provided ConditionType value.
func (a *internalAccountLevelObjectCondition) FromConditionType(val ConditionType) AccountLevelObjectCondition {
    return AccountLevelObjectCondition{value: &val}
}

// The internalAccountLevelObjectCondition instance, wrapping the provided ConditionObjectCall value.
func (a *internalAccountLevelObjectCondition) FromConditionObjectCall(val ConditionObjectCall) AccountLevelObjectCondition {
    return AccountLevelObjectCondition{value: &val}
}
