/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// AccountLead represents a AccountLead struct.
// A successful response returns an array of lead objects.
type AccountLead struct {
    // The customer address for the line's primary place of use, for line usage taxation.
    Address              *Address               `json:"address,omitempty"`
    // Unique number for each lead. Use this value in the leadId parameter when activating devices to credit the activations to the lead.
    LeadId               *string                `json:"leadId,omitempty"`
    // The current state of the lead, such as “Qualified” or “Closed.”
    LeadState            *string                `json:"leadState,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for AccountLead,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a AccountLead) String() string {
    return fmt.Sprintf(
    	"AccountLead[Address=%v, LeadId=%v, LeadState=%v, AdditionalProperties=%v]",
    	a.Address, a.LeadId, a.LeadState, a.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for AccountLead.
// It customizes the JSON marshaling process for AccountLead objects.
func (a AccountLead) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(a.AdditionalProperties,
        "address", "leadId", "leadState"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(a.toMap())
}

// toMap converts the AccountLead object to a map representation for JSON marshaling.
func (a AccountLead) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, a.AdditionalProperties)
    if a.Address != nil {
        structMap["address"] = a.Address.toMap()
    }
    if a.LeadId != nil {
        structMap["leadId"] = a.LeadId
    }
    if a.LeadState != nil {
        structMap["leadState"] = a.LeadState
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for AccountLead.
// It customizes the JSON unmarshaling process for AccountLead objects.
func (a *AccountLead) UnmarshalJSON(input []byte) error {
    var temp tempAccountLead
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "address", "leadId", "leadState")
    if err != nil {
    	return err
    }
    a.AdditionalProperties = additionalProperties
    
    a.Address = temp.Address
    a.LeadId = temp.LeadId
    a.LeadState = temp.LeadState
    return nil
}

// tempAccountLead is a temporary struct used for validating the fields of AccountLead.
type tempAccountLead  struct {
    Address   *Address `json:"address,omitempty"`
    LeadId    *string  `json:"leadId,omitempty"`
    LeadState *string  `json:"leadState,omitempty"`
}
