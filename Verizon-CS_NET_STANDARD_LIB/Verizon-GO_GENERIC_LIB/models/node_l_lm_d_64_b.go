/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// NodeLLmD64B represents a NodeLLmD64B struct.
// A 64-bit node type with lat-long values expressed in standard SAE 1/10th of a microdegree.
type NodeLLmD64B struct {
    // The geographic longitude of an object, expressed in 1/10th integer microdegrees, as a 32-bit value, and with reference to the horizontal datum then in use. The value 1800000001 shall be used when unavailable.
    Lon int `json:"lon"`
    // The geographic latitude of an object, expressed in 1/10th integer microdegrees, as a 31 bit value, and with reference to the horizontal datum then in use. The value 900000001 shall be used when unavailable.
    Lat int `json:"lat"`
}

// String implements the fmt.Stringer interface for NodeLLmD64B,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (n NodeLLmD64B) String() string {
    return fmt.Sprintf(
    	"NodeLLmD64B[Lon=%v, Lat=%v]",
    	n.Lon, n.Lat)
}

// MarshalJSON implements the json.Marshaler interface for NodeLLmD64B.
// It customizes the JSON marshaling process for NodeLLmD64B objects.
func (n NodeLLmD64B) MarshalJSON() (
    []byte,
    error) {
    return json.Marshal(n.toMap())
}

// toMap converts the NodeLLmD64B object to a map representation for JSON marshaling.
func (n NodeLLmD64B) toMap() map[string]any {
    structMap := make(map[string]any)
    structMap["lon"] = n.Lon
    structMap["lat"] = n.Lat
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for NodeLLmD64B.
// It customizes the JSON unmarshaling process for NodeLLmD64B objects.
func (n *NodeLLmD64B) UnmarshalJSON(input []byte) error {
    var temp tempNodeLLmD64B
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    
    n.Lon = *temp.Lon
    n.Lat = *temp.Lat
    return nil
}

// tempNodeLLmD64B is a temporary struct used for validating the fields of NodeLLmD64B.
type tempNodeLLmD64B  struct {
    Lon *int `json:"lon"`
    Lat *int `json:"lat"`
}

func (n *tempNodeLLmD64B) validate() error {
    var errs []string
    if n.Lon == nil {
        errs = append(errs, "required field `lon` is missing for type `Node-LLmD-64b`")
    }
    if n.Lat == nil {
        errs = append(errs, "required field `lat` is missing for type `Node-LLmD-64b`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
