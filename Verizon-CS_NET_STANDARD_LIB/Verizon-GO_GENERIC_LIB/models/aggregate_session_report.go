/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// AggregateSessionReport represents a AggregateSessionReport struct.
// Session and usage details for up to 10 devices.
type AggregateSessionReport struct {
    // A unique string that associates the request with the location report information that is sent in asynchronous callback message.ThingSpace will send a separate callback message for each device that was in the request. All of the callback messages will have the same txid.
    Txid                 *string                `json:"txid"`
    // Contains usage per device.
    Usage                []AggregateUsageItem   `json:"usage,omitempty"`
    // An object containing any errors reported by the device.
    Errors               []AggregateUsageError  `json:"errors,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for AggregateSessionReport,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a AggregateSessionReport) String() string {
    return fmt.Sprintf(
    	"AggregateSessionReport[Txid=%v, Usage=%v, Errors=%v, AdditionalProperties=%v]",
    	a.Txid, a.Usage, a.Errors, a.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for AggregateSessionReport.
// It customizes the JSON marshaling process for AggregateSessionReport objects.
func (a AggregateSessionReport) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(a.AdditionalProperties,
        "txid", "usage", "errors"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(a.toMap())
}

// toMap converts the AggregateSessionReport object to a map representation for JSON marshaling.
func (a AggregateSessionReport) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, a.AdditionalProperties)
    if a.Txid != nil {
        structMap["txid"] = a.Txid
    } else {
        structMap["txid"] = nil
    }
    if a.Usage != nil {
        structMap["usage"] = a.Usage
    }
    if a.Errors != nil {
        structMap["errors"] = a.Errors
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for AggregateSessionReport.
// It customizes the JSON unmarshaling process for AggregateSessionReport objects.
func (a *AggregateSessionReport) UnmarshalJSON(input []byte) error {
    var temp tempAggregateSessionReport
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "txid", "usage", "errors")
    if err != nil {
    	return err
    }
    a.AdditionalProperties = additionalProperties
    
    a.Txid = temp.Txid
    a.Usage = temp.Usage
    a.Errors = temp.Errors
    return nil
}

// tempAggregateSessionReport is a temporary struct used for validating the fields of AggregateSessionReport.
type tempAggregateSessionReport  struct {
    Txid   *string               `json:"txid"`
    Usage  []AggregateUsageItem  `json:"usage,omitempty"`
    Errors []AggregateUsageError `json:"errors,omitempty"`
}

func (a *tempAggregateSessionReport) validate() error {
    var errs []string
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
