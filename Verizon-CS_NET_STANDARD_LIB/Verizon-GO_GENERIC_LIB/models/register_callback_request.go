/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// RegisterCallbackRequest represents a RegisterCallbackRequest struct.
// Request to register a callback.
type RegisterCallbackRequest struct {
    // The name of the callback service that you want to subscribe to.
    Name                 string                 `json:"name"`
    // The address on your server where you have enabled a listening service for callback messages.
    Url                  string                 `json:"url"`
    // The user name that the M2M Platform should return in the callback messages.
    Username             *string                `json:"username,omitempty"`
    // The password that the M2M Platform should return in the callback messages.
    Password             *string                `json:"password,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for RegisterCallbackRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (r RegisterCallbackRequest) String() string {
    return fmt.Sprintf(
    	"RegisterCallbackRequest[Name=%v, Url=%v, Username=%v, Password=%v, AdditionalProperties=%v]",
    	r.Name, r.Url, r.Username, r.Password, r.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for RegisterCallbackRequest.
// It customizes the JSON marshaling process for RegisterCallbackRequest objects.
func (r RegisterCallbackRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(r.AdditionalProperties,
        "name", "url", "username", "password"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(r.toMap())
}

// toMap converts the RegisterCallbackRequest object to a map representation for JSON marshaling.
func (r RegisterCallbackRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, r.AdditionalProperties)
    structMap["name"] = r.Name
    structMap["url"] = r.Url
    if r.Username != nil {
        structMap["username"] = r.Username
    }
    if r.Password != nil {
        structMap["password"] = r.Password
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for RegisterCallbackRequest.
// It customizes the JSON unmarshaling process for RegisterCallbackRequest objects.
func (r *RegisterCallbackRequest) UnmarshalJSON(input []byte) error {
    var temp tempRegisterCallbackRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "name", "url", "username", "password")
    if err != nil {
    	return err
    }
    r.AdditionalProperties = additionalProperties
    
    r.Name = *temp.Name
    r.Url = *temp.Url
    r.Username = temp.Username
    r.Password = temp.Password
    return nil
}

// tempRegisterCallbackRequest is a temporary struct used for validating the fields of RegisterCallbackRequest.
type tempRegisterCallbackRequest  struct {
    Name     *string `json:"name"`
    Url      *string `json:"url"`
    Username *string `json:"username,omitempty"`
    Password *string `json:"password,omitempty"`
}

func (r *tempRegisterCallbackRequest) validate() error {
    var errs []string
    if r.Name == nil {
        errs = append(errs, "required field `name` is missing for type `RegisterCallbackRequest`")
    }
    if r.Url == nil {
        errs = append(errs, "required field `url` is missing for type `RegisterCallbackRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
