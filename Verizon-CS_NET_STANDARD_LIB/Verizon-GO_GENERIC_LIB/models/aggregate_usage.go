/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// AggregateUsage represents a AggregateUsage struct.
type AggregateUsage struct {
    DeviceId             *GioDeviceId           `json:"deviceId,omitempty"`
    // The numeric name of the account, in the format "0000123456-00001". Leading zeros must be included.
    AccountName          *string                `json:"accountName,omitempty"`
    // The start date of the time period queried as "$datetime"
    StartTime            *string                `json:"startTime,omitempty"`
    // The end date of the time period being queried as "$datetime"
    EndTime              *string                `json:"endTime,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for AggregateUsage,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (a AggregateUsage) String() string {
    return fmt.Sprintf(
    	"AggregateUsage[DeviceId=%v, AccountName=%v, StartTime=%v, EndTime=%v, AdditionalProperties=%v]",
    	a.DeviceId, a.AccountName, a.StartTime, a.EndTime, a.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for AggregateUsage.
// It customizes the JSON marshaling process for AggregateUsage objects.
func (a AggregateUsage) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(a.AdditionalProperties,
        "deviceId", "accountName", "startTime", "endTime"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(a.toMap())
}

// toMap converts the AggregateUsage object to a map representation for JSON marshaling.
func (a AggregateUsage) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, a.AdditionalProperties)
    if a.DeviceId != nil {
        structMap["deviceId"] = a.DeviceId.toMap()
    }
    if a.AccountName != nil {
        structMap["accountName"] = a.AccountName
    }
    if a.StartTime != nil {
        structMap["startTime"] = a.StartTime
    }
    if a.EndTime != nil {
        structMap["endTime"] = a.EndTime
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for AggregateUsage.
// It customizes the JSON unmarshaling process for AggregateUsage objects.
func (a *AggregateUsage) UnmarshalJSON(input []byte) error {
    var temp tempAggregateUsage
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceId", "accountName", "startTime", "endTime")
    if err != nil {
    	return err
    }
    a.AdditionalProperties = additionalProperties
    
    a.DeviceId = temp.DeviceId
    a.AccountName = temp.AccountName
    a.StartTime = temp.StartTime
    a.EndTime = temp.EndTime
    return nil
}

// tempAggregateUsage is a temporary struct used for validating the fields of AggregateUsage.
type tempAggregateUsage  struct {
    DeviceId    *GioDeviceId `json:"deviceId,omitempty"`
    AccountName *string      `json:"accountName,omitempty"`
    StartTime   *string      `json:"startTime,omitempty"`
    EndTime     *string      `json:"endTime,omitempty"`
}
