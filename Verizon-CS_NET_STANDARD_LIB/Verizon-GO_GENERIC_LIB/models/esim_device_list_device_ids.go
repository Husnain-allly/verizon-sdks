/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
)

// EsimDeviceListDeviceIds represents a EsimDeviceListDeviceIds struct.
// This is Array of a container for any-of cases.
type EsimDeviceListDeviceIds struct {
    value          any
    isEsimDeviceId bool
    isDeviceId2    bool
}

// String implements the fmt.Stringer interface for EsimDeviceListDeviceIds,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (e EsimDeviceListDeviceIds) String() string {
    return fmt.Sprintf("%v", e.value)
}

// MarshalJSON implements the json.Marshaler interface for EsimDeviceListDeviceIds.
// It customizes the JSON marshaling process for EsimDeviceListDeviceIds objects.
func (e EsimDeviceListDeviceIds) MarshalJSON() (
    []byte,
    error) {
    if e.value == nil {
        return nil, errors.New("No underlying type is set. Please use any of the `models.EsimDeviceListDeviceIdsContainer.From*` functions to initialize the EsimDeviceListDeviceIds object.")
    }
    return json.Marshal(e.toMap())
}

// toMap converts the EsimDeviceListDeviceIds object to a map representation for JSON marshaling.
func (e *EsimDeviceListDeviceIds) toMap() any {
    switch obj := e.value.(type) {
    case *EsimDeviceId:
        return obj.toMap()
    case *DeviceId2:
        return obj.toMap()
    }
    return nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for EsimDeviceListDeviceIds.
// It customizes the JSON unmarshaling process for EsimDeviceListDeviceIds objects.
func (e *EsimDeviceListDeviceIds) UnmarshalJSON(input []byte) error {
    result, err := UnmarshallAnyOf(input,
        NewTypeHolder(&EsimDeviceId{}, false, &e.isEsimDeviceId),
        NewTypeHolder(&DeviceId2{}, false, &e.isDeviceId2),
    )
    
    e.value = result
    return err
}

func (e *EsimDeviceListDeviceIds) AsEsimDeviceId() (
    *EsimDeviceId,
    bool) {
    if !e.isEsimDeviceId {
        return nil, false
    }
    return e.value.(*EsimDeviceId), true
}

func (e *EsimDeviceListDeviceIds) AsDeviceId2() (
    *DeviceId2,
    bool) {
    if !e.isDeviceId2 {
        return nil, false
    }
    return e.value.(*DeviceId2), true
}

// internalEsimDeviceListDeviceIds represents a esimDeviceListDeviceIds struct.
// This is Array of a container for any-of cases.
type internalEsimDeviceListDeviceIds struct {}

var EsimDeviceListDeviceIdsContainer internalEsimDeviceListDeviceIds

// The internalEsimDeviceListDeviceIds instance, wrapping the provided EsimDeviceId value.
func (e *internalEsimDeviceListDeviceIds) FromEsimDeviceId(val EsimDeviceId) EsimDeviceListDeviceIds {
    return EsimDeviceListDeviceIds{value: &val}
}

// The internalEsimDeviceListDeviceIds instance, wrapping the provided DeviceId2 value.
func (e *internalEsimDeviceListDeviceIds) FromDeviceId2(val DeviceId2) EsimDeviceListDeviceIds {
    return EsimDeviceListDeviceIds{value: &val}
}
