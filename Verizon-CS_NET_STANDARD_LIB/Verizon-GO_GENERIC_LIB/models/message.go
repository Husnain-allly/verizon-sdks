/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// Message represents a Message struct.
type Message struct {
    // Defines whether the message is private or public.
    // Private messages are published under the Vendor ID defined in the configuration and only visible to devices of selected vendors.
    // Public messages are published under the Public vendor and are visible to all the users.
    IsPrivate            bool                   `json:"isPrivate"`
    // Type of the Road User.
    RoadUserType         []RoadUserTypes        `json:"roadUserType"`
    // Trigger conditions that define on which road user action the message will be sent. If multiple Trigger Conditions are defined any of them will trigger the message.
    TriggerConditions    []TriggerCondition     `json:"triggerConditions"`
    // List of limitations. These limitations can be used for making the trigger condition more precise by defining speed and motion direction requirements to be met before the messages are sent out.
    Limits               []Limits               `json:"limits,omitempty"`
    // Type of the distribution.
    DistributionType     []DistributionTypes    `json:"distributionType,omitempty"`
    // The distribution schedule parameters for broadcast messages.
    DistributionSchedule *DistributionSchedule  `json:"distributionSchedule,omitempty"`
    // Custom message which is defined by the user and can support "any" message type or format.
    // **Note:** ETX prefers the j2735 or the j2735_gr encoding and only vendor specific message types are allowed to be published in different message formats.
    Generic              Generic                `json:"generic"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for Message,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (m Message) String() string {
    return fmt.Sprintf(
    	"Message[IsPrivate=%v, RoadUserType=%v, TriggerConditions=%v, Limits=%v, DistributionType=%v, DistributionSchedule=%v, Generic=%v, AdditionalProperties=%v]",
    	m.IsPrivate, m.RoadUserType, m.TriggerConditions, m.Limits, m.DistributionType, m.DistributionSchedule, m.Generic, m.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for Message.
// It customizes the JSON marshaling process for Message objects.
func (m Message) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(m.AdditionalProperties,
        "isPrivate", "roadUserType", "triggerConditions", "limits", "distributionType", "distributionSchedule", "generic"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(m.toMap())
}

// toMap converts the Message object to a map representation for JSON marshaling.
func (m Message) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, m.AdditionalProperties)
    structMap["isPrivate"] = m.IsPrivate
    structMap["roadUserType"] = m.RoadUserType
    structMap["triggerConditions"] = m.TriggerConditions
    if m.Limits != nil {
        structMap["limits"] = m.Limits
    }
    if m.DistributionType != nil {
        structMap["distributionType"] = m.DistributionType
    }
    if m.DistributionSchedule != nil {
        structMap["distributionSchedule"] = m.DistributionSchedule.toMap()
    }
    structMap["generic"] = m.Generic.toMap()
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Message.
// It customizes the JSON unmarshaling process for Message objects.
func (m *Message) UnmarshalJSON(input []byte) error {
    var temp tempMessage
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "isPrivate", "roadUserType", "triggerConditions", "limits", "distributionType", "distributionSchedule", "generic")
    if err != nil {
    	return err
    }
    m.AdditionalProperties = additionalProperties
    
    m.IsPrivate = *temp.IsPrivate
    m.RoadUserType = *temp.RoadUserType
    m.TriggerConditions = *temp.TriggerConditions
    m.Limits = temp.Limits
    m.DistributionType = temp.DistributionType
    m.DistributionSchedule = temp.DistributionSchedule
    m.Generic = *temp.Generic
    return nil
}

// tempMessage is a temporary struct used for validating the fields of Message.
type tempMessage  struct {
    IsPrivate            *bool                 `json:"isPrivate"`
    RoadUserType         *[]RoadUserTypes      `json:"roadUserType"`
    TriggerConditions    *[]TriggerCondition   `json:"triggerConditions"`
    Limits               []Limits              `json:"limits,omitempty"`
    DistributionType     []DistributionTypes   `json:"distributionType,omitempty"`
    DistributionSchedule *DistributionSchedule `json:"distributionSchedule,omitempty"`
    Generic              *Generic              `json:"generic"`
}

func (m *tempMessage) validate() error {
    var errs []string
    if m.IsPrivate == nil {
        errs = append(errs, "required field `isPrivate` is missing for type `Message`")
    }
    if m.RoadUserType == nil {
        errs = append(errs, "required field `roadUserType` is missing for type `Message`")
    }
    if m.TriggerConditions == nil {
        errs = append(errs, "required field `triggerConditions` is missing for type `Message`")
    }
    if m.Generic == nil {
        errs = append(errs, "required field `generic` is missing for type `Message`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
