/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// DailyUsageHistory represents a DailyUsageHistory struct.
type DailyUsageHistory struct {
    // the total data usage recorded in Bytes
    BytesUsed            *string                `json:"bytesUsed,omitempty"`
    ExtendedAttributes   []ExtendedAttribute    `json:"extendedAttributes,omitempty"`
    ServicePlan          *string                `json:"servicePlan,omitempty"`
    // The total number of SMS messages from and to the device
    SmsUsed              *string                `json:"smsUsed,omitempty"`
    // Where the collected data is being gathered from
    Source               *string                `json:"source,omitempty"`
    // Timestamp of when the retrieved record was completed ($datetime)
    Timestamp            *string                `json:"timestamp,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DailyUsageHistory,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DailyUsageHistory) String() string {
    return fmt.Sprintf(
    	"DailyUsageHistory[BytesUsed=%v, ExtendedAttributes=%v, ServicePlan=%v, SmsUsed=%v, Source=%v, Timestamp=%v, AdditionalProperties=%v]",
    	d.BytesUsed, d.ExtendedAttributes, d.ServicePlan, d.SmsUsed, d.Source, d.Timestamp, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DailyUsageHistory.
// It customizes the JSON marshaling process for DailyUsageHistory objects.
func (d DailyUsageHistory) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "bytesUsed", "extendedAttributes", "servicePlan", "smsUsed", "source", "timestamp"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DailyUsageHistory object to a map representation for JSON marshaling.
func (d DailyUsageHistory) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    if d.BytesUsed != nil {
        structMap["bytesUsed"] = d.BytesUsed
    }
    if d.ExtendedAttributes != nil {
        structMap["extendedAttributes"] = d.ExtendedAttributes
    }
    if d.ServicePlan != nil {
        structMap["servicePlan"] = d.ServicePlan
    }
    if d.SmsUsed != nil {
        structMap["smsUsed"] = d.SmsUsed
    }
    if d.Source != nil {
        structMap["source"] = d.Source
    }
    if d.Timestamp != nil {
        structMap["timestamp"] = d.Timestamp
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DailyUsageHistory.
// It customizes the JSON unmarshaling process for DailyUsageHistory objects.
func (d *DailyUsageHistory) UnmarshalJSON(input []byte) error {
    var temp tempDailyUsageHistory
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "bytesUsed", "extendedAttributes", "servicePlan", "smsUsed", "source", "timestamp")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.BytesUsed = temp.BytesUsed
    d.ExtendedAttributes = temp.ExtendedAttributes
    d.ServicePlan = temp.ServicePlan
    d.SmsUsed = temp.SmsUsed
    d.Source = temp.Source
    d.Timestamp = temp.Timestamp
    return nil
}

// tempDailyUsageHistory is a temporary struct used for validating the fields of DailyUsageHistory.
type tempDailyUsageHistory  struct {
    BytesUsed          *string             `json:"bytesUsed,omitempty"`
    ExtendedAttributes []ExtendedAttribute `json:"extendedAttributes,omitempty"`
    ServicePlan        *string             `json:"servicePlan,omitempty"`
    SmsUsed            *string             `json:"smsUsed,omitempty"`
    Source             *string             `json:"source,omitempty"`
    Timestamp          *string             `json:"timestamp,omitempty"`
}
