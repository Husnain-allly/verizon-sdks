/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// Carriercode1 represents a Carriercode1 struct.
type Carriercode1 struct {
    CarrierCode          *string                `json:"carrierCode,omitempty"`
    Percentage           *AllowanceThreshold    `json:"percentage,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for Carriercode1,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c Carriercode1) String() string {
    return fmt.Sprintf(
    	"Carriercode1[CarrierCode=%v, Percentage=%v, AdditionalProperties=%v]",
    	c.CarrierCode, c.Percentage, c.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for Carriercode1.
// It customizes the JSON marshaling process for Carriercode1 objects.
func (c Carriercode1) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(c.AdditionalProperties,
        "carrierCode", "percentage"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(c.toMap())
}

// toMap converts the Carriercode1 object to a map representation for JSON marshaling.
func (c Carriercode1) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, c.AdditionalProperties)
    if c.CarrierCode != nil {
        structMap["carrierCode"] = c.CarrierCode
    }
    if c.Percentage != nil {
        structMap["percentage"] = c.Percentage.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Carriercode1.
// It customizes the JSON unmarshaling process for Carriercode1 objects.
func (c *Carriercode1) UnmarshalJSON(input []byte) error {
    var temp tempCarriercode1
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "carrierCode", "percentage")
    if err != nil {
    	return err
    }
    c.AdditionalProperties = additionalProperties
    
    c.CarrierCode = temp.CarrierCode
    c.Percentage = temp.Percentage
    return nil
}

// tempCarriercode1 is a temporary struct used for validating the fields of Carriercode1.
type tempCarriercode1  struct {
    CarrierCode *string             `json:"carrierCode,omitempty"`
    Percentage  *AllowanceThreshold `json:"percentage,omitempty"`
}
