/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
)

// CreateTriggerRequestOptions represents a CreateTriggerRequestOptions struct.
type CreateTriggerRequestOptions struct {
    value                    any
    isTriggerType1           bool
    isActiveAnomalyIndicator bool
    isActiveTriggerIndicator bool
}

// String implements the fmt.Stringer interface for CreateTriggerRequestOptions,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (c CreateTriggerRequestOptions) String() string {
    return fmt.Sprintf("%v", c.value)
}

// MarshalJSON implements the json.Marshaler interface for CreateTriggerRequestOptions.
// It customizes the JSON marshaling process for CreateTriggerRequestOptions objects.
func (c CreateTriggerRequestOptions) MarshalJSON() (
    []byte,
    error) {
    if c.value == nil {
        return nil, errors.New("No underlying type is set. Please use any of the `models.CreateTriggerRequestOptionsContainer.From*` functions to initialize the CreateTriggerRequestOptions object.")
    }
    return json.Marshal(c.toMap())
}

// toMap converts the CreateTriggerRequestOptions object to a map representation for JSON marshaling.
func (c *CreateTriggerRequestOptions) toMap() any {
    switch obj := c.value.(type) {
    case *TriggerType1:
        return obj.toMap()
    case *ActiveAnomalyIndicator:
        return obj.toMap()
    case *ActiveTriggerIndicator:
        return obj.toMap()
    }
    return nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for CreateTriggerRequestOptions.
// It customizes the JSON unmarshaling process for CreateTriggerRequestOptions objects.
func (c *CreateTriggerRequestOptions) UnmarshalJSON(input []byte) error {
    result, err := UnmarshallAnyOf(input,
        NewTypeHolder(&TriggerType1{}, false, &c.isTriggerType1),
        NewTypeHolder(&ActiveAnomalyIndicator{}, false, &c.isActiveAnomalyIndicator),
        NewTypeHolder(&ActiveTriggerIndicator{}, false, &c.isActiveTriggerIndicator),
    )
    
    c.value = result
    return err
}

func (c *CreateTriggerRequestOptions) AsTriggerType1() (
    *TriggerType1,
    bool) {
    if !c.isTriggerType1 {
        return nil, false
    }
    return c.value.(*TriggerType1), true
}

func (c *CreateTriggerRequestOptions) AsActiveAnomalyIndicator() (
    *ActiveAnomalyIndicator,
    bool) {
    if !c.isActiveAnomalyIndicator {
        return nil, false
    }
    return c.value.(*ActiveAnomalyIndicator), true
}

func (c *CreateTriggerRequestOptions) AsActiveTriggerIndicator() (
    *ActiveTriggerIndicator,
    bool) {
    if !c.isActiveTriggerIndicator {
        return nil, false
    }
    return c.value.(*ActiveTriggerIndicator), true
}

// internalCreateTriggerRequestOptions represents a createTriggerRequestOptions struct.
type internalCreateTriggerRequestOptions struct {}

var CreateTriggerRequestOptionsContainer internalCreateTriggerRequestOptions

// The internalCreateTriggerRequestOptions instance, wrapping the provided TriggerType1 value.
func (c *internalCreateTriggerRequestOptions) FromTriggerType1(val TriggerType1) CreateTriggerRequestOptions {
    return CreateTriggerRequestOptions{value: &val}
}

// The internalCreateTriggerRequestOptions instance, wrapping the provided ActiveAnomalyIndicator value.
func (c *internalCreateTriggerRequestOptions) FromActiveAnomalyIndicator(val ActiveAnomalyIndicator) CreateTriggerRequestOptions {
    return CreateTriggerRequestOptions{value: &val}
}

// The internalCreateTriggerRequestOptions instance, wrapping the provided ActiveTriggerIndicator value.
func (c *internalCreateTriggerRequestOptions) FromActiveTriggerIndicator(val ActiveTriggerIndicator) CreateTriggerRequestOptions {
    return CreateTriggerRequestOptions{value: &val}
}
