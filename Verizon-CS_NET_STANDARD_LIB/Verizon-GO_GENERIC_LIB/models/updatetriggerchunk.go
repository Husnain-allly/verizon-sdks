/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// Updatetriggerchunk represents a Updatetriggerchunk struct.
type Updatetriggerchunk struct {
    // The system assigned UUID of the trigger
    TriggerId            *string                `json:"triggerId,omitempty"`
    // The user defined name of the trigger
    TriggerName          *string                `json:"triggerName,omitempty"`
    // The Enterprise Customer Profile Database ID
    EcpdId               *string                `json:"ecpdId,omitempty"`
    // The type of trigger being created or modified
    TriggerCategory      *TriggerCategory       `json:"triggerCategory,omitempty"`
    PricePlanTrigger     *PricePlanTrigger      `json:"pricePlanTrigger,omitempty"`
    Notification         *Notificationarray     `json:"notification,omitempty"`
    // A flag to indicate of the trigger is active, true, or not, false
    Active               *Active                `json:"active,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for Updatetriggerchunk,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (u Updatetriggerchunk) String() string {
    return fmt.Sprintf(
    	"Updatetriggerchunk[TriggerId=%v, TriggerName=%v, EcpdId=%v, TriggerCategory=%v, PricePlanTrigger=%v, Notification=%v, Active=%v, AdditionalProperties=%v]",
    	u.TriggerId, u.TriggerName, u.EcpdId, u.TriggerCategory, u.PricePlanTrigger, u.Notification, u.Active, u.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for Updatetriggerchunk.
// It customizes the JSON marshaling process for Updatetriggerchunk objects.
func (u Updatetriggerchunk) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(u.AdditionalProperties,
        "triggerId", "triggerName", "ecpdId", "triggerCategory", "pricePlanTrigger", "notification", "active"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(u.toMap())
}

// toMap converts the Updatetriggerchunk object to a map representation for JSON marshaling.
func (u Updatetriggerchunk) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, u.AdditionalProperties)
    if u.TriggerId != nil {
        structMap["triggerId"] = u.TriggerId
    }
    if u.TriggerName != nil {
        structMap["triggerName"] = u.TriggerName
    }
    if u.EcpdId != nil {
        structMap["ecpdId"] = u.EcpdId
    }
    if u.TriggerCategory != nil {
        structMap["triggerCategory"] = u.TriggerCategory
    }
    if u.PricePlanTrigger != nil {
        structMap["pricePlanTrigger"] = u.PricePlanTrigger.toMap()
    }
    if u.Notification != nil {
        structMap["notification"] = u.Notification.toMap()
    }
    if u.Active != nil {
        structMap["active"] = u.Active
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for Updatetriggerchunk.
// It customizes the JSON unmarshaling process for Updatetriggerchunk objects.
func (u *Updatetriggerchunk) UnmarshalJSON(input []byte) error {
    var temp tempUpdatetriggerchunk
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "triggerId", "triggerName", "ecpdId", "triggerCategory", "pricePlanTrigger", "notification", "active")
    if err != nil {
    	return err
    }
    u.AdditionalProperties = additionalProperties
    
    u.TriggerId = temp.TriggerId
    u.TriggerName = temp.TriggerName
    u.EcpdId = temp.EcpdId
    u.TriggerCategory = temp.TriggerCategory
    u.PricePlanTrigger = temp.PricePlanTrigger
    u.Notification = temp.Notification
    u.Active = temp.Active
    return nil
}

// tempUpdatetriggerchunk is a temporary struct used for validating the fields of Updatetriggerchunk.
type tempUpdatetriggerchunk  struct {
    TriggerId        *string            `json:"triggerId,omitempty"`
    TriggerName      *string            `json:"triggerName,omitempty"`
    EcpdId           *string            `json:"ecpdId,omitempty"`
    TriggerCategory  *TriggerCategory   `json:"triggerCategory,omitempty"`
    PricePlanTrigger *PricePlanTrigger  `json:"pricePlanTrigger,omitempty"`
    Notification     *Notificationarray `json:"notification,omitempty"`
    Active           *Active            `json:"active,omitempty"`
}
