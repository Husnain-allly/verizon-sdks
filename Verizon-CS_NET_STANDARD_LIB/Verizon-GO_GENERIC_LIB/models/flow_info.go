/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// FlowInfo represents a FlowInfo struct.
type FlowInfo struct {
    FlowServer           *string                `json:"flowServer,omitempty"`
    FlowDevice           *string                `json:"flowDevice,omitempty"`
    FlowDirection        *string                `json:"flowDirection,omitempty"`
    FlowProtocol         *string                `json:"flowProtocol,omitempty"`
    QciOption            *string                `json:"qciOption,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for FlowInfo,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (f FlowInfo) String() string {
    return fmt.Sprintf(
    	"FlowInfo[FlowServer=%v, FlowDevice=%v, FlowDirection=%v, FlowProtocol=%v, QciOption=%v, AdditionalProperties=%v]",
    	f.FlowServer, f.FlowDevice, f.FlowDirection, f.FlowProtocol, f.QciOption, f.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for FlowInfo.
// It customizes the JSON marshaling process for FlowInfo objects.
func (f FlowInfo) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(f.AdditionalProperties,
        "flowServer", "flowDevice", "flowDirection", "flowProtocol", "qciOption"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(f.toMap())
}

// toMap converts the FlowInfo object to a map representation for JSON marshaling.
func (f FlowInfo) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, f.AdditionalProperties)
    if f.FlowServer != nil {
        structMap["flowServer"] = f.FlowServer
    }
    if f.FlowDevice != nil {
        structMap["flowDevice"] = f.FlowDevice
    }
    if f.FlowDirection != nil {
        structMap["flowDirection"] = f.FlowDirection
    }
    if f.FlowProtocol != nil {
        structMap["flowProtocol"] = f.FlowProtocol
    }
    if f.QciOption != nil {
        structMap["qciOption"] = f.QciOption
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for FlowInfo.
// It customizes the JSON unmarshaling process for FlowInfo objects.
func (f *FlowInfo) UnmarshalJSON(input []byte) error {
    var temp tempFlowInfo
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "flowServer", "flowDevice", "flowDirection", "flowProtocol", "qciOption")
    if err != nil {
    	return err
    }
    f.AdditionalProperties = additionalProperties
    
    f.FlowServer = temp.FlowServer
    f.FlowDevice = temp.FlowDevice
    f.FlowDirection = temp.FlowDirection
    f.FlowProtocol = temp.FlowProtocol
    f.QciOption = temp.QciOption
    return nil
}

// tempFlowInfo is a temporary struct used for validating the fields of FlowInfo.
type tempFlowInfo  struct {
    FlowServer    *string `json:"flowServer,omitempty"`
    FlowDevice    *string `json:"flowDevice,omitempty"`
    FlowDirection *string `json:"flowDirection,omitempty"`
    FlowProtocol  *string `json:"flowProtocol,omitempty"`
    QciOption     *string `json:"qciOption,omitempty"`
}
