/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// DeviceMismatchListRequest represents a DeviceMismatchListRequest struct.
// Request to list of all 4G devices with an ICCID (SIM) that was not activated with the expected IMEI (hardware) during a specified time frame.
type DeviceMismatchListRequest struct {
    // Filter out the dates.
    Filter               DateFilter             `json:"filter"`
    // A list of specific devices that you want to check, specified by ICCID or MDN.
    Devices              []AccountDeviceList    `json:"devices,omitempty"`
    // The account that you want to search for mismatched devices. If you don't specify an accountName, the search includes all devices to which you have access.
    AccountName          *string                `json:"accountName,omitempty"`
    // The name of a device group, to only include devices in that group.
    GroupName            *string                `json:"groupName,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for DeviceMismatchListRequest,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (d DeviceMismatchListRequest) String() string {
    return fmt.Sprintf(
    	"DeviceMismatchListRequest[Filter=%v, Devices=%v, AccountName=%v, GroupName=%v, AdditionalProperties=%v]",
    	d.Filter, d.Devices, d.AccountName, d.GroupName, d.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for DeviceMismatchListRequest.
// It customizes the JSON marshaling process for DeviceMismatchListRequest objects.
func (d DeviceMismatchListRequest) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(d.AdditionalProperties,
        "filter", "devices", "accountName", "groupName"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(d.toMap())
}

// toMap converts the DeviceMismatchListRequest object to a map representation for JSON marshaling.
func (d DeviceMismatchListRequest) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, d.AdditionalProperties)
    structMap["filter"] = d.Filter.toMap()
    if d.Devices != nil {
        structMap["devices"] = d.Devices
    }
    if d.AccountName != nil {
        structMap["accountName"] = d.AccountName
    }
    if d.GroupName != nil {
        structMap["groupName"] = d.GroupName
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeviceMismatchListRequest.
// It customizes the JSON unmarshaling process for DeviceMismatchListRequest objects.
func (d *DeviceMismatchListRequest) UnmarshalJSON(input []byte) error {
    var temp tempDeviceMismatchListRequest
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "filter", "devices", "accountName", "groupName")
    if err != nil {
    	return err
    }
    d.AdditionalProperties = additionalProperties
    
    d.Filter = *temp.Filter
    d.Devices = temp.Devices
    d.AccountName = temp.AccountName
    d.GroupName = temp.GroupName
    return nil
}

// tempDeviceMismatchListRequest is a temporary struct used for validating the fields of DeviceMismatchListRequest.
type tempDeviceMismatchListRequest  struct {
    Filter      *DateFilter         `json:"filter"`
    Devices     []AccountDeviceList `json:"devices,omitempty"`
    AccountName *string             `json:"accountName,omitempty"`
    GroupName   *string             `json:"groupName,omitempty"`
}

func (d *tempDeviceMismatchListRequest) validate() error {
    var errs []string
    if d.Filter == nil {
        errs = append(errs, "required field `filter` is missing for type `DeviceMismatchListRequest`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
