/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
)

// RateplanRatePlanGroup represents a RateplanRatePlanGroup struct.
// This is Array of a container for any-of cases.
type RateplanRatePlanGroup struct {
    value                any
    isRateplantypeObject bool
    isRateplantype2      bool
}

// String implements the fmt.Stringer interface for RateplanRatePlanGroup,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (r RateplanRatePlanGroup) String() string {
    return fmt.Sprintf("%v", r.value)
}

// MarshalJSON implements the json.Marshaler interface for RateplanRatePlanGroup.
// It customizes the JSON marshaling process for RateplanRatePlanGroup objects.
func (r RateplanRatePlanGroup) MarshalJSON() (
    []byte,
    error) {
    if r.value == nil {
        return nil, errors.New("No underlying type is set. Please use any of the `models.RateplanRatePlanGroupContainer.From*` functions to initialize the RateplanRatePlanGroup object.")
    }
    return json.Marshal(r.toMap())
}

// toMap converts the RateplanRatePlanGroup object to a map representation for JSON marshaling.
func (r *RateplanRatePlanGroup) toMap() any {
    switch obj := r.value.(type) {
    case *RateplantypeObject:
        return obj.toMap()
    case *Rateplantype2:
        return obj.toMap()
    }
    return nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for RateplanRatePlanGroup.
// It customizes the JSON unmarshaling process for RateplanRatePlanGroup objects.
func (r *RateplanRatePlanGroup) UnmarshalJSON(input []byte) error {
    result, err := UnmarshallAnyOf(input,
        NewTypeHolder(&RateplantypeObject{}, false, &r.isRateplantypeObject),
        NewTypeHolder(&Rateplantype2{}, false, &r.isRateplantype2),
    )
    
    r.value = result
    return err
}

func (r *RateplanRatePlanGroup) AsRateplantypeObject() (
    *RateplantypeObject,
    bool) {
    if !r.isRateplantypeObject {
        return nil, false
    }
    return r.value.(*RateplantypeObject), true
}

func (r *RateplanRatePlanGroup) AsRateplantype2() (
    *Rateplantype2,
    bool) {
    if !r.isRateplantype2 {
        return nil, false
    }
    return r.value.(*Rateplantype2), true
}

// internalRateplanRatePlanGroup represents a rateplanRatePlanGroup struct.
// This is Array of a container for any-of cases.
type internalRateplanRatePlanGroup struct {}

var RateplanRatePlanGroupContainer internalRateplanRatePlanGroup

// The internalRateplanRatePlanGroup instance, wrapping the provided RateplantypeObject value.
func (r *internalRateplanRatePlanGroup) FromRateplantypeObject(val RateplantypeObject) RateplanRatePlanGroup {
    return RateplanRatePlanGroup{value: &val}
}

// The internalRateplanRatePlanGroup instance, wrapping the provided Rateplantype2 value.
func (r *internalRateplanRatePlanGroup) FromRateplantype2(val Rateplantype2) RateplanRatePlanGroup {
    return RateplanRatePlanGroup{value: &val}
}
