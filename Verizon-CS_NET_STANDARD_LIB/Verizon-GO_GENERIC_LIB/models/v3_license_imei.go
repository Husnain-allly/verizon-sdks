/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
    "strings"
)

// V3LicenseImei represents a V3LicenseImei struct.
// List of devices.
type V3LicenseImei struct {
    // Device IMEI list.
    DeviceList           []string               `json:"deviceList"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for V3LicenseImei,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (v V3LicenseImei) String() string {
    return fmt.Sprintf(
    	"V3LicenseImei[DeviceList=%v, AdditionalProperties=%v]",
    	v.DeviceList, v.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for V3LicenseImei.
// It customizes the JSON marshaling process for V3LicenseImei objects.
func (v V3LicenseImei) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(v.AdditionalProperties,
        "deviceList"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(v.toMap())
}

// toMap converts the V3LicenseImei object to a map representation for JSON marshaling.
func (v V3LicenseImei) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, v.AdditionalProperties)
    structMap["deviceList"] = v.DeviceList
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for V3LicenseImei.
// It customizes the JSON unmarshaling process for V3LicenseImei objects.
func (v *V3LicenseImei) UnmarshalJSON(input []byte) error {
    var temp tempV3LicenseImei
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    err = temp.validate()
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceList")
    if err != nil {
    	return err
    }
    v.AdditionalProperties = additionalProperties
    
    v.DeviceList = *temp.DeviceList
    return nil
}

// tempV3LicenseImei is a temporary struct used for validating the fields of V3LicenseImei.
type tempV3LicenseImei  struct {
    DeviceList *[]string `json:"deviceList"`
}

func (v *tempV3LicenseImei) validate() error {
    var errs []string
    if v.DeviceList == nil {
        errs = append(errs, "required field `deviceList` is missing for type `V3LicenseIMEI`")
    }
    if len(errs) == 0 {
        return nil
    }
    return errors.New(strings.Join (errs, "\n"))
}
