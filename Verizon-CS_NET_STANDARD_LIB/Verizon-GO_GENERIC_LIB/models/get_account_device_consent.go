/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "fmt"
)

// GetAccountDeviceConsent represents a GetAccountDeviceConsent struct.
type GetAccountDeviceConsent struct {
    // An array of device identifiers
    DeviceList           []interface{}          `json:"deviceList,omitempty"`
    // The numeric name of the account, including leading zeros.
    AccountName          *string                `json:"accountName,omitempty"`
    // If consent is set at the account level, this value will show the consent level.
    AllDeviceConsent     *int                   `json:"allDeviceConsent,omitempty"`
    AdditionalProperties map[string]interface{} `json:"_"`
}

// String implements the fmt.Stringer interface for GetAccountDeviceConsent,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (g GetAccountDeviceConsent) String() string {
    return fmt.Sprintf(
    	"GetAccountDeviceConsent[DeviceList=%v, AccountName=%v, AllDeviceConsent=%v, AdditionalProperties=%v]",
    	g.DeviceList, g.AccountName, g.AllDeviceConsent, g.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for GetAccountDeviceConsent.
// It customizes the JSON marshaling process for GetAccountDeviceConsent objects.
func (g GetAccountDeviceConsent) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(g.AdditionalProperties,
        "deviceList", "accountName", "allDeviceConsent"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(g.toMap())
}

// toMap converts the GetAccountDeviceConsent object to a map representation for JSON marshaling.
func (g GetAccountDeviceConsent) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, g.AdditionalProperties)
    if g.DeviceList != nil {
        structMap["deviceList"] = g.DeviceList
    }
    if g.AccountName != nil {
        structMap["accountName"] = g.AccountName
    }
    if g.AllDeviceConsent != nil {
        structMap["allDeviceConsent"] = g.AllDeviceConsent
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for GetAccountDeviceConsent.
// It customizes the JSON unmarshaling process for GetAccountDeviceConsent objects.
func (g *GetAccountDeviceConsent) UnmarshalJSON(input []byte) error {
    var temp tempGetAccountDeviceConsent
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "deviceList", "accountName", "allDeviceConsent")
    if err != nil {
    	return err
    }
    g.AdditionalProperties = additionalProperties
    
    g.DeviceList = temp.DeviceList
    g.AccountName = temp.AccountName
    g.AllDeviceConsent = temp.AllDeviceConsent
    return nil
}

// tempGetAccountDeviceConsent is a temporary struct used for validating the fields of GetAccountDeviceConsent.
type tempGetAccountDeviceConsent  struct {
    DeviceList       []interface{} `json:"deviceList,omitempty"`
    AccountName      *string       `json:"accountName,omitempty"`
    AllDeviceConsent *int          `json:"allDeviceConsent,omitempty"`
}
