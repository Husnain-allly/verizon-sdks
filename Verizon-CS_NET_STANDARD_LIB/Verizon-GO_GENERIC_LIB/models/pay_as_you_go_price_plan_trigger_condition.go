/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package models

import (
    "encoding/json"
    "errors"
    "fmt"
)

// PayAsYouGoPricePlanTriggerCondition represents a PayAsYouGoPricePlanTriggerCondition struct.
// This is a container for any-of cases.
type PayAsYouGoPricePlanTriggerCondition struct {
    value                 any
    isConditionType       bool
    isConditionObjectCall bool
}

// String implements the fmt.Stringer interface for PayAsYouGoPricePlanTriggerCondition,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (p PayAsYouGoPricePlanTriggerCondition) String() string {
    return fmt.Sprintf("%v", p.value)
}

// MarshalJSON implements the json.Marshaler interface for PayAsYouGoPricePlanTriggerCondition.
// It customizes the JSON marshaling process for PayAsYouGoPricePlanTriggerCondition objects.
func (p PayAsYouGoPricePlanTriggerCondition) MarshalJSON() (
    []byte,
    error) {
    if p.value == nil {
        return nil, errors.New("No underlying type is set. Please use any of the `models.PayAsYouGoPricePlanTriggerConditionContainer.From*` functions to initialize the PayAsYouGoPricePlanTriggerCondition object.")
    }
    return json.Marshal(p.toMap())
}

// toMap converts the PayAsYouGoPricePlanTriggerCondition object to a map representation for JSON marshaling.
func (p *PayAsYouGoPricePlanTriggerCondition) toMap() any {
    switch obj := p.value.(type) {
    case *ConditionType:
        return *obj
    case *ConditionObjectCall:
        return obj.toMap()
    }
    return nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for PayAsYouGoPricePlanTriggerCondition.
// It customizes the JSON unmarshaling process for PayAsYouGoPricePlanTriggerCondition objects.
func (p *PayAsYouGoPricePlanTriggerCondition) UnmarshalJSON(input []byte) error {
    result, err := UnmarshallAnyOf(input,
        NewTypeHolder(new(ConditionType), false, &p.isConditionType),
        NewTypeHolder(&ConditionObjectCall{}, false, &p.isConditionObjectCall),
    )
    
    p.value = result
    return err
}

func (p *PayAsYouGoPricePlanTriggerCondition) AsConditionType() (
    *ConditionType,
    bool) {
    if !p.isConditionType {
        return nil, false
    }
    return p.value.(*ConditionType), true
}

func (p *PayAsYouGoPricePlanTriggerCondition) AsConditionObjectCall() (
    *ConditionObjectCall,
    bool) {
    if !p.isConditionObjectCall {
        return nil, false
    }
    return p.value.(*ConditionObjectCall), true
}

// internalPayAsYouGoPricePlanTriggerCondition represents a payAsYouGoPricePlanTriggerCondition struct.
// This is a container for any-of cases.
type internalPayAsYouGoPricePlanTriggerCondition struct {}

var PayAsYouGoPricePlanTriggerConditionContainer internalPayAsYouGoPricePlanTriggerCondition

// The internalPayAsYouGoPricePlanTriggerCondition instance, wrapping the provided ConditionType value.
func (p *internalPayAsYouGoPricePlanTriggerCondition) FromConditionType(val ConditionType) PayAsYouGoPricePlanTriggerCondition {
    return PayAsYouGoPricePlanTriggerCondition{value: &val}
}

// The internalPayAsYouGoPricePlanTriggerCondition instance, wrapping the provided ConditionObjectCall value.
func (p *internalPayAsYouGoPricePlanTriggerCondition) FromConditionObjectCall(val ConditionObjectCall) PayAsYouGoPricePlanTriggerCondition {
    return PayAsYouGoPricePlanTriggerCondition{value: &val}
}
