/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// UpdatePricePlanTriggersApi represents a controller struct.
type UpdatePricePlanTriggersApi struct {
    baseApi
}

// NewUpdatePricePlanTriggersApi creates a new instance of UpdatePricePlanTriggersApi.
// It takes a baseController as a parameter and returns a pointer to the UpdatePricePlanTriggersApi.
func NewUpdatePricePlanTriggersApi(baseApi baseApi) *UpdatePricePlanTriggersApi {
    updatePricePlanTriggersApi := UpdatePricePlanTriggersApi{baseApi: baseApi}
    return &updatePricePlanTriggersApi
}

// UpdateTriggerRules takes context, body as parameters and
// returns an models.ApiResponse with models.TriggerResponse data and
// an error if there was an issue with the request or response.
// Updates a usage trigger at the account level, device level or a price plan trigger for all devices on the account
func (u *UpdatePricePlanTriggersApi) UpdateTriggerRules(
    ctx context.Context,
    body models.UpdateTriggerRulesBody) (
    models.ApiResponse[models.TriggerResponse],
    error) {
    req := u.prepareRequest(ctx, "PUT", "/v2/triggers")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewOrAuth(
            NewAuth("thingspace_oauth1"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "0": {Message: "Error response", Unmarshaller: errors.NewRuleRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.TriggerResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.TriggerResponse](decoder)
    return models.NewApiResponse(result, resp), err
}
