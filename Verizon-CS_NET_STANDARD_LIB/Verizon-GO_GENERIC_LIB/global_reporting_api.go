/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// GlobalReportingApi represents a controller struct.
type GlobalReportingApi struct {
    baseApi
}

// NewGlobalReportingApi creates a new instance of GlobalReportingApi.
// It takes a baseController as a parameter and returns a pointer to the GlobalReportingApi.
func NewGlobalReportingApi(baseApi baseApi) *GlobalReportingApi {
    globalReportingApi := GlobalReportingApi{baseApi: baseApi}
    return &globalReportingApi
}

// DeviceprovhistoryUsingPost takes context, body as parameters and
// returns an models.ApiResponse with models.EsimRequestResponse data and
// an error if there was an issue with the request or response.
// Retrieve the provisioning history of a specific device or devices.
func (g *GlobalReportingApi) DeviceprovhistoryUsingPost(
    ctx context.Context,
    body models.EsimProvhistoryRequest) (
    models.ApiResponse[models.EsimRequestResponse],
    error) {
    req := g.prepareRequest(ctx, "POST", "/m2m/v2/devices/history/actions/list")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad request", Unmarshaller: errors.NewEsimRestErrorResponse},
        "401": {Message: "Unauthorized", Unmarshaller: errors.NewEsimRestErrorResponse},
        "403": {Message: "Forbidden", Unmarshaller: errors.NewEsimRestErrorResponse},
        "404": {Message: "Not Found / Does not exist", Unmarshaller: errors.NewEsimRestErrorResponse},
        "406": {Message: "Format / Request Unacceptable", Unmarshaller: errors.NewEsimRestErrorResponse},
        "429": {Message: "Too many requests", Unmarshaller: errors.NewEsimRestErrorResponse},
        "0": {Message: "Error response", Unmarshaller: errors.NewEsimRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.EsimRequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.EsimRequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}

// RetrieveGlobalList takes context, body as parameters and
// returns an models.ApiResponse with models.EsimRequestResponse data and
// an error if there was an issue with the request or response.
// Retrieve a list of all devices associated with an account.
func (g *GlobalReportingApi) RetrieveGlobalList(
    ctx context.Context,
    body models.EsimGlobalDeviceList) (
    models.ApiResponse[models.EsimRequestResponse],
    error) {
    req := g.prepareRequest(ctx, "POST", "/m2m/v2/devices/actions/list")
    
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Bad request", Unmarshaller: errors.NewEsimRestErrorResponse},
        "401": {Message: "Unauthorized", Unmarshaller: errors.NewEsimRestErrorResponse},
        "403": {Message: "Forbidden", Unmarshaller: errors.NewEsimRestErrorResponse},
        "404": {Message: "Not Found / Does not exist", Unmarshaller: errors.NewEsimRestErrorResponse},
        "406": {Message: "Format / Request Unacceptable", Unmarshaller: errors.NewEsimRestErrorResponse},
        "429": {Message: "Too many requests", Unmarshaller: errors.NewEsimRestErrorResponse},
        "0": {Message: "Error response", Unmarshaller: errors.NewEsimRestErrorResponse},
    })
    req.Header("Content-Type", "application/json")
    req.Json(&body)
    var result models.EsimRequestResponse
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.EsimRequestResponse](decoder)
    return models.NewApiResponse(result, resp), err
}
