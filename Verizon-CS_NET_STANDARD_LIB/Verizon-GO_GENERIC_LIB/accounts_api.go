/*
Package verizon

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package verizon

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "verizon/errors"
    "verizon/models"
)

// AccountsApi represents a controller struct.
type AccountsApi struct {
    baseApi
}

// NewAccountsApi creates a new instance of AccountsApi.
// It takes a baseController as a parameter and returns a pointer to the AccountsApi.
func NewAccountsApi(baseApi baseApi) *AccountsApi {
    accountsApi := AccountsApi{baseApi: baseApi}
    return &accountsApi
}

// GetAccountInformation takes context, aname as parameters and
// returns an models.ApiResponse with models.Account data and
// an error if there was an issue with the request or response.
// Returns information about a specified account.
func (a *AccountsApi) GetAccountInformation(
    ctx context.Context,
    aname string) (
    models.ApiResponse[models.Account],
    error) {
    req := a.prepareRequest(ctx, "GET", "/m2m/v1/accounts/%v")
    req.AppendTemplateParams(aname)
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    
    var result models.Account
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.Account](decoder)
    return models.NewApiResponse(result, resp), err
}

// ListAccountStatesAndServices takes context, aname as parameters and
// returns an models.ApiResponse with models.AccountStatesAndServices data and
// an error if there was an issue with the request or response.
// Returns a list and details of all custom services and states defined for a specified account.
func (a *AccountsApi) ListAccountStatesAndServices(
    ctx context.Context,
    aname string) (
    models.ApiResponse[models.AccountStatesAndServices],
    error) {
    req := a.prepareRequest(ctx, "GET", "/m2m/v1/accounts/%v/statesandservices")
    req.AppendTemplateParams(aname)
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    
    var result models.AccountStatesAndServices
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.AccountStatesAndServices](decoder)
    return models.NewApiResponse(result, resp), err
}

// ListAccountLeads takes context, aname, next as parameters and
// returns an models.ApiResponse with models.AccountLeadsResult data and
// an error if there was an issue with the request or response.
// When HTTP status is 202, a URL will be returned in the Location header of the form /leads/{aname}?next={token}. This URL can be used to request the next set of leads.
func (a *AccountsApi) ListAccountLeads(
    ctx context.Context,
    aname string,
    next *int64) (
    models.ApiResponse[models.AccountLeadsResult],
    error) {
    req := a.prepareRequest(ctx, "GET", "/m2m/v1/leads/%v")
    req.AppendTemplateParams(aname)
    req.BaseUrl("Thingspace")
    req.Authenticate(
        NewAndAuth(
            NewAuth("thingspace_oauth"),
            NewAuth("VZ-M2M-Token"),
        ),
    )
    req.AppendErrors(map[string]https.ErrorBuilder[error]{
        "400": {Message: "Error response.", Unmarshaller: errors.NewConnectivityManagementResult},
    })
    if next != nil {
        req.QueryParam("next", *next)
    }
    
    var result models.AccountLeadsResult
    decoder, resp, err := req.CallAsJson()
    if err != nil {
        return models.NewApiResponse(result, resp), err
    }
    
    result, err = utilities.DecodeResults[models.AccountLeadsResult](decoder)
    return models.NewApiResponse(result, resp), err
}
