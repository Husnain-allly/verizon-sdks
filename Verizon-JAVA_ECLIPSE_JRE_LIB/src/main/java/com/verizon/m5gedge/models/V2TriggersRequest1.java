/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.AdditionalProperties;
import io.apimatic.core.utilities.ConversionHelper;
import java.util.List;
import java.util.Map;

/**
 * This is a model class for V2TriggersRequest1 type.
 */
public class V2TriggersRequest1 {
    private String triggerId;
    private String triggerName;
    private String ecpdId;
    private TriggerCategory triggerCategory;
    private DataTrigger5 dataTrigger;
    private Notificationarray notification;
    private String notificationType;
    private Boolean callback;
    private Boolean emailNotification;
    private String notificationGroupName;
    private Integer notificationFrequencyFactor;
    private String notificationFrequencyInterval;
    private String externalEmailRecipients;
    private Boolean smsNotification;
    private List<Cellphonenumber> smsNumbers;
    private Boolean reminder;
    private String severity;
    private Active active;
    private String accountName;
    private PricePlanTrigger2 pricePlanTrigger;
    private AdditionalProperties<Object> additionalProperties = 
            new AdditionalProperties<Object>(this.getClass());

    /**
     * Default constructor.
     */
    public V2TriggersRequest1() {
    }

    /**
     * Initialization constructor.
     * @param  triggerId  String value for triggerId.
     * @param  triggerName  String value for triggerName.
     * @param  ecpdId  String value for ecpdId.
     * @param  triggerCategory  TriggerCategory value for triggerCategory.
     * @param  dataTrigger  DataTrigger5 value for dataTrigger.
     * @param  notification  Notificationarray value for notification.
     * @param  notificationType  String value for notificationType.
     * @param  callback  Boolean value for callback.
     * @param  emailNotification  Boolean value for emailNotification.
     * @param  notificationGroupName  String value for notificationGroupName.
     * @param  notificationFrequencyFactor  Integer value for notificationFrequencyFactor.
     * @param  notificationFrequencyInterval  String value for notificationFrequencyInterval.
     * @param  externalEmailRecipients  String value for externalEmailRecipients.
     * @param  smsNotification  Boolean value for smsNotification.
     * @param  smsNumbers  List of Cellphonenumber value for smsNumbers.
     * @param  reminder  Boolean value for reminder.
     * @param  severity  String value for severity.
     * @param  active  Active value for active.
     * @param  accountName  String value for accountName.
     * @param  pricePlanTrigger  PricePlanTrigger2 value for pricePlanTrigger.
     */
    public V2TriggersRequest1(
            String triggerId,
            String triggerName,
            String ecpdId,
            TriggerCategory triggerCategory,
            DataTrigger5 dataTrigger,
            Notificationarray notification,
            String notificationType,
            Boolean callback,
            Boolean emailNotification,
            String notificationGroupName,
            Integer notificationFrequencyFactor,
            String notificationFrequencyInterval,
            String externalEmailRecipients,
            Boolean smsNotification,
            List<Cellphonenumber> smsNumbers,
            Boolean reminder,
            String severity,
            Active active,
            String accountName,
            PricePlanTrigger2 pricePlanTrigger) {
        this.triggerId = triggerId;
        this.triggerName = triggerName;
        this.ecpdId = ecpdId;
        this.triggerCategory = triggerCategory;
        this.dataTrigger = dataTrigger;
        this.notification = notification;
        this.notificationType = notificationType;
        this.callback = callback;
        this.emailNotification = emailNotification;
        this.notificationGroupName = notificationGroupName;
        this.notificationFrequencyFactor = notificationFrequencyFactor;
        this.notificationFrequencyInterval = notificationFrequencyInterval;
        this.externalEmailRecipients = externalEmailRecipients;
        this.smsNotification = smsNotification;
        this.smsNumbers = smsNumbers;
        this.reminder = reminder;
        this.severity = severity;
        this.active = active;
        this.accountName = accountName;
        this.pricePlanTrigger = pricePlanTrigger;
    }

    /**
     * Getter for TriggerId.
     * The system assigned UUID of the trigger
     * @return Returns the String
     */
    @JsonGetter("triggerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTriggerId() {
        return triggerId;
    }

    /**
     * Setter for TriggerId.
     * The system assigned UUID of the trigger
     * @param triggerId Value for String
     */
    @JsonSetter("triggerId")
    public void setTriggerId(String triggerId) {
        this.triggerId = triggerId;
    }

    /**
     * Getter for TriggerName.
     * The user defined name of the trigger
     * @return Returns the String
     */
    @JsonGetter("triggerName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTriggerName() {
        return triggerName;
    }

    /**
     * Setter for TriggerName.
     * The user defined name of the trigger
     * @param triggerName Value for String
     */
    @JsonSetter("triggerName")
    public void setTriggerName(String triggerName) {
        this.triggerName = triggerName;
    }

    /**
     * Getter for EcpdId.
     * The Enterprise Customer Profile Database ID
     * @return Returns the String
     */
    @JsonGetter("ecpdId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getEcpdId() {
        return ecpdId;
    }

    /**
     * Setter for EcpdId.
     * The Enterprise Customer Profile Database ID
     * @param ecpdId Value for String
     */
    @JsonSetter("ecpdId")
    public void setEcpdId(String ecpdId) {
        this.ecpdId = ecpdId;
    }

    /**
     * Getter for TriggerCategory.
     * The type of trigger being created or modified
     * @return Returns the TriggerCategory
     */
    @JsonGetter("triggerCategory")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public TriggerCategory getTriggerCategory() {
        return triggerCategory;
    }

    /**
     * Setter for TriggerCategory.
     * The type of trigger being created or modified
     * @param triggerCategory Value for TriggerCategory
     */
    @JsonSetter("triggerCategory")
    public void setTriggerCategory(TriggerCategory triggerCategory) {
        this.triggerCategory = triggerCategory;
    }

    /**
     * Getter for DataTrigger.
     * @return Returns the DataTrigger5
     */
    @JsonGetter("dataTrigger")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public DataTrigger5 getDataTrigger() {
        return dataTrigger;
    }

    /**
     * Setter for DataTrigger.
     * @param dataTrigger Value for DataTrigger5
     */
    @JsonSetter("dataTrigger")
    public void setDataTrigger(DataTrigger5 dataTrigger) {
        this.dataTrigger = dataTrigger;
    }

    /**
     * Getter for Notification.
     * @return Returns the Notificationarray
     */
    @JsonGetter("notification")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Notificationarray getNotification() {
        return notification;
    }

    /**
     * Setter for Notification.
     * @param notification Value for Notificationarray
     */
    @JsonSetter("notification")
    public void setNotification(Notificationarray notification) {
        this.notification = notification;
    }

    /**
     * Getter for NotificationType.
     * @return Returns the String
     */
    @JsonGetter("notificationType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getNotificationType() {
        return notificationType;
    }

    /**
     * Setter for NotificationType.
     * @param notificationType Value for String
     */
    @JsonSetter("notificationType")
    public void setNotificationType(String notificationType) {
        this.notificationType = notificationType;
    }

    /**
     * Getter for Callback.
     * @return Returns the Boolean
     */
    @JsonGetter("callback")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getCallback() {
        return callback;
    }

    /**
     * Setter for Callback.
     * @param callback Value for Boolean
     */
    @JsonSetter("callback")
    public void setCallback(Boolean callback) {
        this.callback = callback;
    }

    /**
     * Getter for EmailNotification.
     * @return Returns the Boolean
     */
    @JsonGetter("emailNotification")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getEmailNotification() {
        return emailNotification;
    }

    /**
     * Setter for EmailNotification.
     * @param emailNotification Value for Boolean
     */
    @JsonSetter("emailNotification")
    public void setEmailNotification(Boolean emailNotification) {
        this.emailNotification = emailNotification;
    }

    /**
     * Getter for NotificationGroupName.
     * @return Returns the String
     */
    @JsonGetter("notificationGroupName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getNotificationGroupName() {
        return notificationGroupName;
    }

    /**
     * Setter for NotificationGroupName.
     * @param notificationGroupName Value for String
     */
    @JsonSetter("notificationGroupName")
    public void setNotificationGroupName(String notificationGroupName) {
        this.notificationGroupName = notificationGroupName;
    }

    /**
     * Getter for NotificationFrequencyFactor.
     * @return Returns the Integer
     */
    @JsonGetter("notificationFrequencyFactor")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getNotificationFrequencyFactor() {
        return notificationFrequencyFactor;
    }

    /**
     * Setter for NotificationFrequencyFactor.
     * @param notificationFrequencyFactor Value for Integer
     */
    @JsonSetter("notificationFrequencyFactor")
    public void setNotificationFrequencyFactor(Integer notificationFrequencyFactor) {
        this.notificationFrequencyFactor = notificationFrequencyFactor;
    }

    /**
     * Getter for NotificationFrequencyInterval.
     * @return Returns the String
     */
    @JsonGetter("notificationFrequencyInterval")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getNotificationFrequencyInterval() {
        return notificationFrequencyInterval;
    }

    /**
     * Setter for NotificationFrequencyInterval.
     * @param notificationFrequencyInterval Value for String
     */
    @JsonSetter("notificationFrequencyInterval")
    public void setNotificationFrequencyInterval(String notificationFrequencyInterval) {
        this.notificationFrequencyInterval = notificationFrequencyInterval;
    }

    /**
     * Getter for ExternalEmailRecipients.
     * @return Returns the String
     */
    @JsonGetter("externalEmailRecipients")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getExternalEmailRecipients() {
        return externalEmailRecipients;
    }

    /**
     * Setter for ExternalEmailRecipients.
     * @param externalEmailRecipients Value for String
     */
    @JsonSetter("externalEmailRecipients")
    public void setExternalEmailRecipients(String externalEmailRecipients) {
        this.externalEmailRecipients = externalEmailRecipients;
    }

    /**
     * Getter for SmsNotification.
     * @return Returns the Boolean
     */
    @JsonGetter("smsNotification")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getSmsNotification() {
        return smsNotification;
    }

    /**
     * Setter for SmsNotification.
     * @param smsNotification Value for Boolean
     */
    @JsonSetter("smsNotification")
    public void setSmsNotification(Boolean smsNotification) {
        this.smsNotification = smsNotification;
    }

    /**
     * Getter for SmsNumbers.
     * @return Returns the List of Cellphonenumber
     */
    @JsonGetter("smsNumbers")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Cellphonenumber> getSmsNumbers() {
        return smsNumbers;
    }

    /**
     * Setter for SmsNumbers.
     * @param smsNumbers Value for List of Cellphonenumber
     */
    @JsonSetter("smsNumbers")
    public void setSmsNumbers(List<Cellphonenumber> smsNumbers) {
        this.smsNumbers = smsNumbers;
    }

    /**
     * Getter for Reminder.
     * @return Returns the Boolean
     */
    @JsonGetter("reminder")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getReminder() {
        return reminder;
    }

    /**
     * Setter for Reminder.
     * @param reminder Value for Boolean
     */
    @JsonSetter("reminder")
    public void setReminder(Boolean reminder) {
        this.reminder = reminder;
    }

    /**
     * Getter for Severity.
     * @return Returns the String
     */
    @JsonGetter("severity")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSeverity() {
        return severity;
    }

    /**
     * Setter for Severity.
     * @param severity Value for String
     */
    @JsonSetter("severity")
    public void setSeverity(String severity) {
        this.severity = severity;
    }

    /**
     * Getter for Active.
     * A flag to indicate of the trigger is active, true, or not, false
     * @return Returns the Active
     */
    @JsonGetter("active")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Active getActive() {
        return active;
    }

    /**
     * Setter for Active.
     * A flag to indicate of the trigger is active, true, or not, false
     * @param active Value for Active
     */
    @JsonSetter("active")
    public void setActive(Active active) {
        this.active = active;
    }

    /**
     * Getter for AccountName.
     * The numeric name of the account and must include leading zeroes
     * @return Returns the String
     */
    @JsonGetter("accountName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAccountName() {
        return accountName;
    }

    /**
     * Setter for AccountName.
     * The numeric name of the account and must include leading zeroes
     * @param accountName Value for String
     */
    @JsonSetter("accountName")
    public void setAccountName(String accountName) {
        this.accountName = accountName;
    }

    /**
     * Getter for PricePlanTrigger.
     * @return Returns the PricePlanTrigger2
     */
    @JsonGetter("pricePlanTrigger")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PricePlanTrigger2 getPricePlanTrigger() {
        return pricePlanTrigger;
    }

    /**
     * Setter for PricePlanTrigger.
     * @param pricePlanTrigger Value for PricePlanTrigger2
     */
    @JsonSetter("pricePlanTrigger")
    public void setPricePlanTrigger(PricePlanTrigger2 pricePlanTrigger) {
        this.pricePlanTrigger = pricePlanTrigger;
    }

    /**
     * Hidden method for the serialization of additional properties.
     * @return The map of additionally set properties.
     */
    @JsonAnyGetter
    private Map<String, Object> getAdditionalProperties() {
        return additionalProperties.getAdditionalProperties();
    }

    /**
     * Hidden method for the de-serialization of additional properties.
     * @param name The name of the additional property.
     * @param value The Object value of the additional property.
     */
    @JsonAnySetter
    private void setAdditionalProperties(String name, Object value) {
        additionalProperties.setAdditionalProperty(name,
                ConversionHelper.convertToSimpleType(value,
                        x -> x),
                true);
    }

    /**
     * Getter for the value of additional properties based on provided property name.
     * @param name The name of the additional property.
     * @return Either the Object property value or null if not exist.
     */
    
    public Object getAdditionalProperty(String name) {
        return additionalProperties.getAdditionalProperty(name);
    }

    /**
     * Converts this V2TriggersRequest1 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "V2TriggersRequest1 [" + "triggerId=" + triggerId + ", triggerName=" + triggerName
                + ", ecpdId=" + ecpdId + ", triggerCategory=" + triggerCategory + ", dataTrigger="
                + dataTrigger + ", notification=" + notification + ", notificationType="
                + notificationType + ", callback=" + callback + ", emailNotification="
                + emailNotification + ", notificationGroupName=" + notificationGroupName
                + ", notificationFrequencyFactor=" + notificationFrequencyFactor
                + ", notificationFrequencyInterval=" + notificationFrequencyInterval
                + ", externalEmailRecipients=" + externalEmailRecipients + ", smsNotification="
                + smsNotification + ", smsNumbers=" + smsNumbers + ", reminder=" + reminder
                + ", severity=" + severity + ", active=" + active + ", accountName=" + accountName
                + ", pricePlanTrigger=" + pricePlanTrigger + ", additionalProperties="
                + additionalProperties + "]";
    }

    /**
     * Builds a new {@link V2TriggersRequest1.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link V2TriggersRequest1.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .triggerId(getTriggerId())
                .triggerName(getTriggerName())
                .ecpdId(getEcpdId())
                .triggerCategory(getTriggerCategory())
                .dataTrigger(getDataTrigger())
                .notification(getNotification())
                .notificationType(getNotificationType())
                .callback(getCallback())
                .emailNotification(getEmailNotification())
                .notificationGroupName(getNotificationGroupName())
                .notificationFrequencyFactor(getNotificationFrequencyFactor())
                .notificationFrequencyInterval(getNotificationFrequencyInterval())
                .externalEmailRecipients(getExternalEmailRecipients())
                .smsNotification(getSmsNotification())
                .smsNumbers(getSmsNumbers())
                .reminder(getReminder())
                .severity(getSeverity())
                .active(getActive())
                .accountName(getAccountName())
                .pricePlanTrigger(getPricePlanTrigger());
        builder.additionalProperties = additionalProperties;
        return builder;
    }

    /**
     * Class to build instances of {@link V2TriggersRequest1}.
     */
    public static class Builder {
        private String triggerId;
        private String triggerName;
        private String ecpdId;
        private TriggerCategory triggerCategory;
        private DataTrigger5 dataTrigger;
        private Notificationarray notification;
        private String notificationType;
        private Boolean callback;
        private Boolean emailNotification;
        private String notificationGroupName;
        private Integer notificationFrequencyFactor;
        private String notificationFrequencyInterval;
        private String externalEmailRecipients;
        private Boolean smsNotification;
        private List<Cellphonenumber> smsNumbers;
        private Boolean reminder;
        private String severity;
        private Active active;
        private String accountName;
        private PricePlanTrigger2 pricePlanTrigger;
        private AdditionalProperties<Object> additionalProperties =
                new AdditionalProperties<Object>();



        /**
         * Setter for triggerId.
         * @param  triggerId  String value for triggerId.
         * @return Builder
         */
        public Builder triggerId(String triggerId) {
            this.triggerId = triggerId;
            return this;
        }

        /**
         * Setter for triggerName.
         * @param  triggerName  String value for triggerName.
         * @return Builder
         */
        public Builder triggerName(String triggerName) {
            this.triggerName = triggerName;
            return this;
        }

        /**
         * Setter for ecpdId.
         * @param  ecpdId  String value for ecpdId.
         * @return Builder
         */
        public Builder ecpdId(String ecpdId) {
            this.ecpdId = ecpdId;
            return this;
        }

        /**
         * Setter for triggerCategory.
         * @param  triggerCategory  TriggerCategory value for triggerCategory.
         * @return Builder
         */
        public Builder triggerCategory(TriggerCategory triggerCategory) {
            this.triggerCategory = triggerCategory;
            return this;
        }

        /**
         * Setter for dataTrigger.
         * @param  dataTrigger  DataTrigger5 value for dataTrigger.
         * @return Builder
         */
        public Builder dataTrigger(DataTrigger5 dataTrigger) {
            this.dataTrigger = dataTrigger;
            return this;
        }

        /**
         * Setter for notification.
         * @param  notification  Notificationarray value for notification.
         * @return Builder
         */
        public Builder notification(Notificationarray notification) {
            this.notification = notification;
            return this;
        }

        /**
         * Setter for notificationType.
         * @param  notificationType  String value for notificationType.
         * @return Builder
         */
        public Builder notificationType(String notificationType) {
            this.notificationType = notificationType;
            return this;
        }

        /**
         * Setter for callback.
         * @param  callback  Boolean value for callback.
         * @return Builder
         */
        public Builder callback(Boolean callback) {
            this.callback = callback;
            return this;
        }

        /**
         * Setter for emailNotification.
         * @param  emailNotification  Boolean value for emailNotification.
         * @return Builder
         */
        public Builder emailNotification(Boolean emailNotification) {
            this.emailNotification = emailNotification;
            return this;
        }

        /**
         * Setter for notificationGroupName.
         * @param  notificationGroupName  String value for notificationGroupName.
         * @return Builder
         */
        public Builder notificationGroupName(String notificationGroupName) {
            this.notificationGroupName = notificationGroupName;
            return this;
        }

        /**
         * Setter for notificationFrequencyFactor.
         * @param  notificationFrequencyFactor  Integer value for notificationFrequencyFactor.
         * @return Builder
         */
        public Builder notificationFrequencyFactor(Integer notificationFrequencyFactor) {
            this.notificationFrequencyFactor = notificationFrequencyFactor;
            return this;
        }

        /**
         * Setter for notificationFrequencyInterval.
         * @param  notificationFrequencyInterval  String value for notificationFrequencyInterval.
         * @return Builder
         */
        public Builder notificationFrequencyInterval(String notificationFrequencyInterval) {
            this.notificationFrequencyInterval = notificationFrequencyInterval;
            return this;
        }

        /**
         * Setter for externalEmailRecipients.
         * @param  externalEmailRecipients  String value for externalEmailRecipients.
         * @return Builder
         */
        public Builder externalEmailRecipients(String externalEmailRecipients) {
            this.externalEmailRecipients = externalEmailRecipients;
            return this;
        }

        /**
         * Setter for smsNotification.
         * @param  smsNotification  Boolean value for smsNotification.
         * @return Builder
         */
        public Builder smsNotification(Boolean smsNotification) {
            this.smsNotification = smsNotification;
            return this;
        }

        /**
         * Setter for smsNumbers.
         * @param  smsNumbers  List of Cellphonenumber value for smsNumbers.
         * @return Builder
         */
        public Builder smsNumbers(List<Cellphonenumber> smsNumbers) {
            this.smsNumbers = smsNumbers;
            return this;
        }

        /**
         * Setter for reminder.
         * @param  reminder  Boolean value for reminder.
         * @return Builder
         */
        public Builder reminder(Boolean reminder) {
            this.reminder = reminder;
            return this;
        }

        /**
         * Setter for severity.
         * @param  severity  String value for severity.
         * @return Builder
         */
        public Builder severity(String severity) {
            this.severity = severity;
            return this;
        }

        /**
         * Setter for active.
         * @param  active  Active value for active.
         * @return Builder
         */
        public Builder active(Active active) {
            this.active = active;
            return this;
        }

        /**
         * Setter for accountName.
         * @param  accountName  String value for accountName.
         * @return Builder
         */
        public Builder accountName(String accountName) {
            this.accountName = accountName;
            return this;
        }

        /**
         * Setter for pricePlanTrigger.
         * @param  pricePlanTrigger  PricePlanTrigger2 value for pricePlanTrigger.
         * @return Builder
         */
        public Builder pricePlanTrigger(PricePlanTrigger2 pricePlanTrigger) {
            this.pricePlanTrigger = pricePlanTrigger;
            return this;
        }

        /**
         * Setter for additional property that are not in model fields.
         * @param name The name of the additional property.
         * @param value The Object value of the additional property.
         * @return Builder.
         */
        public Builder additionalProperty(String name, Object value) {
            this.additionalProperties.setAdditionalProperty(name, value);
            return this;
        }

        /**
         * Builds a new {@link V2TriggersRequest1} object using the set fields.
         * @return {@link V2TriggersRequest1}
         */
        public V2TriggersRequest1 build() {
            V2TriggersRequest1 model =
                    new V2TriggersRequest1(triggerId, triggerName, ecpdId, triggerCategory,
                            dataTrigger, notification, notificationType, callback,
                            emailNotification, notificationGroupName, notificationFrequencyFactor,
                            notificationFrequencyInterval, externalEmailRecipients, smsNotification,
                            smsNumbers, reminder, severity, active, accountName, pricePlanTrigger);
            model.additionalProperties = additionalProperties;
            return model;
        }
    }
}
