/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for DataFrame type.
 */
public class DataFrame {
    private int notUsed;
    private FrameType frameType;
    private Object msgId;
    private Integer startYear;
    private int startTime;
    private int durationTime;
    private int priority;
    private int notUsed1;
    private List<GeographicalPath> regions;
    private int notUsed2;
    private int notUsed3;
    private Object content;

    /**
     * Default constructor.
     */
    public DataFrame() {
    }

    /**
     * Initialization constructor.
     * @param  notUsed  int value for notUsed.
     * @param  frameType  FrameType value for frameType.
     * @param  msgId  Object value for msgId.
     * @param  startTime  int value for startTime.
     * @param  durationTime  int value for durationTime.
     * @param  priority  int value for priority.
     * @param  notUsed1  int value for notUsed1.
     * @param  regions  List of GeographicalPath value for regions.
     * @param  notUsed2  int value for notUsed2.
     * @param  notUsed3  int value for notUsed3.
     * @param  content  Object value for content.
     * @param  startYear  Integer value for startYear.
     */
    public DataFrame(
            int notUsed,
            FrameType frameType,
            Object msgId,
            int startTime,
            int durationTime,
            int priority,
            int notUsed1,
            List<GeographicalPath> regions,
            int notUsed2,
            int notUsed3,
            Object content,
            Integer startYear) {
        this.notUsed = notUsed;
        this.frameType = frameType;
        this.msgId = msgId;
        this.startYear = startYear;
        this.startTime = startTime;
        this.durationTime = durationTime;
        this.priority = priority;
        this.notUsed1 = notUsed1;
        this.regions = regions;
        this.notUsed2 = notUsed2;
        this.notUsed3 = notUsed3;
        this.content = content;
    }

    /**
     * Getter for NotUsed.
     * Always set to 0 and carries no meaning. Legacy field maintained for backward compatibility.
     * @return Returns the int
     */
    @JsonGetter("notUsed")
    public int getNotUsed() {
        return notUsed;
    }

    /**
     * Setter for NotUsed.
     * Always set to 0 and carries no meaning. Legacy field maintained for backward compatibility.
     * @param notUsed Value for int
     */
    @JsonSetter("notUsed")
    public void setNotUsed(int notUsed) {
        this.notUsed = notUsed;
    }

    /**
     * Getter for FrameType.
     * The frameType data element provides the type of message to follow in the rest of the message
     * frame structure. The following frame types are supported: - unknown - advisory - roadSignage
     * - commercialSignage
     * @return Returns the FrameType
     */
    @JsonGetter("frameType")
    public FrameType getFrameType() {
        return frameType;
    }

    /**
     * Setter for FrameType.
     * The frameType data element provides the type of message to follow in the rest of the message
     * frame structure. The following frame types are supported: - unknown - advisory - roadSignage
     * - commercialSignage
     * @param frameType Value for FrameType
     */
    @JsonSetter("frameType")
    public void setFrameType(FrameType frameType) {
        this.frameType = frameType;
    }

    /**
     * Getter for MsgId.
     * @return Returns the Object
     */
    @JsonGetter("msgId")
    public Object getMsgId() {
        return msgId;
    }

    /**
     * Setter for MsgId.
     * @param msgId Value for Object
     */
    @JsonSetter("msgId")
    public void setMsgId(Object msgId) {
        this.msgId = msgId;
    }

    /**
     * Getter for StartYear.
     * The V2X year consists of integer values from zero to 4095 representing the year according to
     * the Gregorian calendar date system. The value of zero shall represent an unknown value.
     * @return Returns the Integer
     */
    @JsonGetter("startYear")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getStartYear() {
        return startYear;
    }

    /**
     * Setter for StartYear.
     * The V2X year consists of integer values from zero to 4095 representing the year according to
     * the Gregorian calendar date system. The value of zero shall represent an unknown value.
     * @param startYear Value for Integer
     */
    @JsonSetter("startYear")
    public void setStartYear(Integer startYear) {
        this.startYear = startYear;
    }

    /**
     * Getter for StartTime.
     * Start time expresses the number of elapsed minutes of the current year in the time system
     * being used (typically UTC time). The value 527040 shall be used for invalid.
     * @return Returns the int
     */
    @JsonGetter("startTime")
    public int getStartTime() {
        return startTime;
    }

    /**
     * Setter for StartTime.
     * Start time expresses the number of elapsed minutes of the current year in the time system
     * being used (typically UTC time). The value 527040 shall be used for invalid.
     * @param startTime Value for int
     */
    @JsonSetter("startTime")
    public void setStartTime(int startTime) {
        this.startTime = startTime;
    }

    /**
     * Getter for DurationTime.
     * The duration, in units of whole minutes, that a object persists for. A value of 32000 means
     * that the object persists forever. The range 0..32000 provides for about 22.2 days of maximum
     * duration.
     * @return Returns the int
     */
    @JsonGetter("durationTime")
    public int getDurationTime() {
        return durationTime;
    }

    /**
     * Setter for DurationTime.
     * The duration, in units of whole minutes, that a object persists for. A value of 32000 means
     * that the object persists forever. The range 0..32000 provides for about 22.2 days of maximum
     * duration.
     * @param durationTime Value for int
     */
    @JsonSetter("durationTime")
    public void setDurationTime(int durationTime) {
        this.durationTime = durationTime;
    }

    /**
     * Getter for Priority.
     * The relative importance of the sign, on a scale from zero (least important) to seven (most
     * important).
     * @return Returns the int
     */
    @JsonGetter("priority")
    public int getPriority() {
        return priority;
    }

    /**
     * Setter for Priority.
     * The relative importance of the sign, on a scale from zero (least important) to seven (most
     * important).
     * @param priority Value for int
     */
    @JsonSetter("priority")
    public void setPriority(int priority) {
        this.priority = priority;
    }

    /**
     * Getter for NotUsed1.
     * Always set to 0 and carries no meaning. Legacy field maintained for backward compatibility.
     * @return Returns the int
     */
    @JsonGetter("notUsed1")
    public int getNotUsed1() {
        return notUsed1;
    }

    /**
     * Setter for NotUsed1.
     * Always set to 0 and carries no meaning. Legacy field maintained for backward compatibility.
     * @param notUsed1 Value for int
     */
    @JsonSetter("notUsed1")
    public void setNotUsed1(int notUsed1) {
        this.notUsed1 = notUsed1;
    }

    /**
     * Getter for Regions.
     * The data frame is used to support the cross-cutting need in many V2X messages to describe
     * arbitrary spatial areas (polygons, boundary lines, and other basic shapes) required by
     * various message types in a small message size. This data frame can describe a complex path or
     * region of arbitrary size using either one of the two supported node offset methods (XY
     * offsets or LL offsets) or using simple geometric projections.
     * @return Returns the List of GeographicalPath
     */
    @JsonGetter("regions")
    public List<GeographicalPath> getRegions() {
        return regions;
    }

    /**
     * Setter for Regions.
     * The data frame is used to support the cross-cutting need in many V2X messages to describe
     * arbitrary spatial areas (polygons, boundary lines, and other basic shapes) required by
     * various message types in a small message size. This data frame can describe a complex path or
     * region of arbitrary size using either one of the two supported node offset methods (XY
     * offsets or LL offsets) or using simple geometric projections.
     * @param regions Value for List of GeographicalPath
     */
    @JsonSetter("regions")
    public void setRegions(List<GeographicalPath> regions) {
        this.regions = regions;
    }

    /**
     * Getter for NotUsed2.
     * Always set to 0 and carries no meaning. Legacy field maintained for backward compatibility.
     * @return Returns the int
     */
    @JsonGetter("notUsed2")
    public int getNotUsed2() {
        return notUsed2;
    }

    /**
     * Setter for NotUsed2.
     * Always set to 0 and carries no meaning. Legacy field maintained for backward compatibility.
     * @param notUsed2 Value for int
     */
    @JsonSetter("notUsed2")
    public void setNotUsed2(int notUsed2) {
        this.notUsed2 = notUsed2;
    }

    /**
     * Getter for NotUsed3.
     * Always set to 0 and carries no meaning. Legacy field maintained for backward compatibility.
     * @return Returns the int
     */
    @JsonGetter("notUsed3")
    public int getNotUsed3() {
        return notUsed3;
    }

    /**
     * Setter for NotUsed3.
     * Always set to 0 and carries no meaning. Legacy field maintained for backward compatibility.
     * @param notUsed3 Value for int
     */
    @JsonSetter("notUsed3")
    public void setNotUsed3(int notUsed3) {
        this.notUsed3 = notUsed3;
    }

    /**
     * Getter for Content.
     * @return Returns the Object
     */
    @JsonGetter("content")
    public Object getContent() {
        return content;
    }

    /**
     * Setter for Content.
     * @param content Value for Object
     */
    @JsonSetter("content")
    public void setContent(Object content) {
        this.content = content;
    }

    /**
     * Converts this DataFrame into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "DataFrame [" + "notUsed=" + notUsed + ", frameType=" + frameType + ", msgId="
                + msgId + ", startTime=" + startTime + ", durationTime=" + durationTime
                + ", priority=" + priority + ", notUsed1=" + notUsed1 + ", regions=" + regions
                + ", notUsed2=" + notUsed2 + ", notUsed3=" + notUsed3 + ", content=" + content
                + ", startYear=" + startYear + "]";
    }

    /**
     * Builds a new {@link DataFrame.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link DataFrame.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(notUsed, frameType, msgId, startTime, durationTime, priority,
                notUsed1, regions, notUsed2, notUsed3, content)
                .startYear(getStartYear());
        return builder;
    }

    /**
     * Class to build instances of {@link DataFrame}.
     */
    public static class Builder {
        private int notUsed;
        private FrameType frameType;
        private Object msgId;
        private int startTime;
        private int durationTime;
        private int priority;
        private int notUsed1;
        private List<GeographicalPath> regions;
        private int notUsed2;
        private int notUsed3;
        private Object content;
        private Integer startYear;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  notUsed  int value for notUsed.
         * @param  frameType  FrameType value for frameType.
         * @param  msgId  Object value for msgId.
         * @param  startTime  int value for startTime.
         * @param  durationTime  int value for durationTime.
         * @param  priority  int value for priority.
         * @param  notUsed1  int value for notUsed1.
         * @param  regions  List of GeographicalPath value for regions.
         * @param  notUsed2  int value for notUsed2.
         * @param  notUsed3  int value for notUsed3.
         * @param  content  Object value for content.
         */
        public Builder(int notUsed, FrameType frameType, Object msgId, int startTime,
                int durationTime, int priority, int notUsed1, List<GeographicalPath> regions,
                int notUsed2, int notUsed3, Object content) {
            this.notUsed = notUsed;
            this.frameType = frameType;
            this.msgId = msgId;
            this.startTime = startTime;
            this.durationTime = durationTime;
            this.priority = priority;
            this.notUsed1 = notUsed1;
            this.regions = regions;
            this.notUsed2 = notUsed2;
            this.notUsed3 = notUsed3;
            this.content = content;
        }

        /**
         * Setter for notUsed.
         * @param  notUsed  int value for notUsed.
         * @return Builder
         */
        public Builder notUsed(int notUsed) {
            this.notUsed = notUsed;
            return this;
        }

        /**
         * Setter for frameType.
         * @param  frameType  FrameType value for frameType.
         * @return Builder
         */
        public Builder frameType(FrameType frameType) {
            this.frameType = frameType;
            return this;
        }

        /**
         * Setter for msgId.
         * @param  msgId  Object value for msgId.
         * @return Builder
         */
        public Builder msgId(Object msgId) {
            this.msgId = msgId;
            return this;
        }

        /**
         * Setter for startTime.
         * @param  startTime  int value for startTime.
         * @return Builder
         */
        public Builder startTime(int startTime) {
            this.startTime = startTime;
            return this;
        }

        /**
         * Setter for durationTime.
         * @param  durationTime  int value for durationTime.
         * @return Builder
         */
        public Builder durationTime(int durationTime) {
            this.durationTime = durationTime;
            return this;
        }

        /**
         * Setter for priority.
         * @param  priority  int value for priority.
         * @return Builder
         */
        public Builder priority(int priority) {
            this.priority = priority;
            return this;
        }

        /**
         * Setter for notUsed1.
         * @param  notUsed1  int value for notUsed1.
         * @return Builder
         */
        public Builder notUsed1(int notUsed1) {
            this.notUsed1 = notUsed1;
            return this;
        }

        /**
         * Setter for regions.
         * @param  regions  List of GeographicalPath value for regions.
         * @return Builder
         */
        public Builder regions(List<GeographicalPath> regions) {
            this.regions = regions;
            return this;
        }

        /**
         * Setter for notUsed2.
         * @param  notUsed2  int value for notUsed2.
         * @return Builder
         */
        public Builder notUsed2(int notUsed2) {
            this.notUsed2 = notUsed2;
            return this;
        }

        /**
         * Setter for notUsed3.
         * @param  notUsed3  int value for notUsed3.
         * @return Builder
         */
        public Builder notUsed3(int notUsed3) {
            this.notUsed3 = notUsed3;
            return this;
        }

        /**
         * Setter for content.
         * @param  content  Object value for content.
         * @return Builder
         */
        public Builder content(Object content) {
            this.content = content;
            return this;
        }

        /**
         * Setter for startYear.
         * @param  startYear  Integer value for startYear.
         * @return Builder
         */
        public Builder startYear(Integer startYear) {
            this.startYear = startYear;
            return this;
        }

        /**
         * Builds a new {@link DataFrame} object using the set fields.
         * @return {@link DataFrame}
         */
        public DataFrame build() {
            return new DataFrame(notUsed, frameType, msgId, startTime, durationTime, priority,
                    notUsed1, regions, notUsed2, notUsed3, content, startYear);
        }
    }
}
