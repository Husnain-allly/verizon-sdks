/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.AdditionalProperties;
import io.apimatic.core.utilities.ConversionHelper;
import java.util.Map;

/**
 * This is a model class for DeleteDevicesResult type.
 */
public class DeleteDevicesResult {
    private Object deviceIds;
    private String status;
    private String message;
    private AdditionalProperties<Object> additionalProperties = 
            new AdditionalProperties<Object>(this.getClass());

    /**
     * Default constructor.
     */
    public DeleteDevicesResult() {
    }

    /**
     * Initialization constructor.
     * @param  deviceIds  Object value for deviceIds.
     * @param  status  String value for status.
     * @param  message  String value for message.
     */
    public DeleteDevicesResult(
            Object deviceIds,
            String status,
            String message) {
        this.deviceIds = deviceIds;
        this.status = status;
        this.message = message;
    }

    /**
     * Getter for DeviceIds.
     * One object per device to be deleted. Each object must contain a kind and id element
     * identifying the device.
     * @return Returns the Object
     */
    @JsonGetter("deviceIds")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getDeviceIds() {
        return deviceIds;
    }

    /**
     * Setter for DeviceIds.
     * One object per device to be deleted. Each object must contain a kind and id element
     * identifying the device.
     * @param deviceIds Value for Object
     */
    @JsonSetter("deviceIds")
    public void setDeviceIds(Object deviceIds) {
        this.deviceIds = deviceIds;
    }

    /**
     * Getter for Status.
     * “Success” if the device was deleted, or “Failed” if there was a problem.
     * @return Returns the String
     */
    @JsonGetter("status")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getStatus() {
        return status;
    }

    /**
     * Setter for Status.
     * “Success” if the device was deleted, or “Failed” if there was a problem.
     * @param status Value for String
     */
    @JsonSetter("status")
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Getter for Message.
     * Not present if status=Success. One of these messages if status=Failed:The device is not in
     * deactivate state.The user does not have access to delete the device.
     * @return Returns the String
     */
    @JsonGetter("message")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getMessage() {
        return message;
    }

    /**
     * Setter for Message.
     * Not present if status=Success. One of these messages if status=Failed:The device is not in
     * deactivate state.The user does not have access to delete the device.
     * @param message Value for String
     */
    @JsonSetter("message")
    public void setMessage(String message) {
        this.message = message;
    }

    /**
     * Hidden method for the serialization of additional properties.
     * @return The map of additionally set properties.
     */
    @JsonAnyGetter
    private Map<String, Object> getAdditionalProperties() {
        return additionalProperties.getAdditionalProperties();
    }

    /**
     * Hidden method for the de-serialization of additional properties.
     * @param name The name of the additional property.
     * @param value The Object value of the additional property.
     */
    @JsonAnySetter
    private void setAdditionalProperties(String name, Object value) {
        additionalProperties.setAdditionalProperty(name,
                ConversionHelper.convertToSimpleType(value,
                        x -> x),
                true);
    }

    /**
     * Getter for the value of additional properties based on provided property name.
     * @param name The name of the additional property.
     * @return Either the Object property value or null if not exist.
     */
    
    public Object getAdditionalProperty(String name) {
        return additionalProperties.getAdditionalProperty(name);
    }

    /**
     * Converts this DeleteDevicesResult into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "DeleteDevicesResult [" + "deviceIds=" + deviceIds + ", status=" + status
                + ", message=" + message + ", additionalProperties=" + additionalProperties + "]";
    }

    /**
     * Builds a new {@link DeleteDevicesResult.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link DeleteDevicesResult.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .deviceIds(getDeviceIds())
                .status(getStatus())
                .message(getMessage());
        builder.additionalProperties = additionalProperties;
        return builder;
    }

    /**
     * Class to build instances of {@link DeleteDevicesResult}.
     */
    public static class Builder {
        private Object deviceIds;
        private String status;
        private String message;
        private AdditionalProperties<Object> additionalProperties =
                new AdditionalProperties<Object>();



        /**
         * Setter for deviceIds.
         * @param  deviceIds  Object value for deviceIds.
         * @return Builder
         */
        public Builder deviceIds(Object deviceIds) {
            this.deviceIds = deviceIds;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  String value for status.
         * @return Builder
         */
        public Builder status(String status) {
            this.status = status;
            return this;
        }

        /**
         * Setter for message.
         * @param  message  String value for message.
         * @return Builder
         */
        public Builder message(String message) {
            this.message = message;
            return this;
        }

        /**
         * Setter for additional property that are not in model fields.
         * @param name The name of the additional property.
         * @param value The Object value of the additional property.
         * @return Builder.
         */
        public Builder additionalProperty(String name, Object value) {
            this.additionalProperties.setAdditionalProperty(name, value);
            return this;
        }

        /**
         * Builds a new {@link DeleteDevicesResult} object using the set fields.
         * @return {@link DeleteDevicesResult}
         */
        public DeleteDevicesResult build() {
            DeleteDevicesResult model =
                    new DeleteDevicesResult(deviceIds, status, message);
            model.additionalProperties = additionalProperties;
            return model;
        }
    }
}
