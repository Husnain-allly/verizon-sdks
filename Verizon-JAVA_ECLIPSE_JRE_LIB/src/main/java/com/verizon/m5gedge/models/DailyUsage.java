/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.AdditionalProperties;
import io.apimatic.core.utilities.ConversionHelper;
import java.util.Map;

/**
 * This is a model class for DailyUsage type.
 */
public class DailyUsage {
    private GioDeviceId deviceId;
    private String earliest;
    private String latest;
    private AdditionalProperties<Object> additionalProperties = 
            new AdditionalProperties<Object>(this.getClass());

    /**
     * Default constructor.
     */
    public DailyUsage() {
    }

    /**
     * Initialization constructor.
     * @param  deviceId  GioDeviceId value for deviceId.
     * @param  earliest  String value for earliest.
     * @param  latest  String value for latest.
     */
    public DailyUsage(
            GioDeviceId deviceId,
            String earliest,
            String latest) {
        this.deviceId = deviceId;
        this.earliest = earliest;
        this.latest = latest;
    }

    /**
     * Getter for DeviceId.
     * @return Returns the GioDeviceId
     */
    @JsonGetter("deviceId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public GioDeviceId getDeviceId() {
        return deviceId;
    }

    /**
     * Setter for DeviceId.
     * @param deviceId Value for GioDeviceId
     */
    @JsonSetter("deviceId")
    public void setDeviceId(GioDeviceId deviceId) {
        this.deviceId = deviceId;
    }

    /**
     * Getter for Earliest.
     * The start date of the time period queried as "$datetime"
     * @return Returns the String
     */
    @JsonGetter("earliest")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getEarliest() {
        return earliest;
    }

    /**
     * Setter for Earliest.
     * The start date of the time period queried as "$datetime"
     * @param earliest Value for String
     */
    @JsonSetter("earliest")
    public void setEarliest(String earliest) {
        this.earliest = earliest;
    }

    /**
     * Getter for Latest.
     * The end date of the time period being queried as "$datetime"
     * @return Returns the String
     */
    @JsonGetter("latest")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getLatest() {
        return latest;
    }

    /**
     * Setter for Latest.
     * The end date of the time period being queried as "$datetime"
     * @param latest Value for String
     */
    @JsonSetter("latest")
    public void setLatest(String latest) {
        this.latest = latest;
    }

    /**
     * Hidden method for the serialization of additional properties.
     * @return The map of additionally set properties.
     */
    @JsonAnyGetter
    private Map<String, Object> getAdditionalProperties() {
        return additionalProperties.getAdditionalProperties();
    }

    /**
     * Hidden method for the de-serialization of additional properties.
     * @param name The name of the additional property.
     * @param value The Object value of the additional property.
     */
    @JsonAnySetter
    private void setAdditionalProperties(String name, Object value) {
        additionalProperties.setAdditionalProperty(name,
                ConversionHelper.convertToSimpleType(value,
                        x -> x),
                true);
    }

    /**
     * Getter for the value of additional properties based on provided property name.
     * @param name The name of the additional property.
     * @return Either the Object property value or null if not exist.
     */
    
    public Object getAdditionalProperty(String name) {
        return additionalProperties.getAdditionalProperty(name);
    }

    /**
     * Converts this DailyUsage into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "DailyUsage [" + "deviceId=" + deviceId + ", earliest=" + earliest + ", latest="
                + latest + ", additionalProperties=" + additionalProperties + "]";
    }

    /**
     * Builds a new {@link DailyUsage.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link DailyUsage.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .deviceId(getDeviceId())
                .earliest(getEarliest())
                .latest(getLatest());
        builder.additionalProperties = additionalProperties;
        return builder;
    }

    /**
     * Class to build instances of {@link DailyUsage}.
     */
    public static class Builder {
        private GioDeviceId deviceId;
        private String earliest;
        private String latest;
        private AdditionalProperties<Object> additionalProperties =
                new AdditionalProperties<Object>();



        /**
         * Setter for deviceId.
         * @param  deviceId  GioDeviceId value for deviceId.
         * @return Builder
         */
        public Builder deviceId(GioDeviceId deviceId) {
            this.deviceId = deviceId;
            return this;
        }

        /**
         * Setter for earliest.
         * @param  earliest  String value for earliest.
         * @return Builder
         */
        public Builder earliest(String earliest) {
            this.earliest = earliest;
            return this;
        }

        /**
         * Setter for latest.
         * @param  latest  String value for latest.
         * @return Builder
         */
        public Builder latest(String latest) {
            this.latest = latest;
            return this;
        }

        /**
         * Setter for additional property that are not in model fields.
         * @param name The name of the additional property.
         * @param value The Object value of the additional property.
         * @return Builder.
         */
        public Builder additionalProperty(String name, Object value) {
            this.additionalProperties.setAdditionalProperty(name, value);
            return this;
        }

        /**
         * Builds a new {@link DailyUsage} object using the set fields.
         * @return {@link DailyUsage}
         */
        public DailyUsage build() {
            DailyUsage model =
                    new DailyUsage(deviceId, earliest, latest);
            model.additionalProperties = additionalProperties;
            return model;
        }
    }
}
