/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.AdditionalProperties;
import io.apimatic.core.utilities.ConversionHelper;
import java.util.Map;

/**
 * This is a model class for ServiceUsage type.
 */
public class ServiceUsage {
    private String accountName;
    private String transactionsCount;
    private AdditionalProperties<Object> additionalProperties = 
            new AdditionalProperties<Object>(this.getClass());

    /**
     * Default constructor.
     */
    public ServiceUsage() {
    }

    /**
     * Initialization constructor.
     * @param  accountName  String value for accountName.
     * @param  transactionsCount  String value for transactionsCount.
     */
    public ServiceUsage(
            String accountName,
            String transactionsCount) {
        this.accountName = accountName;
        this.transactionsCount = transactionsCount;
    }

    /**
     * Getter for AccountName.
     * Account identifier.
     * @return Returns the String
     */
    @JsonGetter("accountName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAccountName() {
        return accountName;
    }

    /**
     * Setter for AccountName.
     * Account identifier.
     * @param accountName Value for String
     */
    @JsonSetter("accountName")
    public void setAccountName(String accountName) {
        this.accountName = accountName;
    }

    /**
     * Getter for TransactionsCount.
     * Total requests for the account during the reporting period.
     * @return Returns the String
     */
    @JsonGetter("transactionsCount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTransactionsCount() {
        return transactionsCount;
    }

    /**
     * Setter for TransactionsCount.
     * Total requests for the account during the reporting period.
     * @param transactionsCount Value for String
     */
    @JsonSetter("transactionsCount")
    public void setTransactionsCount(String transactionsCount) {
        this.transactionsCount = transactionsCount;
    }

    /**
     * Hidden method for the serialization of additional properties.
     * @return The map of additionally set properties.
     */
    @JsonAnyGetter
    private Map<String, Object> getAdditionalProperties() {
        return additionalProperties.getAdditionalProperties();
    }

    /**
     * Hidden method for the de-serialization of additional properties.
     * @param name The name of the additional property.
     * @param value The Object value of the additional property.
     */
    @JsonAnySetter
    private void setAdditionalProperties(String name, Object value) {
        additionalProperties.setAdditionalProperty(name,
                ConversionHelper.convertToSimpleType(value,
                        x -> x),
                true);
    }

    /**
     * Getter for the value of additional properties based on provided property name.
     * @param name The name of the additional property.
     * @return Either the Object property value or null if not exist.
     */
    
    public Object getAdditionalProperty(String name) {
        return additionalProperties.getAdditionalProperty(name);
    }

    /**
     * Converts this ServiceUsage into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ServiceUsage [" + "accountName=" + accountName + ", transactionsCount="
                + transactionsCount + ", additionalProperties=" + additionalProperties + "]";
    }

    /**
     * Builds a new {@link ServiceUsage.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ServiceUsage.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .accountName(getAccountName())
                .transactionsCount(getTransactionsCount());
        builder.additionalProperties = additionalProperties;
        return builder;
    }

    /**
     * Class to build instances of {@link ServiceUsage}.
     */
    public static class Builder {
        private String accountName;
        private String transactionsCount;
        private AdditionalProperties<Object> additionalProperties =
                new AdditionalProperties<Object>();



        /**
         * Setter for accountName.
         * @param  accountName  String value for accountName.
         * @return Builder
         */
        public Builder accountName(String accountName) {
            this.accountName = accountName;
            return this;
        }

        /**
         * Setter for transactionsCount.
         * @param  transactionsCount  String value for transactionsCount.
         * @return Builder
         */
        public Builder transactionsCount(String transactionsCount) {
            this.transactionsCount = transactionsCount;
            return this;
        }

        /**
         * Setter for additional property that are not in model fields.
         * @param name The name of the additional property.
         * @param value The Object value of the additional property.
         * @return Builder.
         */
        public Builder additionalProperty(String name, Object value) {
            this.additionalProperties.setAdditionalProperty(name, value);
            return this;
        }

        /**
         * Builds a new {@link ServiceUsage} object using the set fields.
         * @return {@link ServiceUsage}
         */
        public ServiceUsage build() {
            ServiceUsage model =
                    new ServiceUsage(accountName, transactionsCount);
            model.additionalProperties = additionalProperties;
            return model;
        }
    }
}
