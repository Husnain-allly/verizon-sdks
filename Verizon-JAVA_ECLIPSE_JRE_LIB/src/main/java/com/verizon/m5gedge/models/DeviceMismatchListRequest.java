/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.AdditionalProperties;
import io.apimatic.core.utilities.ConversionHelper;
import java.util.List;
import java.util.Map;

/**
 * This is a model class for DeviceMismatchListRequest type.
 */
public class DeviceMismatchListRequest {
    private DateFilter filter;
    private List<AccountDeviceList> devices;
    private String accountName;
    private String groupName;
    private AdditionalProperties<Object> additionalProperties = 
            new AdditionalProperties<Object>(this.getClass());

    /**
     * Default constructor.
     */
    public DeviceMismatchListRequest() {
    }

    /**
     * Initialization constructor.
     * @param  filter  DateFilter value for filter.
     * @param  devices  List of AccountDeviceList value for devices.
     * @param  accountName  String value for accountName.
     * @param  groupName  String value for groupName.
     */
    public DeviceMismatchListRequest(
            DateFilter filter,
            List<AccountDeviceList> devices,
            String accountName,
            String groupName) {
        this.filter = filter;
        this.devices = devices;
        this.accountName = accountName;
        this.groupName = groupName;
    }

    /**
     * Getter for Filter.
     * Filter out the dates.
     * @return Returns the DateFilter
     */
    @JsonGetter("filter")
    public DateFilter getFilter() {
        return filter;
    }

    /**
     * Setter for Filter.
     * Filter out the dates.
     * @param filter Value for DateFilter
     */
    @JsonSetter("filter")
    public void setFilter(DateFilter filter) {
        this.filter = filter;
    }

    /**
     * Getter for Devices.
     * A list of specific devices that you want to check, specified by ICCID or MDN.
     * @return Returns the List of AccountDeviceList
     */
    @JsonGetter("devices")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<AccountDeviceList> getDevices() {
        return devices;
    }

    /**
     * Setter for Devices.
     * A list of specific devices that you want to check, specified by ICCID or MDN.
     * @param devices Value for List of AccountDeviceList
     */
    @JsonSetter("devices")
    public void setDevices(List<AccountDeviceList> devices) {
        this.devices = devices;
    }

    /**
     * Getter for AccountName.
     * The account that you want to search for mismatched devices. If you don't specify an
     * accountName, the search includes all devices to which you have access.
     * @return Returns the String
     */
    @JsonGetter("accountName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAccountName() {
        return accountName;
    }

    /**
     * Setter for AccountName.
     * The account that you want to search for mismatched devices. If you don't specify an
     * accountName, the search includes all devices to which you have access.
     * @param accountName Value for String
     */
    @JsonSetter("accountName")
    public void setAccountName(String accountName) {
        this.accountName = accountName;
    }

    /**
     * Getter for GroupName.
     * The name of a device group, to only include devices in that group.
     * @return Returns the String
     */
    @JsonGetter("groupName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getGroupName() {
        return groupName;
    }

    /**
     * Setter for GroupName.
     * The name of a device group, to only include devices in that group.
     * @param groupName Value for String
     */
    @JsonSetter("groupName")
    public void setGroupName(String groupName) {
        this.groupName = groupName;
    }

    /**
     * Hidden method for the serialization of additional properties.
     * @return The map of additionally set properties.
     */
    @JsonAnyGetter
    private Map<String, Object> getAdditionalProperties() {
        return additionalProperties.getAdditionalProperties();
    }

    /**
     * Hidden method for the de-serialization of additional properties.
     * @param name The name of the additional property.
     * @param value The Object value of the additional property.
     */
    @JsonAnySetter
    private void setAdditionalProperties(String name, Object value) {
        additionalProperties.setAdditionalProperty(name,
                ConversionHelper.convertToSimpleType(value,
                        x -> x),
                true);
    }

    /**
     * Getter for the value of additional properties based on provided property name.
     * @param name The name of the additional property.
     * @return Either the Object property value or null if not exist.
     */
    
    public Object getAdditionalProperty(String name) {
        return additionalProperties.getAdditionalProperty(name);
    }

    /**
     * Converts this DeviceMismatchListRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "DeviceMismatchListRequest [" + "filter=" + filter + ", devices=" + devices
                + ", accountName=" + accountName + ", groupName=" + groupName
                + ", additionalProperties=" + additionalProperties + "]";
    }

    /**
     * Builds a new {@link DeviceMismatchListRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link DeviceMismatchListRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(filter)
                .devices(getDevices())
                .accountName(getAccountName())
                .groupName(getGroupName());
        builder.additionalProperties = additionalProperties;
        return builder;
    }

    /**
     * Class to build instances of {@link DeviceMismatchListRequest}.
     */
    public static class Builder {
        private DateFilter filter;
        private List<AccountDeviceList> devices;
        private String accountName;
        private String groupName;
        private AdditionalProperties<Object> additionalProperties =
                new AdditionalProperties<Object>();

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  filter  DateFilter value for filter.
         */
        public Builder(DateFilter filter) {
            this.filter = filter;
        }

        /**
         * Setter for filter.
         * @param  filter  DateFilter value for filter.
         * @return Builder
         */
        public Builder filter(DateFilter filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Setter for devices.
         * @param  devices  List of AccountDeviceList value for devices.
         * @return Builder
         */
        public Builder devices(List<AccountDeviceList> devices) {
            this.devices = devices;
            return this;
        }

        /**
         * Setter for accountName.
         * @param  accountName  String value for accountName.
         * @return Builder
         */
        public Builder accountName(String accountName) {
            this.accountName = accountName;
            return this;
        }

        /**
         * Setter for groupName.
         * @param  groupName  String value for groupName.
         * @return Builder
         */
        public Builder groupName(String groupName) {
            this.groupName = groupName;
            return this;
        }

        /**
         * Setter for additional property that are not in model fields.
         * @param name The name of the additional property.
         * @param value The Object value of the additional property.
         * @return Builder.
         */
        public Builder additionalProperty(String name, Object value) {
            this.additionalProperties.setAdditionalProperty(name, value);
            return this;
        }

        /**
         * Builds a new {@link DeviceMismatchListRequest} object using the set fields.
         * @return {@link DeviceMismatchListRequest}
         */
        public DeviceMismatchListRequest build() {
            DeviceMismatchListRequest model =
                    new DeviceMismatchListRequest(filter, devices, accountName, groupName);
            model.additionalProperties = additionalProperties;
            return model;
        }
    }
}
