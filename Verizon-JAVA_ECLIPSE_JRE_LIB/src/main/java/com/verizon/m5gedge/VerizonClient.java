/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge;

import com.verizon.m5gedge.apis.AccountDevicesApi;
import com.verizon.m5gedge.apis.AccountRequestsApi;
import com.verizon.m5gedge.apis.AccountSubscriptionsApi;
import com.verizon.m5gedge.apis.AccountsApi;
import com.verizon.m5gedge.apis.AnomalySettingsApi;
import com.verizon.m5gedge.apis.AnomalyTriggersApi;
import com.verizon.m5gedge.apis.AnomalyTriggersV2Api;
import com.verizon.m5gedge.apis.AppConfigServiceApi;
import com.verizon.m5gedge.apis.BillingApi;
import com.verizon.m5gedge.apis.CampaignsV2Api;
import com.verizon.m5gedge.apis.CampaignsV3Api;
import com.verizon.m5gedge.apis.ClientLoggingApi;
import com.verizon.m5gedge.apis.CloudConnectorDevicesApi;
import com.verizon.m5gedge.apis.CloudConnectorSubscriptionsApi;
import com.verizon.m5gedge.apis.ConfigurationFilesApi;
import com.verizon.m5gedge.apis.ConnectivityCallbacksApi;
import com.verizon.m5gedge.apis.CreatePricePlanTriggersApi;
import com.verizon.m5gedge.apis.DeviceActionsApi;
import com.verizon.m5gedge.apis.DeviceDiagnosticsApi;
import com.verizon.m5gedge.apis.DeviceGroupsApi;
import com.verizon.m5gedge.apis.DeviceLocationCallbacksApi;
import com.verizon.m5gedge.apis.DeviceManagementApi;
import com.verizon.m5gedge.apis.DeviceMonitoringApi;
import com.verizon.m5gedge.apis.DeviceProfileManagementApi;
import com.verizon.m5gedge.apis.DeviceReportsApi;
import com.verizon.m5gedge.apis.DeviceServiceManagementApi;
import com.verizon.m5gedge.apis.DeviceSmsMessagingApi;
import com.verizon.m5gedge.apis.DevicesLocationSubscriptionsApi;
import com.verizon.m5gedge.apis.DevicesLocationsApi;
import com.verizon.m5gedge.apis.DiagnosticsCallbacksApi;
import com.verizon.m5gedge.apis.DiagnosticsFactoryResetApi;
import com.verizon.m5gedge.apis.DiagnosticsHistoryApi;
import com.verizon.m5gedge.apis.DiagnosticsObservationsApi;
import com.verizon.m5gedge.apis.DiagnosticsSettingsApi;
import com.verizon.m5gedge.apis.DiagnosticsSubscriptionsApi;
import com.verizon.m5gedge.apis.EuiccDeviceProfileManagementApi;
import com.verizon.m5gedge.apis.ExclusionsApi;
import com.verizon.m5gedge.apis.FirmwareV1Api;
import com.verizon.m5gedge.apis.FirmwareV3Api;
import com.verizon.m5gedge.apis.GlobalReportingApi;
import com.verizon.m5gedge.apis.HyperPreciseLocationCallbacksApi;
import com.verizon.m5gedge.apis.M5GBiDeviceActionsApi;
import com.verizon.m5gedge.apis.M5GEdgePlatformsApi;
import com.verizon.m5gedge.apis.ManagingeSimProfilesApi;
import com.verizon.m5gedge.apis.MapDataManagerApi;
import com.verizon.m5gedge.apis.OauthAuthorizationApi;
import com.verizon.m5gedge.apis.PerformanceMetricsApi;
import com.verizon.m5gedge.apis.PromotionPeriodInformationApi;
import com.verizon.m5gedge.apis.PwnApi;
import com.verizon.m5gedge.apis.RegistrationApi;
import com.verizon.m5gedge.apis.RetrieveRatePlanListApi;
import com.verizon.m5gedge.apis.RetrievetheTriggersApi;
import com.verizon.m5gedge.apis.SensorInsightsDeviceProfileApi;
import com.verizon.m5gedge.apis.SensorInsightsDevicesApi;
import com.verizon.m5gedge.apis.SensorInsightsGatewaysApi;
import com.verizon.m5gedge.apis.SensorInsightsHealthScoreApi;
import com.verizon.m5gedge.apis.SensorInsightsNotificationGroupsApi;
import com.verizon.m5gedge.apis.SensorInsightsRulesApi;
import com.verizon.m5gedge.apis.SensorInsightsSensorsApi;
import com.verizon.m5gedge.apis.SensorInsightsSmartAlertMetricsApi;
import com.verizon.m5gedge.apis.SensorInsightsSmartAlertsApi;
import com.verizon.m5gedge.apis.SensorInsightsUsersApi;
import com.verizon.m5gedge.apis.ServerLoggingApi;
import com.verizon.m5gedge.apis.ServiceEndpointsApi;
import com.verizon.m5gedge.apis.ServicePlansApi;
import com.verizon.m5gedge.apis.ServiceProfilesApi;
import com.verizon.m5gedge.apis.SessionManagementApi;
import com.verizon.m5gedge.apis.SimActionsApi;
import com.verizon.m5gedge.apis.SimSecureforIoTLicensesApi;
import com.verizon.m5gedge.apis.SmsApi;
import com.verizon.m5gedge.apis.SoftwareManagementCallbacksV1Api;
import com.verizon.m5gedge.apis.SoftwareManagementCallbacksV2Api;
import com.verizon.m5gedge.apis.SoftwareManagementCallbacksV3Api;
import com.verizon.m5gedge.apis.SoftwareManagementLicensesV1Api;
import com.verizon.m5gedge.apis.SoftwareManagementLicensesV2Api;
import com.verizon.m5gedge.apis.SoftwareManagementLicensesV3Api;
import com.verizon.m5gedge.apis.SoftwareManagementReportsV1Api;
import com.verizon.m5gedge.apis.SoftwareManagementReportsV2Api;
import com.verizon.m5gedge.apis.SoftwareManagementReportsV3Api;
import com.verizon.m5gedge.apis.SoftwareManagementSubscriptionsV1Api;
import com.verizon.m5gedge.apis.SoftwareManagementSubscriptionsV2Api;
import com.verizon.m5gedge.apis.SoftwareManagementSubscriptionsV3Api;
import com.verizon.m5gedge.apis.TargetsApi;
import com.verizon.m5gedge.apis.ThingSpaceQualityofServiceApiActionsApi;
import com.verizon.m5gedge.apis.UpdatePricePlanTriggersApi;
import com.verizon.m5gedge.apis.UpdateTriggersApi;
import com.verizon.m5gedge.apis.UsageTriggerManagementApi;
import com.verizon.m5gedge.apis.WirelessNetworkPerformanceApi;
import com.verizon.m5gedge.authentication.SessionTokenCredentials;
import com.verizon.m5gedge.authentication.SessionTokenManager;
import com.verizon.m5gedge.authentication.SessionTokenModel;
import com.verizon.m5gedge.authentication.ThingspaceOauth1Credentials;
import com.verizon.m5gedge.authentication.ThingspaceOauth1Manager;
import com.verizon.m5gedge.authentication.ThingspaceOauth1Model;
import com.verizon.m5gedge.authentication.ThingspaceOauthCredentials;
import com.verizon.m5gedge.authentication.ThingspaceOauthManager;
import com.verizon.m5gedge.authentication.ThingspaceOauthModel;
import com.verizon.m5gedge.authentication.VzM2MTokenCredentials;
import com.verizon.m5gedge.authentication.VzM2MTokenManager;
import com.verizon.m5gedge.authentication.VzM2MTokenModel;
import com.verizon.m5gedge.http.client.HttpCallback;
import com.verizon.m5gedge.http.client.HttpClientConfiguration;
import com.verizon.m5gedge.http.client.ReadonlyHttpClientConfiguration;
import com.verizon.m5gedge.logging.configuration.ApiLoggingConfiguration;
import com.verizon.m5gedge.logging.configuration.ReadonlyLoggingConfiguration;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.authentication.Authentication;
import io.apimatic.coreinterfaces.compatibility.CompatibilityFactory;
import io.apimatic.coreinterfaces.http.HttpClient;
import io.apimatic.okhttpclient.adapter.OkClient;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Supplier;

/**
 * Gateway class for the library.
 * This class acts as a factory for Apis.
 * It holds the state of the SDK.
 */
public final class VerizonClient implements Configuration {

    /**
     * Private store for controllers.
     */
    private M5GEdgePlatformsApi m5GEdgePlatforms;
    private ServiceEndpointsApi serviceEndpoints;
    private ServiceProfilesApi serviceProfiles;
    private DeviceManagementApi deviceManagement;
    private AccountsApi accounts;
    private DeviceGroupsApi deviceGroups;
    private SmsApi sms;
    private SessionManagementApi sessionManagement;
    private ConnectivityCallbacksApi connectivityCallbacks;
    private AccountRequestsApi accountRequests;
    private ServicePlansApi servicePlans;
    private DeviceDiagnosticsApi deviceDiagnostics;
    private DeviceMonitoringApi deviceMonitoring;
    private DeviceProfileManagementApi deviceProfileManagement;
    private EuiccDeviceProfileManagementApi euiccDeviceProfileManagement;
    private DevicesLocationsApi devicesLocations;
    private ExclusionsApi exclusions;
    private DevicesLocationSubscriptionsApi devicesLocationSubscriptions;
    private DeviceLocationCallbacksApi deviceLocationCallbacks;
    private UsageTriggerManagementApi usageTriggerManagement;
    private BillingApi billing;
    private SoftwareManagementSubscriptionsV1Api softwareManagementSubscriptionsV1;
    private SoftwareManagementLicensesV1Api softwareManagementLicensesV1;
    private FirmwareV1Api firmwareV1;
    private SoftwareManagementCallbacksV1Api softwareManagementCallbacksV1;
    private SoftwareManagementReportsV1Api softwareManagementReportsV1;
    private SoftwareManagementSubscriptionsV2Api softwareManagementSubscriptionsV2;
    private SoftwareManagementLicensesV2Api softwareManagementLicensesV2;
    private CampaignsV2Api campaignsV2;
    private SoftwareManagementCallbacksV2Api softwareManagementCallbacksV2;
    private SoftwareManagementReportsV2Api softwareManagementReportsV2;
    private ClientLoggingApi clientLogging;
    private ServerLoggingApi serverLogging;
    private ConfigurationFilesApi configurationFiles;
    private SoftwareManagementSubscriptionsV3Api softwareManagementSubscriptionsV3;
    private SoftwareManagementLicensesV3Api softwareManagementLicensesV3;
    private CampaignsV3Api campaignsV3;
    private SoftwareManagementReportsV3Api softwareManagementReportsV3;
    private FirmwareV3Api firmwareV3;
    private AccountDevicesApi accountDevices;
    private SoftwareManagementCallbacksV3Api softwareManagementCallbacksV3;
    private SimSecureforIoTLicensesApi simSecureforIoTLicenses;
    private AccountSubscriptionsApi accountSubscriptions;
    private PerformanceMetricsApi performanceMetrics;
    private DiagnosticsSubscriptionsApi diagnosticsSubscriptions;
    private DiagnosticsObservationsApi diagnosticsObservations;
    private DiagnosticsHistoryApi diagnosticsHistory;
    private DiagnosticsSettingsApi diagnosticsSettings;
    private DiagnosticsCallbacksApi diagnosticsCallbacks;
    private DiagnosticsFactoryResetApi diagnosticsFactoryReset;
    private TargetsApi targets;
    private CloudConnectorSubscriptionsApi cloudConnectorSubscriptions;
    private CloudConnectorDevicesApi cloudConnectorDevices;
    private DeviceServiceManagementApi deviceServiceManagement;
    private DeviceReportsApi deviceReports;
    private HyperPreciseLocationCallbacksApi hyperPreciseLocationCallbacks;
    private AnomalySettingsApi anomalySettings;
    private AnomalyTriggersApi anomalyTriggers;
    private AnomalyTriggersV2Api anomalyTriggersV2;
    private WirelessNetworkPerformanceApi wirelessNetworkPerformance;
    private ManagingeSimProfilesApi managingeSimProfiles;
    private DeviceSmsMessagingApi deviceSmsMessaging;
    private DeviceActionsApi deviceActions;
    private ThingSpaceQualityofServiceApiActionsApi thingSpaceQualityofServiceApiActions;
    private PwnApi pwn;
    private PromotionPeriodInformationApi promotionPeriodInformation;
    private RetrievetheTriggersApi retrievetheTriggers;
    private UpdateTriggersApi updateTriggers;
    private SimActionsApi simActions;
    private GlobalReportingApi globalReporting;
    private RetrieveRatePlanListApi retrieveRatePlanList;
    private CreatePricePlanTriggersApi createPricePlanTriggers;
    private UpdatePricePlanTriggersApi updatePricePlanTriggers;
    private M5GBiDeviceActionsApi m5GBiDeviceActions;
    private SensorInsightsSensorsApi sensorInsightsSensors;
    private SensorInsightsDevicesApi sensorInsightsDevices;
    private SensorInsightsGatewaysApi sensorInsightsGateways;
    private SensorInsightsSmartAlertsApi sensorInsightsSmartAlerts;
    private SensorInsightsRulesApi sensorInsightsRules;
    private SensorInsightsHealthScoreApi sensorInsightsHealthScore;
    private SensorInsightsNotificationGroupsApi sensorInsightsNotificationGroups;
    private SensorInsightsUsersApi sensorInsightsUsers;
    private SensorInsightsDeviceProfileApi sensorInsightsDeviceProfile;
    private SensorInsightsSmartAlertMetricsApi sensorInsightsSmartAlertMetrics;
    private AppConfigServiceApi appConfigService;
    private RegistrationApi registration;
    private MapDataManagerApi mapDataManager;
    private OauthAuthorizationApi oauthAuthorization;

    private static final CompatibilityFactory compatibilityFactory = new CompatibilityFactoryImpl();

    private static String userAgent = "Java-SDK/1.3.0 [OS: {os-info}, Engine: {engine}/{engine-version}]";

    /**
     * Current API environment.
     */
    private final Environment environment;

    /**
     * The HTTP Client instance to use for making HTTP requests.
     */
    private final HttpClient httpClient;

    /**
     * Http Client Configuration instance.
     */
    private final ReadonlyHttpClientConfiguration httpClientConfig;

    /**
     * Logging Configuration instance.
     */
    private final ReadonlyLoggingConfiguration loggingConfig;

    /**
     * ThingspaceOauthManager.
     */
    private ThingspaceOauthManager thingspaceOauthManager;

    /**
     * The instance of ThingspaceOauthModel.
     */
    private ThingspaceOauthModel thingspaceOauthModel;

    /**
     * VzM2MTokenManager.
     */
    private VzM2MTokenManager vzM2MTokenManager;

    /**
     * The instance of VzM2MTokenModel.
     */
    private VzM2MTokenModel vzM2MTokenModel;

    /**
     * ThingspaceOauth1Manager.
     */
    private ThingspaceOauth1Manager thingspaceOauth1Manager;

    /**
     * The instance of ThingspaceOauth1Model.
     */
    private ThingspaceOauth1Model thingspaceOauth1Model;

    /**
     * SessionTokenManager.
     */
    private SessionTokenManager sessionTokenManager;

    /**
     * The instance of SessionTokenModel.
     */
    private SessionTokenModel sessionTokenModel;

    /**
     * Map of authentication Managers.
     */
    private Map<String, Authentication> authentications = new HashMap<String, Authentication>();

    /**
     * Callback to be called before and after the HTTP call for an endpoint is made.
     */
    private final HttpCallback httpCallback;

    private VerizonClient(Environment environment, HttpClient httpClient,
            ReadonlyHttpClientConfiguration httpClientConfig,
            ReadonlyLoggingConfiguration loggingConfig, ThingspaceOauthModel thingspaceOauthModel,
            VzM2MTokenModel vzM2MTokenModel, ThingspaceOauth1Model thingspaceOauth1Model,
            SessionTokenModel sessionTokenModel, HttpCallback httpCallback) {
        this.environment = environment;
        this.httpClient = httpClient;
        this.httpClientConfig = httpClientConfig;
        this.loggingConfig = loggingConfig;
        this.httpCallback = httpCallback;

        this.thingspaceOauthModel = thingspaceOauthModel;
        this.vzM2MTokenModel = vzM2MTokenModel;
        this.thingspaceOauth1Model = thingspaceOauth1Model;
        this.sessionTokenModel = sessionTokenModel;

        this.thingspaceOauthManager = new ThingspaceOauthManager(thingspaceOauthModel);
        this.authentications.put("thingspace_oauth", thingspaceOauthManager);

        this.vzM2MTokenManager = new VzM2MTokenManager(vzM2MTokenModel);
        this.authentications.put("VZ-M2M-Token", vzM2MTokenManager);

        this.thingspaceOauth1Manager = new ThingspaceOauth1Manager(thingspaceOauth1Model);
        this.authentications.put("thingspace_oauth1", thingspaceOauth1Manager);

        this.sessionTokenManager = new SessionTokenManager(sessionTokenModel);
        this.authentications.put("SessionToken", sessionTokenManager);

        GlobalConfiguration globalConfig = new GlobalConfiguration.Builder()
                .httpClient(httpClient).baseUri(server -> getBaseUri(server))
                .compatibilityFactory(compatibilityFactory)
                .authentication(this.authentications)
                .callback(httpCallback)
                .userAgent(userAgent)
                .loggingConfiguration(((ApiLoggingConfiguration) loggingConfig).getConfiguration())
                .build();
        this.thingspaceOauthManager.applyGlobalConfiguration(globalConfig);
        this.thingspaceOauth1Manager.applyGlobalConfiguration(globalConfig);

        m5GEdgePlatforms = new M5GEdgePlatformsApi(globalConfig);
        serviceEndpoints = new ServiceEndpointsApi(globalConfig);
        serviceProfiles = new ServiceProfilesApi(globalConfig);
        deviceManagement = new DeviceManagementApi(globalConfig);
        accounts = new AccountsApi(globalConfig);
        deviceGroups = new DeviceGroupsApi(globalConfig);
        sms = new SmsApi(globalConfig);
        sessionManagement = new SessionManagementApi(globalConfig);
        connectivityCallbacks = new ConnectivityCallbacksApi(globalConfig);
        accountRequests = new AccountRequestsApi(globalConfig);
        servicePlans = new ServicePlansApi(globalConfig);
        deviceDiagnostics = new DeviceDiagnosticsApi(globalConfig);
        deviceMonitoring = new DeviceMonitoringApi(globalConfig);
        deviceProfileManagement = new DeviceProfileManagementApi(globalConfig);
        euiccDeviceProfileManagement = new EuiccDeviceProfileManagementApi(globalConfig);
        devicesLocations = new DevicesLocationsApi(globalConfig);
        exclusions = new ExclusionsApi(globalConfig);
        devicesLocationSubscriptions = new DevicesLocationSubscriptionsApi(globalConfig);
        deviceLocationCallbacks = new DeviceLocationCallbacksApi(globalConfig);
        usageTriggerManagement = new UsageTriggerManagementApi(globalConfig);
        billing = new BillingApi(globalConfig);
        softwareManagementSubscriptionsV1 = new SoftwareManagementSubscriptionsV1Api(globalConfig);
        softwareManagementLicensesV1 = new SoftwareManagementLicensesV1Api(globalConfig);
        firmwareV1 = new FirmwareV1Api(globalConfig);
        softwareManagementCallbacksV1 = new SoftwareManagementCallbacksV1Api(globalConfig);
        softwareManagementReportsV1 = new SoftwareManagementReportsV1Api(globalConfig);
        softwareManagementSubscriptionsV2 = new SoftwareManagementSubscriptionsV2Api(globalConfig);
        softwareManagementLicensesV2 = new SoftwareManagementLicensesV2Api(globalConfig);
        campaignsV2 = new CampaignsV2Api(globalConfig);
        softwareManagementCallbacksV2 = new SoftwareManagementCallbacksV2Api(globalConfig);
        softwareManagementReportsV2 = new SoftwareManagementReportsV2Api(globalConfig);
        clientLogging = new ClientLoggingApi(globalConfig);
        serverLogging = new ServerLoggingApi(globalConfig);
        configurationFiles = new ConfigurationFilesApi(globalConfig);
        softwareManagementSubscriptionsV3 = new SoftwareManagementSubscriptionsV3Api(globalConfig);
        softwareManagementLicensesV3 = new SoftwareManagementLicensesV3Api(globalConfig);
        campaignsV3 = new CampaignsV3Api(globalConfig);
        softwareManagementReportsV3 = new SoftwareManagementReportsV3Api(globalConfig);
        firmwareV3 = new FirmwareV3Api(globalConfig);
        accountDevices = new AccountDevicesApi(globalConfig);
        softwareManagementCallbacksV3 = new SoftwareManagementCallbacksV3Api(globalConfig);
        simSecureforIoTLicenses = new SimSecureforIoTLicensesApi(globalConfig);
        accountSubscriptions = new AccountSubscriptionsApi(globalConfig);
        performanceMetrics = new PerformanceMetricsApi(globalConfig);
        diagnosticsSubscriptions = new DiagnosticsSubscriptionsApi(globalConfig);
        diagnosticsObservations = new DiagnosticsObservationsApi(globalConfig);
        diagnosticsHistory = new DiagnosticsHistoryApi(globalConfig);
        diagnosticsSettings = new DiagnosticsSettingsApi(globalConfig);
        diagnosticsCallbacks = new DiagnosticsCallbacksApi(globalConfig);
        diagnosticsFactoryReset = new DiagnosticsFactoryResetApi(globalConfig);
        targets = new TargetsApi(globalConfig);
        cloudConnectorSubscriptions = new CloudConnectorSubscriptionsApi(globalConfig);
        cloudConnectorDevices = new CloudConnectorDevicesApi(globalConfig);
        deviceServiceManagement = new DeviceServiceManagementApi(globalConfig);
        deviceReports = new DeviceReportsApi(globalConfig);
        hyperPreciseLocationCallbacks = new HyperPreciseLocationCallbacksApi(globalConfig);
        anomalySettings = new AnomalySettingsApi(globalConfig);
        anomalyTriggers = new AnomalyTriggersApi(globalConfig);
        anomalyTriggersV2 = new AnomalyTriggersV2Api(globalConfig);
        wirelessNetworkPerformance = new WirelessNetworkPerformanceApi(globalConfig);
        managingeSimProfiles = new ManagingeSimProfilesApi(globalConfig);
        deviceSmsMessaging = new DeviceSmsMessagingApi(globalConfig);
        deviceActions = new DeviceActionsApi(globalConfig);
        thingSpaceQualityofServiceApiActions = new ThingSpaceQualityofServiceApiActionsApi(
                globalConfig);
        pwn = new PwnApi(globalConfig);
        promotionPeriodInformation = new PromotionPeriodInformationApi(globalConfig);
        retrievetheTriggers = new RetrievetheTriggersApi(globalConfig);
        updateTriggers = new UpdateTriggersApi(globalConfig);
        simActions = new SimActionsApi(globalConfig);
        globalReporting = new GlobalReportingApi(globalConfig);
        retrieveRatePlanList = new RetrieveRatePlanListApi(globalConfig);
        createPricePlanTriggers = new CreatePricePlanTriggersApi(globalConfig);
        updatePricePlanTriggers = new UpdatePricePlanTriggersApi(globalConfig);
        m5GBiDeviceActions = new M5GBiDeviceActionsApi(globalConfig);
        sensorInsightsSensors = new SensorInsightsSensorsApi(globalConfig);
        sensorInsightsDevices = new SensorInsightsDevicesApi(globalConfig);
        sensorInsightsGateways = new SensorInsightsGatewaysApi(globalConfig);
        sensorInsightsSmartAlerts = new SensorInsightsSmartAlertsApi(globalConfig);
        sensorInsightsRules = new SensorInsightsRulesApi(globalConfig);
        sensorInsightsHealthScore = new SensorInsightsHealthScoreApi(globalConfig);
        sensorInsightsNotificationGroups = new SensorInsightsNotificationGroupsApi(globalConfig);
        sensorInsightsUsers = new SensorInsightsUsersApi(globalConfig);
        sensorInsightsDeviceProfile = new SensorInsightsDeviceProfileApi(globalConfig);
        sensorInsightsSmartAlertMetrics = new SensorInsightsSmartAlertMetricsApi(globalConfig);
        appConfigService = new AppConfigServiceApi(globalConfig);
        registration = new RegistrationApi(globalConfig);
        mapDataManager = new MapDataManagerApi(globalConfig);
        oauthAuthorization = new OauthAuthorizationApi(globalConfig);
    }

    /**
     * Shutdown the underlying HttpClient instance.
     */
    public static void shutdown() {
        OkClient.shutdown();
    }

    /**
     * Get the instance of M5GEdgePlatformsApi.
     * @return m5GEdgePlatforms
     */
    public M5GEdgePlatformsApi getM5GEdgePlatformsApi() {
        return m5GEdgePlatforms;
    }

    /**
     * Get the instance of ServiceEndpointsApi.
     * @return serviceEndpoints
     */
    public ServiceEndpointsApi getServiceEndpointsApi() {
        return serviceEndpoints;
    }

    /**
     * Get the instance of ServiceProfilesApi.
     * @return serviceProfiles
     */
    public ServiceProfilesApi getServiceProfilesApi() {
        return serviceProfiles;
    }

    /**
     * Get the instance of DeviceManagementApi.
     * @return deviceManagement
     */
    public DeviceManagementApi getDeviceManagementApi() {
        return deviceManagement;
    }

    /**
     * Get the instance of AccountsApi.
     * @return accounts
     */
    public AccountsApi getAccountsApi() {
        return accounts;
    }

    /**
     * Get the instance of DeviceGroupsApi.
     * @return deviceGroups
     */
    public DeviceGroupsApi getDeviceGroupsApi() {
        return deviceGroups;
    }

    /**
     * Get the instance of SmsApi.
     * @return sms
     */
    public SmsApi getSmsApi() {
        return sms;
    }

    /**
     * Get the instance of SessionManagementApi.
     * @return sessionManagement
     */
    public SessionManagementApi getSessionManagementApi() {
        return sessionManagement;
    }

    /**
     * Get the instance of ConnectivityCallbacksApi.
     * @return connectivityCallbacks
     */
    public ConnectivityCallbacksApi getConnectivityCallbacksApi() {
        return connectivityCallbacks;
    }

    /**
     * Get the instance of AccountRequestsApi.
     * @return accountRequests
     */
    public AccountRequestsApi getAccountRequestsApi() {
        return accountRequests;
    }

    /**
     * Get the instance of ServicePlansApi.
     * @return servicePlans
     */
    public ServicePlansApi getServicePlansApi() {
        return servicePlans;
    }

    /**
     * Get the instance of DeviceDiagnosticsApi.
     * @return deviceDiagnostics
     */
    public DeviceDiagnosticsApi getDeviceDiagnosticsApi() {
        return deviceDiagnostics;
    }

    /**
     * Get the instance of DeviceMonitoringApi.
     * @return deviceMonitoring
     */
    public DeviceMonitoringApi getDeviceMonitoringApi() {
        return deviceMonitoring;
    }

    /**
     * Get the instance of DeviceProfileManagementApi.
     * @return deviceProfileManagement
     */
    public DeviceProfileManagementApi getDeviceProfileManagementApi() {
        return deviceProfileManagement;
    }

    /**
     * Get the instance of EuiccDeviceProfileManagementApi.
     * @return euiccDeviceProfileManagement
     */
    public EuiccDeviceProfileManagementApi getEuiccDeviceProfileManagementApi() {
        return euiccDeviceProfileManagement;
    }

    /**
     * Get the instance of DevicesLocationsApi.
     * @return devicesLocations
     */
    public DevicesLocationsApi getDevicesLocationsApi() {
        return devicesLocations;
    }

    /**
     * Get the instance of ExclusionsApi.
     * @return exclusions
     */
    public ExclusionsApi getExclusionsApi() {
        return exclusions;
    }

    /**
     * Get the instance of DevicesLocationSubscriptionsApi.
     * @return devicesLocationSubscriptions
     */
    public DevicesLocationSubscriptionsApi getDevicesLocationSubscriptionsApi() {
        return devicesLocationSubscriptions;
    }

    /**
     * Get the instance of DeviceLocationCallbacksApi.
     * @return deviceLocationCallbacks
     */
    public DeviceLocationCallbacksApi getDeviceLocationCallbacksApi() {
        return deviceLocationCallbacks;
    }

    /**
     * Get the instance of UsageTriggerManagementApi.
     * @return usageTriggerManagement
     */
    public UsageTriggerManagementApi getUsageTriggerManagementApi() {
        return usageTriggerManagement;
    }

    /**
     * Get the instance of BillingApi.
     * @return billing
     */
    public BillingApi getBillingApi() {
        return billing;
    }

    /**
     * Get the instance of SoftwareManagementSubscriptionsV1Api.
     * @return softwareManagementSubscriptionsV1
     */
    public SoftwareManagementSubscriptionsV1Api getSoftwareManagementSubscriptionsV1Api() {
        return softwareManagementSubscriptionsV1;
    }

    /**
     * Get the instance of SoftwareManagementLicensesV1Api.
     * @return softwareManagementLicensesV1
     */
    public SoftwareManagementLicensesV1Api getSoftwareManagementLicensesV1Api() {
        return softwareManagementLicensesV1;
    }

    /**
     * Get the instance of FirmwareV1Api.
     * @return firmwareV1
     */
    public FirmwareV1Api getFirmwareV1Api() {
        return firmwareV1;
    }

    /**
     * Get the instance of SoftwareManagementCallbacksV1Api.
     * @return softwareManagementCallbacksV1
     */
    public SoftwareManagementCallbacksV1Api getSoftwareManagementCallbacksV1Api() {
        return softwareManagementCallbacksV1;
    }

    /**
     * Get the instance of SoftwareManagementReportsV1Api.
     * @return softwareManagementReportsV1
     */
    public SoftwareManagementReportsV1Api getSoftwareManagementReportsV1Api() {
        return softwareManagementReportsV1;
    }

    /**
     * Get the instance of SoftwareManagementSubscriptionsV2Api.
     * @return softwareManagementSubscriptionsV2
     */
    public SoftwareManagementSubscriptionsV2Api getSoftwareManagementSubscriptionsV2Api() {
        return softwareManagementSubscriptionsV2;
    }

    /**
     * Get the instance of SoftwareManagementLicensesV2Api.
     * @return softwareManagementLicensesV2
     */
    public SoftwareManagementLicensesV2Api getSoftwareManagementLicensesV2Api() {
        return softwareManagementLicensesV2;
    }

    /**
     * Get the instance of CampaignsV2Api.
     * @return campaignsV2
     */
    public CampaignsV2Api getCampaignsV2Api() {
        return campaignsV2;
    }

    /**
     * Get the instance of SoftwareManagementCallbacksV2Api.
     * @return softwareManagementCallbacksV2
     */
    public SoftwareManagementCallbacksV2Api getSoftwareManagementCallbacksV2Api() {
        return softwareManagementCallbacksV2;
    }

    /**
     * Get the instance of SoftwareManagementReportsV2Api.
     * @return softwareManagementReportsV2
     */
    public SoftwareManagementReportsV2Api getSoftwareManagementReportsV2Api() {
        return softwareManagementReportsV2;
    }

    /**
     * Get the instance of ClientLoggingApi.
     * @return clientLogging
     */
    public ClientLoggingApi getClientLoggingApi() {
        return clientLogging;
    }

    /**
     * Get the instance of ServerLoggingApi.
     * @return serverLogging
     */
    public ServerLoggingApi getServerLoggingApi() {
        return serverLogging;
    }

    /**
     * Get the instance of ConfigurationFilesApi.
     * @return configurationFiles
     */
    public ConfigurationFilesApi getConfigurationFilesApi() {
        return configurationFiles;
    }

    /**
     * Get the instance of SoftwareManagementSubscriptionsV3Api.
     * @return softwareManagementSubscriptionsV3
     */
    public SoftwareManagementSubscriptionsV3Api getSoftwareManagementSubscriptionsV3Api() {
        return softwareManagementSubscriptionsV3;
    }

    /**
     * Get the instance of SoftwareManagementLicensesV3Api.
     * @return softwareManagementLicensesV3
     */
    public SoftwareManagementLicensesV3Api getSoftwareManagementLicensesV3Api() {
        return softwareManagementLicensesV3;
    }

    /**
     * Get the instance of CampaignsV3Api.
     * @return campaignsV3
     */
    public CampaignsV3Api getCampaignsV3Api() {
        return campaignsV3;
    }

    /**
     * Get the instance of SoftwareManagementReportsV3Api.
     * @return softwareManagementReportsV3
     */
    public SoftwareManagementReportsV3Api getSoftwareManagementReportsV3Api() {
        return softwareManagementReportsV3;
    }

    /**
     * Get the instance of FirmwareV3Api.
     * @return firmwareV3
     */
    public FirmwareV3Api getFirmwareV3Api() {
        return firmwareV3;
    }

    /**
     * Get the instance of AccountDevicesApi.
     * @return accountDevices
     */
    public AccountDevicesApi getAccountDevicesApi() {
        return accountDevices;
    }

    /**
     * Get the instance of SoftwareManagementCallbacksV3Api.
     * @return softwareManagementCallbacksV3
     */
    public SoftwareManagementCallbacksV3Api getSoftwareManagementCallbacksV3Api() {
        return softwareManagementCallbacksV3;
    }

    /**
     * Get the instance of SimSecureforIoTLicensesApi.
     * @return simSecureforIoTLicenses
     */
    public SimSecureforIoTLicensesApi getSimSecureforIoTLicensesApi() {
        return simSecureforIoTLicenses;
    }

    /**
     * Get the instance of AccountSubscriptionsApi.
     * @return accountSubscriptions
     */
    public AccountSubscriptionsApi getAccountSubscriptionsApi() {
        return accountSubscriptions;
    }

    /**
     * Get the instance of PerformanceMetricsApi.
     * @return performanceMetrics
     */
    public PerformanceMetricsApi getPerformanceMetricsApi() {
        return performanceMetrics;
    }

    /**
     * Get the instance of DiagnosticsSubscriptionsApi.
     * @return diagnosticsSubscriptions
     */
    public DiagnosticsSubscriptionsApi getDiagnosticsSubscriptionsApi() {
        return diagnosticsSubscriptions;
    }

    /**
     * Get the instance of DiagnosticsObservationsApi.
     * @return diagnosticsObservations
     */
    public DiagnosticsObservationsApi getDiagnosticsObservationsApi() {
        return diagnosticsObservations;
    }

    /**
     * Get the instance of DiagnosticsHistoryApi.
     * @return diagnosticsHistory
     */
    public DiagnosticsHistoryApi getDiagnosticsHistoryApi() {
        return diagnosticsHistory;
    }

    /**
     * Get the instance of DiagnosticsSettingsApi.
     * @return diagnosticsSettings
     */
    public DiagnosticsSettingsApi getDiagnosticsSettingsApi() {
        return diagnosticsSettings;
    }

    /**
     * Get the instance of DiagnosticsCallbacksApi.
     * @return diagnosticsCallbacks
     */
    public DiagnosticsCallbacksApi getDiagnosticsCallbacksApi() {
        return diagnosticsCallbacks;
    }

    /**
     * Get the instance of DiagnosticsFactoryResetApi.
     * @return diagnosticsFactoryReset
     */
    public DiagnosticsFactoryResetApi getDiagnosticsFactoryResetApi() {
        return diagnosticsFactoryReset;
    }

    /**
     * Get the instance of TargetsApi.
     * @return targets
     */
    public TargetsApi getTargetsApi() {
        return targets;
    }

    /**
     * Get the instance of CloudConnectorSubscriptionsApi.
     * @return cloudConnectorSubscriptions
     */
    public CloudConnectorSubscriptionsApi getCloudConnectorSubscriptionsApi() {
        return cloudConnectorSubscriptions;
    }

    /**
     * Get the instance of CloudConnectorDevicesApi.
     * @return cloudConnectorDevices
     */
    public CloudConnectorDevicesApi getCloudConnectorDevicesApi() {
        return cloudConnectorDevices;
    }

    /**
     * Get the instance of DeviceServiceManagementApi.
     * @return deviceServiceManagement
     */
    public DeviceServiceManagementApi getDeviceServiceManagementApi() {
        return deviceServiceManagement;
    }

    /**
     * Get the instance of DeviceReportsApi.
     * @return deviceReports
     */
    public DeviceReportsApi getDeviceReportsApi() {
        return deviceReports;
    }

    /**
     * Get the instance of HyperPreciseLocationCallbacksApi.
     * @return hyperPreciseLocationCallbacks
     */
    public HyperPreciseLocationCallbacksApi getHyperPreciseLocationCallbacksApi() {
        return hyperPreciseLocationCallbacks;
    }

    /**
     * Get the instance of AnomalySettingsApi.
     * @return anomalySettings
     */
    public AnomalySettingsApi getAnomalySettingsApi() {
        return anomalySettings;
    }

    /**
     * Get the instance of AnomalyTriggersApi.
     * @return anomalyTriggers
     */
    public AnomalyTriggersApi getAnomalyTriggersApi() {
        return anomalyTriggers;
    }

    /**
     * Get the instance of AnomalyTriggersV2Api.
     * @return anomalyTriggersV2
     */
    public AnomalyTriggersV2Api getAnomalyTriggersV2Api() {
        return anomalyTriggersV2;
    }

    /**
     * Get the instance of WirelessNetworkPerformanceApi.
     * @return wirelessNetworkPerformance
     */
    public WirelessNetworkPerformanceApi getWirelessNetworkPerformanceApi() {
        return wirelessNetworkPerformance;
    }

    /**
     * Get the instance of ManagingeSimProfilesApi.
     * @return managingeSimProfiles
     */
    public ManagingeSimProfilesApi getManagingeSimProfilesApi() {
        return managingeSimProfiles;
    }

    /**
     * Get the instance of DeviceSmsMessagingApi.
     * @return deviceSmsMessaging
     */
    public DeviceSmsMessagingApi getDeviceSmsMessagingApi() {
        return deviceSmsMessaging;
    }

    /**
     * Get the instance of DeviceActionsApi.
     * @return deviceActions
     */
    public DeviceActionsApi getDeviceActionsApi() {
        return deviceActions;
    }

    /**
     * Get the instance of ThingSpaceQualityofServiceApiActionsApi.
     * @return thingSpaceQualityofServiceApiActions
     */
    public ThingSpaceQualityofServiceApiActionsApi getThingSpaceQualityofServiceApiActionsApi() {
        return thingSpaceQualityofServiceApiActions;
    }

    /**
     * Get the instance of PwnApi.
     * @return pwn
     */
    public PwnApi getPwnApi() {
        return pwn;
    }

    /**
     * Get the instance of PromotionPeriodInformationApi.
     * @return promotionPeriodInformation
     */
    public PromotionPeriodInformationApi getPromotionPeriodInformationApi() {
        return promotionPeriodInformation;
    }

    /**
     * Get the instance of RetrievetheTriggersApi.
     * @return retrievetheTriggers
     */
    public RetrievetheTriggersApi getRetrievetheTriggersApi() {
        return retrievetheTriggers;
    }

    /**
     * Get the instance of UpdateTriggersApi.
     * @return updateTriggers
     */
    public UpdateTriggersApi getUpdateTriggersApi() {
        return updateTriggers;
    }

    /**
     * Get the instance of SimActionsApi.
     * @return simActions
     */
    public SimActionsApi getSimActionsApi() {
        return simActions;
    }

    /**
     * Get the instance of GlobalReportingApi.
     * @return globalReporting
     */
    public GlobalReportingApi getGlobalReportingApi() {
        return globalReporting;
    }

    /**
     * Get the instance of RetrieveRatePlanListApi.
     * @return retrieveRatePlanList
     */
    public RetrieveRatePlanListApi getRetrieveRatePlanListApi() {
        return retrieveRatePlanList;
    }

    /**
     * Get the instance of CreatePricePlanTriggersApi.
     * @return createPricePlanTriggers
     */
    public CreatePricePlanTriggersApi getCreatePricePlanTriggersApi() {
        return createPricePlanTriggers;
    }

    /**
     * Get the instance of UpdatePricePlanTriggersApi.
     * @return updatePricePlanTriggers
     */
    public UpdatePricePlanTriggersApi getUpdatePricePlanTriggersApi() {
        return updatePricePlanTriggers;
    }

    /**
     * Get the instance of M5GBiDeviceActionsApi.
     * @return m5GBiDeviceActions
     */
    public M5GBiDeviceActionsApi getM5GBiDeviceActionsApi() {
        return m5GBiDeviceActions;
    }

    /**
     * Get the instance of SensorInsightsSensorsApi.
     * @return sensorInsightsSensors
     */
    public SensorInsightsSensorsApi getSensorInsightsSensorsApi() {
        return sensorInsightsSensors;
    }

    /**
     * Get the instance of SensorInsightsDevicesApi.
     * @return sensorInsightsDevices
     */
    public SensorInsightsDevicesApi getSensorInsightsDevicesApi() {
        return sensorInsightsDevices;
    }

    /**
     * Get the instance of SensorInsightsGatewaysApi.
     * @return sensorInsightsGateways
     */
    public SensorInsightsGatewaysApi getSensorInsightsGatewaysApi() {
        return sensorInsightsGateways;
    }

    /**
     * Get the instance of SensorInsightsSmartAlertsApi.
     * @return sensorInsightsSmartAlerts
     */
    public SensorInsightsSmartAlertsApi getSensorInsightsSmartAlertsApi() {
        return sensorInsightsSmartAlerts;
    }

    /**
     * Get the instance of SensorInsightsRulesApi.
     * @return sensorInsightsRules
     */
    public SensorInsightsRulesApi getSensorInsightsRulesApi() {
        return sensorInsightsRules;
    }

    /**
     * Get the instance of SensorInsightsHealthScoreApi.
     * @return sensorInsightsHealthScore
     */
    public SensorInsightsHealthScoreApi getSensorInsightsHealthScoreApi() {
        return sensorInsightsHealthScore;
    }

    /**
     * Get the instance of SensorInsightsNotificationGroupsApi.
     * @return sensorInsightsNotificationGroups
     */
    public SensorInsightsNotificationGroupsApi getSensorInsightsNotificationGroupsApi() {
        return sensorInsightsNotificationGroups;
    }

    /**
     * Get the instance of SensorInsightsUsersApi.
     * @return sensorInsightsUsers
     */
    public SensorInsightsUsersApi getSensorInsightsUsersApi() {
        return sensorInsightsUsers;
    }

    /**
     * Get the instance of SensorInsightsDeviceProfileApi.
     * @return sensorInsightsDeviceProfile
     */
    public SensorInsightsDeviceProfileApi getSensorInsightsDeviceProfileApi() {
        return sensorInsightsDeviceProfile;
    }

    /**
     * Get the instance of SensorInsightsSmartAlertMetricsApi.
     * @return sensorInsightsSmartAlertMetrics
     */
    public SensorInsightsSmartAlertMetricsApi getSensorInsightsSmartAlertMetricsApi() {
        return sensorInsightsSmartAlertMetrics;
    }

    /**
     * Get the instance of AppConfigServiceApi.
     * @return appConfigService
     */
    public AppConfigServiceApi getAppConfigServiceApi() {
        return appConfigService;
    }

    /**
     * Get the instance of RegistrationApi.
     * @return registration
     */
    public RegistrationApi getRegistrationApi() {
        return registration;
    }

    /**
     * Get the instance of MapDataManagerApi.
     * @return mapDataManager
     */
    public MapDataManagerApi getMapDataManagerApi() {
        return mapDataManager;
    }

    /**
     * Get the instance of OauthAuthorizationApi.
     * @return oauthAuthorization
     */
    public OauthAuthorizationApi getOauthAuthorizationApi() {
        return oauthAuthorization;
    }

    /**
     * Current API environment.
     * @return environment
     */
    public Environment getEnvironment() {
        return environment;
    }

    /**
     * The HTTP Client instance to use for making HTTP requests.
     * @return httpClient
     */
    private HttpClient getHttpClient() {
        return httpClient;
    }

    /**
     * Http Client Configuration instance.
     * @return httpClientConfig
     */
    public ReadonlyHttpClientConfiguration getHttpClientConfig() {
        return httpClientConfig;
    }

    /**
     * Logging Configuration instance.
     * @return loggingConfig
     */
    public ReadonlyLoggingConfiguration getLoggingConfig() {
        return loggingConfig;
    }

    /**
     * The credentials to use with ThingspaceOauth.
     * @return thingspaceOauthCredentials
     */
    public ThingspaceOauthCredentials getThingspaceOauthCredentials() {
        return thingspaceOauthManager;
    }

    /**
     * The auth credential model for ThingspaceOauth.
     * @return the instance of ThingspaceOauthModel
     */
    public ThingspaceOauthModel getThingspaceOauthModel() {
        return thingspaceOauthModel;
    }
    /**
     * The credentials to use with VzM2MToken.
     * @return vzM2MTokenCredentials
     */
    public VzM2MTokenCredentials getVzM2MTokenCredentials() {
        return vzM2MTokenManager;
    }

    /**
     * The auth credential model for VzM2MToken.
     * @return the instance of VzM2MTokenModel
     */
    public VzM2MTokenModel getVzM2MTokenModel() {
        return vzM2MTokenModel;
    }
    /**
     * The credentials to use with ThingspaceOauth1.
     * @return thingspaceOauth1Credentials
     */
    public ThingspaceOauth1Credentials getThingspaceOauth1Credentials() {
        return thingspaceOauth1Manager;
    }

    /**
     * The auth credential model for ThingspaceOauth1.
     * @return the instance of ThingspaceOauth1Model
     */
    public ThingspaceOauth1Model getThingspaceOauth1Model() {
        return thingspaceOauth1Model;
    }
    /**
     * The credentials to use with SessionToken.
     * @return sessionTokenCredentials
     */
    public SessionTokenCredentials getSessionTokenCredentials() {
        return sessionTokenManager;
    }

    /**
     * The auth credential model for SessionToken.
     * @return the instance of SessionTokenModel
     */
    public SessionTokenModel getSessionTokenModel() {
        return sessionTokenModel;
    }
    /**
     * The timeout to use for making HTTP requests.
     * @deprecated This method will be removed in a future version. Use
     *             {@link #getHttpClientConfig()} instead.
     *
     * @return timeout
     */
    @Deprecated
    public long timeout() {
        return httpClientConfig.getTimeout();
    }

    /**
     * Get base URI by current environment.
     * @param server Server for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(Server server) {
        Map<String, SimpleEntry<Object, Boolean>> parameters = new HashMap<>();
        StringBuilder baseUrl = new StringBuilder(environmentMapper(environment, server));
        ApiHelper.appendUrlWithTemplateParameters(baseUrl, parameters);
        return baseUrl.toString();
    }

    /**
     * Get base URI by current environment.
     * @return Processed base URI
     */
    public String getBaseUri() {
        return getBaseUri(Server.EDGE_DISCOVERY);
    }


    /**
     * Get base URI by current environment.
     * 
     * @param server string for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(String server) {
        return getBaseUri(Server.fromString(server));
    }


    /**
     * Base URLs by environment and server aliases.
     * @param environment Environment for which to get the base URI
     * @param server Server for which to get the base URI
     * @return base URL
     */
    private static String environmentMapper(Environment environment, Server server) {
        if (environment.equals(Environment.PRODUCTION)) {
            if (server.equals(Server.EDGE_DISCOVERY)) {
                return "https://5gedge.verizon.com/api/mec/eds";
            }
            if (server.equals(Server.IMP_SERVER)) {
                return "https://imp.thingspace.verizon.com";
            }
            if (server.equals(Server.THINGSPACE)) {
                return "https://thingspace.verizon.com/api";
            }
            if (server.equals(Server.OAUTH_SERVER)) {
                return "https://thingspace.verizon.com/api/ts/v1";
            }
            if (server.equals(Server.M2M)) {
                return "https://thingspace.verizon.com/api/m2m";
            }
            if (server.equals(Server.DEVICE_LOCATION)) {
                return "https://thingspace.verizon.com/api/loc/v1";
            }
            if (server.equals(Server.SUBSCRIPTION_SERVER)) {
                return "https://thingspace.verizon.com/api/subsc/v1";
            }
            if (server.equals(Server.SOFTWARE_MANAGEMENT_V1)) {
                return "https://thingspace.verizon.com/api/fota/v1";
            }
            if (server.equals(Server.SOFTWARE_MANAGEMENT_V2)) {
                return "https://thingspace.verizon.com/api/fota/v2";
            }
            if (server.equals(Server.SOFTWARE_MANAGEMENT_V3)) {
                return "https://thingspace.verizon.com/api/fota/v3";
            }
            if (server.equals(Server.PERFORMANCE)) {
                return "https://5gedge.verizon.com/api/mec";
            }
            if (server.equals(Server.DEVICE_DIAGNOSTICS)) {
                return "https://thingspace.verizon.com/api/diagnostics/v1";
            }
            if (server.equals(Server.CLOUD_CONNECTOR)) {
                return "https://thingspace.verizon.com/api/cc/v1";
            }
            if (server.equals(Server.HYPER_PRECISE_LOCATION)) {
                return "https://thingspace.verizon.com/api/hyper-precise/v1";
            }
            if (server.equals(Server.SERVICES)) {
                return "https://5gedge.verizon.com/api/mec/services";
            }
            if (server.equals(Server.QUALITY_OF_SERVICE)) {
                return "https://thingspace.verizon.com/api/m2m/v1/devices";
            }
        }
        if (environment.equals(Environment.MOCK_SERVER_FOR_LIMITED_AVAILABILITY_SEE_QUICK_START)) {
            if (server.equals(Server.EDGE_DISCOVERY)) {
                return "https://mock.thingspace.verizon.com/api/mec/eds";
            }
            if (server.equals(Server.IMP_SERVER)) {
                return "https://mock.thingspace.verizon.com";
            }
            if (server.equals(Server.THINGSPACE)) {
                return "https://mock.thingspace.verizon.com/api";
            }
            if (server.equals(Server.OAUTH_SERVER)) {
                return "https://mock.thingspace.verizon.com/api/ts/v1";
            }
            if (server.equals(Server.M2M)) {
                return "https://mock.thingspace.verizon.com/api/m2m";
            }
            if (server.equals(Server.DEVICE_LOCATION)) {
                return "https://mock.thingspace.verizon.com/api/loc/v1";
            }
            if (server.equals(Server.SUBSCRIPTION_SERVER)) {
                return "https://mock.thingspace.verizon.com/api/subsc/v1";
            }
            if (server.equals(Server.SOFTWARE_MANAGEMENT_V1)) {
                return "https://mock.thingspace.verizon.com/api/fota/v1";
            }
            if (server.equals(Server.SOFTWARE_MANAGEMENT_V2)) {
                return "https://mock.thingspace.verizon.com/api/fota/v2";
            }
            if (server.equals(Server.SOFTWARE_MANAGEMENT_V3)) {
                return "https://mock.thingspace.verizon.com/api/fota/v3";
            }
            if (server.equals(Server.PERFORMANCE)) {
                return "https://mock.thingspace.verizon.com/api/mec";
            }
            if (server.equals(Server.DEVICE_DIAGNOSTICS)) {
                return "https://mock.thingspace.verizon.com/api/diagnostics/v1";
            }
            if (server.equals(Server.CLOUD_CONNECTOR)) {
                return "https://mock.thingspace.verizon.com/api/cc/v1";
            }
            if (server.equals(Server.HYPER_PRECISE_LOCATION)) {
                return "https://mock.thingspace.verizon.com/api/hyper-precise/v1";
            }
            if (server.equals(Server.SERVICES)) {
                return "https://mock.thingspace.verizon.com/api/mec/services";
            }
            if (server.equals(Server.QUALITY_OF_SERVICE)) {
                return "https://mock.thingspace.verizon.com/api/m2m/v1/devices";
            }
        }
        return "https://5gedge.verizon.com/api/mec/eds";
    }

    /**
     * Converts this VerizonClient into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "VerizonClient [" + "environment=" + environment + ", httpClientConfig="
                + httpClientConfig + ", loggingConfig=" + loggingConfig + ", authentications="
                + authentications + "]";
    }

    /**
     * Builds a new {@link VerizonClient.Builder} object.
     * Creates the instance with the state of the current client.
     * @return a new {@link VerizonClient.Builder} object
     */
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.environment = getEnvironment();
        builder.httpClient = getHttpClient();
        builder.thingspaceOauthCredentials(getThingspaceOauthModel()
                .toBuilder().build());
        builder.vzM2MTokenCredentials(getVzM2MTokenModel()
                .toBuilder().build());
        builder.thingspaceOauth1Credentials(getThingspaceOauth1Model()
                .toBuilder().build());
        builder.sessionTokenCredentials(getSessionTokenModel()
                .toBuilder().build());
        builder.httpCallback = httpCallback;
        builder.httpClientConfig(() -> ((HttpClientConfiguration) httpClientConfig).newBuilder());
        builder.loggingConfig(() -> ((ApiLoggingConfiguration) loggingConfig).newBuilder());
        return builder;
    }

    /**
     * Class to build instances of {@link VerizonClient}.
     */
    public static class Builder {

        private Environment environment = Environment.PRODUCTION;
        private HttpClient httpClient;
        private ThingspaceOauthModel thingspaceOauthModel =
                new ThingspaceOauthModel.Builder("", "").build();
        private VzM2MTokenModel vzM2MTokenModel = new VzM2MTokenModel.Builder("").build();
        private ThingspaceOauth1Model thingspaceOauth1Model =
                new ThingspaceOauth1Model.Builder("", "").build();
        private SessionTokenModel sessionTokenModel = new SessionTokenModel.Builder("").build();
        private HttpCallback httpCallback = null;
        private HttpClientConfiguration.Builder httpClientConfigBuilder =
                new HttpClientConfiguration.Builder();
        private ApiLoggingConfiguration.Builder loggingConfigBuilder = null;


        /**
         * Credentials setter for ThingspaceOauthCredentials.
         * @param thingspaceOauthModel The instance of ThingspaceOauthModel.
         * @return The current instance of builder.
         */
        public Builder thingspaceOauthCredentials(ThingspaceOauthModel thingspaceOauthModel) {
            this.thingspaceOauthModel = thingspaceOauthModel;
            return this;
        }

        /**
         * Credentials setter for VzM2MTokenCredentials.
         * @param vzM2MTokenModel The instance of VzM2MTokenModel.
         * @return The current instance of builder.
         */
        public Builder vzM2MTokenCredentials(VzM2MTokenModel vzM2MTokenModel) {
            this.vzM2MTokenModel = vzM2MTokenModel;
            return this;
        }

        /**
         * Credentials setter for ThingspaceOauth1Credentials.
         * @param thingspaceOauth1Model The instance of ThingspaceOauth1Model.
         * @return The current instance of builder.
         */
        public Builder thingspaceOauth1Credentials(ThingspaceOauth1Model thingspaceOauth1Model) {
            this.thingspaceOauth1Model = thingspaceOauth1Model;
            return this;
        }

        /**
         * Credentials setter for SessionTokenCredentials.
         * @param sessionTokenModel The instance of SessionTokenModel.
         * @return The current instance of builder.
         */
        public Builder sessionTokenCredentials(SessionTokenModel sessionTokenModel) {
            this.sessionTokenModel = sessionTokenModel;
            return this;
        }

        /**
         * Current API environment.
         * @param environment The environment for client.
         * @return Builder
         */
        public Builder environment(Environment environment) {
            this.environment = environment;
            return this;
        }

        /**
         * The timeout to use for making HTTP requests.
         * @deprecated This method will be removed in a future version. Use
         *             {@link #httpClientConfig(Consumer) httpClientConfig} instead.
         * @param timeout must be greater then 0.
         * @return Builder
         */
        @Deprecated
        public Builder timeout(long timeout) {
            this.httpClientConfigBuilder.timeout(timeout);
            return this;
        }

        /**
         * Setter for the Builder of LoggingConfiguration, takes in an operation to be
         * performed on the builder instance of logging configuration.
         * @param action Consumer for the builder of LoggingConfiguration.
         * @return Builder
         */
        public Builder loggingConfig(Consumer<ApiLoggingConfiguration.Builder> action) {
            if (loggingConfigBuilder == null) {
                loggingConfigBuilder = new ApiLoggingConfiguration.Builder();
            }

            if (loggingConfigBuilder.build().getLogger() == null) {
                loggingConfigBuilder.useDefaultLogger();
            }

            action.accept(loggingConfigBuilder);
            return this;
        }

        /**
         * Setter for the Builder of LoggingConfiguration with Console Logging.
         *
         * @return Builder
         */
        public Builder loggingConfig() {
            loggingConfigBuilder = new ApiLoggingConfiguration.Builder();
            loggingConfigBuilder.useDefaultLogger();
            return this;
        }

		/**
		 * Private setter for the Builder of LoggingConfiguration, takes in an operation to be
		 * performed on the builder instance of logging configuration.
		 * 
		 * @param supplier Supplier for the builder of LoggingConfiguration.
		 * @return Builder
		 */
		private Builder loggingConfig(Supplier<ApiLoggingConfiguration.Builder> supplier) {
			loggingConfigBuilder = supplier.get();
			return this;
		}

        /**
         * HttpCallback.
         * @param httpCallback Callback to be called before and after the HTTP call.
         * @return Builder
         */
        public Builder httpCallback(HttpCallback httpCallback) {
            this.httpCallback = httpCallback;
            return this;
        }

        /**
         * Setter for the Builder of httpClientConfiguration, takes in an operation to be performed
         * on the builder instance of HTTP client configuration.
         * 
         * @param action Consumer for the builder of httpClientConfiguration.
         * @return Builder
         */
        public Builder httpClientConfig(Consumer<HttpClientConfiguration.Builder> action) {
            action.accept(httpClientConfigBuilder);
            return this;
        }

        /**
         * Private Setter for the Builder of httpClientConfiguration, takes in an operation to be performed
         * on the builder instance of HTTP client configuration.
         * 
         * @param supplier Supplier for the builder of httpClientConfiguration.
         * @return Builder
         */
        private Builder httpClientConfig(Supplier<HttpClientConfiguration.Builder> supplier) {
            httpClientConfigBuilder = supplier.get();
            return this;
        }

        /**
         * Builds a new VerizonClient object using the set fields.
         * @return VerizonClient
         */
        public VerizonClient build() {
            HttpClientConfiguration httpClientConfig = httpClientConfigBuilder.build();
            ReadonlyLoggingConfiguration loggingConfig = loggingConfigBuilder != null ? loggingConfigBuilder.build() 
                    : new ApiLoggingConfiguration.Builder().build();
            httpClient = new OkClient(httpClientConfig.getConfiguration(), compatibilityFactory);

            return new VerizonClient(environment, httpClient, httpClientConfig, loggingConfig,
                    thingspaceOauthModel, vzM2MTokenModel, thingspaceOauth1Model, sessionTokenModel,
                    httpCallback);
        }
    }
}