/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.apis;

import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.Server;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.exceptions.WnpRestErrorResponseException;
import com.verizon.m5gedge.http.request.HttpMethod;
import com.verizon.m5gedge.http.response.ApiResponse;
import com.verizon.m5gedge.models.GetDeviceExperienceScoreBulkRequest;
import com.verizon.m5gedge.models.GetDeviceExperienceScoreHistoryRequest;
import com.verizon.m5gedge.models.GetNetworkConditionsRequest;
import com.verizon.m5gedge.models.M2MV1IntelligenceWirelessCoverageRequest;
import com.verizon.m5gedge.models.WnpRequestResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class WirelessNetworkPerformanceApi extends BaseApi {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public WirelessNetworkPerformanceApi(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * WNP Query for current network condition.
     * @param  body  Required parameter: Request for current network health.
     * @return    Returns the WnpRequestResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<WnpRequestResponse> nearRealTimeNetworkConditions(
            final GetNetworkConditionsRequest body) throws ApiException, IOException {
        return prepareNearRealTimeNetworkConditionsRequest(body).execute();
    }

    /**
     * WNP Query for current network condition.
     * @param  body  Required parameter: Request for current network health.
     * @return    Returns the WnpRequestResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<WnpRequestResponse>> nearRealTimeNetworkConditionsAsync(
            final GetNetworkConditionsRequest body) {
        try {
            return prepareNearRealTimeNetworkConditionsRequest(body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for nearRealTimeNetworkConditions.
     */
    private ApiCall<ApiResponse<WnpRequestResponse>, ApiException> prepareNearRealTimeNetworkConditionsRequest(
            final GetNetworkConditionsRequest body) {
        return new ApiCall.Builder<ApiResponse<WnpRequestResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/intelligence/network-conditions")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, WnpRequestResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error response",
                                (reason, context) -> new WnpRestErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Run a report for FWA Address qualification or to determine network types available and
     * available coverage. Network types covered include: CAT-M, NB-IOT, LTE, LTE-AWS, 5GNW, MMWAVE
     * and C-BAND.
     * @param  body  Required parameter: Request for network coverage details.
     * @return    Returns the WnpRequestResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<WnpRequestResponse> domestic4GAnd5GNationwideNetworkCoverage(
            final M2MV1IntelligenceWirelessCoverageRequest body) throws ApiException, IOException {
        return prepareDomestic4GAnd5GNationwideNetworkCoverageRequest(body).execute();
    }

    /**
     * Run a report for FWA Address qualification or to determine network types available and
     * available coverage. Network types covered include: CAT-M, NB-IOT, LTE, LTE-AWS, 5GNW, MMWAVE
     * and C-BAND.
     * @param  body  Required parameter: Request for network coverage details.
     * @return    Returns the WnpRequestResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<WnpRequestResponse>> domestic4GAnd5GNationwideNetworkCoverageAsync(
            final M2MV1IntelligenceWirelessCoverageRequest body) {
        try {
            return prepareDomestic4GAnd5GNationwideNetworkCoverageRequest(body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for domestic4GAnd5GNationwideNetworkCoverage.
     */
    private ApiCall<ApiResponse<WnpRequestResponse>, ApiException> prepareDomestic4GAnd5GNationwideNetworkCoverageRequest(
            final M2MV1IntelligenceWirelessCoverageRequest body) {
        return new ApiCall.Builder<ApiResponse<WnpRequestResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/intelligence/wireless-coverage")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, WnpRequestResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error response",
                                (reason, context) -> new WnpRestErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Identify the direction and general distance of nearby cell sites and the technology supported
     * by the equipment.
     * @param  body  Required parameter: Request for cell site proximity.
     * @return    Returns the WnpRequestResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<WnpRequestResponse> siteProximity(
            final GetNetworkConditionsRequest body) throws ApiException, IOException {
        return prepareSiteProximityRequest(body).execute();
    }

    /**
     * Identify the direction and general distance of nearby cell sites and the technology supported
     * by the equipment.
     * @param  body  Required parameter: Request for cell site proximity.
     * @return    Returns the WnpRequestResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<WnpRequestResponse>> siteProximityAsync(
            final GetNetworkConditionsRequest body) {
        try {
            return prepareSiteProximityRequest(body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for siteProximity.
     */
    private ApiCall<ApiResponse<WnpRequestResponse>, ApiException> prepareSiteProximityRequest(
            final GetNetworkConditionsRequest body) {
        return new ApiCall.Builder<ApiResponse<WnpRequestResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/intelligence/site-proximity/action/list")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, WnpRequestResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error response",
                                (reason, context) -> new WnpRestErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * A report of a specific device's service scores over a 30 day period.
     * @param  body  Required parameter: Request for a device's 30 day experience.
     * @return    Returns the WnpRequestResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<WnpRequestResponse> deviceExperience30DaysHistory(
            final GetDeviceExperienceScoreHistoryRequest body) throws ApiException, IOException {
        return prepareDeviceExperience30DaysHistoryRequest(body).execute();
    }

    /**
     * A report of a specific device's service scores over a 30 day period.
     * @param  body  Required parameter: Request for a device's 30 day experience.
     * @return    Returns the WnpRequestResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<WnpRequestResponse>> deviceExperience30DaysHistoryAsync(
            final GetDeviceExperienceScoreHistoryRequest body) {
        try {
            return prepareDeviceExperience30DaysHistoryRequest(body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for deviceExperience30DaysHistory.
     */
    private ApiCall<ApiResponse<WnpRequestResponse>, ApiException> prepareDeviceExperience30DaysHistoryRequest(
            final GetDeviceExperienceScoreHistoryRequest body) {
        return new ApiCall.Builder<ApiResponse<WnpRequestResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/intelligence/device-experience/history/30-days")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, WnpRequestResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error response",
                                (reason, context) -> new WnpRestErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Run a report to view the latest device experience score for specific devices.
     * @param  body  Required parameter: Request for bulk latest history details.
     * @return    Returns the WnpRequestResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<WnpRequestResponse> deviceExperienceBulkLatest(
            final GetDeviceExperienceScoreBulkRequest body) throws ApiException, IOException {
        return prepareDeviceExperienceBulkLatestRequest(body).execute();
    }

    /**
     * Run a report to view the latest device experience score for specific devices.
     * @param  body  Required parameter: Request for bulk latest history details.
     * @return    Returns the WnpRequestResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<WnpRequestResponse>> deviceExperienceBulkLatestAsync(
            final GetDeviceExperienceScoreBulkRequest body) {
        try {
            return prepareDeviceExperienceBulkLatestRequest(body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for deviceExperienceBulkLatest.
     */
    private ApiCall<ApiResponse<WnpRequestResponse>, ApiException> prepareDeviceExperienceBulkLatestRequest(
            final GetDeviceExperienceScoreBulkRequest body) {
        return new ApiCall.Builder<ApiResponse<WnpRequestResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/intelligence/device-experience/bulk/latest")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, WnpRequestResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error response",
                                (reason, context) -> new WnpRestErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}