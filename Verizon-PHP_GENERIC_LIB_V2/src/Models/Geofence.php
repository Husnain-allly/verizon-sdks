<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

class Geofence implements \JsonSerializable
{
    /**
     * @var string
     */
    private $type;

    /**
     * @var float[][]
     */
    private $coordinates;

    /**
     * @param string $type
     * @param float[][] $coordinates
     */
    public function __construct(string $type, array $coordinates)
    {
        $this->type = $type;
        $this->coordinates = $coordinates;
    }

    /**
     * Returns Type.
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     *
     * @required
     * @maps type
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Coordinates.
     *
     * @return float[][]
     */
    public function getCoordinates(): array
    {
        return $this->coordinates;
    }

    /**
     * Sets Coordinates.
     *
     * @required
     * @maps coordinates
     *
     * @param float[][] $coordinates
     */
    public function setCoordinates(array $coordinates): void
    {
        $this->coordinates = $coordinates;
    }

    /**
     * Converts the Geofence object to a human-readable string representation.
     *
     * @return string The string representation of the Geofence object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify('Geofence', ['type' => $this->type, 'coordinates' => $this->coordinates]);
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['type']        = $this->type;
        $json['coordinates'] = $this->coordinates;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
