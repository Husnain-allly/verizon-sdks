<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Request to return the provisioning history of a specified device during a specified time period.
 */
class DeviceProvisioningHistoryListRequest implements \JsonSerializable
{
    /**
     * @var DeviceId
     */
    private $deviceId;

    /**
     * @var string
     */
    private $earliest;

    /**
     * @var string
     */
    private $latest;

    /**
     * @param DeviceId $deviceId
     * @param string $earliest
     * @param string $latest
     */
    public function __construct(DeviceId $deviceId, string $earliest, string $latest)
    {
        $this->deviceId = $deviceId;
        $this->earliest = $earliest;
        $this->latest = $latest;
    }

    /**
     * Returns Device Id.
     * An identifier for a single device.
     */
    public function getDeviceId(): DeviceId
    {
        return $this->deviceId;
    }

    /**
     * Sets Device Id.
     * An identifier for a single device.
     *
     * @required
     * @maps deviceId
     */
    public function setDeviceId(DeviceId $deviceId): void
    {
        $this->deviceId = $deviceId;
    }

    /**
     * Returns Earliest.
     * The earliest date and time for which you want provisioning data.
     */
    public function getEarliest(): string
    {
        return $this->earliest;
    }

    /**
     * Sets Earliest.
     * The earliest date and time for which you want provisioning data.
     *
     * @required
     * @maps earliest
     */
    public function setEarliest(string $earliest): void
    {
        $this->earliest = $earliest;
    }

    /**
     * Returns Latest.
     * The last date and time for which you want provisioning data.
     */
    public function getLatest(): string
    {
        return $this->latest;
    }

    /**
     * Sets Latest.
     * The last date and time for which you want provisioning data.
     *
     * @required
     * @maps latest
     */
    public function setLatest(string $latest): void
    {
        $this->latest = $latest;
    }

    /**
     * Converts the DeviceProvisioningHistoryListRequest object to a human-readable string representation.
     *
     * @return string The string representation of the DeviceProvisioningHistoryListRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'DeviceProvisioningHistoryListRequest',
            [
                'deviceId' => $this->deviceId,
                'earliest' => $this->earliest,
                'latest' => $this->latest,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['deviceId', 'earliest', 'latest'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['deviceId'] = $this->deviceId;
        $json['earliest'] = $this->earliest;
        $json['latest']   = $this->latest;
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
