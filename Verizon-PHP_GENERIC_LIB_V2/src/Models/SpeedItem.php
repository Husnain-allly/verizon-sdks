<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Defines the acceptable speed range for road users in m/s. Messages are triggered when:
 * 1. The road user's speed is below the required minimum OR
 * 2. The road user's speed is above the acceptable maximum AND
 * 3. The associated TriggerConditions are met.
 *
 * Example: For the speed range of 10-20 m/s and a TriggerCondition of 'user inside geofence', the
 * message is sent if the user's speed is below 10 m/s or above 20 m/s while in the geofence area.
 */
class SpeedItem implements \JsonSerializable
{
    /**
     * @var Speed|null
     */
    private $speed;

    /**
     * Returns Speed.
     */
    public function getSpeed(): ?Speed
    {
        return $this->speed;
    }

    /**
     * Sets Speed.
     *
     * @maps speed
     */
    public function setSpeed(?Speed $speed): void
    {
        $this->speed = $speed;
    }

    /**
     * Converts the SpeedItem object to a human-readable string representation.
     *
     * @return string The string representation of the SpeedItem object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'SpeedItem',
            ['speed' => $this->speed, 'additionalProperties' => $this->additionalProperties]
        );
    }

    protected $propertyNames = ['speed'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['speed'] = $this->speed;
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
