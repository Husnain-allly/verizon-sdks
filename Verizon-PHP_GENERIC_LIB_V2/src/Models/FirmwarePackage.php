<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;
use VerizonLib\Utils\DateTimeHelper;

/**
 * Available firmware.
 */
class FirmwarePackage implements \JsonSerializable
{
    /**
     * @var string
     */
    private $firmwareName;

    /**
     * @var string
     */
    private $firmwareFrom;

    /**
     * @var string
     */
    private $firmwareTo;

    /**
     * @var \DateTime
     */
    private $launchDate;

    /**
     * @var string
     */
    private $releaseNote;

    /**
     * @var string
     */
    private $model;

    /**
     * @var string
     */
    private $make;

    /**
     * @var string
     */
    private $protocol;

    /**
     * @param string $firmwareName
     * @param string $firmwareFrom
     * @param string $firmwareTo
     * @param \DateTime $launchDate
     * @param string $releaseNote
     * @param string $model
     * @param string $make
     * @param string $protocol
     */
    public function __construct(
        string $firmwareName,
        string $firmwareFrom,
        string $firmwareTo,
        \DateTime $launchDate,
        string $releaseNote,
        string $model,
        string $make,
        string $protocol
    ) {
        $this->firmwareName = $firmwareName;
        $this->firmwareFrom = $firmwareFrom;
        $this->firmwareTo = $firmwareTo;
        $this->launchDate = $launchDate;
        $this->releaseNote = $releaseNote;
        $this->model = $model;
        $this->make = $make;
        $this->protocol = $protocol;
    }

    /**
     * Returns Firmware Name.
     * Firmware name.
     */
    public function getFirmwareName(): string
    {
        return $this->firmwareName;
    }

    /**
     * Sets Firmware Name.
     * Firmware name.
     *
     * @required
     * @maps firmwareName
     */
    public function setFirmwareName(string $firmwareName): void
    {
        $this->firmwareName = $firmwareName;
    }

    /**
     * Returns Firmware From.
     * Firmware from version.
     */
    public function getFirmwareFrom(): string
    {
        return $this->firmwareFrom;
    }

    /**
     * Sets Firmware From.
     * Firmware from version.
     *
     * @required
     * @maps firmwareFrom
     */
    public function setFirmwareFrom(string $firmwareFrom): void
    {
        $this->firmwareFrom = $firmwareFrom;
    }

    /**
     * Returns Firmware To.
     * Firmware to version.
     */
    public function getFirmwareTo(): string
    {
        return $this->firmwareTo;
    }

    /**
     * Sets Firmware To.
     * Firmware to version.
     *
     * @required
     * @maps firmwareTo
     */
    public function setFirmwareTo(string $firmwareTo): void
    {
        $this->firmwareTo = $firmwareTo;
    }

    /**
     * Returns Launch Date.
     * Firmware launch date.
     */
    public function getLaunchDate(): \DateTime
    {
        return $this->launchDate;
    }

    /**
     * Sets Launch Date.
     * Firmware launch date.
     *
     * @required
     * @maps launchDate
     * @factory \VerizonLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setLaunchDate(\DateTime $launchDate): void
    {
        $this->launchDate = $launchDate;
    }

    /**
     * Returns Release Note.
     * Firmware release note.
     */
    public function getReleaseNote(): string
    {
        return $this->releaseNote;
    }

    /**
     * Sets Release Note.
     * Firmware release note.
     *
     * @required
     * @maps releaseNote
     */
    public function setReleaseNote(string $releaseNote): void
    {
        $this->releaseNote = $releaseNote;
    }

    /**
     * Returns Model.
     * Firmware applicable device model.
     */
    public function getModel(): string
    {
        return $this->model;
    }

    /**
     * Sets Model.
     * Firmware applicable device model.
     *
     * @required
     * @maps model
     */
    public function setModel(string $model): void
    {
        $this->model = $model;
    }

    /**
     * Returns Make.
     * Firmware applicable device make.
     */
    public function getMake(): string
    {
        return $this->make;
    }

    /**
     * Sets Make.
     * Firmware applicable device make.
     *
     * @required
     * @maps make
     */
    public function setMake(string $make): void
    {
        $this->make = $make;
    }

    /**
     * Returns Protocol.
     * Firmware protocol. Valid values include: LWM2M, OMD-DM.
     */
    public function getProtocol(): string
    {
        return $this->protocol;
    }

    /**
     * Sets Protocol.
     * Firmware protocol. Valid values include: LWM2M, OMD-DM.
     *
     * @required
     * @maps protocol
     * @factory \VerizonLib\Models\CampaignMetaInfoProtocol::checkValue
     */
    public function setProtocol(string $protocol): void
    {
        $this->protocol = $protocol;
    }

    /**
     * Converts the FirmwarePackage object to a human-readable string representation.
     *
     * @return string The string representation of the FirmwarePackage object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'FirmwarePackage',
            [
                'firmwareName' => $this->firmwareName,
                'firmwareFrom' => $this->firmwareFrom,
                'firmwareTo' => $this->firmwareTo,
                'launchDate' => $this->launchDate,
                'releaseNote' => $this->releaseNote,
                'model' => $this->model,
                'make' => $this->make,
                'protocol' => $this->protocol,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = [
        'firmwareName',
        'firmwareFrom',
        'firmwareTo',
        'launchDate',
        'releaseNote',
        'model',
        'make',
        'protocol'
    ];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['firmwareName'] = $this->firmwareName;
        $json['firmwareFrom'] = $this->firmwareFrom;
        $json['firmwareTo']   = $this->firmwareTo;
        $json['launchDate']   = DateTimeHelper::toRfc3339DateTime($this->launchDate);
        $json['releaseNote']  = $this->releaseNote;
        $json['model']        = $this->model;
        $json['make']         = $this->make;
        $json['protocol']     = CampaignMetaInfoProtocol::checkValue($this->protocol);
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
