<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

class GeoFeature implements \JsonSerializable
{
    /**
     * @var string
     */
    private $type;

    /**
     * @var array
     */
    private $geometry;

    /**
     * @var array
     */
    private $properties;

    /**
     * @param string $type
     * @param array $geometry
     * @param array $properties
     */
    public function __construct(string $type, array $geometry, array $properties)
    {
        $this->type = $type;
        $this->geometry = $geometry;
        $this->properties = $properties;
    }

    /**
     * Returns Type.
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     *
     * @required
     * @maps type
     * @factory \VerizonLib\Models\FeatureType::checkValue
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Geometry.
     */
    public function getGeometry(): array
    {
        return $this->geometry;
    }

    /**
     * Sets Geometry.
     *
     * @required
     * @maps geometry
     */
    public function setGeometry(array $geometry): void
    {
        $this->geometry = $geometry;
    }

    /**
     * Returns Properties.
     */
    public function getProperties(): array
    {
        return $this->properties;
    }

    /**
     * Sets Properties.
     *
     * @required
     * @maps properties
     */
    public function setProperties(array $properties): void
    {
        $this->properties = $properties;
    }

    /**
     * Converts the GeoFeature object to a human-readable string representation.
     *
     * @return string The string representation of the GeoFeature object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'GeoFeature',
            ['type' => $this->type, 'geometry' => $this->geometry, 'properties' => $this->properties]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['type']       = FeatureType::checkValue($this->type);
        $json['geometry']   = $this->geometry;
        $json['properties'] = $this->properties;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
