<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Account device information.
 */
class V2AccountDevice implements \JsonSerializable
{
    /**
     * @var string
     */
    private $deviceId;

    /**
     * @var string
     */
    private $mdn;

    /**
     * @var string
     */
    private $model;

    /**
     * @var string
     */
    private $make;

    /**
     * @var bool
     */
    private $fotaEligible;

    /**
     * @var bool
     */
    private $appFotaEligible;

    /**
     * @var bool
     */
    private $licenseAssigned;

    /**
     * @var string
     */
    private $distributionType;

    /**
     * @var V2SoftwareInfo[]
     */
    private $softwareList;

    /**
     * @var string|null
     */
    private $createTime;

    /**
     * @var string|null
     */
    private $upgradeTime;

    /**
     * @var string|null
     */
    private $updateTime;

    /**
     * @var string|null
     */
    private $refreshTime;

    /**
     * @param string $deviceId
     * @param string $mdn
     * @param string $model
     * @param string $make
     * @param bool $fotaEligible
     * @param bool $appFotaEligible
     * @param bool $licenseAssigned
     * @param string $distributionType
     * @param V2SoftwareInfo[] $softwareList
     */
    public function __construct(
        string $deviceId,
        string $mdn,
        string $model,
        string $make,
        bool $fotaEligible,
        bool $appFotaEligible,
        bool $licenseAssigned,
        string $distributionType,
        array $softwareList
    ) {
        $this->deviceId = $deviceId;
        $this->mdn = $mdn;
        $this->model = $model;
        $this->make = $make;
        $this->fotaEligible = $fotaEligible;
        $this->appFotaEligible = $appFotaEligible;
        $this->licenseAssigned = $licenseAssigned;
        $this->distributionType = $distributionType;
        $this->softwareList = $softwareList;
    }

    /**
     * Returns Device Id.
     * Device identifier.
     */
    public function getDeviceId(): string
    {
        return $this->deviceId;
    }

    /**
     * Sets Device Id.
     * Device identifier.
     *
     * @required
     * @maps deviceId
     */
    public function setDeviceId(string $deviceId): void
    {
        $this->deviceId = $deviceId;
    }

    /**
     * Returns Mdn.
     * MDN.
     */
    public function getMdn(): string
    {
        return $this->mdn;
    }

    /**
     * Sets Mdn.
     * MDN.
     *
     * @required
     * @maps mdn
     */
    public function setMdn(string $mdn): void
    {
        $this->mdn = $mdn;
    }

    /**
     * Returns Model.
     * Device model.
     */
    public function getModel(): string
    {
        return $this->model;
    }

    /**
     * Sets Model.
     * Device model.
     *
     * @required
     * @maps model
     */
    public function setModel(string $model): void
    {
        $this->model = $model;
    }

    /**
     * Returns Make.
     * Device make.
     */
    public function getMake(): string
    {
        return $this->make;
    }

    /**
     * Sets Make.
     * Device make.
     *
     * @required
     * @maps make
     */
    public function setMake(string $make): void
    {
        $this->make = $make;
    }

    /**
     * Returns Fota Eligible.
     * Device FOTA capable.
     */
    public function getFotaEligible(): bool
    {
        return $this->fotaEligible;
    }

    /**
     * Sets Fota Eligible.
     * Device FOTA capable.
     *
     * @required
     * @maps fotaEligible
     */
    public function setFotaEligible(bool $fotaEligible): void
    {
        $this->fotaEligible = $fotaEligible;
    }

    /**
     * Returns App Fota Eligible.
     * Device application FOTA capable.
     */
    public function getAppFotaEligible(): bool
    {
        return $this->appFotaEligible;
    }

    /**
     * Sets App Fota Eligible.
     * Device application FOTA capable.
     *
     * @required
     * @maps appFotaEligible
     */
    public function setAppFotaEligible(bool $appFotaEligible): void
    {
        $this->appFotaEligible = $appFotaEligible;
    }

    /**
     * Returns License Assigned.
     * License assigned device.
     */
    public function getLicenseAssigned(): bool
    {
        return $this->licenseAssigned;
    }

    /**
     * Sets License Assigned.
     * License assigned device.
     *
     * @required
     * @maps licenseAssigned
     */
    public function setLicenseAssigned(bool $licenseAssigned): void
    {
        $this->licenseAssigned = $licenseAssigned;
    }

    /**
     * Returns Distribution Type.
     * LWM2M, OMD-DM or HTTP.
     */
    public function getDistributionType(): string
    {
        return $this->distributionType;
    }

    /**
     * Sets Distribution Type.
     * LWM2M, OMD-DM or HTTP.
     *
     * @required
     * @maps distributionType
     */
    public function setDistributionType(string $distributionType): void
    {
        $this->distributionType = $distributionType;
    }

    /**
     * Returns Software List.
     * List of sofware.
     *
     * @return V2SoftwareInfo[]
     */
    public function getSoftwareList(): array
    {
        return $this->softwareList;
    }

    /**
     * Sets Software List.
     * List of sofware.
     *
     * @required
     * @maps softwareList
     *
     * @param V2SoftwareInfo[] $softwareList
     */
    public function setSoftwareList(array $softwareList): void
    {
        $this->softwareList = $softwareList;
    }

    /**
     * Returns Create Time.
     * The date and time of when the device is created.
     */
    public function getCreateTime(): ?string
    {
        return $this->createTime;
    }

    /**
     * Sets Create Time.
     * The date and time of when the device is created.
     *
     * @maps createTime
     */
    public function setCreateTime(?string $createTime): void
    {
        $this->createTime = $createTime;
    }

    /**
     * Returns Upgrade Time.
     * The date and time of when the device firmware or software is upgraded.
     */
    public function getUpgradeTime(): ?string
    {
        return $this->upgradeTime;
    }

    /**
     * Sets Upgrade Time.
     * The date and time of when the device firmware or software is upgraded.
     *
     * @maps upgradeTime
     */
    public function setUpgradeTime(?string $upgradeTime): void
    {
        $this->upgradeTime = $upgradeTime;
    }

    /**
     * Returns Update Time.
     * The date and time of when the device is updated.
     */
    public function getUpdateTime(): ?string
    {
        return $this->updateTime;
    }

    /**
     * Sets Update Time.
     * The date and time of when the device is updated.
     *
     * @maps updateTime
     */
    public function setUpdateTime(?string $updateTime): void
    {
        $this->updateTime = $updateTime;
    }

    /**
     * Returns Refresh Time.
     * The date and time of when the device is refreshed.
     */
    public function getRefreshTime(): ?string
    {
        return $this->refreshTime;
    }

    /**
     * Sets Refresh Time.
     * The date and time of when the device is refreshed.
     *
     * @maps refreshTime
     */
    public function setRefreshTime(?string $refreshTime): void
    {
        $this->refreshTime = $refreshTime;
    }

    /**
     * Converts the V2AccountDevice object to a human-readable string representation.
     *
     * @return string The string representation of the V2AccountDevice object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'V2AccountDevice',
            [
                'deviceId' => $this->deviceId,
                'mdn' => $this->mdn,
                'model' => $this->model,
                'make' => $this->make,
                'fotaEligible' => $this->fotaEligible,
                'appFotaEligible' => $this->appFotaEligible,
                'licenseAssigned' => $this->licenseAssigned,
                'distributionType' => $this->distributionType,
                'softwareList' => $this->softwareList,
                'createTime' => $this->createTime,
                'upgradeTime' => $this->upgradeTime,
                'updateTime' => $this->updateTime,
                'refreshTime' => $this->refreshTime,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = [
        'deviceId',
        'mdn',
        'model',
        'make',
        'fotaEligible',
        'appFotaEligible',
        'licenseAssigned',
        'distributionType',
        'softwareList',
        'createTime',
        'upgradeTime',
        'updateTime',
        'refreshTime'
    ];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['deviceId']         = $this->deviceId;
        $json['mdn']              = $this->mdn;
        $json['model']            = $this->model;
        $json['make']             = $this->make;
        $json['fotaEligible']     = $this->fotaEligible;
        $json['appFotaEligible']  = $this->appFotaEligible;
        $json['licenseAssigned']  = $this->licenseAssigned;
        $json['distributionType'] = $this->distributionType;
        $json['softwareList']     = $this->softwareList;
        if (isset($this->createTime)) {
            $json['createTime']   = $this->createTime;
        }
        if (isset($this->upgradeTime)) {
            $json['upgradeTime']  = $this->upgradeTime;
        }
        if (isset($this->updateTime)) {
            $json['updateTime']   = $this->updateTime;
        }
        if (isset($this->refreshTime)) {
            $json['refreshTime']  = $this->refreshTime;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
