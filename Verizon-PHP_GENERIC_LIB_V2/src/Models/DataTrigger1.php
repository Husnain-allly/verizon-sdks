<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

class DataTrigger1 implements \JsonSerializable
{
    /**
     * @var AccountLevelFilter|null
     */
    private $filterCriteria;

    /**
     * @var Rateplantype2Condition|null
     */
    private $condition;

    /**
     * @var string|null
     */
    private $action;

    /**
     * @var string|null
     */
    private $conditionType;

    /**
     * @var string|null
     */
    private $comparitor;

    /**
     * @var int|null
     */
    private $threshold;

    /**
     * @var string|null
     */
    private $thresholdUnit;

    /**
     * @var string|null
     */
    private $cycleType;

    /**
     * @var AllowanceThreshold|null
     */
    private $allowanceThreshold;

    /**
     * Returns Filter Criteria.
     */
    public function getFilterCriteria(): ?AccountLevelFilter
    {
        return $this->filterCriteria;
    }

    /**
     * Sets Filter Criteria.
     *
     * @maps filterCriteria
     */
    public function setFilterCriteria(?AccountLevelFilter $filterCriteria): void
    {
        $this->filterCriteria = $filterCriteria;
    }

    /**
     * Returns Condition.
     */
    public function getCondition(): ?Rateplantype2Condition
    {
        return $this->condition;
    }

    /**
     * Sets Condition.
     *
     * @maps condition
     */
    public function setCondition(?Rateplantype2Condition $condition): void
    {
        $this->condition = $condition;
    }

    /**
     * Returns Action.
     * The action taken when trigger conditions are met
     */
    public function getAction(): ?string
    {
        return $this->action;
    }

    /**
     * Sets Action.
     * The action taken when trigger conditions are met
     *
     * @maps action
     * @factory \VerizonLib\Models\AccountLevelAction::checkValue
     */
    public function setAction(?string $action): void
    {
        $this->action = $action;
    }

    /**
     * Returns Condition Type.
     * The condition type being monitored
     */
    public function getConditionType(): ?string
    {
        return $this->conditionType;
    }

    /**
     * Sets Condition Type.
     * The condition type being monitored
     *
     * @maps conditionType
     * @factory \VerizonLib\Models\ConditionType::checkValue
     */
    public function setConditionType(?string $conditionType): void
    {
        $this->conditionType = $conditionType;
    }

    /**
     * Returns Comparitor.
     * The boolean of the comparison. `gt` is Greater Than, `lt` is Less Than and `eq` is Equal To
     */
    public function getComparitor(): ?string
    {
        return $this->comparitor;
    }

    /**
     * Sets Comparitor.
     * The boolean of the comparison. `gt` is Greater Than, `lt` is Less Than and `eq` is Equal To
     *
     * @maps comparitor
     * @factory \VerizonLib\Models\Comparitor::checkValue
     */
    public function setComparitor(?string $comparitor): void
    {
        $this->comparitor = $comparitor;
    }

    /**
     * Returns Threshold.
     * The threshold value the trigger monitors for
     */
    public function getThreshold(): ?int
    {
        return $this->threshold;
    }

    /**
     * Sets Threshold.
     * The threshold value the trigger monitors for
     *
     * @maps threshold
     */
    public function setThreshold(?int $threshold): void
    {
        $this->threshold = $threshold;
    }

    /**
     * Returns Threshold Unit.
     * The units of the threshold. This can be KB, Kilobits, MB, Megabits, or GB, Gigabits
     */
    public function getThresholdUnit(): ?string
    {
        return $this->thresholdUnit;
    }

    /**
     * Sets Threshold Unit.
     * The units of the threshold. This can be KB, Kilobits, MB, Megabits, or GB, Gigabits
     *
     * @maps thresholdUnit
     * @factory \VerizonLib\Models\ThresholdUnit::checkValue
     */
    public function setThresholdUnit(?string $thresholdUnit): void
    {
        $this->thresholdUnit = $thresholdUnit;
    }

    /**
     * Returns Cycle Type.
     * The interval to monitor for the threshold. This can be Daily, Weekly or Monthly
     */
    public function getCycleType(): ?string
    {
        return $this->cycleType;
    }

    /**
     * Sets Cycle Type.
     * The interval to monitor for the threshold. This can be Daily, Weekly or Monthly
     *
     * @maps cycleType
     * @factory \VerizonLib\Models\RulesCycleType::checkValue
     */
    public function setCycleType(?string $cycleType): void
    {
        $this->cycleType = $cycleType;
    }

    /**
     * Returns Allowance Threshold.
     */
    public function getAllowanceThreshold(): ?AllowanceThreshold
    {
        return $this->allowanceThreshold;
    }

    /**
     * Sets Allowance Threshold.
     *
     * @maps allowanceThreshold
     */
    public function setAllowanceThreshold(?AllowanceThreshold $allowanceThreshold): void
    {
        $this->allowanceThreshold = $allowanceThreshold;
    }

    /**
     * Converts the DataTrigger1 object to a human-readable string representation.
     *
     * @return string The string representation of the DataTrigger1 object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'DataTrigger1',
            [
                'filterCriteria' => $this->filterCriteria,
                'condition' => $this->condition,
                'action' => $this->action,
                'conditionType' => $this->conditionType,
                'comparitor' => $this->comparitor,
                'threshold' => $this->threshold,
                'thresholdUnit' => $this->thresholdUnit,
                'cycleType' => $this->cycleType,
                'allowanceThreshold' => $this->allowanceThreshold,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = [
        'filterCriteria',
        'condition',
        'action',
        'conditionType',
        'comparitor',
        'threshold',
        'thresholdUnit',
        'cycleType',
        'allowanceThreshold'
    ];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->filterCriteria)) {
            $json['filterCriteria']     = $this->filterCriteria;
        }
        if (isset($this->condition)) {
            $json['condition']          = $this->condition;
        }
        if (isset($this->action)) {
            $json['action']             = AccountLevelAction::checkValue($this->action);
        }
        if (isset($this->conditionType)) {
            $json['conditionType']      = ConditionType::checkValue($this->conditionType);
        }
        if (isset($this->comparitor)) {
            $json['comparitor']         = Comparitor::checkValue($this->comparitor);
        }
        if (isset($this->threshold)) {
            $json['threshold']          = $this->threshold;
        }
        if (isset($this->thresholdUnit)) {
            $json['thresholdUnit']      = ThresholdUnit::checkValue($this->thresholdUnit);
        }
        if (isset($this->cycleType)) {
            $json['cycleType']          = RulesCycleType::checkValue($this->cycleType);
        }
        if (isset($this->allowanceThreshold)) {
            $json['allowanceThreshold'] = $this->allowanceThreshold;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
