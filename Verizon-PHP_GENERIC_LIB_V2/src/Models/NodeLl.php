<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * The NodeLL data frame presents a structure to hold data for a signal node point in a lane. Each
 * selected node has a complete lat-long representation.
 */
class NodeLl implements \JsonSerializable
{
    /**
     * @var NodeOffsetPointLl
     */
    private $delta;

    /**
     * @param NodeOffsetPointLl $delta
     */
    public function __construct(NodeOffsetPointLl $delta)
    {
        $this->delta = $delta;
    }

    /**
     * Returns Delta.
     * The NodeOffsetPointLL data frame presents a structure to hold 64 bits sized data frames for a single
     * node geometry path. Nodes are described in terms of latitude and longitude.
     */
    public function getDelta(): NodeOffsetPointLl
    {
        return $this->delta;
    }

    /**
     * Sets Delta.
     * The NodeOffsetPointLL data frame presents a structure to hold 64 bits sized data frames for a single
     * node geometry path. Nodes are described in terms of latitude and longitude.
     *
     * @required
     * @maps delta
     */
    public function setDelta(NodeOffsetPointLl $delta): void
    {
        $this->delta = $delta;
    }

    /**
     * Converts the NodeLl object to a human-readable string representation.
     *
     * @return string The string representation of the NodeLl object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify('NodeLl', ['delta' => $this->delta]);
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['delta'] = $this->delta;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
