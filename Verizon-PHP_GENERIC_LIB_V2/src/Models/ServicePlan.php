<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Details of the service plan.
 */
class ServicePlan implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $carrierServicePlanCode;

    /**
     * @var string|null
     */
    private $code;

    /**
     * @var CustomFields[]|null
     */
    private $extendedAttributes;

    /**
     * @var string|null
     */
    private $name;

    /**
     * @var int|null
     */
    private $sizeKb;

    /**
     * Returns Carrier Service Plan Code.
     * The code that is used by the carrier for the service plan.
     */
    public function getCarrierServicePlanCode(): ?string
    {
        return $this->carrierServicePlanCode;
    }

    /**
     * Sets Carrier Service Plan Code.
     * The code that is used by the carrier for the service plan.
     *
     * @maps carrierServicePlanCode
     */
    public function setCarrierServicePlanCode(?string $carrierServicePlanCode): void
    {
        $this->carrierServicePlanCode = $carrierServicePlanCode;
    }

    /**
     * Returns Code.
     * The code of the service plan, which may not be the same as the name.
     */
    public function getCode(): ?string
    {
        return $this->code;
    }

    /**
     * Sets Code.
     * The code of the service plan, which may not be the same as the name.
     *
     * @maps code
     */
    public function setCode(?string $code): void
    {
        $this->code = $code;
    }

    /**
     * Returns Extended Attributes.
     * Any extended attributes for the service plan, as Key and Value pairs.
     *
     * @return CustomFields[]|null
     */
    public function getExtendedAttributes(): ?array
    {
        return $this->extendedAttributes;
    }

    /**
     * Sets Extended Attributes.
     * Any extended attributes for the service plan, as Key and Value pairs.
     *
     * @maps extendedAttributes
     *
     * @param CustomFields[]|null $extendedAttributes
     */
    public function setExtendedAttributes(?array $extendedAttributes): void
    {
        $this->extendedAttributes = $extendedAttributes;
    }

    /**
     * Returns Name.
     * The name of the service plan.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * The name of the service plan.
     *
     * @maps name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Size Kb.
     * The size of the service plan in kilobytes.
     */
    public function getSizeKb(): ?int
    {
        return $this->sizeKb;
    }

    /**
     * Sets Size Kb.
     * The size of the service plan in kilobytes.
     *
     * @maps sizeKb
     */
    public function setSizeKb(?int $sizeKb): void
    {
        $this->sizeKb = $sizeKb;
    }

    /**
     * Converts the ServicePlan object to a human-readable string representation.
     *
     * @return string The string representation of the ServicePlan object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'ServicePlan',
            [
                'carrierServicePlanCode' => $this->carrierServicePlanCode,
                'code' => $this->code,
                'extendedAttributes' => $this->extendedAttributes,
                'name' => $this->name,
                'sizeKb' => $this->sizeKb,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['carrierServicePlanCode', 'code', 'extendedAttributes', 'name', 'sizeKb'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->carrierServicePlanCode)) {
            $json['carrierServicePlanCode'] = $this->carrierServicePlanCode;
        }
        if (isset($this->code)) {
            $json['code']                   = $this->code;
        }
        if (isset($this->extendedAttributes)) {
            $json['extendedAttributes']     = $this->extendedAttributes;
        }
        if (isset($this->name)) {
            $json['name']                   = $this->name;
        }
        if (isset($this->sizeKb)) {
            $json['sizeKb']                 = $this->sizeKb;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
