<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * The NodeOffsetPointLL data frame presents a structure to hold 64 bits sized data frames for a single
 * node geometry path. Nodes are described in terms of latitude and longitude.
 */
class NodeOffsetPointLl implements \JsonSerializable
{
    /**
     * @var NodeLLmD64B
     */
    private $nodeLatLon;

    /**
     * @param NodeLLmD64B $nodeLatLon
     */
    public function __construct(NodeLLmD64B $nodeLatLon)
    {
        $this->nodeLatLon = $nodeLatLon;
    }

    /**
     * Returns Node Lat Lon.
     * A 64-bit node type with lat-long values expressed in standard SAE 1/10th of a microdegree.
     */
    public function getNodeLatLon(): NodeLLmD64B
    {
        return $this->nodeLatLon;
    }

    /**
     * Sets Node Lat Lon.
     * A 64-bit node type with lat-long values expressed in standard SAE 1/10th of a microdegree.
     *
     * @required
     * @maps nodeLatLon
     */
    public function setNodeLatLon(NodeLLmD64B $nodeLatLon): void
    {
        $this->nodeLatLon = $nodeLatLon;
    }

    /**
     * Converts the NodeOffsetPointLl object to a human-readable string representation.
     *
     * @return string The string representation of the NodeOffsetPointLl object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify('NodeOffsetPointLl', ['nodeLatLon' => $this->nodeLatLon]);
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['nodeLatLon'] = $this->nodeLatLon;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
