<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Changes the identifier of a 3G or 4G device to match hardware changes made for a line of service.
 * Use this request to transfer the line of service and the MDN to new hardware, or to change the MDN.
 */
class ChangeDeviceIdRequest implements \JsonSerializable
{
    /**
     * @var bool|null
     */
    private $assignNonGeoMdn;

    /**
     * @var string|null
     */
    private $change4GOption;

    /**
     * @var DeviceId[]
     */
    private $deviceIds;

    /**
     * @var DeviceId[]|null
     */
    private $deviceIdsTo;

    /**
     * @var string|null
     */
    private $npaNxx;

    /**
     * @var string|null
     */
    private $servicePlan;

    /**
     * @var string|null
     */
    private $zipCode;

    /**
     * @var string|null
     */
    private $smsrOid;

    /**
     * @param DeviceId[] $deviceIds
     */
    public function __construct(array $deviceIds)
    {
        $this->deviceIds = $deviceIds;
    }

    /**
     * Returns Assign Non Geo Mdn.
     * Set to true to assign a non-Geo MDN and MSISDN, or false to assign an MDN and MSISDN from a specific
     * NPA-NXX.
     */
    public function getAssignNonGeoMdn(): ?bool
    {
        return $this->assignNonGeoMdn;
    }

    /**
     * Sets Assign Non Geo Mdn.
     * Set to true to assign a non-Geo MDN and MSISDN, or false to assign an MDN and MSISDN from a specific
     * NPA-NXX.
     *
     * @maps assignNonGeoMdn
     */
    public function setAssignNonGeoMdn(?bool $assignNonGeoMdn): void
    {
        $this->assignNonGeoMdn = $assignNonGeoMdn;
    }

    /**
     * Returns Change 4 G Option.
     * The type of change that you want to make for a 4G device.
     */
    public function getChange4GOption(): ?string
    {
        return $this->change4GOption;
    }

    /**
     * Sets Change 4 G Option.
     * The type of change that you want to make for a 4G device.
     *
     * @maps change4gOption
     */
    public function setChange4GOption(?string $change4GOption): void
    {
        $this->change4GOption = $change4GOption;
    }

    /**
     * Returns Device Ids.
     * The device that you want to change, specified by a device identifier.
     *
     * @return DeviceId[]
     */
    public function getDeviceIds(): array
    {
        return $this->deviceIds;
    }

    /**
     * Sets Device Ids.
     * The device that you want to change, specified by a device identifier.
     *
     * @required
     * @maps deviceIds
     *
     * @param DeviceId[] $deviceIds
     */
    public function setDeviceIds(array $deviceIds): void
    {
        $this->deviceIds = $deviceIds;
    }

    /**
     * Returns Device Ids To.
     * The new identifier for the device. Required for all change4GOptions except ChangeMSISDN.
     *
     * @return DeviceId[]|null
     */
    public function getDeviceIdsTo(): ?array
    {
        return $this->deviceIdsTo;
    }

    /**
     * Sets Device Ids To.
     * The new identifier for the device. Required for all change4GOptions except ChangeMSISDN.
     *
     * @maps deviceIdsTo
     *
     * @param DeviceId[]|null $deviceIdsTo
     */
    public function setDeviceIdsTo(?array $deviceIdsTo): void
    {
        $this->deviceIdsTo = $deviceIdsTo;
    }

    /**
     * Returns Npa Nxx.
     * The NPA NXX (area code and prefix) from which the MDN and MSISDN will be derived when
     * assignNonGeoMDN is false. Specify the 6-digit NPA NXX of the location where the line of service will
     * primarily be used. This API checks to see if a number starting with the NPA NXX is available. If not,
     * this API uses the zipCode parameter, if specified, to assign a number in the area of the line of
     * service. This parameter is required when you change an MDN/MSISDN for a B2B carrier, such as Verizon
     * Wireless.
     */
    public function getNpaNxx(): ?string
    {
        return $this->npaNxx;
    }

    /**
     * Sets Npa Nxx.
     * The NPA NXX (area code and prefix) from which the MDN and MSISDN will be derived when
     * assignNonGeoMDN is false. Specify the 6-digit NPA NXX of the location where the line of service will
     * primarily be used. This API checks to see if a number starting with the NPA NXX is available. If not,
     * this API uses the zipCode parameter, if specified, to assign a number in the area of the line of
     * service. This parameter is required when you change an MDN/MSISDN for a B2B carrier, such as Verizon
     * Wireless.
     *
     * @maps npaNxx
     */
    public function setNpaNxx(?string $npaNxx): void
    {
        $this->npaNxx = $npaNxx;
    }

    /**
     * Returns Service Plan.
     * The code for a different service plan, if you want to change the service plan while changing the
     * device identifier. Set this parameter to one of the Code values returned by GET /plans.
     */
    public function getServicePlan(): ?string
    {
        return $this->servicePlan;
    }

    /**
     * Sets Service Plan.
     * The code for a different service plan, if you want to change the service plan while changing the
     * device identifier. Set this parameter to one of the Code values returned by GET /plans.
     *
     * @maps servicePlan
     */
    public function setServicePlan(?string $servicePlan): void
    {
        $this->servicePlan = $servicePlan;
    }

    /**
     * Returns Zip Code.
     * The ZIP code from which the MDN and MSISDN will be derived when assignNonGeoMDN is true. Specify the
     * zip code of the location where the line of service will primarily be used.
     */
    public function getZipCode(): ?string
    {
        return $this->zipCode;
    }

    /**
     * Sets Zip Code.
     * The ZIP code from which the MDN and MSISDN will be derived when assignNonGeoMDN is true. Specify the
     * zip code of the location where the line of service will primarily be used.
     *
     * @maps zipCode
     */
    public function setZipCode(?string $zipCode): void
    {
        $this->zipCode = $zipCode;
    }

    /**
     * Returns Smsr Oid.
     */
    public function getSmsrOid(): ?string
    {
        return $this->smsrOid;
    }

    /**
     * Sets Smsr Oid.
     *
     * @maps smsrOid
     */
    public function setSmsrOid(?string $smsrOid): void
    {
        $this->smsrOid = $smsrOid;
    }

    /**
     * Converts the ChangeDeviceIdRequest object to a human-readable string representation.
     *
     * @return string The string representation of the ChangeDeviceIdRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'ChangeDeviceIdRequest',
            [
                'assignNonGeoMdn' => $this->assignNonGeoMdn,
                'change4GOption' => $this->change4GOption,
                'deviceIds' => $this->deviceIds,
                'deviceIdsTo' => $this->deviceIdsTo,
                'npaNxx' => $this->npaNxx,
                'servicePlan' => $this->servicePlan,
                'zipCode' => $this->zipCode,
                'smsrOid' => $this->smsrOid,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = [
        'assignNonGeoMdn',
        'change4gOption',
        'deviceIds',
        'deviceIdsTo',
        'npaNxx',
        'servicePlan',
        'zipCode',
        'smsrOid'
    ];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->assignNonGeoMdn)) {
            $json['assignNonGeoMdn'] = $this->assignNonGeoMdn;
        }
        if (isset($this->change4GOption)) {
            $json['change4gOption']  = $this->change4GOption;
        }
        $json['deviceIds']           = $this->deviceIds;
        if (isset($this->deviceIdsTo)) {
            $json['deviceIdsTo']     = $this->deviceIdsTo;
        }
        if (isset($this->npaNxx)) {
            $json['npaNxx']          = $this->npaNxx;
        }
        if (isset($this->servicePlan)) {
            $json['servicePlan']     = $this->servicePlan;
        }
        if (isset($this->zipCode)) {
            $json['zipCode']         = $this->zipCode;
        }
        if (isset($this->smsrOid)) {
            $json['smsrOid']         = $this->smsrOid;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
