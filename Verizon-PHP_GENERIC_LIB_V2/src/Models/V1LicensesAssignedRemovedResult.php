<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * License assignment or removal confirmation.
 */
class V1LicensesAssignedRemovedResult implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $accountName;

    /**
     * @var int|null
     */
    private $licCount;

    /**
     * @var int|null
     */
    private $licUsedCount;

    /**
     * @var V1DeviceListItem[]|null
     */
    private $deviceList;

    /**
     * Returns Account Name.
     * Account identifier in "##########-#####".
     */
    public function getAccountName(): ?string
    {
        return $this->accountName;
    }

    /**
     * Sets Account Name.
     * Account identifier in "##########-#####".
     *
     * @maps accountName
     */
    public function setAccountName(?string $accountName): void
    {
        $this->accountName = $accountName;
    }

    /**
     * Returns Lic Count.
     * Total number of monthly licenses in an MRC subscription.
     */
    public function getLicCount(): ?int
    {
        return $this->licCount;
    }

    /**
     * Sets Lic Count.
     * Total number of monthly licenses in an MRC subscription.
     *
     * @maps licCount
     */
    public function setLicCount(?int $licCount): void
    {
        $this->licCount = $licCount;
    }

    /**
     * Returns Lic Used Count.
     * Number of licenses assigned to devices after the request completed.
     */
    public function getLicUsedCount(): ?int
    {
        return $this->licUsedCount;
    }

    /**
     * Sets Lic Used Count.
     * Number of licenses assigned to devices after the request completed.
     *
     * @maps licUsedCount
     */
    public function setLicUsedCount(?int $licUsedCount): void
    {
        $this->licUsedCount = $licUsedCount;
    }

    /**
     * Returns Device List.
     * A JSON object for each device that was in the request.
     *
     * @return V1DeviceListItem[]|null
     */
    public function getDeviceList(): ?array
    {
        return $this->deviceList;
    }

    /**
     * Sets Device List.
     * A JSON object for each device that was in the request.
     *
     * @maps deviceList
     *
     * @param V1DeviceListItem[]|null $deviceList
     */
    public function setDeviceList(?array $deviceList): void
    {
        $this->deviceList = $deviceList;
    }

    /**
     * Converts the V1LicensesAssignedRemovedResult object to a human-readable string representation.
     *
     * @return string The string representation of the V1LicensesAssignedRemovedResult object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'V1LicensesAssignedRemovedResult',
            [
                'accountName' => $this->accountName,
                'licCount' => $this->licCount,
                'licUsedCount' => $this->licUsedCount,
                'deviceList' => $this->deviceList,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['accountName', 'licCount', 'licUsedCount', 'deviceList'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->accountName)) {
            $json['accountName']  = $this->accountName;
        }
        if (isset($this->licCount)) {
            $json['licCount']     = $this->licCount;
        }
        if (isset($this->licUsedCount)) {
            $json['licUsedCount'] = $this->licUsedCount;
        }
        if (isset($this->deviceList)) {
            $json['deviceList']   = $this->deviceList;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
