<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Returns information about a specified account.
 */
class Account implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $accountName;

    /**
     * @var string|null
     */
    private $accountNumber;

    /**
     * @var string|null
     */
    private $organizationName;

    /**
     * @var bool|null
     */
    private $isProvisioningAllowed;

    /**
     * @var string[]|null
     */
    private $carriers;

    /**
     * @var string[]|null
     */
    private $features;

    /**
     * @var IpPool[]|null
     */
    private $ipPools;

    /**
     * @var ServicePlan[]|null
     */
    private $servicePlans;

    /**
     * Returns Account Name.
     * The name of the account.
     */
    public function getAccountName(): ?string
    {
        return $this->accountName;
    }

    /**
     * Sets Account Name.
     * The name of the account.
     *
     * @maps accountName
     */
    public function setAccountName(?string $accountName): void
    {
        $this->accountName = $accountName;
    }

    /**
     * Returns Account Number.
     * The billing number of the account.
     */
    public function getAccountNumber(): ?string
    {
        return $this->accountNumber;
    }

    /**
     * Sets Account Number.
     * The billing number of the account.
     *
     * @maps accountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber = $accountNumber;
    }

    /**
     * Returns Organization Name.
     * The name of the organization that the account is part of.
     */
    public function getOrganizationName(): ?string
    {
        return $this->organizationName;
    }

    /**
     * Sets Organization Name.
     * The name of the organization that the account is part of.
     *
     * @maps organizationName
     */
    public function setOrganizationName(?string $organizationName): void
    {
        $this->organizationName = $organizationName;
    }

    /**
     * Returns Is Provisioning Allowed.
     * True if devices can be added to the account and activated with a single request. False if devices
     * must be added to the account before they can be activated.
     */
    public function getIsProvisioningAllowed(): ?bool
    {
        return $this->isProvisioningAllowed;
    }

    /**
     * Sets Is Provisioning Allowed.
     * True if devices can be added to the account and activated with a single request. False if devices
     * must be added to the account before they can be activated.
     *
     * @maps isProvisioningAllowed
     */
    public function setIsProvisioningAllowed(?bool $isProvisioningAllowed): void
    {
        $this->isProvisioningAllowed = $isProvisioningAllowed;
    }

    /**
     * Returns Carriers.
     * The names of all carriers for the account.
     *
     * @return string[]|null
     */
    public function getCarriers(): ?array
    {
        return $this->carriers;
    }

    /**
     * Sets Carriers.
     * The names of all carriers for the account.
     *
     * @maps carriers
     *
     * @param string[]|null $carriers
     */
    public function setCarriers(?array $carriers): void
    {
        $this->carriers = $carriers;
    }

    /**
     * Returns Features.
     * The names of features that are enabled for the account.
     *
     * @return string[]|null
     */
    public function getFeatures(): ?array
    {
        return $this->features;
    }

    /**
     * Sets Features.
     * The names of features that are enabled for the account.
     *
     * @maps features
     *
     * @param string[]|null $features
     */
    public function setFeatures(?array $features): void
    {
        $this->features = $features;
    }

    /**
     * Returns Ip Pools.
     * Array of IP pools that are available to the account.
     *
     * @return IpPool[]|null
     */
    public function getIpPools(): ?array
    {
        return $this->ipPools;
    }

    /**
     * Sets Ip Pools.
     * Array of IP pools that are available to the account.
     *
     * @maps iPPools
     *
     * @param IpPool[]|null $ipPools
     */
    public function setIpPools(?array $ipPools): void
    {
        $this->ipPools = $ipPools;
    }

    /**
     * Returns Service Plans.
     * Array of service plans that are available to the account.
     *
     * @return ServicePlan[]|null
     */
    public function getServicePlans(): ?array
    {
        return $this->servicePlans;
    }

    /**
     * Sets Service Plans.
     * Array of service plans that are available to the account.
     *
     * @maps servicePlans
     *
     * @param ServicePlan[]|null $servicePlans
     */
    public function setServicePlans(?array $servicePlans): void
    {
        $this->servicePlans = $servicePlans;
    }

    /**
     * Converts the Account object to a human-readable string representation.
     *
     * @return string The string representation of the Account object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'Account',
            [
                'accountName' => $this->accountName,
                'accountNumber' => $this->accountNumber,
                'organizationName' => $this->organizationName,
                'isProvisioningAllowed' => $this->isProvisioningAllowed,
                'carriers' => $this->carriers,
                'features' => $this->features,
                'ipPools' => $this->ipPools,
                'servicePlans' => $this->servicePlans,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = [
        'accountName',
        'accountNumber',
        'organizationName',
        'isProvisioningAllowed',
        'carriers',
        'features',
        'iPPools',
        'servicePlans'
    ];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->accountName)) {
            $json['accountName']           = $this->accountName;
        }
        if (isset($this->accountNumber)) {
            $json['accountNumber']         = $this->accountNumber;
        }
        if (isset($this->organizationName)) {
            $json['organizationName']      = $this->organizationName;
        }
        if (isset($this->isProvisioningAllowed)) {
            $json['isProvisioningAllowed'] = $this->isProvisioningAllowed;
        }
        if (isset($this->carriers)) {
            $json['carriers']              = $this->carriers;
        }
        if (isset($this->features)) {
            $json['features']              = $this->features;
        }
        if (isset($this->ipPools)) {
            $json['iPPools']               = $this->ipPools;
        }
        if (isset($this->servicePlans)) {
            $json['servicePlans']          = $this->servicePlans;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
