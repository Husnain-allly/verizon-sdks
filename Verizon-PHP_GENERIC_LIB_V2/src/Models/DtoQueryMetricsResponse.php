<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

class DtoQueryMetricsResponse implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $critical;

    /**
     * @var int|null
     */
    private $major;

    /**
     * @var int|null
     */
    private $minor;

    /**
     * @var int|null
     */
    private $noalert;

    /**
     * @var int|null
     */
    private $total;

    /**
     * @var int|null
     */
    private $deltacritical;

    /**
     * @var int|null
     */
    private $deltamajor;

    /**
     * @var int|null
     */
    private $deltaminor;

    /**
     * @var int|null
     */
    private $deltanoalert;

    /**
     * Returns Critical.
     * The number of critical alerts in the queried time period
     */
    public function getCritical(): ?int
    {
        return $this->critical;
    }

    /**
     * Sets Critical.
     * The number of critical alerts in the queried time period
     *
     * @maps critical
     */
    public function setCritical(?int $critical): void
    {
        $this->critical = $critical;
    }

    /**
     * Returns Major.
     * The number of major alerts in the queried time period
     */
    public function getMajor(): ?int
    {
        return $this->major;
    }

    /**
     * Sets Major.
     * The number of major alerts in the queried time period
     *
     * @maps major
     */
    public function setMajor(?int $major): void
    {
        $this->major = $major;
    }

    /**
     * Returns Minor.
     * The number of minor alerts in the queried time period
     */
    public function getMinor(): ?int
    {
        return $this->minor;
    }

    /**
     * Sets Minor.
     * The number of minor alerts in the queried time period
     *
     * @maps minor
     */
    public function setMinor(?int $minor): void
    {
        $this->minor = $minor;
    }

    /**
     * Returns Noalert.
     * The number of sensor reports containing no  alerts in the queried time period
     */
    public function getNoalert(): ?int
    {
        return $this->noalert;
    }

    /**
     * Sets Noalert.
     * The number of sensor reports containing no  alerts in the queried time period
     *
     * @maps noalert
     */
    public function setNoalert(?int $noalert): void
    {
        $this->noalert = $noalert;
    }

    /**
     * Returns Total.
     * The total number of alerts in the queried time period
     */
    public function getTotal(): ?int
    {
        return $this->total;
    }

    /**
     * Sets Total.
     * The total number of alerts in the queried time period
     *
     * @maps total
     */
    public function setTotal(?int $total): void
    {
        $this->total = $total;
    }

    /**
     * Returns Deltacritical.
     * The change in the number of critical alerts in the queried time period
     */
    public function getDeltacritical(): ?int
    {
        return $this->deltacritical;
    }

    /**
     * Sets Deltacritical.
     * The change in the number of critical alerts in the queried time period
     *
     * @maps deltacritical
     */
    public function setDeltacritical(?int $deltacritical): void
    {
        $this->deltacritical = $deltacritical;
    }

    /**
     * Returns Deltamajor.
     * The change in the number of major alerts in the queried time period
     */
    public function getDeltamajor(): ?int
    {
        return $this->deltamajor;
    }

    /**
     * Sets Deltamajor.
     * The change in the number of major alerts in the queried time period
     *
     * @maps deltamajor
     */
    public function setDeltamajor(?int $deltamajor): void
    {
        $this->deltamajor = $deltamajor;
    }

    /**
     * Returns Deltaminor.
     * The change in the number of minor alerts in the queried time period
     */
    public function getDeltaminor(): ?int
    {
        return $this->deltaminor;
    }

    /**
     * Sets Deltaminor.
     * The change in the number of minor alerts in the queried time period
     *
     * @maps deltaminor
     */
    public function setDeltaminor(?int $deltaminor): void
    {
        $this->deltaminor = $deltaminor;
    }

    /**
     * Returns Deltanoalert.
     * The change in the number of sensor reports containing no alerts in the queried time period
     */
    public function getDeltanoalert(): ?int
    {
        return $this->deltanoalert;
    }

    /**
     * Sets Deltanoalert.
     * The change in the number of sensor reports containing no alerts in the queried time period
     *
     * @maps deltanoalert
     */
    public function setDeltanoalert(?int $deltanoalert): void
    {
        $this->deltanoalert = $deltanoalert;
    }

    /**
     * Converts the DtoQueryMetricsResponse object to a human-readable string representation.
     *
     * @return string The string representation of the DtoQueryMetricsResponse object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'DtoQueryMetricsResponse',
            [
                'critical' => $this->critical,
                'major' => $this->major,
                'minor' => $this->minor,
                'noalert' => $this->noalert,
                'total' => $this->total,
                'deltacritical' => $this->deltacritical,
                'deltamajor' => $this->deltamajor,
                'deltaminor' => $this->deltaminor,
                'deltanoalert' => $this->deltanoalert
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->critical)) {
            $json['critical']      = $this->critical;
        }
        if (isset($this->major)) {
            $json['major']         = $this->major;
        }
        if (isset($this->minor)) {
            $json['minor']         = $this->minor;
        }
        if (isset($this->noalert)) {
            $json['noalert']       = $this->noalert;
        }
        if (isset($this->total)) {
            $json['total']         = $this->total;
        }
        if (isset($this->deltacritical)) {
            $json['deltacritical'] = $this->deltacritical;
        }
        if (isset($this->deltamajor)) {
            $json['deltamajor']    = $this->deltamajor;
        }
        if (isset($this->deltaminor)) {
            $json['deltaminor']    = $this->deltaminor;
        }
        if (isset($this->deltanoalert)) {
            $json['deltanoalert']  = $this->deltanoalert;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
