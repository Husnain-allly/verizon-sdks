<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models\Builders;

use Core\Utils\CoreHelper;
use VerizonLib\Models\Actionobject;
use VerizonLib\Models\FiltercriteriaObjectCall;
use VerizonLib\Models\PricePlanTrigger;
use VerizonLib\Models\Rateplantype2Condition;

/**
 * Builder for model PricePlanTrigger
 *
 * @see PricePlanTrigger
 */
class PricePlanTriggerBuilder
{
    /**
     * @var PricePlanTrigger
     */
    private $instance;

    private function __construct(PricePlanTrigger $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new Price Plan Trigger Builder object.
     */
    public static function init(): self
    {
        return new self(new PricePlanTrigger());
    }

    /**
     * Sets stand Alone field.
     *
     * @param FiltercriteriaObjectCall|null $value
     */
    public function standAlone(?FiltercriteriaObjectCall $value): self
    {
        $this->instance->setStandAlone($value);
        return $this;
    }

    /**
     * Sets condition field.
     *
     * @param Rateplantype2Condition|null $value
     */
    public function condition(?Rateplantype2Condition $value): self
    {
        $this->instance->setCondition($value);
        return $this;
    }

    /**
     * Sets action field.
     *
     * @param Actionobject|null $value
     */
    public function action(?Actionobject $value): self
    {
        $this->instance->setAction($value);
        return $this;
    }

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function additionalProperty(string $name, $value): self
    {
        $this->instance->addAdditionalProperty($name, $value);
        return $this;
    }

    /**
     * Initializes a new Price Plan Trigger object.
     */
    public function build(): PricePlanTrigger
    {
        return CoreHelper::clone($this->instance);
    }
}
