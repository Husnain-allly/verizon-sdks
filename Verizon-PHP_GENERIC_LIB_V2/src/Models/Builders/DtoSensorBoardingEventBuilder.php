<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models\Builders;

use Core\Utils\CoreHelper;
use VerizonLib\Models\DtoFields;
use VerizonLib\Models\DtoSensorBoardingEvent;

/**
 * Builder for model DtoSensorBoardingEvent
 *
 * @see DtoSensorBoardingEvent
 */
class DtoSensorBoardingEventBuilder
{
    /**
     * @var DtoSensorBoardingEvent
     */
    private $instance;

    private function __construct(DtoSensorBoardingEvent $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new Dto Sensor Boarding Event Builder object.
     */
    public static function init(): self
    {
        return new self(new DtoSensorBoardingEvent());
    }

    /**
     * Sets createdon field.
     *
     * @param \DateTime|null $value
     */
    public function createdon(?\DateTime $value): self
    {
        $this->instance->setCreatedon($value);
        return $this;
    }

    /**
     * Sets errmsg field.
     *
     * @param string|null $value
     */
    public function errmsg(?string $value): self
    {
        $this->instance->setErrmsg($value);
        return $this;
    }

    /**
     * Sets fields field.
     *
     * @param DtoFields|null $value
     */
    public function fields(?DtoFields $value): self
    {
        $this->instance->setFields($value);
        return $this;
    }

    /**
     * Sets state field.
     *
     * @param string|null $value
     */
    public function state(?string $value): self
    {
        $this->instance->setState($value);
        return $this;
    }

    /**
     * Sets transactionid field.
     *
     * @param string|null $value
     */
    public function transactionid(?string $value): self
    {
        $this->instance->setTransactionid($value);
        return $this;
    }

    /**
     * Initializes a new Dto Sensor Boarding Event object.
     */
    public function build(): DtoSensorBoardingEvent
    {
        return CoreHelper::clone($this->instance);
    }
}
