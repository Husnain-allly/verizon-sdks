<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

class M2MV1IntelligenceWirelessCoverageRequest implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $accountName;

    /**
     * @var string|null
     */
    private $requestType;

    /**
     * @var string|null
     */
    private $locationType;

    /**
     * @var Locations1|null
     */
    private $locations;

    /**
     * @var NetworkTypeObject[]|null
     */
    private $networkTypesList;

    /**
     * Returns Account Name.
     * Account name.
     */
    public function getAccountName(): ?string
    {
        return $this->accountName;
    }

    /**
     * Sets Account Name.
     * Account name.
     *
     * @maps accountName
     */
    public function setAccountName(?string $accountName): void
    {
        $this->accountName = $accountName;
    }

    /**
     * Returns Request Type.
     * Type of request made. FWA for address qualification and NW for Nationwide coverage.
     */
    public function getRequestType(): ?string
    {
        return $this->requestType;
    }

    /**
     * Sets Request Type.
     * Type of request made. FWA for address qualification and NW for Nationwide coverage.
     *
     * @maps requestType
     */
    public function setRequestType(?string $requestType): void
    {
        $this->requestType = $requestType;
    }

    /**
     * Returns Location Type.
     * Type of location detail.
     */
    public function getLocationType(): ?string
    {
        return $this->locationType;
    }

    /**
     * Sets Location Type.
     * Type of location detail.
     *
     * @maps locationType
     */
    public function setLocationType(?string $locationType): void
    {
        $this->locationType = $locationType;
    }

    /**
     * Returns Locations.
     */
    public function getLocations(): ?Locations1
    {
        return $this->locations;
    }

    /**
     * Sets Locations.
     *
     * @maps locations
     */
    public function setLocations(?Locations1 $locations): void
    {
        $this->locations = $locations;
    }

    /**
     * Returns Network Types List.
     *
     * @return NetworkTypeObject[]|null
     */
    public function getNetworkTypesList(): ?array
    {
        return $this->networkTypesList;
    }

    /**
     * Sets Network Types List.
     *
     * @maps networkTypesList
     *
     * @param NetworkTypeObject[]|null $networkTypesList
     */
    public function setNetworkTypesList(?array $networkTypesList): void
    {
        $this->networkTypesList = $networkTypesList;
    }

    /**
     * Converts the M2MV1IntelligenceWirelessCoverageRequest object to a human-readable string
     * representation.
     *
     * @return string The string representation of the M2MV1IntelligenceWirelessCoverageRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'M2MV1IntelligenceWirelessCoverageRequest',
            [
                'accountName' => $this->accountName,
                'requestType' => $this->requestType,
                'locationType' => $this->locationType,
                'locations' => $this->locations,
                'networkTypesList' => $this->networkTypesList,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['accountName', 'requestType', 'locationType', 'locations', 'networkTypesList'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->accountName)) {
            $json['accountName']      = $this->accountName;
        }
        if (isset($this->requestType)) {
            $json['requestType']      = $this->requestType;
        }
        if (isset($this->locationType)) {
            $json['locationType']     = $this->locationType;
        }
        if (isset($this->locations)) {
            $json['locations']        = $this->locations;
        }
        if (isset($this->networkTypesList)) {
            $json['networkTypesList'] = $this->networkTypesList;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
