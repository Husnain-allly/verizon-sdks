<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

class PrimaryPlaceOfUse implements \JsonSerializable
{
    /**
     * @var CustomerName[]|null
     */
    private $customerName;

    /**
     * @var Address[]|null
     */
    private $address;

    /**
     * Returns Customer Name.
     *
     * @return CustomerName[]|null
     */
    public function getCustomerName(): ?array
    {
        return $this->customerName;
    }

    /**
     * Sets Customer Name.
     *
     * @maps customerName
     *
     * @param CustomerName[]|null $customerName
     */
    public function setCustomerName(?array $customerName): void
    {
        $this->customerName = $customerName;
    }

    /**
     * Returns Address.
     *
     * @return Address[]|null
     */
    public function getAddress(): ?array
    {
        return $this->address;
    }

    /**
     * Sets Address.
     *
     * @maps address
     *
     * @param Address[]|null $address
     */
    public function setAddress(?array $address): void
    {
        $this->address = $address;
    }

    /**
     * Converts the PrimaryPlaceOfUse object to a human-readable string representation.
     *
     * @return string The string representation of the PrimaryPlaceOfUse object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'PrimaryPlaceOfUse',
            ['customerName' => $this->customerName, 'address' => $this->address]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->customerName)) {
            $json['customerName'] = $this->customerName;
        }
        if (isset($this->address)) {
            $json['address']      = $this->address;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
