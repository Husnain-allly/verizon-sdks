<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;
use VerizonLib\Utils\DateTimeHelper;

class UserSmartAlert implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $accountclientid;

    /**
     * @var string|null
     */
    private $billingaccountid;

    /**
     * @var string|null
     */
    private $category;

    /**
     * @var int|null
     */
    private $condition;

    /**
     * @var \DateTime
     */
    private $createdon;

    /**
     * @var string|null
     */
    private $description;

    /**
     * @var string|null
     */
    private $deviceid;

    /**
     * @var string|null
     */
    private $foreignid;

    /**
     * @var string|null
     */
    private $id;

    /**
     * @var bool|null
     */
    private $isacknowledged;

    /**
     * @var bool|null
     */
    private $iscleared;

    /**
     * @var bool|null
     */
    private $isdisabled;

    /**
     * @var \DateTime
     */
    private $lastupdated;

    /**
     * @var string|null
     */
    private $name;

    /**
     * @var string|null
     */
    private $ruleid;

    /**
     * @var string|null
     */
    private $severity;

    /**
     * @var string|null
     */
    private $state;

    /**
     * @var string|null
     */
    private $template;

    /**
     * @var string|null
     */
    private $version;

    /**
     * @var string
     */
    private $versionid;

    /**
     * @param \DateTime $createdon
     * @param \DateTime $lastupdated
     * @param string $versionid
     */
    public function __construct(\DateTime $createdon, \DateTime $lastupdated, string $versionid)
    {
        $this->createdon = $createdon;
        $this->lastupdated = $lastupdated;
        $this->versionid = $versionid;
    }

    /**
     * Returns Accountclientid.
     * Not used in this release, future functionality
     */
    public function getAccountclientid(): ?string
    {
        return $this->accountclientid;
    }

    /**
     * Sets Accountclientid.
     * Not used in this release, future functionality
     *
     * @maps accountclientid
     */
    public function setAccountclientid(?string $accountclientid): void
    {
        $this->accountclientid = $accountclientid;
    }

    /**
     * Returns Billingaccountid.
     * The billing account ID. This is the same value as the Account ID
     */
    public function getBillingaccountid(): ?string
    {
        return $this->billingaccountid;
    }

    /**
     * Sets Billingaccountid.
     * The billing account ID. This is the same value as the Account ID
     *
     * @maps billingaccountid
     */
    public function setBillingaccountid(?string $billingaccountid): void
    {
        $this->billingaccountid = $billingaccountid;
    }

    /**
     * Returns Category.
     * The type of alert and will be either `telemetry` or `infrastructure`
     */
    public function getCategory(): ?string
    {
        return $this->category;
    }

    /**
     * Sets Category.
     * The type of alert and will be either `telemetry` or `infrastructure`
     *
     * @maps category
     */
    public function setCategory(?string $category): void
    {
        $this->category = $category;
    }

    /**
     * Returns Condition.
     * The condition or threshold for an alert
     */
    public function getCondition(): ?int
    {
        return $this->condition;
    }

    /**
     * Sets Condition.
     * The condition or threshold for an alert
     *
     * @maps condition
     */
    public function setCondition(?int $condition): void
    {
        $this->condition = $condition;
    }

    /**
     * Returns Createdon.
     * Timestamp of the record
     */
    public function getCreatedon(): \DateTime
    {
        return $this->createdon;
    }

    /**
     * Sets Createdon.
     * Timestamp of the record
     *
     * @required
     * @maps createdon
     * @factory \VerizonLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setCreatedon(\DateTime $createdon): void
    {
        $this->createdon = $createdon;
    }

    /**
     * Returns Description.
     * a short description
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     * a short description
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Deviceid.
     * This is a UUID value of the device created when the device is onboarded
     */
    public function getDeviceid(): ?string
    {
        return $this->deviceid;
    }

    /**
     * Sets Deviceid.
     * This is a UUID value of the device created when the device is onboarded
     *
     * @maps deviceid
     */
    public function setDeviceid(?string $deviceid): void
    {
        $this->deviceid = $deviceid;
    }

    /**
     * Returns Foreignid.
     * UUID of the ECPD account the user belongs to
     */
    public function getForeignid(): ?string
    {
        return $this->foreignid;
    }

    /**
     * Sets Foreignid.
     * UUID of the ECPD account the user belongs to
     *
     * @maps foreignid
     */
    public function setForeignid(?string $foreignid): void
    {
        $this->foreignid = $foreignid;
    }

    /**
     * Returns Id.
     * UUID of the user record, assigned at creation
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * UUID of the user record, assigned at creation
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Isacknowledged.
     * A flag that indicates if the alarm has been acknowledged
     */
    public function getIsacknowledged(): ?bool
    {
        return $this->isacknowledged;
    }

    /**
     * Sets Isacknowledged.
     * A flag that indicates if the alarm has been acknowledged
     *
     * @maps isacknowledged
     */
    public function setIsacknowledged(?bool $isacknowledged): void
    {
        $this->isacknowledged = $isacknowledged;
    }

    /**
     * Returns Iscleared.
     * A flag that indicates if the alarm has been cleared
     */
    public function getIscleared(): ?bool
    {
        return $this->iscleared;
    }

    /**
     * Sets Iscleared.
     * A flag that indicates if the alarm has been cleared
     *
     * @maps iscleared
     */
    public function setIscleared(?bool $iscleared): void
    {
        $this->iscleared = $iscleared;
    }

    /**
     * Returns Isdisabled.
     * A flag that indicates if the alarm has been disabled
     */
    public function getIsdisabled(): ?bool
    {
        return $this->isdisabled;
    }

    /**
     * Sets Isdisabled.
     * A flag that indicates if the alarm has been disabled
     *
     * @maps isdisabled
     */
    public function setIsdisabled(?bool $isdisabled): void
    {
        $this->isdisabled = $isdisabled;
    }

    /**
     * Returns Lastupdated.
     * Timestamp of the record
     */
    public function getLastupdated(): \DateTime
    {
        return $this->lastupdated;
    }

    /**
     * Sets Lastupdated.
     * Timestamp of the record
     *
     * @required
     * @maps lastupdated
     * @factory \VerizonLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setLastupdated(\DateTime $lastupdated): void
    {
        $this->lastupdated = $lastupdated;
    }

    /**
     * Returns Name.
     * User defined name of the record
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * User defined name of the record
     *
     * @maps name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Ruleid.
     * The UUID of a rule for alerts
     */
    public function getRuleid(): ?string
    {
        return $this->ruleid;
    }

    /**
     * Sets Ruleid.
     * The UUID of a rule for alerts
     *
     * @maps ruleid
     */
    public function setRuleid(?string $ruleid): void
    {
        $this->ruleid = $ruleid;
    }

    /**
     * Returns Severity.
     * The threshold value to trigger an alert and will be Critical, Major or Minor
     */
    public function getSeverity(): ?string
    {
        return $this->severity;
    }

    /**
     * Sets Severity.
     * The threshold value to trigger an alert and will be Critical, Major or Minor
     *
     * @maps severity
     */
    public function setSeverity(?string $severity): void
    {
        $this->severity = $severity;
    }

    /**
     * Returns State.
     * The current status of the device or transaction and will be `success` or `failed`
     */
    public function getState(): ?string
    {
        return $this->state;
    }

    /**
     * Sets State.
     * The current status of the device or transaction and will be `success` or `failed`
     *
     * @maps state
     */
    public function setState(?string $state): void
    {
        $this->state = $state;
    }

    /**
     * Returns Template.
     * template of the rule which triggered a given alert
     */
    public function getTemplate(): ?string
    {
        return $this->template;
    }

    /**
     * Sets Template.
     * template of the rule which triggered a given alert
     *
     * @maps template
     */
    public function setTemplate(?string $template): void
    {
        $this->template = $template;
    }

    /**
     * Returns Version.
     * The resource version
     */
    public function getVersion(): ?string
    {
        return $this->version;
    }

    /**
     * Sets Version.
     * The resource version
     *
     * @maps version
     */
    public function setVersion(?string $version): void
    {
        $this->version = $version;
    }

    /**
     * Returns Versionid.
     * The UUID of the resource version
     */
    public function getVersionid(): string
    {
        return $this->versionid;
    }

    /**
     * Sets Versionid.
     * The UUID of the resource version
     *
     * @required
     * @maps versionid
     */
    public function setVersionid(string $versionid): void
    {
        $this->versionid = $versionid;
    }

    /**
     * Converts the UserSmartAlert object to a human-readable string representation.
     *
     * @return string The string representation of the UserSmartAlert object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'UserSmartAlert',
            [
                'accountclientid' => $this->accountclientid,
                'billingaccountid' => $this->billingaccountid,
                'category' => $this->category,
                'condition' => $this->condition,
                'createdon' => $this->createdon,
                'description' => $this->description,
                'deviceid' => $this->deviceid,
                'foreignid' => $this->foreignid,
                'id' => $this->id,
                'isacknowledged' => $this->isacknowledged,
                'iscleared' => $this->iscleared,
                'isdisabled' => $this->isdisabled,
                'lastupdated' => $this->lastupdated,
                'name' => $this->name,
                'ruleid' => $this->ruleid,
                'severity' => $this->severity,
                'state' => $this->state,
                'template' => $this->template,
                'version' => $this->version,
                'versionid' => $this->versionid
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->accountclientid)) {
            $json['accountclientid']  = $this->accountclientid;
        }
        if (isset($this->billingaccountid)) {
            $json['billingaccountid'] = $this->billingaccountid;
        }
        if (isset($this->category)) {
            $json['category']         = $this->category;
        }
        if (isset($this->condition)) {
            $json['condition']        = $this->condition;
        }
        $json['createdon']            = DateTimeHelper::toRfc3339DateTime($this->createdon);
        if (isset($this->description)) {
            $json['description']      = $this->description;
        }
        if (isset($this->deviceid)) {
            $json['deviceid']         = $this->deviceid;
        }
        if (isset($this->foreignid)) {
            $json['foreignid']        = $this->foreignid;
        }
        if (isset($this->id)) {
            $json['id']               = $this->id;
        }
        if (isset($this->isacknowledged)) {
            $json['isacknowledged']   = $this->isacknowledged;
        }
        if (isset($this->iscleared)) {
            $json['iscleared']        = $this->iscleared;
        }
        if (isset($this->isdisabled)) {
            $json['isdisabled']       = $this->isdisabled;
        }
        $json['lastupdated']          = DateTimeHelper::toRfc3339DateTime($this->lastupdated);
        if (isset($this->name)) {
            $json['name']             = $this->name;
        }
        if (isset($this->ruleid)) {
            $json['ruleid']           = $this->ruleid;
        }
        if (isset($this->severity)) {
            $json['severity']         = $this->severity;
        }
        if (isset($this->state)) {
            $json['state']            = $this->state;
        }
        if (isset($this->template)) {
            $json['template']         = $this->template;
        }
        if (isset($this->version)) {
            $json['version']          = $this->version;
        }
        $json['versionid']            = $this->versionid;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
