<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Response to query the most recent data for Key Performance Indicators (KPIs) like network
 * availability, MEC hostnames and more.
 */
class MecPerformanceMetrics implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $queryStatus;

    /**
     * @var string|null
     */
    private $start;

    /**
     * @var string|null
     */
    private $end;

    /**
     * @var MecPerformanceQueryResult[]|null
     */
    private $queryResult;

    /**
     * Returns Query Status.
     * Success or Failed.
     */
    public function getQueryStatus(): ?string
    {
        return $this->queryStatus;
    }

    /**
     * Sets Query Status.
     * Success or Failed.
     *
     * @maps QueryStatus
     */
    public function setQueryStatus(?string $queryStatus): void
    {
        $this->queryStatus = $queryStatus;
    }

    /**
     * Returns Start.
     * Timestamp of the query's start, format:mm/dd/yyyy,hr:min:sec.
     */
    public function getStart(): ?string
    {
        return $this->start;
    }

    /**
     * Sets Start.
     * Timestamp of the query's start, format:mm/dd/yyyy,hr:min:sec.
     *
     * @maps Start
     */
    public function setStart(?string $start): void
    {
        $this->start = $start;
    }

    /**
     * Returns End.
     * Timestamp of the query's end , format:mm/dd/yyyy, hr:min:sec.
     */
    public function getEnd(): ?string
    {
        return $this->end;
    }

    /**
     * Sets End.
     * Timestamp of the query's end , format:mm/dd/yyyy, hr:min:sec.
     *
     * @maps End
     */
    public function setEnd(?string $end): void
    {
        $this->end = $end;
    }

    /**
     * Returns Query Result.
     * MEC performance query result.
     *
     * @return MecPerformanceQueryResult[]|null
     */
    public function getQueryResult(): ?array
    {
        return $this->queryResult;
    }

    /**
     * Sets Query Result.
     * MEC performance query result.
     *
     * @maps QueryResult
     *
     * @param MecPerformanceQueryResult[]|null $queryResult
     */
    public function setQueryResult(?array $queryResult): void
    {
        $this->queryResult = $queryResult;
    }

    /**
     * Converts the MecPerformanceMetrics object to a human-readable string representation.
     *
     * @return string The string representation of the MecPerformanceMetrics object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'MecPerformanceMetrics',
            [
                'queryStatus' => $this->queryStatus,
                'start' => $this->start,
                'end' => $this->end,
                'queryResult' => $this->queryResult,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['QueryStatus', 'Start', 'End', 'QueryResult'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->queryStatus)) {
            $json['QueryStatus'] = $this->queryStatus;
        }
        if (isset($this->start)) {
            $json['Start']       = $this->start;
        }
        if (isset($this->end)) {
            $json['End']         = $this->end;
        }
        if (isset($this->queryResult)) {
            $json['QueryResult'] = $this->queryResult;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
