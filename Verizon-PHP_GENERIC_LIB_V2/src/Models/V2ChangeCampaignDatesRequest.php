<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;
use VerizonLib\Utils\DateTimeHelper;

/**
 * New dates and time windows.
 */
class V2ChangeCampaignDatesRequest implements \JsonSerializable
{
    /**
     * @var \DateTime
     */
    private $startDate;

    /**
     * @var \DateTime
     */
    private $endDate;

    /**
     * @var \DateTime|null
     */
    private $downloadAfterDate;

    /**
     * @var V2TimeWindow[]|null
     */
    private $downloadTimeWindowList;

    /**
     * @var \DateTime|null
     */
    private $installAfterDate;

    /**
     * @var V2TimeWindow[]|null
     */
    private $installTimeWindowList;

    /**
     * @param \DateTime $startDate
     * @param \DateTime $endDate
     */
    public function __construct(\DateTime $startDate, \DateTime $endDate)
    {
        $this->startDate = $startDate;
        $this->endDate = $endDate;
    }

    /**
     * Returns Start Date.
     * Campaign start date.
     */
    public function getStartDate(): \DateTime
    {
        return $this->startDate;
    }

    /**
     * Sets Start Date.
     * Campaign start date.
     *
     * @required
     * @maps startDate
     * @factory \VerizonLib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setStartDate(\DateTime $startDate): void
    {
        $this->startDate = $startDate;
    }

    /**
     * Returns End Date.
     * Campaign end date.
     */
    public function getEndDate(): \DateTime
    {
        return $this->endDate;
    }

    /**
     * Sets End Date.
     * Campaign end date.
     *
     * @required
     * @maps endDate
     * @factory \VerizonLib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setEndDate(\DateTime $endDate): void
    {
        $this->endDate = $endDate;
    }

    /**
     * Returns Download After Date.
     * Specifies starting date client should download package. If null, client will download as soon as
     * possible.
     */
    public function getDownloadAfterDate(): ?\DateTime
    {
        return $this->downloadAfterDate;
    }

    /**
     * Sets Download After Date.
     * Specifies starting date client should download package. If null, client will download as soon as
     * possible.
     *
     * @maps downloadAfterDate
     * @factory \VerizonLib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setDownloadAfterDate(?\DateTime $downloadAfterDate): void
    {
        $this->downloadAfterDate = $downloadAfterDate;
    }

    /**
     * Returns Download Time Window List.
     * List of allowed download time windows. Removing of existing windows is not allowed.
     *
     * @return V2TimeWindow[]|null
     */
    public function getDownloadTimeWindowList(): ?array
    {
        return $this->downloadTimeWindowList;
    }

    /**
     * Sets Download Time Window List.
     * List of allowed download time windows. Removing of existing windows is not allowed.
     *
     * @maps downloadTimeWindowList
     *
     * @param V2TimeWindow[]|null $downloadTimeWindowList
     */
    public function setDownloadTimeWindowList(?array $downloadTimeWindowList): void
    {
        $this->downloadTimeWindowList = $downloadTimeWindowList;
    }

    /**
     * Returns Install After Date.
     * Client will install package after date. If null, client will install as soon as possible.
     */
    public function getInstallAfterDate(): ?\DateTime
    {
        return $this->installAfterDate;
    }

    /**
     * Sets Install After Date.
     * Client will install package after date. If null, client will install as soon as possible.
     *
     * @maps installAfterDate
     * @factory \VerizonLib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setInstallAfterDate(?\DateTime $installAfterDate): void
    {
        $this->installAfterDate = $installAfterDate;
    }

    /**
     * Returns Install Time Window List.
     * List of allowed install time windows. Removing of existing windows is not allowed.
     *
     * @return V2TimeWindow[]|null
     */
    public function getInstallTimeWindowList(): ?array
    {
        return $this->installTimeWindowList;
    }

    /**
     * Sets Install Time Window List.
     * List of allowed install time windows. Removing of existing windows is not allowed.
     *
     * @maps installTimeWindowList
     *
     * @param V2TimeWindow[]|null $installTimeWindowList
     */
    public function setInstallTimeWindowList(?array $installTimeWindowList): void
    {
        $this->installTimeWindowList = $installTimeWindowList;
    }

    /**
     * Converts the V2ChangeCampaignDatesRequest object to a human-readable string representation.
     *
     * @return string The string representation of the V2ChangeCampaignDatesRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'V2ChangeCampaignDatesRequest',
            [
                'startDate' => $this->startDate,
                'endDate' => $this->endDate,
                'downloadAfterDate' => $this->downloadAfterDate,
                'downloadTimeWindowList' => $this->downloadTimeWindowList,
                'installAfterDate' => $this->installAfterDate,
                'installTimeWindowList' => $this->installTimeWindowList,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = [
        'startDate',
        'endDate',
        'downloadAfterDate',
        'downloadTimeWindowList',
        'installAfterDate',
        'installTimeWindowList'
    ];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['startDate']                  = DateTimeHelper::toSimpleDate($this->startDate);
        $json['endDate']                    = DateTimeHelper::toSimpleDate($this->endDate);
        if (isset($this->downloadAfterDate)) {
            $json['downloadAfterDate']      = DateTimeHelper::toSimpleDate($this->downloadAfterDate);
        }
        if (isset($this->downloadTimeWindowList)) {
            $json['downloadTimeWindowList'] = $this->downloadTimeWindowList;
        }
        if (isset($this->installAfterDate)) {
            $json['installAfterDate']       = DateTimeHelper::toSimpleDate($this->installAfterDate);
        }
        if (isset($this->installTimeWindowList)) {
            $json['installTimeWindowList']  = $this->installTimeWindowList;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
