<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Make changes to a device group, including changing the name and description, and adding or removing
 * devices.
 */
class DeviceGroupUpdateRequest implements \JsonSerializable
{
    /**
     * @var DeviceId[]|null
     */
    private $devicesToAdd;

    /**
     * @var DeviceId[]|null
     */
    private $devicesToRemove;

    /**
     * @var string|null
     */
    private $newGroupDescription;

    /**
     * @var string|null
     */
    private $newGroupName;

    /**
     * Returns Devices to Add.
     * Zero or more devices to add to the device group, specified by device ID. The devices will be removed
     * from their current device groups. You can use POST /devices/actions/list to get a list of all
     * devices in the account.
     *
     * @return DeviceId[]|null
     */
    public function getDevicesToAdd(): ?array
    {
        return $this->devicesToAdd;
    }

    /**
     * Sets Devices to Add.
     * Zero or more devices to add to the device group, specified by device ID. The devices will be removed
     * from their current device groups. You can use POST /devices/actions/list to get a list of all
     * devices in the account.
     *
     * @maps devicesToAdd
     *
     * @param DeviceId[]|null $devicesToAdd
     */
    public function setDevicesToAdd(?array $devicesToAdd): void
    {
        $this->devicesToAdd = $devicesToAdd;
    }

    /**
     * Returns Devices to Remove.
     * Zero or more devices to remove from the device group, specified by device ID. The devices will be
     * added to the default device group.
     *
     * @return DeviceId[]|null
     */
    public function getDevicesToRemove(): ?array
    {
        return $this->devicesToRemove;
    }

    /**
     * Sets Devices to Remove.
     * Zero or more devices to remove from the device group, specified by device ID. The devices will be
     * added to the default device group.
     *
     * @maps devicesToRemove
     *
     * @param DeviceId[]|null $devicesToRemove
     */
    public function setDevicesToRemove(?array $devicesToRemove): void
    {
        $this->devicesToRemove = $devicesToRemove;
    }

    /**
     * Returns New Group Description.
     * A new description for the device group. Do not include this parameter to leave the group description
     * unchanged.
     */
    public function getNewGroupDescription(): ?string
    {
        return $this->newGroupDescription;
    }

    /**
     * Sets New Group Description.
     * A new description for the device group. Do not include this parameter to leave the group description
     * unchanged.
     *
     * @maps newGroupDescription
     */
    public function setNewGroupDescription(?string $newGroupDescription): void
    {
        $this->newGroupDescription = $newGroupDescription;
    }

    /**
     * Returns New Group Name.
     * A new name for the device group. Do not include this parameter if you want to leave the group name
     * unchanged.
     */
    public function getNewGroupName(): ?string
    {
        return $this->newGroupName;
    }

    /**
     * Sets New Group Name.
     * A new name for the device group. Do not include this parameter if you want to leave the group name
     * unchanged.
     *
     * @maps newGroupName
     */
    public function setNewGroupName(?string $newGroupName): void
    {
        $this->newGroupName = $newGroupName;
    }

    /**
     * Converts the DeviceGroupUpdateRequest object to a human-readable string representation.
     *
     * @return string The string representation of the DeviceGroupUpdateRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'DeviceGroupUpdateRequest',
            [
                'devicesToAdd' => $this->devicesToAdd,
                'devicesToRemove' => $this->devicesToRemove,
                'newGroupDescription' => $this->newGroupDescription,
                'newGroupName' => $this->newGroupName,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['devicesToAdd', 'devicesToRemove', 'newGroupDescription', 'newGroupName'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->devicesToAdd)) {
            $json['devicesToAdd']        = $this->devicesToAdd;
        }
        if (isset($this->devicesToRemove)) {
            $json['devicesToRemove']     = $this->devicesToRemove;
        }
        if (isset($this->newGroupDescription)) {
            $json['newGroupDescription'] = $this->newGroupDescription;
        }
        if (isset($this->newGroupName)) {
            $json['newGroupName']        = $this->newGroupName;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
