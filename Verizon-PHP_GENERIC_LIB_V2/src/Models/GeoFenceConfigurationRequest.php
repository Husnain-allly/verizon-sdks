<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Request for /api/v1/application/configurations/geofence POST endpoint. It requires the vendorId,
 * geofence, messages and isActive fields to be populated.
 */
class GeoFenceConfigurationRequest implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $name;

    /**
     * @var string|null
     */
    private $description;

    /**
     * @var EtxGeofence
     */
    private $geoFence;

    /**
     * @var array[]
     */
    private $messages;

    /**
     * @var bool
     */
    private $isActive;

    /**
     * @param EtxGeofence $geoFence
     * @param array[] $messages
     * @param bool $isActive
     */
    public function __construct(EtxGeofence $geoFence, array $messages, bool $isActive)
    {
        $this->geoFence = $geoFence;
        $this->messages = $messages;
        $this->isActive = $isActive;
    }

    /**
     * Returns Name.
     * Name of the configuration.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * Name of the configuration.
     *
     * @maps name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Description.
     * Description of the configuration.
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     * Description of the configuration.
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Geo Fence.
     * The GeoJSON representation of geofence. Geofence supports the following geometry types: LineString,
     * Polygon, MultiLineString, and MultiPolygon. The system only supports a single Feature in the
     * FeatureCollection, so only one Line, Polygon, MultiLine or MultiPolygon can be defined within one
     * Geofencing configuration.
     */
    public function getGeoFence(): EtxGeofence
    {
        return $this->geoFence;
    }

    /**
     * Sets Geo Fence.
     * The GeoJSON representation of geofence. Geofence supports the following geometry types: LineString,
     * Polygon, MultiLineString, and MultiPolygon. The system only supports a single Feature in the
     * FeatureCollection, so only one Line, Polygon, MultiLine or MultiPolygon can be defined within one
     * Geofencing configuration.
     *
     * @required
     * @maps geoFence
     */
    public function setGeoFence(EtxGeofence $geoFence): void
    {
        $this->geoFence = $geoFence;
    }

    /**
     * Returns Messages.
     * List of predefined messages that belongs to the geofence. These are the messages that are sent out
     * by the system when the Trigger Condition for the message is met.
     *
     * @return array[]
     */
    public function getMessages(): array
    {
        return $this->messages;
    }

    /**
     * Sets Messages.
     * List of predefined messages that belongs to the geofence. These are the messages that are sent out
     * by the system when the Trigger Condition for the message is met.
     *
     * @required
     * @maps messages
     *
     * @param array[] $messages
     */
    public function setMessages(array $messages): void
    {
        $this->messages = $messages;
    }

    /**
     * Returns Is Active.
     */
    public function getIsActive(): bool
    {
        return $this->isActive;
    }

    /**
     * Sets Is Active.
     *
     * @required
     * @maps isActive
     */
    public function setIsActive(bool $isActive): void
    {
        $this->isActive = $isActive;
    }

    /**
     * Converts the GeoFenceConfigurationRequest object to a human-readable string representation.
     *
     * @return string The string representation of the GeoFenceConfigurationRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'GeoFenceConfigurationRequest',
            [
                'name' => $this->name,
                'description' => $this->description,
                'geoFence' => $this->geoFence,
                'messages' => $this->messages,
                'isActive' => $this->isActive
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->name)) {
            $json['name']        = $this->name;
        }
        if (isset($this->description)) {
            $json['description'] = $this->description;
        }
        $json['geoFence']        = $this->geoFence;
        $json['messages']        = $this->messages;
        $json['isActive']        = $this->isActive;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
