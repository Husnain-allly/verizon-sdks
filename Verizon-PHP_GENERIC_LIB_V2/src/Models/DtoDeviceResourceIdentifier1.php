<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Device identifiers, one or more are required
 */
class DtoDeviceResourceIdentifier1 implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $deveui;

    /**
     * @var string|null
     */
    private $deviceid;

    /**
     * @var int|null
     */
    private $esn;

    /**
     * @var string|null
     */
    private $iccid;

    /**
     * @var int|null
     */
    private $imei;

    /**
     * @var int|null
     */
    private $imsi;

    /**
     * @var string|null
     */
    private $mac;

    /**
     * @var string|null
     */
    private $manufacturer;

    /**
     * @var string|null
     */
    private $meid;

    /**
     * @var string|null
     */
    private $msisdn;

    /**
     * @var string|null
     */
    private $nodeUuid;

    /**
     * @var string|null
     */
    private $qrcode;

    /**
     * @var string|null
     */
    private $serial;

    /**
     * @var string|null
     */
    private $id;

    /**
     * Returns Deveui.
     * the IEEE EUI64 address space used to identify a device. It is supplied by the device manufacturer
     */
    public function getDeveui(): ?string
    {
        return $this->deveui;
    }

    /**
     * Sets Deveui.
     * the IEEE EUI64 address space used to identify a device. It is supplied by the device manufacturer
     *
     * @maps deveui
     */
    public function setDeveui(?string $deveui): void
    {
        $this->deveui = $deveui;
    }

    /**
     * Returns Deviceid.
     * This is a UUID value of the device created when the device is onboarded
     */
    public function getDeviceid(): ?string
    {
        return $this->deviceid;
    }

    /**
     * Sets Deviceid.
     * This is a UUID value of the device created when the device is onboarded
     *
     * @maps deviceid
     */
    public function setDeviceid(?string $deviceid): void
    {
        $this->deviceid = $deviceid;
    }

    /**
     * Returns Esn.
     * The Electronic Serial Number (ESN) of the device
     */
    public function getEsn(): ?int
    {
        return $this->esn;
    }

    /**
     * Sets Esn.
     * The Electronic Serial Number (ESN) of the device
     *
     * @maps esn
     */
    public function setEsn(?int $esn): void
    {
        $this->esn = $esn;
    }

    /**
     * Returns Iccid.
     * The 20-digit Integrated Circuit Card ID (SIM card ID)
     */
    public function getIccid(): ?string
    {
        return $this->iccid;
    }

    /**
     * Sets Iccid.
     * The 20-digit Integrated Circuit Card ID (SIM card ID)
     *
     * @maps iccid
     */
    public function setIccid(?string $iccid): void
    {
        $this->iccid = $iccid;
    }

    /**
     * Returns Imei.
     * The 15-digit International Mobile Equipment ID
     */
    public function getImei(): ?int
    {
        return $this->imei;
    }

    /**
     * Sets Imei.
     * The 15-digit International Mobile Equipment ID
     *
     * @maps imei
     */
    public function setImei(?int $imei): void
    {
        $this->imei = $imei;
    }

    /**
     * Returns Imsi.
     * The 64-bit International Mobile Subscriber Identity
     */
    public function getImsi(): ?int
    {
        return $this->imsi;
    }

    /**
     * Sets Imsi.
     * The 64-bit International Mobile Subscriber Identity
     *
     * @maps imsi
     */
    public function setImsi(?int $imsi): void
    {
        $this->imsi = $imsi;
    }

    /**
     * Returns Mac.
     * The Media Access Control address of the device, listed on the device in the format XX-XX-XX-XX-XX-XX
     * or XX:XX:XX:XX:XX:XX
     */
    public function getMac(): ?string
    {
        return $this->mac;
    }

    /**
     * Sets Mac.
     * The Media Access Control address of the device, listed on the device in the format XX-XX-XX-XX-XX-XX
     * or XX:XX:XX:XX:XX:XX
     *
     * @maps mac
     */
    public function setMac(?string $mac): void
    {
        $this->mac = $mac;
    }

    /**
     * Returns Manufacturer.
     * The manufacturer of the device
     */
    public function getManufacturer(): ?string
    {
        return $this->manufacturer;
    }

    /**
     * Sets Manufacturer.
     * The manufacturer of the device
     *
     * @maps manufacturer
     */
    public function setManufacturer(?string $manufacturer): void
    {
        $this->manufacturer = $manufacturer;
    }

    /**
     * Returns Meid.
     * The 56-bit Mobile Equipment ID
     */
    public function getMeid(): ?string
    {
        return $this->meid;
    }

    /**
     * Sets Meid.
     * The 56-bit Mobile Equipment ID
     *
     * @maps meid
     */
    public function setMeid(?string $meid): void
    {
        $this->meid = $meid;
    }

    /**
     * Returns Msisdn.
     * The Mobile Station International Subscriber Directory Number. In the USA, this is 1+ a 10-digit
     * phone number
     */
    public function getMsisdn(): ?string
    {
        return $this->msisdn;
    }

    /**
     * Sets Msisdn.
     * The Mobile Station International Subscriber Directory Number. In the USA, this is 1+ a 10-digit
     * phone number
     *
     * @maps msisdn
     */
    public function setMsisdn(?string $msisdn): void
    {
        $this->msisdn = $msisdn;
    }

    /**
     * Returns Node Uuid.
     * The UUID of the node the device is associated with
     */
    public function getNodeUuid(): ?string
    {
        return $this->nodeUuid;
    }

    /**
     * Sets Node Uuid.
     * The UUID of the node the device is associated with
     *
     * @maps node_uuid
     */
    public function setNodeUuid(?string $nodeUuid): void
    {
        $this->nodeUuid = $nodeUuid;
    }

    /**
     * Returns Qrcode.
     * The numeric value of the Quick Response (QR) code
     */
    public function getQrcode(): ?string
    {
        return $this->qrcode;
    }

    /**
     * Sets Qrcode.
     * The numeric value of the Quick Response (QR) code
     *
     * @maps qrcode
     */
    public function setQrcode(?string $qrcode): void
    {
        $this->qrcode = $qrcode;
    }

    /**
     * Returns Serial.
     * The device's serial number
     */
    public function getSerial(): ?string
    {
        return $this->serial;
    }

    /**
     * Sets Serial.
     * The device's serial number
     *
     * @maps serial
     */
    public function setSerial(?string $serial): void
    {
        $this->serial = $serial;
    }

    /**
     * Returns Id.
     * UUID of the user record, assigned at creation
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * UUID of the user record, assigned at creation
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Converts the DtoDeviceResourceIdentifier1 object to a human-readable string representation.
     *
     * @return string The string representation of the DtoDeviceResourceIdentifier1 object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'DtoDeviceResourceIdentifier1',
            [
                'deveui' => $this->deveui,
                'deviceid' => $this->deviceid,
                'esn' => $this->esn,
                'iccid' => $this->iccid,
                'imei' => $this->imei,
                'imsi' => $this->imsi,
                'mac' => $this->mac,
                'manufacturer' => $this->manufacturer,
                'meid' => $this->meid,
                'msisdn' => $this->msisdn,
                'nodeUuid' => $this->nodeUuid,
                'qrcode' => $this->qrcode,
                'serial' => $this->serial,
                'id' => $this->id
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->deveui)) {
            $json['deveui']       = $this->deveui;
        }
        if (isset($this->deviceid)) {
            $json['deviceid']     = $this->deviceid;
        }
        if (isset($this->esn)) {
            $json['esn']          = $this->esn;
        }
        if (isset($this->iccid)) {
            $json['iccid']        = $this->iccid;
        }
        if (isset($this->imei)) {
            $json['imei']         = $this->imei;
        }
        if (isset($this->imsi)) {
            $json['imsi']         = $this->imsi;
        }
        if (isset($this->mac)) {
            $json['mac']          = $this->mac;
        }
        if (isset($this->manufacturer)) {
            $json['manufacturer'] = $this->manufacturer;
        }
        if (isset($this->meid)) {
            $json['meid']         = $this->meid;
        }
        if (isset($this->msisdn)) {
            $json['msisdn']       = $this->msisdn;
        }
        if (isset($this->nodeUuid)) {
            $json['node_uuid']    = $this->nodeUuid;
        }
        if (isset($this->qrcode)) {
            $json['qrcode']       = $this->qrcode;
        }
        if (isset($this->serial)) {
            $json['serial']       = $this->serial;
        }
        if (isset($this->id)) {
            $json['id']           = $this->id;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
