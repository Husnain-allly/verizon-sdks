<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

class V2TriggersRequest implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $triggerName;

    /**
     * @var string|null
     */
    private $ecpdId;

    /**
     * @var string|null
     */
    private $triggerCategory;

    /**
     * @var DataTrigger4|null
     */
    private $dataTrigger;

    /**
     * @var Notificationarray|null
     */
    private $notification;

    /**
     * @var string|null
     */
    private $notificationType;

    /**
     * @var bool|null
     */
    private $callback;

    /**
     * @var bool|null
     */
    private $emailNotification;

    /**
     * @var string|null
     */
    private $notificationGroupName;

    /**
     * @var int|null
     */
    private $notificationFrequencyFactor;

    /**
     * @var string|null
     */
    private $notificationFrequencyInterval;

    /**
     * @var string|null
     */
    private $externalEmailRecipients;

    /**
     * @var bool|null
     */
    private $smsNotification;

    /**
     * @var Cellphonenumber[]|null
     */
    private $smsNumbers;

    /**
     * @var bool|null
     */
    private $reminder;

    /**
     * @var string|null
     */
    private $severity;

    /**
     * @var string|null
     */
    private $active;

    /**
     * @var AccountLevelFilter|null
     */
    private $filterCriteria;

    /**
     * @var Rateplantype2Condition|null
     */
    private $condition;

    /**
     * @var string|null
     */
    private $action;

    /**
     * @var string|null
     */
    private $accountName;

    /**
     * @var PricePlanTrigger1|null
     */
    private $pricePlanTrigger;

    /**
     * Returns Trigger Name.
     * The user defined name of the trigger
     */
    public function getTriggerName(): ?string
    {
        return $this->triggerName;
    }

    /**
     * Sets Trigger Name.
     * The user defined name of the trigger
     *
     * @maps triggerName
     */
    public function setTriggerName(?string $triggerName): void
    {
        $this->triggerName = $triggerName;
    }

    /**
     * Returns Ecpd Id.
     * The Enterprise Customer Profile Database ID
     */
    public function getEcpdId(): ?string
    {
        return $this->ecpdId;
    }

    /**
     * Sets Ecpd Id.
     * The Enterprise Customer Profile Database ID
     *
     * @maps ecpdId
     */
    public function setEcpdId(?string $ecpdId): void
    {
        $this->ecpdId = $ecpdId;
    }

    /**
     * Returns Trigger Category.
     * The type of trigger being created or modified
     */
    public function getTriggerCategory(): ?string
    {
        return $this->triggerCategory;
    }

    /**
     * Sets Trigger Category.
     * The type of trigger being created or modified
     *
     * @maps triggerCategory
     * @factory \VerizonLib\Models\TriggerCategory::checkValue
     */
    public function setTriggerCategory(?string $triggerCategory): void
    {
        $this->triggerCategory = $triggerCategory;
    }

    /**
     * Returns Data Trigger.
     */
    public function getDataTrigger(): ?DataTrigger4
    {
        return $this->dataTrigger;
    }

    /**
     * Sets Data Trigger.
     *
     * @maps dataTrigger
     */
    public function setDataTrigger(?DataTrigger4 $dataTrigger): void
    {
        $this->dataTrigger = $dataTrigger;
    }

    /**
     * Returns Notification.
     */
    public function getNotification(): ?Notificationarray
    {
        return $this->notification;
    }

    /**
     * Sets Notification.
     *
     * @maps notification
     */
    public function setNotification(?Notificationarray $notification): void
    {
        $this->notification = $notification;
    }

    /**
     * Returns Notification Type.
     */
    public function getNotificationType(): ?string
    {
        return $this->notificationType;
    }

    /**
     * Sets Notification Type.
     *
     * @maps notificationType
     */
    public function setNotificationType(?string $notificationType): void
    {
        $this->notificationType = $notificationType;
    }

    /**
     * Returns Callback.
     */
    public function getCallback(): ?bool
    {
        return $this->callback;
    }

    /**
     * Sets Callback.
     *
     * @maps callback
     */
    public function setCallback(?bool $callback): void
    {
        $this->callback = $callback;
    }

    /**
     * Returns Email Notification.
     */
    public function getEmailNotification(): ?bool
    {
        return $this->emailNotification;
    }

    /**
     * Sets Email Notification.
     *
     * @maps emailNotification
     */
    public function setEmailNotification(?bool $emailNotification): void
    {
        $this->emailNotification = $emailNotification;
    }

    /**
     * Returns Notification Group Name.
     */
    public function getNotificationGroupName(): ?string
    {
        return $this->notificationGroupName;
    }

    /**
     * Sets Notification Group Name.
     *
     * @maps notificationGroupName
     */
    public function setNotificationGroupName(?string $notificationGroupName): void
    {
        $this->notificationGroupName = $notificationGroupName;
    }

    /**
     * Returns Notification Frequency Factor.
     */
    public function getNotificationFrequencyFactor(): ?int
    {
        return $this->notificationFrequencyFactor;
    }

    /**
     * Sets Notification Frequency Factor.
     *
     * @maps notificationFrequencyFactor
     */
    public function setNotificationFrequencyFactor(?int $notificationFrequencyFactor): void
    {
        $this->notificationFrequencyFactor = $notificationFrequencyFactor;
    }

    /**
     * Returns Notification Frequency Interval.
     */
    public function getNotificationFrequencyInterval(): ?string
    {
        return $this->notificationFrequencyInterval;
    }

    /**
     * Sets Notification Frequency Interval.
     *
     * @maps notificationFrequencyInterval
     */
    public function setNotificationFrequencyInterval(?string $notificationFrequencyInterval): void
    {
        $this->notificationFrequencyInterval = $notificationFrequencyInterval;
    }

    /**
     * Returns External Email Recipients.
     */
    public function getExternalEmailRecipients(): ?string
    {
        return $this->externalEmailRecipients;
    }

    /**
     * Sets External Email Recipients.
     *
     * @maps externalEmailRecipients
     */
    public function setExternalEmailRecipients(?string $externalEmailRecipients): void
    {
        $this->externalEmailRecipients = $externalEmailRecipients;
    }

    /**
     * Returns Sms Notification.
     */
    public function getSmsNotification(): ?bool
    {
        return $this->smsNotification;
    }

    /**
     * Sets Sms Notification.
     *
     * @maps smsNotification
     */
    public function setSmsNotification(?bool $smsNotification): void
    {
        $this->smsNotification = $smsNotification;
    }

    /**
     * Returns Sms Numbers.
     *
     * @return Cellphonenumber[]|null
     */
    public function getSmsNumbers(): ?array
    {
        return $this->smsNumbers;
    }

    /**
     * Sets Sms Numbers.
     *
     * @maps smsNumbers
     *
     * @param Cellphonenumber[]|null $smsNumbers
     */
    public function setSmsNumbers(?array $smsNumbers): void
    {
        $this->smsNumbers = $smsNumbers;
    }

    /**
     * Returns Reminder.
     */
    public function getReminder(): ?bool
    {
        return $this->reminder;
    }

    /**
     * Sets Reminder.
     *
     * @maps reminder
     */
    public function setReminder(?bool $reminder): void
    {
        $this->reminder = $reminder;
    }

    /**
     * Returns Severity.
     */
    public function getSeverity(): ?string
    {
        return $this->severity;
    }

    /**
     * Sets Severity.
     *
     * @maps severity
     */
    public function setSeverity(?string $severity): void
    {
        $this->severity = $severity;
    }

    /**
     * Returns Active.
     * A flag to indicate of the trigger is active, true, or not, false
     */
    public function getActive(): ?string
    {
        return $this->active;
    }

    /**
     * Sets Active.
     * A flag to indicate of the trigger is active, true, or not, false
     *
     * @maps active
     * @factory \VerizonLib\Models\Active::checkValue
     */
    public function setActive(?string $active): void
    {
        $this->active = $active;
    }

    /**
     * Returns Filter Criteria.
     */
    public function getFilterCriteria(): ?AccountLevelFilter
    {
        return $this->filterCriteria;
    }

    /**
     * Sets Filter Criteria.
     *
     * @maps filterCriteria
     */
    public function setFilterCriteria(?AccountLevelFilter $filterCriteria): void
    {
        $this->filterCriteria = $filterCriteria;
    }

    /**
     * Returns Condition.
     */
    public function getCondition(): ?Rateplantype2Condition
    {
        return $this->condition;
    }

    /**
     * Sets Condition.
     *
     * @maps condition
     */
    public function setCondition(?Rateplantype2Condition $condition): void
    {
        $this->condition = $condition;
    }

    /**
     * Returns Action.
     * The action taken when trigger conditions are met
     */
    public function getAction(): ?string
    {
        return $this->action;
    }

    /**
     * Sets Action.
     * The action taken when trigger conditions are met
     *
     * @maps action
     * @factory \VerizonLib\Models\AccountLevelAction::checkValue
     */
    public function setAction(?string $action): void
    {
        $this->action = $action;
    }

    /**
     * Returns Account Name.
     * The numeric name of the account and must include leading zeroes
     */
    public function getAccountName(): ?string
    {
        return $this->accountName;
    }

    /**
     * Sets Account Name.
     * The numeric name of the account and must include leading zeroes
     *
     * @maps accountName
     */
    public function setAccountName(?string $accountName): void
    {
        $this->accountName = $accountName;
    }

    /**
     * Returns Price Plan Trigger.
     */
    public function getPricePlanTrigger(): ?PricePlanTrigger1
    {
        return $this->pricePlanTrigger;
    }

    /**
     * Sets Price Plan Trigger.
     *
     * @maps pricePlanTrigger
     */
    public function setPricePlanTrigger(?PricePlanTrigger1 $pricePlanTrigger): void
    {
        $this->pricePlanTrigger = $pricePlanTrigger;
    }

    /**
     * Converts the V2TriggersRequest object to a human-readable string representation.
     *
     * @return string The string representation of the V2TriggersRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'V2TriggersRequest',
            [
                'triggerName' => $this->triggerName,
                'ecpdId' => $this->ecpdId,
                'triggerCategory' => $this->triggerCategory,
                'dataTrigger' => $this->dataTrigger,
                'notification' => $this->notification,
                'notificationType' => $this->notificationType,
                'callback' => $this->callback,
                'emailNotification' => $this->emailNotification,
                'notificationGroupName' => $this->notificationGroupName,
                'notificationFrequencyFactor' => $this->notificationFrequencyFactor,
                'notificationFrequencyInterval' => $this->notificationFrequencyInterval,
                'externalEmailRecipients' => $this->externalEmailRecipients,
                'smsNotification' => $this->smsNotification,
                'smsNumbers' => $this->smsNumbers,
                'reminder' => $this->reminder,
                'severity' => $this->severity,
                'active' => $this->active,
                'filterCriteria' => $this->filterCriteria,
                'condition' => $this->condition,
                'action' => $this->action,
                'accountName' => $this->accountName,
                'pricePlanTrigger' => $this->pricePlanTrigger,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = [
        'triggerName',
        'ecpdId',
        'triggerCategory',
        'dataTrigger',
        'notification',
        'notificationType',
        'callback',
        'emailNotification',
        'notificationGroupName',
        'notificationFrequencyFactor',
        'notificationFrequencyInterval',
        'externalEmailRecipients',
        'smsNotification',
        'smsNumbers',
        'reminder',
        'severity',
        'active',
        'filterCriteria',
        'condition',
        'action',
        'accountName',
        'pricePlanTrigger'
    ];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->triggerName)) {
            $json['triggerName']                   = $this->triggerName;
        }
        if (isset($this->ecpdId)) {
            $json['ecpdId']                        = $this->ecpdId;
        }
        if (isset($this->triggerCategory)) {
            $json['triggerCategory']               = TriggerCategory::checkValue($this->triggerCategory);
        }
        if (isset($this->dataTrigger)) {
            $json['dataTrigger']                   = $this->dataTrigger;
        }
        if (isset($this->notification)) {
            $json['notification']                  = $this->notification;
        }
        if (isset($this->notificationType)) {
            $json['notificationType']              = $this->notificationType;
        }
        if (isset($this->callback)) {
            $json['callback']                      = $this->callback;
        }
        if (isset($this->emailNotification)) {
            $json['emailNotification']             = $this->emailNotification;
        }
        if (isset($this->notificationGroupName)) {
            $json['notificationGroupName']         = $this->notificationGroupName;
        }
        if (isset($this->notificationFrequencyFactor)) {
            $json['notificationFrequencyFactor']   = $this->notificationFrequencyFactor;
        }
        if (isset($this->notificationFrequencyInterval)) {
            $json['notificationFrequencyInterval'] = $this->notificationFrequencyInterval;
        }
        if (isset($this->externalEmailRecipients)) {
            $json['externalEmailRecipients']       = $this->externalEmailRecipients;
        }
        if (isset($this->smsNotification)) {
            $json['smsNotification']               = $this->smsNotification;
        }
        if (isset($this->smsNumbers)) {
            $json['smsNumbers']                    = $this->smsNumbers;
        }
        if (isset($this->reminder)) {
            $json['reminder']                      = $this->reminder;
        }
        if (isset($this->severity)) {
            $json['severity']                      = $this->severity;
        }
        if (isset($this->active)) {
            $json['active']                        = Active::checkValue($this->active);
        }
        if (isset($this->filterCriteria)) {
            $json['filterCriteria']                = $this->filterCriteria;
        }
        if (isset($this->condition)) {
            $json['condition']                     = $this->condition;
        }
        if (isset($this->action)) {
            $json['action']                        = AccountLevelAction::checkValue($this->action);
        }
        if (isset($this->accountName)) {
            $json['accountName']                   = $this->accountName;
        }
        if (isset($this->pricePlanTrigger)) {
            $json['pricePlanTrigger']              = $this->pricePlanTrigger;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
