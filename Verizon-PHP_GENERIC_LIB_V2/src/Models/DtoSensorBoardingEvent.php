<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;
use VerizonLib\Utils\DateTimeHelper;

class DtoSensorBoardingEvent implements \JsonSerializable
{
    /**
     * @var \DateTime|null
     */
    private $createdon;

    /**
     * @var string|null
     */
    private $errmsg;

    /**
     * @var DtoFields|null
     */
    private $fields;

    /**
     * @var string|null
     */
    private $state;

    /**
     * @var string|null
     */
    private $transactionid;

    /**
     * Returns Createdon.
     * Timestamp of the record
     */
    public function getCreatedon(): ?\DateTime
    {
        return $this->createdon;
    }

    /**
     * Sets Createdon.
     * Timestamp of the record
     *
     * @maps createdon
     * @factory \VerizonLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setCreatedon(?\DateTime $createdon): void
    {
        $this->createdon = $createdon;
    }

    /**
     * Returns Errmsg.
     * Error message
     */
    public function getErrmsg(): ?string
    {
        return $this->errmsg;
    }

    /**
     * Sets Errmsg.
     * Error message
     *
     * @maps errmsg
     */
    public function setErrmsg(?string $errmsg): void
    {
        $this->errmsg = $errmsg;
    }

    /**
     * Returns Fields.
     * Fields to return needed by search
     */
    public function getFields(): ?DtoFields
    {
        return $this->fields;
    }

    /**
     * Sets Fields.
     * Fields to return needed by search
     *
     * @maps fields
     */
    public function setFields(?DtoFields $fields): void
    {
        $this->fields = $fields;
    }

    /**
     * Returns State.
     * The current status of the device or transaction and will be `success` or `failed`
     */
    public function getState(): ?string
    {
        return $this->state;
    }

    /**
     * Sets State.
     * The current status of the device or transaction and will be `success` or `failed`
     *
     * @maps state
     */
    public function setState(?string $state): void
    {
        $this->state = $state;
    }

    /**
     * Returns Transactionid.
     * The system-generated UUID of the transaction
     */
    public function getTransactionid(): ?string
    {
        return $this->transactionid;
    }

    /**
     * Sets Transactionid.
     * The system-generated UUID of the transaction
     *
     * @maps transactionid
     */
    public function setTransactionid(?string $transactionid): void
    {
        $this->transactionid = $transactionid;
    }

    /**
     * Converts the DtoSensorBoardingEvent object to a human-readable string representation.
     *
     * @return string The string representation of the DtoSensorBoardingEvent object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'DtoSensorBoardingEvent',
            [
                'createdon' => $this->createdon,
                'errmsg' => $this->errmsg,
                'fields' => $this->fields,
                'state' => $this->state,
                'transactionid' => $this->transactionid
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->createdon)) {
            $json['createdon']     = DateTimeHelper::toRfc3339DateTime($this->createdon);
        }
        if (isset($this->errmsg)) {
            $json['errmsg']        = $this->errmsg;
        }
        if (isset($this->fields)) {
            $json['fields']        = $this->fields;
        }
        if (isset($this->state)) {
            $json['state']         = $this->state;
        }
        if (isset($this->transactionid)) {
            $json['transactionid'] = $this->transactionid;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
