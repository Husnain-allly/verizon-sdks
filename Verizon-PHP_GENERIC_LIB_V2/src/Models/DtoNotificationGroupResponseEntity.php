<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;
use VerizonLib\Utils\DateTimeHelper;

class DtoNotificationGroupResponseEntity implements \JsonSerializable
{
    /**
     * @var \DateTime|null
     */
    private $createdon;

    /**
     * @var string|null
     */
    private $description;

    /**
     * @var string|null
     */
    private $foreignid;

    /**
     * @var string|null
     */
    private $groupemail;

    /**
     * @var string|null
     */
    private $id;

    /**
     * @var \DateTime|null
     */
    private $lastupdated;

    /**
     * @var string|null
     */
    private $name;

    /**
     * @var DtoUserDto[]|null
     */
    private $users;

    /**
     * @var string|null
     */
    private $version;

    /**
     * @var string|null
     */
    private $versionid;

    /**
     * Returns Createdon.
     * Timestamp of the record
     */
    public function getCreatedon(): ?\DateTime
    {
        return $this->createdon;
    }

    /**
     * Sets Createdon.
     * Timestamp of the record
     *
     * @maps createdon
     * @factory \VerizonLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setCreatedon(?\DateTime $createdon): void
    {
        $this->createdon = $createdon;
    }

    /**
     * Returns Description.
     * a short description
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     * a short description
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Foreignid.
     * UUID of the ECPD account the user belongs to
     */
    public function getForeignid(): ?string
    {
        return $this->foreignid;
    }

    /**
     * Sets Foreignid.
     * UUID of the ECPD account the user belongs to
     *
     * @maps foreignid
     */
    public function setForeignid(?string $foreignid): void
    {
        $this->foreignid = $foreignid;
    }

    /**
     * Returns Groupemail.
     * Contact email for the group
     */
    public function getGroupemail(): ?string
    {
        return $this->groupemail;
    }

    /**
     * Sets Groupemail.
     * Contact email for the group
     *
     * @maps groupemail
     */
    public function setGroupemail(?string $groupemail): void
    {
        $this->groupemail = $groupemail;
    }

    /**
     * Returns Id.
     * UUID of the user record, assigned at creation
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * UUID of the user record, assigned at creation
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Lastupdated.
     * Timestamp of the record
     */
    public function getLastupdated(): ?\DateTime
    {
        return $this->lastupdated;
    }

    /**
     * Sets Lastupdated.
     * Timestamp of the record
     *
     * @maps lastupdated
     * @factory \VerizonLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setLastupdated(?\DateTime $lastupdated): void
    {
        $this->lastupdated = $lastupdated;
    }

    /**
     * Returns Name.
     * User defined name of the record
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * User defined name of the record
     *
     * @maps name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Users.
     *
     * @return DtoUserDto[]|null
     */
    public function getUsers(): ?array
    {
        return $this->users;
    }

    /**
     * Sets Users.
     *
     * @maps users
     *
     * @param DtoUserDto[]|null $users
     */
    public function setUsers(?array $users): void
    {
        $this->users = $users;
    }

    /**
     * Returns Version.
     * The resource version
     */
    public function getVersion(): ?string
    {
        return $this->version;
    }

    /**
     * Sets Version.
     * The resource version
     *
     * @maps version
     */
    public function setVersion(?string $version): void
    {
        $this->version = $version;
    }

    /**
     * Returns Versionid.
     * The UUID of the resource version
     */
    public function getVersionid(): ?string
    {
        return $this->versionid;
    }

    /**
     * Sets Versionid.
     * The UUID of the resource version
     *
     * @maps versionid
     */
    public function setVersionid(?string $versionid): void
    {
        $this->versionid = $versionid;
    }

    /**
     * Converts the DtoNotificationGroupResponseEntity object to a human-readable string representation.
     *
     * @return string The string representation of the DtoNotificationGroupResponseEntity object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'DtoNotificationGroupResponseEntity',
            [
                'createdon' => $this->createdon,
                'description' => $this->description,
                'foreignid' => $this->foreignid,
                'groupemail' => $this->groupemail,
                'id' => $this->id,
                'lastupdated' => $this->lastupdated,
                'name' => $this->name,
                'users' => $this->users,
                'version' => $this->version,
                'versionid' => $this->versionid
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->createdon)) {
            $json['createdon']   = DateTimeHelper::toRfc3339DateTime($this->createdon);
        }
        if (isset($this->description)) {
            $json['description'] = $this->description;
        }
        if (isset($this->foreignid)) {
            $json['foreignid']   = $this->foreignid;
        }
        if (isset($this->groupemail)) {
            $json['groupemail']  = $this->groupemail;
        }
        if (isset($this->id)) {
            $json['id']          = $this->id;
        }
        if (isset($this->lastupdated)) {
            $json['lastupdated'] = DateTimeHelper::toRfc3339DateTime($this->lastupdated);
        }
        if (isset($this->name)) {
            $json['name']        = $this->name;
        }
        if (isset($this->users)) {
            $json['users']       = $this->users;
        }
        if (isset($this->version)) {
            $json['version']     = $this->version;
        }
        if (isset($this->versionid)) {
            $json['versionid']   = $this->versionid;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
