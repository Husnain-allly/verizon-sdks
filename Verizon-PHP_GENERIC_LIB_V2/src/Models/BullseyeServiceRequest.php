<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Account number and list of devices.
 */
class BullseyeServiceRequest implements \JsonSerializable
{
    /**
     * @var DeviceServiceRequest[]
     */
    private $deviceList;

    /**
     * @var string
     */
    private $accountNumber;

    /**
     * @param DeviceServiceRequest[] $deviceList
     * @param string $accountNumber
     */
    public function __construct(array $deviceList, string $accountNumber)
    {
        $this->deviceList = $deviceList;
        $this->accountNumber = $accountNumber;
    }

    /**
     * Returns Device List.
     * A list of devices.
     *
     * @return DeviceServiceRequest[]
     */
    public function getDeviceList(): array
    {
        return $this->deviceList;
    }

    /**
     * Sets Device List.
     * A list of devices.
     *
     * @required
     * @maps deviceList
     *
     * @param DeviceServiceRequest[] $deviceList
     */
    public function setDeviceList(array $deviceList): void
    {
        $this->deviceList = $deviceList;
    }

    /**
     * Returns Account Number.
     * A unique identifier for an account.
     */
    public function getAccountNumber(): string
    {
        return $this->accountNumber;
    }

    /**
     * Sets Account Number.
     * A unique identifier for an account.
     *
     * @required
     * @maps accountNumber
     */
    public function setAccountNumber(string $accountNumber): void
    {
        $this->accountNumber = $accountNumber;
    }

    /**
     * Converts the BullseyeServiceRequest object to a human-readable string representation.
     *
     * @return string The string representation of the BullseyeServiceRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'BullseyeServiceRequest',
            [
                'deviceList' => $this->deviceList,
                'accountNumber' => $this->accountNumber,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['deviceList', 'accountNumber'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['deviceList']    = $this->deviceList;
        $json['accountNumber'] = $this->accountNumber;
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
