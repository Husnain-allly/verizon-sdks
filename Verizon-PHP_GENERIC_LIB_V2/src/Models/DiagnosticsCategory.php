<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Various types of information about the device, grouped into categories. Each category object
 * contains the category name and a list of Extended Attribute objects as key-value pairs.
 */
class DiagnosticsCategory implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $categoryName;

    /**
     * @var CustomFields[]|null
     */
    private $extendedAttributes;

    /**
     * Returns Category Name.
     * The name of the category.
     */
    public function getCategoryName(): ?string
    {
        return $this->categoryName;
    }

    /**
     * Sets Category Name.
     * The name of the category.
     *
     * @maps categoryName
     */
    public function setCategoryName(?string $categoryName): void
    {
        $this->categoryName = $categoryName;
    }

    /**
     * Returns Extended Attributes.
     * A list of Extended Attribute objects as key-value pairs.
     *
     * @return CustomFields[]|null
     */
    public function getExtendedAttributes(): ?array
    {
        return $this->extendedAttributes;
    }

    /**
     * Sets Extended Attributes.
     * A list of Extended Attribute objects as key-value pairs.
     *
     * @maps extendedAttributes
     *
     * @param CustomFields[]|null $extendedAttributes
     */
    public function setExtendedAttributes(?array $extendedAttributes): void
    {
        $this->extendedAttributes = $extendedAttributes;
    }

    /**
     * Converts the DiagnosticsCategory object to a human-readable string representation.
     *
     * @return string The string representation of the DiagnosticsCategory object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'DiagnosticsCategory',
            [
                'categoryName' => $this->categoryName,
                'extendedAttributes' => $this->extendedAttributes,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['categoryName', 'extendedAttributes'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->categoryName)) {
            $json['categoryName']       = $this->categoryName;
        }
        if (isset($this->extendedAttributes)) {
            $json['extendedAttributes'] = $this->extendedAttributes;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
