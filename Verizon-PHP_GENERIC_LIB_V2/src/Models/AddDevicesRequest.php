<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

/**
 * Request to add the devices.
 */
class AddDevicesRequest implements \JsonSerializable
{
    /**
     * @var string
     */
    private $state;

    /**
     * @var AccountDeviceList[]
     */
    private $devicesToAdd;

    /**
     * @var string|null
     */
    private $accountName;

    /**
     * @var CustomFields[]|null
     */
    private $customFields;

    /**
     * @var string|null
     */
    private $groupName;

    /**
     * @var string|null
     */
    private $skuNumber;

    /**
     * @var string|null
     */
    private $smsrOid;

    /**
     * @param string $state
     * @param AccountDeviceList[] $devicesToAdd
     */
    public function __construct(string $state, array $devicesToAdd)
    {
        $this->state = $state;
        $this->devicesToAdd = $devicesToAdd;
    }

    /**
     * Returns State.
     * The initial service state for the devices. The only valid state is “Preactive.”
     */
    public function getState(): string
    {
        return $this->state;
    }

    /**
     * Sets State.
     * The initial service state for the devices. The only valid state is “Preactive.”
     *
     * @required
     * @maps state
     */
    public function setState(string $state): void
    {
        $this->state = $state;
    }

    /**
     * Returns Devices to Add.
     * The devices that you want to add.
     *
     * @return AccountDeviceList[]
     */
    public function getDevicesToAdd(): array
    {
        return $this->devicesToAdd;
    }

    /**
     * Sets Devices to Add.
     * The devices that you want to add.
     *
     * @required
     * @maps devicesToAdd
     *
     * @param AccountDeviceList[] $devicesToAdd
     */
    public function setDevicesToAdd(array $devicesToAdd): void
    {
        $this->devicesToAdd = $devicesToAdd;
    }

    /**
     * Returns Account Name.
     * The billing account to which the devices are added.
     */
    public function getAccountName(): ?string
    {
        return $this->accountName;
    }

    /**
     * Sets Account Name.
     * The billing account to which the devices are added.
     *
     * @maps accountName
     */
    public function setAccountName(?string $accountName): void
    {
        $this->accountName = $accountName;
    }

    /**
     * Returns Custom Fields.
     * The names and values for any custom fields that you want set for the devices as they are added to
     * the account.
     *
     * @return CustomFields[]|null
     */
    public function getCustomFields(): ?array
    {
        return $this->customFields;
    }

    /**
     * Sets Custom Fields.
     * The names and values for any custom fields that you want set for the devices as they are added to
     * the account.
     *
     * @maps customFields
     *
     * @param CustomFields[]|null $customFields
     */
    public function setCustomFields(?array $customFields): void
    {
        $this->customFields = $customFields;
    }

    /**
     * Returns Group Name.
     * The name of a device group to add the devices to. They are added to the default device group if you
     * don't include this parameter.
     */
    public function getGroupName(): ?string
    {
        return $this->groupName;
    }

    /**
     * Sets Group Name.
     * The name of a device group to add the devices to. They are added to the default device group if you
     * don't include this parameter.
     *
     * @maps groupName
     */
    public function setGroupName(?string $groupName): void
    {
        $this->groupName = $groupName;
    }

    /**
     * Returns Sku Number.
     * The Stock Keeping Unit (SKU) number of a 4G device type with an embedded SIM.
     */
    public function getSkuNumber(): ?string
    {
        return $this->skuNumber;
    }

    /**
     * Sets Sku Number.
     * The Stock Keeping Unit (SKU) number of a 4G device type with an embedded SIM.
     *
     * @maps skuNumber
     */
    public function setSkuNumber(?string $skuNumber): void
    {
        $this->skuNumber = $skuNumber;
    }

    /**
     * Returns Smsr Oid.
     */
    public function getSmsrOid(): ?string
    {
        return $this->smsrOid;
    }

    /**
     * Sets Smsr Oid.
     *
     * @maps smsrOid
     */
    public function setSmsrOid(?string $smsrOid): void
    {
        $this->smsrOid = $smsrOid;
    }

    /**
     * Converts the AddDevicesRequest object to a human-readable string representation.
     *
     * @return string The string representation of the AddDevicesRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'AddDevicesRequest',
            [
                'state' => $this->state,
                'devicesToAdd' => $this->devicesToAdd,
                'accountName' => $this->accountName,
                'customFields' => $this->customFields,
                'groupName' => $this->groupName,
                'skuNumber' => $this->skuNumber,
                'smsrOid' => $this->smsrOid,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = [
        'state',
        'devicesToAdd',
        'accountName',
        'customFields',
        'groupName',
        'skuNumber',
        'smsrOid'
    ];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['state']            = $this->state;
        $json['devicesToAdd']     = $this->devicesToAdd;
        if (isset($this->accountName)) {
            $json['accountName']  = $this->accountName;
        }
        if (isset($this->customFields)) {
            $json['customFields'] = $this->customFields;
        }
        if (isset($this->groupName)) {
            $json['groupName']    = $this->groupName;
        }
        if (isset($this->skuNumber)) {
            $json['skuNumber']    = $this->skuNumber;
        }
        if (isset($this->smsrOid)) {
            $json['smsrOid']      = $this->smsrOid;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
