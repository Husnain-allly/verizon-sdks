<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\ApiHelper;

class DtoSensorOffBoardingStatusResponse implements \JsonSerializable
{
    /**
     * @var DtoSensorBoardingEvent[]|null
     */
    private $events;

    /**
     * @var bool|null
     */
    private $isstillregistered;

    /**
     * Returns Events.
     *
     * @return DtoSensorBoardingEvent[]|null
     */
    public function getEvents(): ?array
    {
        return $this->events;
    }

    /**
     * Sets Events.
     *
     * @maps events
     *
     * @param DtoSensorBoardingEvent[]|null $events
     */
    public function setEvents(?array $events): void
    {
        $this->events = $events;
    }

    /**
     * Returns Isstillregistered.
     */
    public function getIsstillregistered(): ?bool
    {
        return $this->isstillregistered;
    }

    /**
     * Sets Isstillregistered.
     *
     * @maps isstillregistered
     */
    public function setIsstillregistered(?bool $isstillregistered): void
    {
        $this->isstillregistered = $isstillregistered;
    }

    /**
     * Converts the DtoSensorOffBoardingStatusResponse object to a human-readable string representation.
     *
     * @return string The string representation of the DtoSensorOffBoardingStatusResponse object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'DtoSensorOffBoardingStatusResponse',
            ['events' => $this->events, 'isstillregistered' => $this->isstillregistered]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->events)) {
            $json['events']            = $this->events;
        }
        if (isset($this->isstillregistered)) {
            $json['isstillregistered'] = $this->isstillregistered;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
