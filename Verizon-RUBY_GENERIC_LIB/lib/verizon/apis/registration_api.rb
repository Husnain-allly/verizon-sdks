# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # RegistrationApi
  class RegistrationApi < BaseApi
    # With this API call the user (client) registers its device or software
    # service to the ETX system. Therefore, when a connection is initiated from
    # the device or software service to the ETX system along with the credential
    # provided by this registration call, then the connection will be
    # authorized.
    # - The user can register multiple devices or software services, which can
    # all be used at the same time.
    # - There rules set in the system that limit the type and subtype of the
    # clients that are allowed to be registered under the VendorID. The rules
    # are created based ont he agreement between the Vendor and Verizon.
    # - The user will only be able to register a limited number of devices or
    # software services under the same VendorID. This registration limit is
    # specified by the agreement between the Vendor and Verizon.
    # Note: The user needs to authenticate with their ThingSpace credentials
    # using the Access/Bearer and Session/M2M tokens in order to call this API.
    # @param [ClientRegistrationRequest] body Required parameter: TODO: type
    # description here
    # @return [ApiResponse] Complete http response with raw body and status code.
    def register_etx_device(body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/api/v2/clients/registration',
                                     Server::IMP_SERVER)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'SessionToken')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(ClientRegistrationResponse.method(:from_hash))
                    .is_api_response(true)
                    .local_error('400',
                                 'Invalid Request',
                                 EtxResponseErrorException)
                    .local_error('401',
                                 'Unauthorized Request',
                                 EtxResponseErrorException)
                    .local_error('403',
                                 'Forbidden Request',
                                 EtxResponseErrorException)
                    .local_error('429',
                                 'Too Many Requests',
                                 EtxResponseErrorException)
                    .local_error('503',
                                 'Internal Server Error',
                                 EtxResponseErrorException)
                    .local_error('default',
                                 'Forbidden',
                                 EtxResponseErrorException))
        .execute
    end

    # With this API call the user (client) can:
    # - renew the certificate of a device or software service in the ETX system
    # if the original certificate has expired. If the client's certificate
    # expired or going to expire within 30 days and new certificate will be
    # issued. If the certificate expires more than 30 days, the current
    # certificate will be returned to the client.
    # - complete its device or software service registration to the ETX system
    # if the original registration request was not successful because of a
    # pending certificate generation. Whenever the user receives a "client
    # registration is pending" response (HTTP 202) from POST
    # /clients/registration call. The client should initiate this PUT API call
    # to finish the registration process and get the required certificate.
    # Note: The user needs to authenticate with their ThingSpace credentials
    # using the Access/Bearer and Session/M2M tokens in order to call this API.
    # @param [UUID | String] device_id Required parameter: TODO: type
    # description here
    # @param [String] vendor_id Required parameter: The VendorID set during the
    # Vendor registration call.
    # @param [Object] body Optional parameter: TODO: type description here
    # @return [ApiResponse] Complete http response with raw body and status code.
    def renew_etx_device(device_id,
                         vendor_id,
                         body: nil)
      @api_call
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/api/v2/clients/registration',
                                     Server::IMP_SERVER)
                   .header_param(new_parameter(device_id, key: 'DeviceID')
                                  .is_required(true))
                   .header_param(new_parameter(vendor_id, key: 'VendorID')
                                  .is_required(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(APIHelper.method(:json_serialize))
                   .auth(And.new('thingspace_oauth', 'SessionToken')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(ClientRegistrationResponse.method(:from_hash))
                    .is_api_response(true)
                    .local_error('400',
                                 'Invalid Request',
                                 EtxResponseErrorException)
                    .local_error('401',
                                 'Unauthorized Request',
                                 EtxResponseErrorException)
                    .local_error('403',
                                 'Forbidden Request',
                                 EtxResponseErrorException)
                    .local_error('429',
                                 'Too Many Requests',
                                 EtxResponseErrorException)
                    .local_error('503',
                                 'Internal Server Error',
                                 EtxResponseErrorException)
                    .local_error('default',
                                 'Forbidden',
                                 EtxResponseErrorException))
        .execute
    end

    # With this API call the user (client) can unregister its devices and
    # software services from the ETX system. The unregistered devices and
    # services will no longer be able to use the ETX Message Exchange.
    # Note: The user needs to authenticate with their ThingSpace credentials
    # using the Access/Bearer and Session/M2M tokens in order to call this API.
    # @param [String] vendor_id Required parameter: The VendorID set during the
    # Vendor registration call.
    # @param [Array[UUID | String]] device_i_ds Required parameter: The list of
    # device IDs and software service IDs to be unregistered
    # @return [ApiResponse] Complete http response with raw body and status code.
    def unregister_etx_device(vendor_id,
                              device_i_ds)
      @api_call
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/api/v2/clients/registration',
                                     Server::IMP_SERVER)
                   .header_param(new_parameter(vendor_id, key: 'VendorID')
                                  .is_required(true))
                   .query_param(new_parameter(device_i_ds, key: 'DeviceIDs')
                                 .is_required(true))
                   .auth(And.new('thingspace_oauth', 'SessionToken')))
        .response(new_response_handler
                    .is_response_void(true)
                    .is_api_response(true)
                    .local_error('400',
                                 'Invalid Request',
                                 EtxResponseErrorException)
                    .local_error('401',
                                 'Unauthorized Request',
                                 EtxResponseErrorException)
                    .local_error('403',
                                 'Forbidden Request',
                                 EtxResponseErrorException)
                    .local_error('429',
                                 'Too Many Requests',
                                 EtxResponseErrorException)
                    .local_error('503',
                                 'Internal Server Error',
                                 EtxResponseErrorException)
                    .local_error('default',
                                 'Forbidden',
                                 EtxResponseErrorException))
        .execute
    end

    # With this API call the user can check the certificate of the device. At
    # least one of the DeviceID, IMEI or ICCID is required to make the call.
    # Note: The user needs to authenticate with their ThingSpace credentials
    # using the Access/Bearer and Session/M2M tokens in order to call this API.
    # @param [UUID | String] device_id Optional parameter: TODO: type
    # description here
    # @param [String] imei Optional parameter: TODO: type description here
    # @param [String] iccid Optional parameter: TODO: type description here
    # @return [ApiResponse] Complete http response with raw body and status code.
    def get_etx_device_certificate(device_id: nil,
                                   imei: nil,
                                   iccid: nil)
      @api_call
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/api/v2/clients/registration',
                                     Server::IMP_SERVER)
                   .query_param(new_parameter(device_id, key: 'DeviceID'))
                   .query_param(new_parameter(imei, key: 'IMEI'))
                   .query_param(new_parameter(iccid, key: 'ICCID'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(And.new('thingspace_oauth', 'SessionToken')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(ClientPersistenceResponse.method(:from_hash))
                    .is_api_response(true)
                    .local_error('400',
                                 'Invalid request',
                                 EtxResponseErrorException)
                    .local_error('401',
                                 'Unauthorized',
                                 EtxResponseErrorException)
                    .local_error('403',
                                 'Forbidden Request',
                                 EtxResponseErrorException)
                    .local_error('404',
                                 'Not Found',
                                 EtxResponseErrorException)
                    .local_error('429',
                                 'Too Many Requests',
                                 EtxResponseErrorException)
                    .local_error('500',
                                 'Internal server Error',
                                 EtxResponseErrorException)
                    .local_error('default',
                                 'Forbidden',
                                 EtxResponseErrorException))
        .execute
    end

    # With this API call the device or software service requests the MQTT URL
    # for the location that it needs to connect. To determine the proper URL the
    # device or software service needs to provide its ID (the one that was
    # provided in the registration request), location (GPS coordinates), and
    # whether it is on the Verizon cellular network or not.
    # Note: The user needs to authenticate with their ThingSpace credentials
    # using the Access/Bearer and Session/M2M tokens in order to call this API.
    # @param [String] vendor_id Required parameter: The VendorID set during the
    # Vendor registration call.
    # @param [ConnectionRequest] body Required parameter: TODO: type description
    # here
    # @return [ApiResponse] Complete http response with raw body and status code.
    def retrieve_mqtturl(vendor_id,
                         body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/api/v2/clients/connection',
                                     Server::IMP_SERVER)
                   .header_param(new_parameter(vendor_id, key: 'VendorID')
                                  .is_required(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'SessionToken')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(ConnectionResponse.method(:from_hash))
                    .is_api_response(true)
                    .local_error('400',
                                 'Invalid request',
                                 EtxResponseErrorException)
                    .local_error('401',
                                 'Unauthorized',
                                 EtxResponseErrorException)
                    .local_error('403',
                                 'Forbidden Request',
                                 EtxResponseErrorException)
                    .local_error('429',
                                 'Too Many Requests',
                                 EtxResponseErrorException)
                    .local_error('503',
                                 'Internal server Error',
                                 EtxResponseErrorException)
                    .local_error('default',
                                 'Forbidden',
                                 EtxResponseErrorException))
        .execute
    end
  end
end
