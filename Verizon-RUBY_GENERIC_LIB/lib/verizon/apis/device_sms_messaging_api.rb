# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # DeviceSmsMessagingApi
  class DeviceSmsMessagingApi < BaseApi
    # Sends an SMS message to one device. Messages are queued on the M2M MC
    # Platform and sent as soon as possible, but they may be delayed due to
    # traffic and routing considerations.
    # @param [GiosmsSendRequest] body Required parameter: SMS message to an
    # indiividual device.
    # @return [ApiResponse] Complete http response with raw body and status code.
    def send_an_sms_message(body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/m2m/v1/sms',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(GioRequestResponse.method(:from_hash))
                    .is_api_response(true)
                    .local_error('default',
                                 'Error response',
                                 GioRestErrorResponseException))
        .execute
    end

    # Retrieves queued SMS messages sent by all M2M MC devices associated with
    # an account.
    # @param [String] account_name Required parameter: Numeric account name
    # @param [String] mnext Optional parameter: Continue the previous query from
    # the pageUrl in Location Header
    # @return [ApiResponse] Complete http response with raw body and status code.
    def get_sms_messages(account_name,
                         mnext: nil)
      @api_call
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/m2m/v1/sms/{accountName}/history',
                                     Server::THINGSPACE)
                   .template_param(new_parameter(account_name, key: 'accountName')
                                    .is_required(true)
                                    .should_encode(true))
                   .query_param(new_parameter(mnext, key: 'next'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(SmsMessagesResponse.method(:from_hash))
                    .is_api_response(true)
                    .local_error('default',
                                 'Error response',
                                 GioRestErrorResponseException))
        .execute
    end

    # Starts delivery of SMS messages for the specified account.
    # @param [String] account_name Required parameter: Numeric account name
    # @return [ApiResponse] Complete http response with raw body and status code.
    def start_sms_message_delivery(account_name)
      @api_call
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/m2m/v1/sms/{accountName}/startCallbacks',
                                     Server::THINGSPACE)
                   .template_param(new_parameter(account_name, key: 'accountName')
                                    .is_required(true)
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(SuccessResponse.method(:from_hash))
                    .is_api_response(true)
                    .local_error('default',
                                 'Error response',
                                 GioRestErrorResponseException))
        .execute
    end

    # Returns a list of sms history for a given device during a specified time
    # frame.
    # @param [SmsEventHistoryRequest] body Required parameter: Device Query
    # @return [ApiResponse] Complete http response with raw body and status code.
    def list_sms_message_history(body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/m2m/v1/devices/sms/history/actions/list',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(GioRequestResponse.method(:from_hash))
                    .is_api_response(true)
                    .local_error('default',
                                 'Error response',
                                 GioRestErrorResponseException))
        .execute
    end
  end
end
