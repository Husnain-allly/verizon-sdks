# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # SensorInsightsHealthScoreApi
  class SensorInsightsHealthScoreApi < BaseApi
    # TODO: type endpoint description here
    # @return [ApiResponse] Complete http response with raw body and status code.
    def sensor_insights_health_score_summary
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/dm/v1/healthscore/summary',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(DtoHealthScoreSummary.method(:from_hash))
                    .is_api_response(true)
                    .local_error('400',
                                 'Bad Request',
                                 M400ManagementErrorException)
                    .local_error('401',
                                 'UnAuthorized',
                                 ManagementErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 M403ManagementErrorException)
                    .local_error('406',
                                 'Not Acceptable',
                                 ManagementErrorException)
                    .local_error('415',
                                 'Unsupported media type',
                                 ManagementErrorException)
                    .local_error('429',
                                 'Too many requests',
                                 ManagementErrorException)
                    .local_error('500',
                                 'Internal server error.',
                                 M500ManagementErrorException)
                    .local_error('default',
                                 'Unexpected error',
                                 ManagementErrorException))
        .execute
    end

    # TODO: type endpoint description here
    # @return [ApiResponse] Complete http response with raw body and status code.
    def sensor_insights_get_network_health_score_response
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/dm/v1/healthscore/network',
                                     Server::THINGSPACE)
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(And.new('thingspace_oauth', 'VZ-M2M-Token')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(DtoGetNetworkHealthScoreResponse.method(:from_hash))
                    .is_api_response(true)
                    .local_error('400',
                                 'Bad Request',
                                 M400ManagementErrorException)
                    .local_error('401',
                                 'UnAuthorized',
                                 ManagementErrorException)
                    .local_error('403',
                                 'Forbidden',
                                 M403ManagementErrorException)
                    .local_error('406',
                                 'Not Acceptable',
                                 ManagementErrorException)
                    .local_error('415',
                                 'Unsupported media type',
                                 ManagementErrorException)
                    .local_error('429',
                                 'Too many requests',
                                 ManagementErrorException)
                    .local_error('500',
                                 'Internal server error.',
                                 M500ManagementErrorException)
                    .local_error('default',
                                 'Unexpected error',
                                 ManagementErrorException))
        .execute
    end
  end
end
