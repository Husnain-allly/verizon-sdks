# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Allowed start and end time windows.
  class V2TimeWindow < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Start hour in range [0..23], current hour >= startTime.
    # @return [Integer]
    attr_accessor :start_time

    # End hour in range [1..24], current hour < endTime.
    # @return [Integer]
    attr_accessor :end_time

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['start_time'] = 'startTime'
      @_hash['end_time'] = 'endTime'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(start_time:, end_time:, additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @start_time = start_time
      @end_time = end_time
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      start_time = hash.key?('startTime') ? hash['startTime'] : nil
      end_time = hash.key?('endTime') ? hash['endTime'] : nil

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      V2TimeWindow.new(start_time: start_time,
                       end_time: end_time,
                       additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} start_time: #{@start_time}, end_time: #{@end_time}, additional_properties:"\
      " #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} start_time: #{@start_time.inspect}, end_time: #{@end_time.inspect},"\
      " additional_properties: #{@additional_properties}>"
    end
  end
end
