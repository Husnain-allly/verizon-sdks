# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Authentication headers.
  class TargetAuthenticationBodyHeaders < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Authorization header.
    # @return [String]
    attr_accessor :authorization

    # Content-Type header.
    # @return [String]
    attr_accessor :content_type

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['authorization'] = 'Authorization'
      @_hash['content_type'] = 'Content-Type'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        authorization
        content_type
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(authorization: SKIP, content_type: SKIP,
                   additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @authorization = authorization unless authorization == SKIP
      @content_type = content_type unless content_type == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      authorization = hash.key?('Authorization') ? hash['Authorization'] : SKIP
      content_type = hash.key?('Content-Type') ? hash['Content-Type'] : SKIP

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      TargetAuthenticationBodyHeaders.new(authorization: authorization,
                                          content_type: content_type,
                                          additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} authorization: #{@authorization}, content_type: #{@content_type},"\
      " additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} authorization: #{@authorization.inspect}, content_type:"\
      " #{@content_type.inspect}, additional_properties: #{@additional_properties}>"
    end
  end
end
