# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # AccountLevelFilter Model.
  class AccountLevelFilter < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Determines whether or not to aggregate usage of multiple accounts
    # together, or separate by account. If this is null or not present, then the
    # trigger will be for an individual line.
    # @return [String]
    attr_accessor :separate_or_combined

    # Determines whether or not to aggregate usage of multiple accounts
    # together, or separate by account. If this is null or not present, then the
    # trigger will be for an individual line.
    # @return [Accountnames]
    attr_accessor :account_names

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['separate_or_combined'] = 'separateOrCombined'
      @_hash['account_names'] = 'accountNames'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        separate_or_combined
        account_names
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(separate_or_combined: SKIP, account_names: SKIP,
                   additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @separate_or_combined = separate_or_combined unless separate_or_combined == SKIP
      @account_names = account_names unless account_names == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      separate_or_combined =
        hash.key?('separateOrCombined') ? hash['separateOrCombined'] : SKIP
      account_names = Accountnames.from_hash(hash['accountNames']) if hash['accountNames']

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      AccountLevelFilter.new(separate_or_combined: separate_or_combined,
                             account_names: account_names,
                             additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} separate_or_combined: #{@separate_or_combined}, account_names:"\
      " #{@account_names}, additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} separate_or_combined: #{@separate_or_combined.inspect}, account_names:"\
      " #{@account_names.inspect}, additional_properties: #{@additional_properties}>"
    end
  end
end
