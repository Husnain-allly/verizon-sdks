# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # MessageBase Model.
  class MessageBase < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Defines whether the message is private or public.
    # Private messages are published under the Vendor ID defined in the
    # configuration and only visible to devices of selected vendors.
    # Public messages are published under the Public vendor and are visible to
    # all the users.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_private

    # Type of the Road User.
    # @return [Array[RoadUserTypes]]
    attr_accessor :road_user_type

    # Trigger conditions that define on which road user action the message will
    # be sent. If multiple Trigger Conditions are defined any of them will
    # trigger the message.
    # @return [Array[TriggerCondition]]
    attr_accessor :trigger_conditions

    # List of limitations. These limitations can be used for making the trigger
    # condition more precise by defining speed and motion direction requirements
    # to be met before the messages are sent out.
    # @return [Array[Object]]
    attr_accessor :limits

    # Type of the distribution.
    # @return [Array[DistributionTypes]]
    attr_accessor :distribution_type

    # The distribution schedule parameters for broadcast messages.
    # @return [DistributionSchedule]
    attr_accessor :distribution_schedule

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['is_private'] = 'isPrivate'
      @_hash['road_user_type'] = 'roadUserType'
      @_hash['trigger_conditions'] = 'triggerConditions'
      @_hash['limits'] = 'limits'
      @_hash['distribution_type'] = 'distributionType'
      @_hash['distribution_schedule'] = 'distributionSchedule'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        trigger_conditions
        limits
        distribution_type
        distribution_schedule
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(is_private:, road_user_type:, trigger_conditions: SKIP,
                   limits: SKIP, distribution_type: SKIP,
                   distribution_schedule: SKIP, additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @is_private = is_private
      @road_user_type = road_user_type
      @trigger_conditions = trigger_conditions unless trigger_conditions == SKIP
      @limits = limits unless limits == SKIP
      @distribution_type = distribution_type unless distribution_type == SKIP
      @distribution_schedule = distribution_schedule unless distribution_schedule == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      is_private = hash.key?('isPrivate') ? hash['isPrivate'] : nil
      road_user_type = hash.key?('roadUserType') ? hash['roadUserType'] : nil
      trigger_conditions =
        hash.key?('triggerConditions') ? hash['triggerConditions'] : SKIP
      limits = hash.key?('limits') ? hash['limits'] : SKIP
      distribution_type =
        hash.key?('distributionType') ? hash['distributionType'] : SKIP
      distribution_schedule = DistributionSchedule.from_hash(hash['distributionSchedule']) if
        hash['distributionSchedule']

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      MessageBase.new(is_private: is_private,
                      road_user_type: road_user_type,
                      trigger_conditions: trigger_conditions,
                      limits: limits,
                      distribution_type: distribution_type,
                      distribution_schedule: distribution_schedule,
                      additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} is_private: #{@is_private}, road_user_type: #{@road_user_type},"\
      " trigger_conditions: #{@trigger_conditions}, limits: #{@limits}, distribution_type:"\
      " #{@distribution_type}, distribution_schedule: #{@distribution_schedule},"\
      " additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} is_private: #{@is_private.inspect}, road_user_type:"\
      " #{@road_user_type.inspect}, trigger_conditions: #{@trigger_conditions.inspect}, limits:"\
      " #{@limits.inspect}, distribution_type: #{@distribution_type.inspect},"\
      " distribution_schedule: #{@distribution_schedule.inspect}, additional_properties:"\
      " #{@additional_properties}>"
    end
  end
end
