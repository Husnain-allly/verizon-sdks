# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Verizon
  # DtoSensorBoardingEvent Model.
  class DtoSensorBoardingEvent < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Timestamp of the record
    # @return [DateTime]
    attr_accessor :createdon

    # Error message
    # @return [String]
    attr_accessor :errmsg

    # Fields to return needed by search
    # @return [DtoFields]
    attr_accessor :fields

    # The current status of the device or transaction and will be `success` or
    # `failed`
    # @return [String]
    attr_accessor :state

    # The system-generated UUID of the transaction
    # @return [String]
    attr_accessor :transactionid

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['createdon'] = 'createdon'
      @_hash['errmsg'] = 'errmsg'
      @_hash['fields'] = 'fields'
      @_hash['state'] = 'state'
      @_hash['transactionid'] = 'transactionid'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        createdon
        errmsg
        fields
        state
        transactionid
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(createdon: SKIP, errmsg: SKIP, fields: SKIP, state: SKIP,
                   transactionid: SKIP)
      @createdon = createdon unless createdon == SKIP
      @errmsg = errmsg unless errmsg == SKIP
      @fields = fields unless fields == SKIP
      @state = state unless state == SKIP
      @transactionid = transactionid unless transactionid == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      createdon = if hash.key?('createdon')
                    (DateTimeHelper.from_rfc3339(hash['createdon']) if hash['createdon'])
                  else
                    SKIP
                  end
      errmsg = hash.key?('errmsg') ? hash['errmsg'] : SKIP
      fields = DtoFields.from_hash(hash['fields']) if hash['fields']
      state = hash.key?('state') ? hash['state'] : SKIP
      transactionid = hash.key?('transactionid') ? hash['transactionid'] : SKIP

      # Create object from extracted values.
      DtoSensorBoardingEvent.new(createdon: createdon,
                                 errmsg: errmsg,
                                 fields: fields,
                                 state: state,
                                 transactionid: transactionid)
    end

    def to_custom_createdon
      DateTimeHelper.to_rfc3339(createdon)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} createdon: #{@createdon}, errmsg: #{@errmsg}, fields: #{@fields}, state:"\
      " #{@state}, transactionid: #{@transactionid}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} createdon: #{@createdon.inspect}, errmsg: #{@errmsg.inspect}, fields:"\
      " #{@fields.inspect}, state: #{@state.inspect}, transactionid: #{@transactionid.inspect}>"
    end
  end
end
