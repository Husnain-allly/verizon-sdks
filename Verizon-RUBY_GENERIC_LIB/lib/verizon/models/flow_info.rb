# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # FlowInfo Model.
  class FlowInfo < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :flow_server

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :flow_device

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :flow_direction

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :flow_protocol

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :qci_option

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['flow_server'] = 'flowServer'
      @_hash['flow_device'] = 'flowDevice'
      @_hash['flow_direction'] = 'flowDirection'
      @_hash['flow_protocol'] = 'flowProtocol'
      @_hash['qci_option'] = 'qciOption'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        flow_server
        flow_device
        flow_direction
        flow_protocol
        qci_option
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(flow_server: SKIP, flow_device: SKIP, flow_direction: SKIP,
                   flow_protocol: SKIP, qci_option: SKIP,
                   additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @flow_server = flow_server unless flow_server == SKIP
      @flow_device = flow_device unless flow_device == SKIP
      @flow_direction = flow_direction unless flow_direction == SKIP
      @flow_protocol = flow_protocol unless flow_protocol == SKIP
      @qci_option = qci_option unless qci_option == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      flow_server = hash.key?('flowServer') ? hash['flowServer'] : SKIP
      flow_device = hash.key?('flowDevice') ? hash['flowDevice'] : SKIP
      flow_direction = hash.key?('flowDirection') ? hash['flowDirection'] : SKIP
      flow_protocol = hash.key?('flowProtocol') ? hash['flowProtocol'] : SKIP
      qci_option = hash.key?('qciOption') ? hash['qciOption'] : SKIP

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      FlowInfo.new(flow_server: flow_server,
                   flow_device: flow_device,
                   flow_direction: flow_direction,
                   flow_protocol: flow_protocol,
                   qci_option: qci_option,
                   additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} flow_server: #{@flow_server}, flow_device: #{@flow_device}, flow_direction:"\
      " #{@flow_direction}, flow_protocol: #{@flow_protocol}, qci_option: #{@qci_option},"\
      " additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} flow_server: #{@flow_server.inspect}, flow_device: #{@flow_device.inspect},"\
      " flow_direction: #{@flow_direction.inspect}, flow_protocol: #{@flow_protocol.inspect},"\
      " qci_option: #{@qci_option.inspect}, additional_properties: #{@additional_properties}>"
    end
  end
end
