# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # The units and values of the time interval for the sensor to send a report
  class PeriodicReporting < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Unit]
    attr_accessor :unit

    # whole numbers from 0 to 24
    # @return [Integer]
    attr_accessor :hours

    # whole numbers from 0 to 59
    # @return [Integer]
    attr_accessor :minutes

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['unit'] = 'unit'
      @_hash['hours'] = 'hours'
      @_hash['minutes'] = 'minutes'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        unit
        hours
        minutes
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(unit: SKIP, hours: SKIP, minutes: SKIP,
                   additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @unit = unit unless unit == SKIP
      @hours = hours unless hours == SKIP
      @minutes = minutes unless minutes == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      unit = hash.key?('unit') ? hash['unit'] : SKIP
      hours = hash.key?('hours') ? hash['hours'] : SKIP
      minutes = hash.key?('minutes') ? hash['minutes'] : SKIP

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      PeriodicReporting.new(unit: unit,
                            hours: hours,
                            minutes: minutes,
                            additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} unit: #{@unit}, hours: #{@hours}, minutes: #{@minutes},"\
      " additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} unit: #{@unit.inspect}, hours: #{@hours.inspect}, minutes:"\
      " #{@minutes.inspect}, additional_properties: #{@additional_properties}>"
    end
  end
end
