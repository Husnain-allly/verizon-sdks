# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Response for /clients/registration. It provides a generated device ID and
  # the certificates needed to connect the ETX Message Exchange.
  class ClientRegistrationResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The generated ID (UUID v4) for the device. It can be used as:
    #   - the MQTT Client ID when connecting to the Message Exchange system
    #   - a parameter when asking for the connection endpoint
    #   - a parameter when finishing the device registration
    #   - a parameter when unregistering the device
    # @return [UUID | String]
    attr_accessor :device_id

    # Structure for the credentials required to connect to the ETX MQTT Message
    # Exchange.
    # @return [Certificate]
    attr_accessor :certificate

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['device_id'] = 'DeviceID'
      @_hash['certificate'] = 'Certificate'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(device_id:, certificate:)
      @device_id = device_id
      @certificate = certificate
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      device_id = hash.key?('DeviceID') ? hash['DeviceID'] : nil
      certificate = Certificate.from_hash(hash['Certificate']) if hash['Certificate']

      # Create object from extracted values.
      ClientRegistrationResponse.new(device_id: device_id,
                                     certificate: certificate)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} device_id: #{@device_id}, certificate: #{@certificate}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} device_id: #{@device_id.inspect}, certificate: #{@certificate.inspect}>"
    end
  end
end
