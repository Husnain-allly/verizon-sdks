# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Verizon
  # ResourceEvent Model.
  class ResourceEvent < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Not used in this release, future functionality
    # @return [String]
    attr_accessor :accountclientid

    # The URL of the callback listener
    # @return [String]
    attr_accessor :callbackurl

    # Timestamp of the record
    # @return [DateTime]
    attr_accessor :createdon

    # a short description
    # @return [String]
    attr_accessor :description

    # This is a UUID value of the device created when the device is onboarded
    # @return [String]
    attr_accessor :deviceid

    # Error message
    # @return [String]
    attr_accessor :errmsg

    # Error message
    # @return [String]
    attr_accessor :fieldid

    # Fields to return needed by search
    # @return [DtoFields]
    attr_accessor :fields

    # Fields to return needed by search
    # @return [Array[Integer]]
    attr_accessor :fieldvalue

    # UUID of the ECPD account the user belongs to
    # @return [String]
    attr_accessor :foreignid

    # UUID of the user record, assigned at creation
    # @return [String]
    attr_accessor :id

    # Timestamp of the record
    # @return [DateTime]
    attr_accessor :lastupdated

    # The model ID of the device
    # @return [String]
    attr_accessor :modelid

    # User defined name of the record
    # @return [String]
    attr_accessor :name

    # A flag to indicate if sensor data is to be aggregated (true) or not
    # @return [TrueClass | FalseClass]
    attr_accessor :sensordataaggregation

    # The current status of the device or transaction and will be `success` or
    # `failed`
    # @return [String]
    attr_accessor :state

    # The system-generated UUID of the transaction
    # @return [String]
    attr_accessor :transactionid

    # The resource version
    # @return [String]
    attr_accessor :version

    # The UUID of the resource version
    # @return [String]
    attr_accessor :versionid

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['accountclientid'] = 'accountclientid'
      @_hash['callbackurl'] = 'callbackurl'
      @_hash['createdon'] = 'createdon'
      @_hash['description'] = 'description'
      @_hash['deviceid'] = 'deviceid'
      @_hash['errmsg'] = 'errmsg'
      @_hash['fieldid'] = 'fieldid'
      @_hash['fields'] = 'fields'
      @_hash['fieldvalue'] = 'fieldvalue'
      @_hash['foreignid'] = 'foreignid'
      @_hash['id'] = 'id'
      @_hash['lastupdated'] = 'lastupdated'
      @_hash['modelid'] = 'modelid'
      @_hash['name'] = 'name'
      @_hash['sensordataaggregation'] = 'sensordataaggregation'
      @_hash['state'] = 'state'
      @_hash['transactionid'] = 'transactionid'
      @_hash['version'] = 'version'
      @_hash['versionid'] = 'versionid'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        accountclientid
        callbackurl
        description
        deviceid
        errmsg
        fields
        fieldvalue
        id
        modelid
        name
        sensordataaggregation
        transactionid
        version
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(createdon:, fieldid:, foreignid:, lastupdated:, state:,
                   versionid:, accountclientid: SKIP, callbackurl: SKIP,
                   description: SKIP, deviceid: SKIP, errmsg: SKIP,
                   fields: SKIP, fieldvalue: SKIP, id: SKIP, modelid: SKIP,
                   name: SKIP, sensordataaggregation: SKIP, transactionid: SKIP,
                   version: SKIP)
      @accountclientid = accountclientid unless accountclientid == SKIP
      @callbackurl = callbackurl unless callbackurl == SKIP
      @createdon = createdon
      @description = description unless description == SKIP
      @deviceid = deviceid unless deviceid == SKIP
      @errmsg = errmsg unless errmsg == SKIP
      @fieldid = fieldid
      @fields = fields unless fields == SKIP
      @fieldvalue = fieldvalue unless fieldvalue == SKIP
      @foreignid = foreignid
      @id = id unless id == SKIP
      @lastupdated = lastupdated
      @modelid = modelid unless modelid == SKIP
      @name = name unless name == SKIP
      @sensordataaggregation = sensordataaggregation unless sensordataaggregation == SKIP
      @state = state
      @transactionid = transactionid unless transactionid == SKIP
      @version = version unless version == SKIP
      @versionid = versionid
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      createdon = if hash.key?('createdon')
                    (DateTimeHelper.from_rfc3339(hash['createdon']) if hash['createdon'])
                  end
      fieldid = hash.key?('fieldid') ? hash['fieldid'] : nil
      foreignid = hash.key?('foreignid') ? hash['foreignid'] : nil
      lastupdated = if hash.key?('lastupdated')
                      (DateTimeHelper.from_rfc3339(hash['lastupdated']) if hash['lastupdated'])
                    end
      state = hash.key?('state') ? hash['state'] : nil
      versionid = hash.key?('versionid') ? hash['versionid'] : nil
      accountclientid =
        hash.key?('accountclientid') ? hash['accountclientid'] : SKIP
      callbackurl = hash.key?('callbackurl') ? hash['callbackurl'] : SKIP
      description = hash.key?('description') ? hash['description'] : SKIP
      deviceid = hash.key?('deviceid') ? hash['deviceid'] : SKIP
      errmsg = hash.key?('errmsg') ? hash['errmsg'] : SKIP
      fields = DtoFields.from_hash(hash['fields']) if hash['fields']
      fieldvalue = hash.key?('fieldvalue') ? hash['fieldvalue'] : SKIP
      id = hash.key?('id') ? hash['id'] : SKIP
      modelid = hash.key?('modelid') ? hash['modelid'] : SKIP
      name = hash.key?('name') ? hash['name'] : SKIP
      sensordataaggregation =
        hash.key?('sensordataaggregation') ? hash['sensordataaggregation'] : SKIP
      transactionid = hash.key?('transactionid') ? hash['transactionid'] : SKIP
      version = hash.key?('version') ? hash['version'] : SKIP

      # Create object from extracted values.
      ResourceEvent.new(createdon: createdon,
                        fieldid: fieldid,
                        foreignid: foreignid,
                        lastupdated: lastupdated,
                        state: state,
                        versionid: versionid,
                        accountclientid: accountclientid,
                        callbackurl: callbackurl,
                        description: description,
                        deviceid: deviceid,
                        errmsg: errmsg,
                        fields: fields,
                        fieldvalue: fieldvalue,
                        id: id,
                        modelid: modelid,
                        name: name,
                        sensordataaggregation: sensordataaggregation,
                        transactionid: transactionid,
                        version: version)
    end

    def to_custom_createdon
      DateTimeHelper.to_rfc3339(createdon)
    end

    def to_custom_lastupdated
      DateTimeHelper.to_rfc3339(lastupdated)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} accountclientid: #{@accountclientid}, callbackurl: #{@callbackurl},"\
      " createdon: #{@createdon}, description: #{@description}, deviceid: #{@deviceid}, errmsg:"\
      " #{@errmsg}, fieldid: #{@fieldid}, fields: #{@fields}, fieldvalue: #{@fieldvalue},"\
      " foreignid: #{@foreignid}, id: #{@id}, lastupdated: #{@lastupdated}, modelid: #{@modelid},"\
      " name: #{@name}, sensordataaggregation: #{@sensordataaggregation}, state: #{@state},"\
      " transactionid: #{@transactionid}, version: #{@version}, versionid: #{@versionid}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} accountclientid: #{@accountclientid.inspect}, callbackurl:"\
      " #{@callbackurl.inspect}, createdon: #{@createdon.inspect}, description:"\
      " #{@description.inspect}, deviceid: #{@deviceid.inspect}, errmsg: #{@errmsg.inspect},"\
      " fieldid: #{@fieldid.inspect}, fields: #{@fields.inspect}, fieldvalue:"\
      " #{@fieldvalue.inspect}, foreignid: #{@foreignid.inspect}, id: #{@id.inspect}, lastupdated:"\
      " #{@lastupdated.inspect}, modelid: #{@modelid.inspect}, name: #{@name.inspect},"\
      " sensordataaggregation: #{@sensordataaggregation.inspect}, state: #{@state.inspect},"\
      " transactionid: #{@transactionid.inspect}, version: #{@version.inspect}, versionid:"\
      " #{@versionid.inspect}>"
    end
  end
end
