# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Fields to return needed by search
  class DtoFields < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :additional_prop1

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :additional_prop2

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :additional_prop3

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['additional_prop1'] = 'additionalProp1'
      @_hash['additional_prop2'] = 'additionalProp2'
      @_hash['additional_prop3'] = 'additionalProp3'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        additional_prop1
        additional_prop2
        additional_prop3
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(additional_prop1: SKIP, additional_prop2: SKIP,
                   additional_prop3: SKIP)
      @additional_prop1 = additional_prop1 unless additional_prop1 == SKIP
      @additional_prop2 = additional_prop2 unless additional_prop2 == SKIP
      @additional_prop3 = additional_prop3 unless additional_prop3 == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      additional_prop1 =
        hash.key?('additionalProp1') ? hash['additionalProp1'] : SKIP
      additional_prop2 =
        hash.key?('additionalProp2') ? hash['additionalProp2'] : SKIP
      additional_prop3 =
        hash.key?('additionalProp3') ? hash['additionalProp3'] : SKIP

      # Create object from extracted values.
      DtoFields.new(additional_prop1: additional_prop1,
                    additional_prop2: additional_prop2,
                    additional_prop3: additional_prop3)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} additional_prop1: #{@additional_prop1}, additional_prop2:"\
      " #{@additional_prop2}, additional_prop3: #{@additional_prop3}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} additional_prop1: #{@additional_prop1.inspect}, additional_prop2:"\
      " #{@additional_prop2.inspect}, additional_prop3: #{@additional_prop3.inspect}>"
    end
  end
end
