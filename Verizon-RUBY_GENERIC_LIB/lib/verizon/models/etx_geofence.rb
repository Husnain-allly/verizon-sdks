# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # The GeoJSON representation of geofence. Geofence supports the following
  # geometry types: LineString, Polygon, MultiLineString, and MultiPolygon. The
  # system only supports a single Feature in the FeatureCollection, so only one
  # Line, Polygon, MultiLine or MultiPolygon can be defined within one
  # Geofencing configuration.
  class EtxGeofence < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [FeatureCollectionType]
    attr_accessor :type

    # TODO: Write general description for this method
    # @return [Array[GeoFeature]]
    attr_accessor :features

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['type'] = 'type'
      @_hash['features'] = 'features'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(type:, features:)
      @type = type
      @features = features
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      type = hash.key?('type') ? hash['type'] : nil
      # Parameter is an array, so we need to iterate through it
      features = nil
      unless hash['features'].nil?
        features = []
        hash['features'].each do |structure|
          features << (GeoFeature.from_hash(structure) if structure)
        end
      end

      features = nil unless hash.key?('features')

      # Create object from extracted values.
      EtxGeofence.new(type: type,
                      features: features)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} type: #{@type}, features: #{@features}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} type: #{@type.inspect}, features: #{@features.inspect}>"
    end
  end
end
