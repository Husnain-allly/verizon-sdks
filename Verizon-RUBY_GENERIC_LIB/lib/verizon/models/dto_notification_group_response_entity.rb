# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Verizon
  # DtoNotificationGroupResponseEntity Model.
  class DtoNotificationGroupResponseEntity < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Timestamp of the record
    # @return [DateTime]
    attr_accessor :createdon

    # a short description
    # @return [String]
    attr_accessor :description

    # UUID of the ECPD account the user belongs to
    # @return [String]
    attr_accessor :foreignid

    # Contact email for the group
    # @return [String]
    attr_accessor :groupemail

    # UUID of the user record, assigned at creation
    # @return [String]
    attr_accessor :id

    # Timestamp of the record
    # @return [DateTime]
    attr_accessor :lastupdated

    # User defined name of the record
    # @return [String]
    attr_accessor :name

    # User defined name of the record
    # @return [Array[DtoUserDto]]
    attr_accessor :users

    # The resource version
    # @return [String]
    attr_accessor :version

    # The UUID of the resource version
    # @return [String]
    attr_accessor :versionid

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['createdon'] = 'createdon'
      @_hash['description'] = 'description'
      @_hash['foreignid'] = 'foreignid'
      @_hash['groupemail'] = 'groupemail'
      @_hash['id'] = 'id'
      @_hash['lastupdated'] = 'lastupdated'
      @_hash['name'] = 'name'
      @_hash['users'] = 'users'
      @_hash['version'] = 'version'
      @_hash['versionid'] = 'versionid'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        createdon
        description
        foreignid
        groupemail
        id
        lastupdated
        name
        users
        version
        versionid
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(createdon: SKIP, description: SKIP, foreignid: SKIP,
                   groupemail: SKIP, id: SKIP, lastupdated: SKIP, name: SKIP,
                   users: SKIP, version: SKIP, versionid: SKIP)
      @createdon = createdon unless createdon == SKIP
      @description = description unless description == SKIP
      @foreignid = foreignid unless foreignid == SKIP
      @groupemail = groupemail unless groupemail == SKIP
      @id = id unless id == SKIP
      @lastupdated = lastupdated unless lastupdated == SKIP
      @name = name unless name == SKIP
      @users = users unless users == SKIP
      @version = version unless version == SKIP
      @versionid = versionid unless versionid == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      createdon = if hash.key?('createdon')
                    (DateTimeHelper.from_rfc3339(hash['createdon']) if hash['createdon'])
                  else
                    SKIP
                  end
      description = hash.key?('description') ? hash['description'] : SKIP
      foreignid = hash.key?('foreignid') ? hash['foreignid'] : SKIP
      groupemail = hash.key?('groupemail') ? hash['groupemail'] : SKIP
      id = hash.key?('id') ? hash['id'] : SKIP
      lastupdated = if hash.key?('lastupdated')
                      (DateTimeHelper.from_rfc3339(hash['lastupdated']) if hash['lastupdated'])
                    else
                      SKIP
                    end
      name = hash.key?('name') ? hash['name'] : SKIP
      # Parameter is an array, so we need to iterate through it
      users = nil
      unless hash['users'].nil?
        users = []
        hash['users'].each do |structure|
          users << (DtoUserDto.from_hash(structure) if structure)
        end
      end

      users = SKIP unless hash.key?('users')
      version = hash.key?('version') ? hash['version'] : SKIP
      versionid = hash.key?('versionid') ? hash['versionid'] : SKIP

      # Create object from extracted values.
      DtoNotificationGroupResponseEntity.new(createdon: createdon,
                                             description: description,
                                             foreignid: foreignid,
                                             groupemail: groupemail,
                                             id: id,
                                             lastupdated: lastupdated,
                                             name: name,
                                             users: users,
                                             version: version,
                                             versionid: versionid)
    end

    def to_custom_createdon
      DateTimeHelper.to_rfc3339(createdon)
    end

    def to_custom_lastupdated
      DateTimeHelper.to_rfc3339(lastupdated)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} createdon: #{@createdon}, description: #{@description}, foreignid:"\
      " #{@foreignid}, groupemail: #{@groupemail}, id: #{@id}, lastupdated: #{@lastupdated}, name:"\
      " #{@name}, users: #{@users}, version: #{@version}, versionid: #{@versionid}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} createdon: #{@createdon.inspect}, description: #{@description.inspect},"\
      " foreignid: #{@foreignid.inspect}, groupemail: #{@groupemail.inspect}, id: #{@id.inspect},"\
      " lastupdated: #{@lastupdated.inspect}, name: #{@name.inspect}, users: #{@users.inspect},"\
      " version: #{@version.inspect}, versionid: #{@versionid.inspect}>"
    end
  end
end
