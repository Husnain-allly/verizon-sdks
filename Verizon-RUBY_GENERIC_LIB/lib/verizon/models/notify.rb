# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Notify Model.
  class Notify < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :alert_type

    # TODO: Write general description for this method
    # @return [Array[Carriercode1]]
    attr_accessor :threshold

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['alert_type'] = 'alertType'
      @_hash['threshold'] = 'threshold'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        alert_type
        threshold
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(alert_type: SKIP, threshold: SKIP,
                   additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @alert_type = alert_type unless alert_type == SKIP
      @threshold = threshold unless threshold == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      alert_type = hash.key?('alertType') ? hash['alertType'] : SKIP
      # Parameter is an array, so we need to iterate through it
      threshold = nil
      unless hash['threshold'].nil?
        threshold = []
        hash['threshold'].each do |structure|
          threshold << (Carriercode1.from_hash(structure) if structure)
        end
      end

      threshold = SKIP unless hash.key?('threshold')

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      Notify.new(alert_type: alert_type,
                 threshold: threshold,
                 additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} alert_type: #{@alert_type}, threshold: #{@threshold},"\
      " additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} alert_type: #{@alert_type.inspect}, threshold: #{@threshold.inspect},"\
      " additional_properties: #{@additional_properties}>"
    end
  end
end
