# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # A 64-bit node type with lat-long values expressed in standard SAE 1/10th of
  # a microdegree.
  class NodeLLmD64B < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The geographic longitude of an object, expressed in 1/10th integer
    # microdegrees, as a 32-bit value, and with reference to the horizontal
    # datum then in use. The value 1800000001 shall be used when unavailable.
    # @return [Integer]
    attr_accessor :lon

    # The geographic latitude of an object, expressed in 1/10th integer
    # microdegrees, as a 31 bit value, and with reference to the horizontal
    # datum then in use. The value 900000001 shall be used when unavailable.
    # @return [Integer]
    attr_accessor :lat

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['lon'] = 'lon'
      @_hash['lat'] = 'lat'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(lon:, lat:)
      @lon = lon
      @lat = lat
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      lon = hash.key?('lon') ? hash['lon'] : nil
      lat = hash.key?('lat') ? hash['lat'] : nil

      # Create object from extracted values.
      NodeLLmD64B.new(lon: lon,
                      lat: lat)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} lon: #{@lon}, lat: #{@lat}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} lon: #{@lon.inspect}, lat: #{@lat.inspect}>"
    end
  end
end
