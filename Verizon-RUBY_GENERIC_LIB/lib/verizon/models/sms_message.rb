# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # SMS messages sent by all M2M devices associated with a billing account.
  class SmsMessage < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # One or more IDs of the device that sent the message.
    # @return [Array[DeviceId]]
    attr_accessor :device_ids

    # The contents of the SMS message.
    # @return [String]
    attr_accessor :message

    # The date and time that the message was received by the Verizon ThingSpace
    # Platform.
    # @return [String]
    attr_accessor :timestamp

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['device_ids'] = 'deviceIds'
      @_hash['message'] = 'message'
      @_hash['timestamp'] = 'timestamp'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        device_ids
        message
        timestamp
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(device_ids: SKIP, message: SKIP, timestamp: SKIP,
                   additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @device_ids = device_ids unless device_ids == SKIP
      @message = message unless message == SKIP
      @timestamp = timestamp unless timestamp == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      device_ids = nil
      unless hash['deviceIds'].nil?
        device_ids = []
        hash['deviceIds'].each do |structure|
          device_ids << (DeviceId.from_hash(structure) if structure)
        end
      end

      device_ids = SKIP unless hash.key?('deviceIds')
      message = hash.key?('message') ? hash['message'] : SKIP
      timestamp = hash.key?('timestamp') ? hash['timestamp'] : SKIP

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      SmsMessage.new(device_ids: device_ids,
                     message: message,
                     timestamp: timestamp,
                     additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} device_ids: #{@device_ids}, message: #{@message}, timestamp: #{@timestamp},"\
      " additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} device_ids: #{@device_ids.inspect}, message: #{@message.inspect},"\
      " timestamp: #{@timestamp.inspect}, additional_properties: #{@additional_properties}>"
    end
  end
end
