# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # The NodeLL data frame presents a structure to hold data for a signal node
  # point in a lane. Each selected node has a complete lat-long representation.
  class NodeLl < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The NodeOffsetPointLL data frame presents a structure to hold 64 bits
    # sized data frames for a single node geometry path. Nodes are described in
    # terms of latitude and longitude.
    # @return [NodeOffsetPointLl]
    attr_accessor :delta

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['delta'] = 'delta'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(delta:)
      @delta = delta
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      delta = NodeOffsetPointLl.from_hash(hash['delta']) if hash['delta']

      # Create object from extracted values.
      NodeLl.new(delta: delta)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} delta: #{@delta}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} delta: #{@delta.inspect}>"
    end
  end
end
