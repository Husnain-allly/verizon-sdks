# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # Response for /clients/registration for pending state. It provides a
  # device_id for user to finish registration with PUT API call
  class ClientRegistrationPendingResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The generated ID (UUID v4) for the device. It can be used as:
    #   - the MQTT Client ID when connecting to the Message Exchange system
    #   - a parameter when asking for the connection endpoint
    #   - a parameter when finishing the device registration
    #   - a parameter when unregistering the device
    # @return [UUID | String]
    attr_accessor :device_id

    # The reason why the registration is in pending state
    # @return [String]
    attr_accessor :message

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['device_id'] = 'DeviceID'
      @_hash['message'] = 'Message'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(device_id:, message:)
      @device_id = device_id
      @message = message
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      device_id = hash.key?('DeviceID') ? hash['DeviceID'] : nil
      message = hash.key?('Message') ? hash['Message'] : nil

      # Create object from extracted values.
      ClientRegistrationPendingResponse.new(device_id: device_id,
                                            message: message)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} device_id: #{@device_id}, message: #{@message}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} device_id: #{@device_id.inspect}, message: #{@message.inspect}>"
    end
  end
end
