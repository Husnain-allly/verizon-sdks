# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # PricePlanTrigger2 Model.
  class PricePlanTrigger2 < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [AccountShareFilterCriteria]
    attr_accessor :account_share

    # TODO: Write general description for this method
    # @return [Rateplantype2Condition]
    attr_accessor :condition

    # a flag to set if the trigger changes service plans, true, or not, false
    # @return [TrueClass | FalseClass]
    attr_accessor :change_plan

    # The service plan code to switch to
    # @return [ChangePlanDetails]
    attr_accessor :change_plan_details

    # The service plan code to switch to
    # @return [PayAsYouGoFilterCriteria]
    attr_accessor :pay_as_you_go

    # The service plan code to switch to
    # @return [Actionobject]
    attr_accessor :action

    # The service plan code to switch to
    # @return [FiltercriteriaObjectCall]
    attr_accessor :stand_alone

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['account_share'] = 'accountShare'
      @_hash['condition'] = 'condition'
      @_hash['change_plan'] = 'changePlan'
      @_hash['change_plan_details'] = 'changePlanDetails'
      @_hash['pay_as_you_go'] = 'payAsYouGo'
      @_hash['action'] = 'action'
      @_hash['stand_alone'] = 'standAlone'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        account_share
        condition
        change_plan
        change_plan_details
        pay_as_you_go
        action
        stand_alone
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(account_share: SKIP, condition: SKIP, change_plan: SKIP,
                   change_plan_details: SKIP, pay_as_you_go: SKIP, action: SKIP,
                   stand_alone: SKIP, additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @account_share = account_share unless account_share == SKIP
      @condition = condition unless condition == SKIP
      @change_plan = change_plan unless change_plan == SKIP
      @change_plan_details = change_plan_details unless change_plan_details == SKIP
      @pay_as_you_go = pay_as_you_go unless pay_as_you_go == SKIP
      @action = action unless action == SKIP
      @stand_alone = stand_alone unless stand_alone == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      account_share = AccountShareFilterCriteria.from_hash(hash['accountShare']) if
        hash['accountShare']
      condition = Rateplantype2Condition.from_hash(hash['condition']) if hash['condition']
      change_plan = hash.key?('changePlan') ? hash['changePlan'] : SKIP
      change_plan_details = ChangePlanDetails.from_hash(hash['changePlanDetails']) if
        hash['changePlanDetails']
      pay_as_you_go = PayAsYouGoFilterCriteria.from_hash(hash['payAsYouGo']) if hash['payAsYouGo']
      action = Actionobject.from_hash(hash['action']) if hash['action']
      stand_alone = FiltercriteriaObjectCall.from_hash(hash['standAlone']) if hash['standAlone']

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      PricePlanTrigger2.new(account_share: account_share,
                            condition: condition,
                            change_plan: change_plan,
                            change_plan_details: change_plan_details,
                            pay_as_you_go: pay_as_you_go,
                            action: action,
                            stand_alone: stand_alone,
                            additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} account_share: #{@account_share}, condition: #{@condition}, change_plan:"\
      " #{@change_plan}, change_plan_details: #{@change_plan_details}, pay_as_you_go:"\
      " #{@pay_as_you_go}, action: #{@action}, stand_alone: #{@stand_alone},"\
      " additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} account_share: #{@account_share.inspect}, condition: #{@condition.inspect},"\
      " change_plan: #{@change_plan.inspect}, change_plan_details:"\
      " #{@change_plan_details.inspect}, pay_as_you_go: #{@pay_as_you_go.inspect}, action:"\
      " #{@action.inspect}, stand_alone: #{@stand_alone.inspect}, additional_properties:"\
      " #{@additional_properties}>"
    end
  end
end
