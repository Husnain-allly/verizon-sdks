# verizon
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Verizon
  # The NodeOffsetPointLL data frame presents a structure to hold 64 bits sized
  # data frames for a single node geometry path. Nodes are described in terms of
  # latitude and longitude.
  class NodeOffsetPointLl < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # A 64-bit node type with lat-long values expressed in standard SAE 1/10th
    # of a microdegree.
    # @return [NodeLLmD64B]
    attr_accessor :node_lat_lon

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['node_lat_lon'] = 'nodeLatLon'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(node_lat_lon:)
      @node_lat_lon = node_lat_lon
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      node_lat_lon = NodeLLmD64B.from_hash(hash['nodeLatLon']) if hash['nodeLatLon']

      # Create object from extracted values.
      NodeOffsetPointLl.new(node_lat_lon: node_lat_lon)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} node_lat_lon: #{@node_lat_lon}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} node_lat_lon: #{@node_lat_lon.inspect}>"
    end
  end
end
